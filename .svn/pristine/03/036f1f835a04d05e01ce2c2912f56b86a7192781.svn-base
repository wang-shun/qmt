/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取当前的节目列表的请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetCurrentEpisodesParam implements org.apache.thrift.TBase<GetCurrentEpisodesParam, GetCurrentEpisodesParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetCurrentEpisodesParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCurrentEpisodesParam");

  private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cids", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LIVE_SHOW_STATUS_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveShowStatusParam", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIVE_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveTypeParam", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OCTOPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("octopus", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField EPISODE_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("episodeTypeParam", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketType", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetCurrentEpisodesParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetCurrentEpisodesParamTupleSchemeFactory());
  }

  private long gameType; // optional
  private List<Long> cids; // optional
  private LiveShowStatusParam liveShowStatusParam; // optional
  private LiveTypeParam liveTypeParam; // optional
  private boolean octopus; // optional
  private long csid; // optional
  private EpisodeTypeParam episodeTypeParam; // optional
  private String startDate; // optional
  private String ticketId; // optional
  private com.lesports.qmt.sbc.api.common.TicketType ticketType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_TYPE((short)1, "gameType"),
    CIDS((short)2, "cids"),
    /**
     * 
     * @see LiveShowStatusParam
     */
    LIVE_SHOW_STATUS_PARAM((short)3, "liveShowStatusParam"),
    /**
     * 
     * @see LiveTypeParam
     */
    LIVE_TYPE_PARAM((short)4, "liveTypeParam"),
    OCTOPUS((short)5, "octopus"),
    CSID((short)6, "csid"),
    /**
     * 
     * @see EpisodeTypeParam
     */
    EPISODE_TYPE_PARAM((short)7, "episodeTypeParam"),
    START_DATE((short)8, "startDate"),
    TICKET_ID((short)9, "ticketId"),
    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.TicketType
     */
    TICKET_TYPE((short)10, "ticketType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_TYPE
          return GAME_TYPE;
        case 2: // CIDS
          return CIDS;
        case 3: // LIVE_SHOW_STATUS_PARAM
          return LIVE_SHOW_STATUS_PARAM;
        case 4: // LIVE_TYPE_PARAM
          return LIVE_TYPE_PARAM;
        case 5: // OCTOPUS
          return OCTOPUS;
        case 6: // CSID
          return CSID;
        case 7: // EPISODE_TYPE_PARAM
          return EPISODE_TYPE_PARAM;
        case 8: // START_DATE
          return START_DATE;
        case 9: // TICKET_ID
          return TICKET_ID;
        case 10: // TICKET_TYPE
          return TICKET_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMETYPE_ISSET_ID = 0;
  private static final int __OCTOPUS_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GAME_TYPE,_Fields.CIDS,_Fields.LIVE_SHOW_STATUS_PARAM,_Fields.LIVE_TYPE_PARAM,_Fields.OCTOPUS,_Fields.CSID,_Fields.EPISODE_TYPE_PARAM,_Fields.START_DATE,_Fields.TICKET_ID,_Fields.TICKET_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CIDS, new org.apache.thrift.meta_data.FieldMetaData("cids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LIVE_SHOW_STATUS_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveShowStatusParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveShowStatusParam.class)));
    tmpMap.put(_Fields.LIVE_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveTypeParam.class)));
    tmpMap.put(_Fields.OCTOPUS, new org.apache.thrift.meta_data.FieldMetaData("octopus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EPISODE_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("episodeTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EpisodeTypeParam.class)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ticketType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.TicketType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCurrentEpisodesParam.class, metaDataMap);
  }

  public GetCurrentEpisodesParam() {
    this.octopus = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetCurrentEpisodesParam(GetCurrentEpisodesParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gameType = other.gameType;
    if (other.isSetCids()) {
      List<Long> __this__cids = new ArrayList<Long>(other.cids);
      this.cids = __this__cids;
    }
    if (other.isSetLiveShowStatusParam()) {
      this.liveShowStatusParam = other.liveShowStatusParam;
    }
    if (other.isSetLiveTypeParam()) {
      this.liveTypeParam = other.liveTypeParam;
    }
    this.octopus = other.octopus;
    this.csid = other.csid;
    if (other.isSetEpisodeTypeParam()) {
      this.episodeTypeParam = other.episodeTypeParam;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetTicketId()) {
      this.ticketId = other.ticketId;
    }
    if (other.isSetTicketType()) {
      this.ticketType = other.ticketType;
    }
  }

  public GetCurrentEpisodesParam deepCopy() {
    return new GetCurrentEpisodesParam(this);
  }

  @Override
  public void clear() {
    setGameTypeIsSet(false);
    this.gameType = 0;
    this.cids = null;
    this.liveShowStatusParam = null;
    this.liveTypeParam = null;
    this.octopus = false;

    setCsidIsSet(false);
    this.csid = 0;
    this.episodeTypeParam = null;
    this.startDate = null;
    this.ticketId = null;
    this.ticketType = null;
  }

  public long getGameType() {
    return this.gameType;
  }

  public void setGameType(long gameType) {
    this.gameType = gameType;
    setGameTypeIsSet(true);
  }

  public void unsetGameType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  public void setGameTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETYPE_ISSET_ID, value);
  }

  public int getCidsSize() {
    return (this.cids == null) ? 0 : this.cids.size();
  }

  public java.util.Iterator<Long> getCidsIterator() {
    return (this.cids == null) ? null : this.cids.iterator();
  }

  public void addToCids(long elem) {
    if (this.cids == null) {
      this.cids = new ArrayList<Long>();
    }
    this.cids.add(elem);
  }

  public List<Long> getCids() {
    return this.cids;
  }

  public void setCids(List<Long> cids) {
    this.cids = cids;
  }

  public void unsetCids() {
    this.cids = null;
  }

  /** Returns true if field cids is set (has been assigned a value) and false otherwise */
  public boolean isSetCids() {
    return this.cids != null;
  }

  public void setCidsIsSet(boolean value) {
    if (!value) {
      this.cids = null;
    }
  }

  /**
   * 
   * @see LiveShowStatusParam
   */
  public LiveShowStatusParam getLiveShowStatusParam() {
    return this.liveShowStatusParam;
  }

  /**
   * 
   * @see LiveShowStatusParam
   */
  public void setLiveShowStatusParam(LiveShowStatusParam liveShowStatusParam) {
    this.liveShowStatusParam = liveShowStatusParam;
  }

  public void unsetLiveShowStatusParam() {
    this.liveShowStatusParam = null;
  }

  /** Returns true if field liveShowStatusParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveShowStatusParam() {
    return this.liveShowStatusParam != null;
  }

  public void setLiveShowStatusParamIsSet(boolean value) {
    if (!value) {
      this.liveShowStatusParam = null;
    }
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public LiveTypeParam getLiveTypeParam() {
    return this.liveTypeParam;
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public void setLiveTypeParam(LiveTypeParam liveTypeParam) {
    this.liveTypeParam = liveTypeParam;
  }

  public void unsetLiveTypeParam() {
    this.liveTypeParam = null;
  }

  /** Returns true if field liveTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveTypeParam() {
    return this.liveTypeParam != null;
  }

  public void setLiveTypeParamIsSet(boolean value) {
    if (!value) {
      this.liveTypeParam = null;
    }
  }

  public boolean isOctopus() {
    return this.octopus;
  }

  public void setOctopus(boolean octopus) {
    this.octopus = octopus;
    setOctopusIsSet(true);
  }

  public void unsetOctopus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCTOPUS_ISSET_ID);
  }

  /** Returns true if field octopus is set (has been assigned a value) and false otherwise */
  public boolean isSetOctopus() {
    return EncodingUtils.testBit(__isset_bitfield, __OCTOPUS_ISSET_ID);
  }

  public void setOctopusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCTOPUS_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  /**
   * 
   * @see EpisodeTypeParam
   */
  public EpisodeTypeParam getEpisodeTypeParam() {
    return this.episodeTypeParam;
  }

  /**
   * 
   * @see EpisodeTypeParam
   */
  public void setEpisodeTypeParam(EpisodeTypeParam episodeTypeParam) {
    this.episodeTypeParam = episodeTypeParam;
  }

  public void unsetEpisodeTypeParam() {
    this.episodeTypeParam = null;
  }

  /** Returns true if field episodeTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetEpisodeTypeParam() {
    return this.episodeTypeParam != null;
  }

  public void setEpisodeTypeParamIsSet(boolean value) {
    if (!value) {
      this.episodeTypeParam = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getTicketId() {
    return this.ticketId;
  }

  public void setTicketId(String ticketId) {
    this.ticketId = ticketId;
  }

  public void unsetTicketId() {
    this.ticketId = null;
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return this.ticketId != null;
  }

  public void setTicketIdIsSet(boolean value) {
    if (!value) {
      this.ticketId = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.TicketType
   */
  public com.lesports.qmt.sbc.api.common.TicketType getTicketType() {
    return this.ticketType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.TicketType
   */
  public void setTicketType(com.lesports.qmt.sbc.api.common.TicketType ticketType) {
    this.ticketType = ticketType;
  }

  public void unsetTicketType() {
    this.ticketType = null;
  }

  /** Returns true if field ticketType is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketType() {
    return this.ticketType != null;
  }

  public void setTicketTypeIsSet(boolean value) {
    if (!value) {
      this.ticketType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_TYPE:
      if (value == null) {
        unsetGameType();
      } else {
        setGameType((Long)value);
      }
      break;

    case CIDS:
      if (value == null) {
        unsetCids();
      } else {
        setCids((List<Long>)value);
      }
      break;

    case LIVE_SHOW_STATUS_PARAM:
      if (value == null) {
        unsetLiveShowStatusParam();
      } else {
        setLiveShowStatusParam((LiveShowStatusParam)value);
      }
      break;

    case LIVE_TYPE_PARAM:
      if (value == null) {
        unsetLiveTypeParam();
      } else {
        setLiveTypeParam((LiveTypeParam)value);
      }
      break;

    case OCTOPUS:
      if (value == null) {
        unsetOctopus();
      } else {
        setOctopus((Boolean)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case EPISODE_TYPE_PARAM:
      if (value == null) {
        unsetEpisodeTypeParam();
      } else {
        setEpisodeTypeParam((EpisodeTypeParam)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((String)value);
      }
      break;

    case TICKET_TYPE:
      if (value == null) {
        unsetTicketType();
      } else {
        setTicketType((com.lesports.qmt.sbc.api.common.TicketType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_TYPE:
      return Long.valueOf(getGameType());

    case CIDS:
      return getCids();

    case LIVE_SHOW_STATUS_PARAM:
      return getLiveShowStatusParam();

    case LIVE_TYPE_PARAM:
      return getLiveTypeParam();

    case OCTOPUS:
      return Boolean.valueOf(isOctopus());

    case CSID:
      return Long.valueOf(getCsid());

    case EPISODE_TYPE_PARAM:
      return getEpisodeTypeParam();

    case START_DATE:
      return getStartDate();

    case TICKET_ID:
      return getTicketId();

    case TICKET_TYPE:
      return getTicketType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_TYPE:
      return isSetGameType();
    case CIDS:
      return isSetCids();
    case LIVE_SHOW_STATUS_PARAM:
      return isSetLiveShowStatusParam();
    case LIVE_TYPE_PARAM:
      return isSetLiveTypeParam();
    case OCTOPUS:
      return isSetOctopus();
    case CSID:
      return isSetCsid();
    case EPISODE_TYPE_PARAM:
      return isSetEpisodeTypeParam();
    case START_DATE:
      return isSetStartDate();
    case TICKET_ID:
      return isSetTicketId();
    case TICKET_TYPE:
      return isSetTicketType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetCurrentEpisodesParam)
      return this.equals((GetCurrentEpisodesParam)that);
    return false;
  }

  public boolean equals(GetCurrentEpisodesParam that) {
    if (that == null)
      return false;

    boolean this_present_gameType = true && this.isSetGameType();
    boolean that_present_gameType = true && that.isSetGameType();
    if (this_present_gameType || that_present_gameType) {
      if (!(this_present_gameType && that_present_gameType))
        return false;
      if (this.gameType != that.gameType)
        return false;
    }

    boolean this_present_cids = true && this.isSetCids();
    boolean that_present_cids = true && that.isSetCids();
    if (this_present_cids || that_present_cids) {
      if (!(this_present_cids && that_present_cids))
        return false;
      if (!this.cids.equals(that.cids))
        return false;
    }

    boolean this_present_liveShowStatusParam = true && this.isSetLiveShowStatusParam();
    boolean that_present_liveShowStatusParam = true && that.isSetLiveShowStatusParam();
    if (this_present_liveShowStatusParam || that_present_liveShowStatusParam) {
      if (!(this_present_liveShowStatusParam && that_present_liveShowStatusParam))
        return false;
      if (!this.liveShowStatusParam.equals(that.liveShowStatusParam))
        return false;
    }

    boolean this_present_liveTypeParam = true && this.isSetLiveTypeParam();
    boolean that_present_liveTypeParam = true && that.isSetLiveTypeParam();
    if (this_present_liveTypeParam || that_present_liveTypeParam) {
      if (!(this_present_liveTypeParam && that_present_liveTypeParam))
        return false;
      if (!this.liveTypeParam.equals(that.liveTypeParam))
        return false;
    }

    boolean this_present_octopus = true && this.isSetOctopus();
    boolean that_present_octopus = true && that.isSetOctopus();
    if (this_present_octopus || that_present_octopus) {
      if (!(this_present_octopus && that_present_octopus))
        return false;
      if (this.octopus != that.octopus)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_episodeTypeParam = true && this.isSetEpisodeTypeParam();
    boolean that_present_episodeTypeParam = true && that.isSetEpisodeTypeParam();
    if (this_present_episodeTypeParam || that_present_episodeTypeParam) {
      if (!(this_present_episodeTypeParam && that_present_episodeTypeParam))
        return false;
      if (!this.episodeTypeParam.equals(that.episodeTypeParam))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_ticketId = true && this.isSetTicketId();
    boolean that_present_ticketId = true && that.isSetTicketId();
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (!this.ticketId.equals(that.ticketId))
        return false;
    }

    boolean this_present_ticketType = true && this.isSetTicketType();
    boolean that_present_ticketType = true && that.isSetTicketType();
    if (this_present_ticketType || that_present_ticketType) {
      if (!(this_present_ticketType && that_present_ticketType))
        return false;
      if (!this.ticketType.equals(that.ticketType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameType = true && (isSetGameType());
    list.add(present_gameType);
    if (present_gameType)
      list.add(gameType);

    boolean present_cids = true && (isSetCids());
    list.add(present_cids);
    if (present_cids)
      list.add(cids);

    boolean present_liveShowStatusParam = true && (isSetLiveShowStatusParam());
    list.add(present_liveShowStatusParam);
    if (present_liveShowStatusParam)
      list.add(liveShowStatusParam.getValue());

    boolean present_liveTypeParam = true && (isSetLiveTypeParam());
    list.add(present_liveTypeParam);
    if (present_liveTypeParam)
      list.add(liveTypeParam.getValue());

    boolean present_octopus = true && (isSetOctopus());
    list.add(present_octopus);
    if (present_octopus)
      list.add(octopus);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_episodeTypeParam = true && (isSetEpisodeTypeParam());
    list.add(present_episodeTypeParam);
    if (present_episodeTypeParam)
      list.add(episodeTypeParam.getValue());

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_ticketId = true && (isSetTicketId());
    list.add(present_ticketId);
    if (present_ticketId)
      list.add(ticketId);

    boolean present_ticketType = true && (isSetTicketType());
    list.add(present_ticketType);
    if (present_ticketType)
      list.add(ticketType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(GetCurrentEpisodesParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameType()).compareTo(other.isSetGameType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, other.gameType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCids()).compareTo(other.isSetCids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cids, other.cids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveShowStatusParam()).compareTo(other.isSetLiveShowStatusParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveShowStatusParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveShowStatusParam, other.liveShowStatusParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveTypeParam()).compareTo(other.isSetLiveTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveTypeParam, other.liveTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOctopus()).compareTo(other.isSetOctopus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOctopus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.octopus, other.octopus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEpisodeTypeParam()).compareTo(other.isSetEpisodeTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpisodeTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.episodeTypeParam, other.episodeTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketType()).compareTo(other.isSetTicketType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketType, other.ticketType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetCurrentEpisodesParam(");
    boolean first = true;

    if (isSetGameType()) {
      sb.append("gameType:");
      sb.append(this.gameType);
      first = false;
    }
    if (isSetCids()) {
      if (!first) sb.append(", ");
      sb.append("cids:");
      if (this.cids == null) {
        sb.append("null");
      } else {
        sb.append(this.cids);
      }
      first = false;
    }
    if (isSetLiveShowStatusParam()) {
      if (!first) sb.append(", ");
      sb.append("liveShowStatusParam:");
      if (this.liveShowStatusParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveShowStatusParam);
      }
      first = false;
    }
    if (isSetLiveTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("liveTypeParam:");
      if (this.liveTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveTypeParam);
      }
      first = false;
    }
    if (isSetOctopus()) {
      if (!first) sb.append(", ");
      sb.append("octopus:");
      sb.append(this.octopus);
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetEpisodeTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("episodeTypeParam:");
      if (this.episodeTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.episodeTypeParam);
      }
      first = false;
    }
    if (isSetStartDate()) {
      if (!first) sb.append(", ");
      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
    }
    if (isSetTicketId()) {
      if (!first) sb.append(", ");
      sb.append("ticketId:");
      if (this.ticketId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketId);
      }
      first = false;
    }
    if (isSetTicketType()) {
      if (!first) sb.append(", ");
      sb.append("ticketType:");
      if (this.ticketType == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetCurrentEpisodesParamStandardSchemeFactory implements SchemeFactory {
    public GetCurrentEpisodesParamStandardScheme getScheme() {
      return new GetCurrentEpisodesParamStandardScheme();
    }
  }

  private static class GetCurrentEpisodesParamStandardScheme extends StandardScheme<GetCurrentEpisodesParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetCurrentEpisodesParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameType = iprot.readI64();
              struct.setGameTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.cids = new ArrayList<Long>(_list24.size);
                long _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI64();
                  struct.cids.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setCidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIVE_SHOW_STATUS_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveShowStatusParam = com.lesports.qmt.sbc.api.service.LiveShowStatusParam.findByValue(iprot.readI32());
              struct.setLiveShowStatusParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIVE_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
              struct.setLiveTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OCTOPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.octopus = iprot.readBool();
              struct.setOctopusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EPISODE_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.episodeTypeParam = com.lesports.qmt.sbc.api.service.EpisodeTypeParam.findByValue(iprot.readI32());
              struct.setEpisodeTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketId = iprot.readString();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TICKET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticketType = com.lesports.qmt.sbc.api.common.TicketType.findByValue(iprot.readI32());
              struct.setTicketTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetCurrentEpisodesParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetGameType()) {
        oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
        oprot.writeI64(struct.gameType);
        oprot.writeFieldEnd();
      }
      if (struct.cids != null) {
        if (struct.isSetCids()) {
          oprot.writeFieldBegin(CIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.cids.size()));
            for (long _iter27 : struct.cids)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.liveShowStatusParam != null) {
        if (struct.isSetLiveShowStatusParam()) {
          oprot.writeFieldBegin(LIVE_SHOW_STATUS_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveShowStatusParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.liveTypeParam != null) {
        if (struct.isSetLiveTypeParam()) {
          oprot.writeFieldBegin(LIVE_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOctopus()) {
        oprot.writeFieldBegin(OCTOPUS_FIELD_DESC);
        oprot.writeBool(struct.octopus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.episodeTypeParam != null) {
        if (struct.isSetEpisodeTypeParam()) {
          oprot.writeFieldBegin(EPISODE_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.episodeTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.startDate != null) {
        if (struct.isSetStartDate()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketId != null) {
        if (struct.isSetTicketId()) {
          oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
          oprot.writeString(struct.ticketId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketType != null) {
        if (struct.isSetTicketType()) {
          oprot.writeFieldBegin(TICKET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.ticketType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetCurrentEpisodesParamTupleSchemeFactory implements SchemeFactory {
    public GetCurrentEpisodesParamTupleScheme getScheme() {
      return new GetCurrentEpisodesParamTupleScheme();
    }
  }

  private static class GetCurrentEpisodesParamTupleScheme extends TupleScheme<GetCurrentEpisodesParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetCurrentEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameType()) {
        optionals.set(0);
      }
      if (struct.isSetCids()) {
        optionals.set(1);
      }
      if (struct.isSetLiveShowStatusParam()) {
        optionals.set(2);
      }
      if (struct.isSetLiveTypeParam()) {
        optionals.set(3);
      }
      if (struct.isSetOctopus()) {
        optionals.set(4);
      }
      if (struct.isSetCsid()) {
        optionals.set(5);
      }
      if (struct.isSetEpisodeTypeParam()) {
        optionals.set(6);
      }
      if (struct.isSetStartDate()) {
        optionals.set(7);
      }
      if (struct.isSetTicketId()) {
        optionals.set(8);
      }
      if (struct.isSetTicketType()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetGameType()) {
        oprot.writeI64(struct.gameType);
      }
      if (struct.isSetCids()) {
        {
          oprot.writeI32(struct.cids.size());
          for (long _iter28 : struct.cids)
          {
            oprot.writeI64(_iter28);
          }
        }
      }
      if (struct.isSetLiveShowStatusParam()) {
        oprot.writeI32(struct.liveShowStatusParam.getValue());
      }
      if (struct.isSetLiveTypeParam()) {
        oprot.writeI32(struct.liveTypeParam.getValue());
      }
      if (struct.isSetOctopus()) {
        oprot.writeBool(struct.octopus);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetEpisodeTypeParam()) {
        oprot.writeI32(struct.episodeTypeParam.getValue());
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetTicketId()) {
        oprot.writeString(struct.ticketId);
      }
      if (struct.isSetTicketType()) {
        oprot.writeI32(struct.ticketType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetCurrentEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.gameType = iprot.readI64();
        struct.setGameTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cids = new ArrayList<Long>(_list29.size);
          long _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readI64();
            struct.cids.add(_elem30);
          }
        }
        struct.setCidsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.liveShowStatusParam = com.lesports.qmt.sbc.api.service.LiveShowStatusParam.findByValue(iprot.readI32());
        struct.setLiveShowStatusParamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
        struct.setLiveTypeParamIsSet(true);
      }
      if (incoming.get(4)) {
        struct.octopus = iprot.readBool();
        struct.setOctopusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(6)) {
        struct.episodeTypeParam = com.lesports.qmt.sbc.api.service.EpisodeTypeParam.findByValue(iprot.readI32());
        struct.setEpisodeTypeParamIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ticketId = iprot.readString();
        struct.setTicketIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ticketType = com.lesports.qmt.sbc.api.common.TicketType.findByValue(iprot.readI32());
        struct.setTicketTypeIsSet(true);
      }
    }
  }

}

