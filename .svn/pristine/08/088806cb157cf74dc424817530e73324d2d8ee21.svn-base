/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-27")
public class TResourceContent implements org.apache.thrift.TBase<TResourceContent, TResourceContent._Fields>, java.io.Serializable, Cloneable, Comparable<TResourceContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResourceContent");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COVER_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverImage", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TAG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SUB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField DATA_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSearch", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField CONTENT_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("contentItems", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SHOW_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("showTitle", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField H5_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("h5Url", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField OTHER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("otherContent", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MOBILE_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileImg", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField IPAD_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("ipadImg", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField TV_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("tvImg", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField DURATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("durationTime", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField STAR_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("starLevel", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField TIME_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("timeOrder", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField OVERD_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("overdRound", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField LIVING_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("livingRound", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TO_START_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("toStartRound", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceContentTupleSchemeFactory());
  }

  private long id; // required
  private long resourceId; // required
  private String itemId; // optional
  private int order; // optional
  private String name; // optional
  private Map<String,String> coverImage; // optional
  private List<TResourceLink> links; // optional
  private List<Long> tagIds; // optional
  private ResourceItemType type; // optional
  private ResourceItemType subType; // optional
  private List<ResourceItemType> dataSearch; // optional
  private List<TContentItem> contentItems; // optional
  private boolean showTitle; // optional
  private String h5Url; // optional
  private String otherContent; // optional
  private String mobileImg; // optional
  private String ipadImg; // optional
  private String tvImg; // optional
  private int durationTime; // optional
  private int starLevel; // optional
  private int timeOrder; // optional
  private int overdRound; // optional
  private int livingRound; // optional
  private int toStartRound; // optional
  private String startTime; // optional
  private String endTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    RESOURCE_ID((short)2, "resourceId"),
    ITEM_ID((short)3, "itemId"),
    ORDER((short)4, "order"),
    NAME((short)5, "name"),
    COVER_IMAGE((short)6, "coverImage"),
    LINKS((short)7, "links"),
    TAG_IDS((short)8, "tagIds"),
    TYPE((short)9, "type"),
    SUB_TYPE((short)10, "subType"),
    DATA_SEARCH((short)11, "dataSearch"),
    CONTENT_ITEMS((short)12, "contentItems"),
    SHOW_TITLE((short)13, "showTitle"),
    H5_URL((short)14, "h5Url"),
    OTHER_CONTENT((short)15, "otherContent"),
    MOBILE_IMG((short)16, "mobileImg"),
    IPAD_IMG((short)17, "ipadImg"),
    TV_IMG((short)18, "tvImg"),
    DURATION_TIME((short)19, "durationTime"),
    STAR_LEVEL((short)21, "starLevel"),
    TIME_ORDER((short)22, "timeOrder"),
    OVERD_ROUND((short)23, "overdRound"),
    LIVING_ROUND((short)24, "livingRound"),
    TO_START_ROUND((short)25, "toStartRound"),
    START_TIME((short)26, "startTime"),
    END_TIME((short)27, "endTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // RESOURCE_ID
          return RESOURCE_ID;
        case 3: // ITEM_ID
          return ITEM_ID;
        case 4: // ORDER
          return ORDER;
        case 5: // NAME
          return NAME;
        case 6: // COVER_IMAGE
          return COVER_IMAGE;
        case 7: // LINKS
          return LINKS;
        case 8: // TAG_IDS
          return TAG_IDS;
        case 9: // TYPE
          return TYPE;
        case 10: // SUB_TYPE
          return SUB_TYPE;
        case 11: // DATA_SEARCH
          return DATA_SEARCH;
        case 12: // CONTENT_ITEMS
          return CONTENT_ITEMS;
        case 13: // SHOW_TITLE
          return SHOW_TITLE;
        case 14: // H5_URL
          return H5_URL;
        case 15: // OTHER_CONTENT
          return OTHER_CONTENT;
        case 16: // MOBILE_IMG
          return MOBILE_IMG;
        case 17: // IPAD_IMG
          return IPAD_IMG;
        case 18: // TV_IMG
          return TV_IMG;
        case 19: // DURATION_TIME
          return DURATION_TIME;
        case 21: // STAR_LEVEL
          return STAR_LEVEL;
        case 22: // TIME_ORDER
          return TIME_ORDER;
        case 23: // OVERD_ROUND
          return OVERD_ROUND;
        case 24: // LIVING_ROUND
          return LIVING_ROUND;
        case 25: // TO_START_ROUND
          return TO_START_ROUND;
        case 26: // START_TIME
          return START_TIME;
        case 27: // END_TIME
          return END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RESOURCEID_ISSET_ID = 1;
  private static final int __ORDER_ISSET_ID = 2;
  private static final int __SHOWTITLE_ISSET_ID = 3;
  private static final int __DURATIONTIME_ISSET_ID = 4;
  private static final int __STARLEVEL_ISSET_ID = 5;
  private static final int __TIMEORDER_ISSET_ID = 6;
  private static final int __OVERDROUND_ISSET_ID = 7;
  private static final int __LIVINGROUND_ISSET_ID = 8;
  private static final int __TOSTARTROUND_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ITEM_ID,_Fields.ORDER,_Fields.NAME,_Fields.COVER_IMAGE,_Fields.LINKS,_Fields.TAG_IDS,_Fields.TYPE,_Fields.SUB_TYPE,_Fields.DATA_SEARCH,_Fields.CONTENT_ITEMS,_Fields.SHOW_TITLE,_Fields.H5_URL,_Fields.OTHER_CONTENT,_Fields.MOBILE_IMG,_Fields.IPAD_IMG,_Fields.TV_IMG,_Fields.DURATION_TIME,_Fields.STAR_LEVEL,_Fields.TIME_ORDER,_Fields.OVERD_ROUND,_Fields.LIVING_ROUND,_Fields.TO_START_ROUND,_Fields.START_TIME,_Fields.END_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COVER_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("coverImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceLink.class))));
    tmpMap.put(_Fields.TAG_IDS, new org.apache.thrift.meta_data.FieldMetaData("tagIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "ResourceItemType")));
    tmpMap.put(_Fields.SUB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "ResourceItemType")));
    tmpMap.put(_Fields.DATA_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("dataSearch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM            , "ResourceItemType"))));
    tmpMap.put(_Fields.CONTENT_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("contentItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TContentItem"))));
    tmpMap.put(_Fields.SHOW_TITLE, new org.apache.thrift.meta_data.FieldMetaData("showTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.H5_URL, new org.apache.thrift.meta_data.FieldMetaData("h5Url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("otherContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_IMG, new org.apache.thrift.meta_data.FieldMetaData("mobileImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IPAD_IMG, new org.apache.thrift.meta_data.FieldMetaData("ipadImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TV_IMG, new org.apache.thrift.meta_data.FieldMetaData("tvImg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("durationTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("starLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME_ORDER, new org.apache.thrift.meta_data.FieldMetaData("timeOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERD_ROUND, new org.apache.thrift.meta_data.FieldMetaData("overdRound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVING_ROUND, new org.apache.thrift.meta_data.FieldMetaData("livingRound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_START_ROUND, new org.apache.thrift.meta_data.FieldMetaData("toStartRound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResourceContent.class, metaDataMap);
  }

  public TResourceContent() {
  }

  public TResourceContent(
    long id,
    long resourceId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.resourceId = resourceId;
    setResourceIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResourceContent(TResourceContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.resourceId = other.resourceId;
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    this.order = other.order;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCoverImage()) {
      Map<String,String> __this__coverImage = new HashMap<String,String>(other.coverImage);
      this.coverImage = __this__coverImage;
    }
    if (other.isSetLinks()) {
      List<TResourceLink> __this__links = new ArrayList<TResourceLink>(other.links.size());
      for (TResourceLink other_element : other.links) {
        __this__links.add(new TResourceLink(other_element));
      }
      this.links = __this__links;
    }
    if (other.isSetTagIds()) {
      List<Long> __this__tagIds = new ArrayList<Long>(other.tagIds);
      this.tagIds = __this__tagIds;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSubType()) {
      this.subType = other.subType;
    }
    if (other.isSetDataSearch()) {
      List<ResourceItemType> __this__dataSearch = new ArrayList<ResourceItemType>(other.dataSearch.size());
      for (ResourceItemType other_element : other.dataSearch) {
        __this__dataSearch.add(other_element);
      }
      this.dataSearch = __this__dataSearch;
    }
    if (other.isSetContentItems()) {
      List<TContentItem> __this__contentItems = new ArrayList<TContentItem>(other.contentItems.size());
      for (TContentItem other_element : other.contentItems) {
        __this__contentItems.add(other_element);
      }
      this.contentItems = __this__contentItems;
    }
    this.showTitle = other.showTitle;
    if (other.isSetH5Url()) {
      this.h5Url = other.h5Url;
    }
    if (other.isSetOtherContent()) {
      this.otherContent = other.otherContent;
    }
    if (other.isSetMobileImg()) {
      this.mobileImg = other.mobileImg;
    }
    if (other.isSetIpadImg()) {
      this.ipadImg = other.ipadImg;
    }
    if (other.isSetTvImg()) {
      this.tvImg = other.tvImg;
    }
    this.durationTime = other.durationTime;
    this.starLevel = other.starLevel;
    this.timeOrder = other.timeOrder;
    this.overdRound = other.overdRound;
    this.livingRound = other.livingRound;
    this.toStartRound = other.toStartRound;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
  }

  public TResourceContent deepCopy() {
    return new TResourceContent(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setResourceIdIsSet(false);
    this.resourceId = 0;
    this.itemId = null;
    setOrderIsSet(false);
    this.order = 0;
    this.name = null;
    this.coverImage = null;
    this.links = null;
    this.tagIds = null;
    this.type = null;
    this.subType = null;
    this.dataSearch = null;
    this.contentItems = null;
    setShowTitleIsSet(false);
    this.showTitle = false;
    this.h5Url = null;
    this.otherContent = null;
    this.mobileImg = null;
    this.ipadImg = null;
    this.tvImg = null;
    setDurationTimeIsSet(false);
    this.durationTime = 0;
    setStarLevelIsSet(false);
    this.starLevel = 0;
    setTimeOrderIsSet(false);
    this.timeOrder = 0;
    setOverdRoundIsSet(false);
    this.overdRound = 0;
    setLivingRoundIsSet(false);
    this.livingRound = 0;
    setToStartRoundIsSet(false);
    this.toStartRound = 0;
    this.startTime = null;
    this.endTime = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getResourceId() {
    return this.resourceId;
  }

  public void setResourceId(long resourceId) {
    this.resourceId = resourceId;
    setResourceIdIsSet(true);
  }

  public void unsetResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
  }

  public void setResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
  }

  public String getItemId() {
    return this.itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getCoverImageSize() {
    return (this.coverImage == null) ? 0 : this.coverImage.size();
  }

  public void putToCoverImage(String key, String val) {
    if (this.coverImage == null) {
      this.coverImage = new HashMap<String,String>();
    }
    this.coverImage.put(key, val);
  }

  public Map<String,String> getCoverImage() {
    return this.coverImage;
  }

  public void setCoverImage(Map<String,String> coverImage) {
    this.coverImage = coverImage;
  }

  public void unsetCoverImage() {
    this.coverImage = null;
  }

  /** Returns true if field coverImage is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverImage() {
    return this.coverImage != null;
  }

  public void setCoverImageIsSet(boolean value) {
    if (!value) {
      this.coverImage = null;
    }
  }

  public int getLinksSize() {
    return (this.links == null) ? 0 : this.links.size();
  }

  public java.util.Iterator<TResourceLink> getLinksIterator() {
    return (this.links == null) ? null : this.links.iterator();
  }

  public void addToLinks(TResourceLink elem) {
    if (this.links == null) {
      this.links = new ArrayList<TResourceLink>();
    }
    this.links.add(elem);
  }

  public List<TResourceLink> getLinks() {
    return this.links;
  }

  public void setLinks(List<TResourceLink> links) {
    this.links = links;
  }

  public void unsetLinks() {
    this.links = null;
  }

  /** Returns true if field links is set (has been assigned a value) and false otherwise */
  public boolean isSetLinks() {
    return this.links != null;
  }

  public void setLinksIsSet(boolean value) {
    if (!value) {
      this.links = null;
    }
  }

  public int getTagIdsSize() {
    return (this.tagIds == null) ? 0 : this.tagIds.size();
  }

  public java.util.Iterator<Long> getTagIdsIterator() {
    return (this.tagIds == null) ? null : this.tagIds.iterator();
  }

  public void addToTagIds(long elem) {
    if (this.tagIds == null) {
      this.tagIds = new ArrayList<Long>();
    }
    this.tagIds.add(elem);
  }

  public List<Long> getTagIds() {
    return this.tagIds;
  }

  public void setTagIds(List<Long> tagIds) {
    this.tagIds = tagIds;
  }

  public void unsetTagIds() {
    this.tagIds = null;
  }

  /** Returns true if field tagIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTagIds() {
    return this.tagIds != null;
  }

  public void setTagIdsIsSet(boolean value) {
    if (!value) {
      this.tagIds = null;
    }
  }

  public ResourceItemType getType() {
    return this.type;
  }

  public void setType(ResourceItemType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public ResourceItemType getSubType() {
    return this.subType;
  }

  public void setSubType(ResourceItemType subType) {
    this.subType = subType;
  }

  public void unsetSubType() {
    this.subType = null;
  }

  /** Returns true if field subType is set (has been assigned a value) and false otherwise */
  public boolean isSetSubType() {
    return this.subType != null;
  }

  public void setSubTypeIsSet(boolean value) {
    if (!value) {
      this.subType = null;
    }
  }

  public int getDataSearchSize() {
    return (this.dataSearch == null) ? 0 : this.dataSearch.size();
  }

  public java.util.Iterator<ResourceItemType> getDataSearchIterator() {
    return (this.dataSearch == null) ? null : this.dataSearch.iterator();
  }

  public void addToDataSearch(ResourceItemType elem) {
    if (this.dataSearch == null) {
      this.dataSearch = new ArrayList<ResourceItemType>();
    }
    this.dataSearch.add(elem);
  }

  public List<ResourceItemType> getDataSearch() {
    return this.dataSearch;
  }

  public void setDataSearch(List<ResourceItemType> dataSearch) {
    this.dataSearch = dataSearch;
  }

  public void unsetDataSearch() {
    this.dataSearch = null;
  }

  /** Returns true if field dataSearch is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSearch() {
    return this.dataSearch != null;
  }

  public void setDataSearchIsSet(boolean value) {
    if (!value) {
      this.dataSearch = null;
    }
  }

  public int getContentItemsSize() {
    return (this.contentItems == null) ? 0 : this.contentItems.size();
  }

  public java.util.Iterator<TContentItem> getContentItemsIterator() {
    return (this.contentItems == null) ? null : this.contentItems.iterator();
  }

  public void addToContentItems(TContentItem elem) {
    if (this.contentItems == null) {
      this.contentItems = new ArrayList<TContentItem>();
    }
    this.contentItems.add(elem);
  }

  public List<TContentItem> getContentItems() {
    return this.contentItems;
  }

  public void setContentItems(List<TContentItem> contentItems) {
    this.contentItems = contentItems;
  }

  public void unsetContentItems() {
    this.contentItems = null;
  }

  /** Returns true if field contentItems is set (has been assigned a value) and false otherwise */
  public boolean isSetContentItems() {
    return this.contentItems != null;
  }

  public void setContentItemsIsSet(boolean value) {
    if (!value) {
      this.contentItems = null;
    }
  }

  public boolean isShowTitle() {
    return this.showTitle;
  }

  public void setShowTitle(boolean showTitle) {
    this.showTitle = showTitle;
    setShowTitleIsSet(true);
  }

  public void unsetShowTitle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWTITLE_ISSET_ID);
  }

  /** Returns true if field showTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetShowTitle() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWTITLE_ISSET_ID);
  }

  public void setShowTitleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWTITLE_ISSET_ID, value);
  }

  public String getH5Url() {
    return this.h5Url;
  }

  public void setH5Url(String h5Url) {
    this.h5Url = h5Url;
  }

  public void unsetH5Url() {
    this.h5Url = null;
  }

  /** Returns true if field h5Url is set (has been assigned a value) and false otherwise */
  public boolean isSetH5Url() {
    return this.h5Url != null;
  }

  public void setH5UrlIsSet(boolean value) {
    if (!value) {
      this.h5Url = null;
    }
  }

  public String getOtherContent() {
    return this.otherContent;
  }

  public void setOtherContent(String otherContent) {
    this.otherContent = otherContent;
  }

  public void unsetOtherContent() {
    this.otherContent = null;
  }

  /** Returns true if field otherContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherContent() {
    return this.otherContent != null;
  }

  public void setOtherContentIsSet(boolean value) {
    if (!value) {
      this.otherContent = null;
    }
  }

  public String getMobileImg() {
    return this.mobileImg;
  }

  public void setMobileImg(String mobileImg) {
    this.mobileImg = mobileImg;
  }

  public void unsetMobileImg() {
    this.mobileImg = null;
  }

  /** Returns true if field mobileImg is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileImg() {
    return this.mobileImg != null;
  }

  public void setMobileImgIsSet(boolean value) {
    if (!value) {
      this.mobileImg = null;
    }
  }

  public String getIpadImg() {
    return this.ipadImg;
  }

  public void setIpadImg(String ipadImg) {
    this.ipadImg = ipadImg;
  }

  public void unsetIpadImg() {
    this.ipadImg = null;
  }

  /** Returns true if field ipadImg is set (has been assigned a value) and false otherwise */
  public boolean isSetIpadImg() {
    return this.ipadImg != null;
  }

  public void setIpadImgIsSet(boolean value) {
    if (!value) {
      this.ipadImg = null;
    }
  }

  public String getTvImg() {
    return this.tvImg;
  }

  public void setTvImg(String tvImg) {
    this.tvImg = tvImg;
  }

  public void unsetTvImg() {
    this.tvImg = null;
  }

  /** Returns true if field tvImg is set (has been assigned a value) and false otherwise */
  public boolean isSetTvImg() {
    return this.tvImg != null;
  }

  public void setTvImgIsSet(boolean value) {
    if (!value) {
      this.tvImg = null;
    }
  }

  public int getDurationTime() {
    return this.durationTime;
  }

  public void setDurationTime(int durationTime) {
    this.durationTime = durationTime;
    setDurationTimeIsSet(true);
  }

  public void unsetDurationTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATIONTIME_ISSET_ID);
  }

  /** Returns true if field durationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDurationTime() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATIONTIME_ISSET_ID);
  }

  public void setDurationTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATIONTIME_ISSET_ID, value);
  }

  public int getStarLevel() {
    return this.starLevel;
  }

  public void setStarLevel(int starLevel) {
    this.starLevel = starLevel;
    setStarLevelIsSet(true);
  }

  public void unsetStarLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLEVEL_ISSET_ID);
  }

  /** Returns true if field starLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLEVEL_ISSET_ID);
  }

  public void setStarLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLEVEL_ISSET_ID, value);
  }

  public int getTimeOrder() {
    return this.timeOrder;
  }

  public void setTimeOrder(int timeOrder) {
    this.timeOrder = timeOrder;
    setTimeOrderIsSet(true);
  }

  public void unsetTimeOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEORDER_ISSET_ID);
  }

  /** Returns true if field timeOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEORDER_ISSET_ID);
  }

  public void setTimeOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEORDER_ISSET_ID, value);
  }

  public int getOverdRound() {
    return this.overdRound;
  }

  public void setOverdRound(int overdRound) {
    this.overdRound = overdRound;
    setOverdRoundIsSet(true);
  }

  public void unsetOverdRound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDROUND_ISSET_ID);
  }

  /** Returns true if field overdRound is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdRound() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDROUND_ISSET_ID);
  }

  public void setOverdRoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDROUND_ISSET_ID, value);
  }

  public int getLivingRound() {
    return this.livingRound;
  }

  public void setLivingRound(int livingRound) {
    this.livingRound = livingRound;
    setLivingRoundIsSet(true);
  }

  public void unsetLivingRound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIVINGROUND_ISSET_ID);
  }

  /** Returns true if field livingRound is set (has been assigned a value) and false otherwise */
  public boolean isSetLivingRound() {
    return EncodingUtils.testBit(__isset_bitfield, __LIVINGROUND_ISSET_ID);
  }

  public void setLivingRoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIVINGROUND_ISSET_ID, value);
  }

  public int getToStartRound() {
    return this.toStartRound;
  }

  public void setToStartRound(int toStartRound) {
    this.toStartRound = toStartRound;
    setToStartRoundIsSet(true);
  }

  public void unsetToStartRound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOSTARTROUND_ISSET_ID);
  }

  /** Returns true if field toStartRound is set (has been assigned a value) and false otherwise */
  public boolean isSetToStartRound() {
    return EncodingUtils.testBit(__isset_bitfield, __TOSTARTROUND_ISSET_ID);
  }

  public void setToStartRoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOSTARTROUND_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((Long)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COVER_IMAGE:
      if (value == null) {
        unsetCoverImage();
      } else {
        setCoverImage((Map<String,String>)value);
      }
      break;

    case LINKS:
      if (value == null) {
        unsetLinks();
      } else {
        setLinks((List<TResourceLink>)value);
      }
      break;

    case TAG_IDS:
      if (value == null) {
        unsetTagIds();
      } else {
        setTagIds((List<Long>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ResourceItemType)value);
      }
      break;

    case SUB_TYPE:
      if (value == null) {
        unsetSubType();
      } else {
        setSubType((ResourceItemType)value);
      }
      break;

    case DATA_SEARCH:
      if (value == null) {
        unsetDataSearch();
      } else {
        setDataSearch((List<ResourceItemType>)value);
      }
      break;

    case CONTENT_ITEMS:
      if (value == null) {
        unsetContentItems();
      } else {
        setContentItems((List<TContentItem>)value);
      }
      break;

    case SHOW_TITLE:
      if (value == null) {
        unsetShowTitle();
      } else {
        setShowTitle((Boolean)value);
      }
      break;

    case H5_URL:
      if (value == null) {
        unsetH5Url();
      } else {
        setH5Url((String)value);
      }
      break;

    case OTHER_CONTENT:
      if (value == null) {
        unsetOtherContent();
      } else {
        setOtherContent((String)value);
      }
      break;

    case MOBILE_IMG:
      if (value == null) {
        unsetMobileImg();
      } else {
        setMobileImg((String)value);
      }
      break;

    case IPAD_IMG:
      if (value == null) {
        unsetIpadImg();
      } else {
        setIpadImg((String)value);
      }
      break;

    case TV_IMG:
      if (value == null) {
        unsetTvImg();
      } else {
        setTvImg((String)value);
      }
      break;

    case DURATION_TIME:
      if (value == null) {
        unsetDurationTime();
      } else {
        setDurationTime((Integer)value);
      }
      break;

    case STAR_LEVEL:
      if (value == null) {
        unsetStarLevel();
      } else {
        setStarLevel((Integer)value);
      }
      break;

    case TIME_ORDER:
      if (value == null) {
        unsetTimeOrder();
      } else {
        setTimeOrder((Integer)value);
      }
      break;

    case OVERD_ROUND:
      if (value == null) {
        unsetOverdRound();
      } else {
        setOverdRound((Integer)value);
      }
      break;

    case LIVING_ROUND:
      if (value == null) {
        unsetLivingRound();
      } else {
        setLivingRound((Integer)value);
      }
      break;

    case TO_START_ROUND:
      if (value == null) {
        unsetToStartRound();
      } else {
        setToStartRound((Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case RESOURCE_ID:
      return Long.valueOf(getResourceId());

    case ITEM_ID:
      return getItemId();

    case ORDER:
      return Integer.valueOf(getOrder());

    case NAME:
      return getName();

    case COVER_IMAGE:
      return getCoverImage();

    case LINKS:
      return getLinks();

    case TAG_IDS:
      return getTagIds();

    case TYPE:
      return getType();

    case SUB_TYPE:
      return getSubType();

    case DATA_SEARCH:
      return getDataSearch();

    case CONTENT_ITEMS:
      return getContentItems();

    case SHOW_TITLE:
      return Boolean.valueOf(isShowTitle());

    case H5_URL:
      return getH5Url();

    case OTHER_CONTENT:
      return getOtherContent();

    case MOBILE_IMG:
      return getMobileImg();

    case IPAD_IMG:
      return getIpadImg();

    case TV_IMG:
      return getTvImg();

    case DURATION_TIME:
      return Integer.valueOf(getDurationTime());

    case STAR_LEVEL:
      return Integer.valueOf(getStarLevel());

    case TIME_ORDER:
      return Integer.valueOf(getTimeOrder());

    case OVERD_ROUND:
      return Integer.valueOf(getOverdRound());

    case LIVING_ROUND:
      return Integer.valueOf(getLivingRound());

    case TO_START_ROUND:
      return Integer.valueOf(getToStartRound());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case RESOURCE_ID:
      return isSetResourceId();
    case ITEM_ID:
      return isSetItemId();
    case ORDER:
      return isSetOrder();
    case NAME:
      return isSetName();
    case COVER_IMAGE:
      return isSetCoverImage();
    case LINKS:
      return isSetLinks();
    case TAG_IDS:
      return isSetTagIds();
    case TYPE:
      return isSetType();
    case SUB_TYPE:
      return isSetSubType();
    case DATA_SEARCH:
      return isSetDataSearch();
    case CONTENT_ITEMS:
      return isSetContentItems();
    case SHOW_TITLE:
      return isSetShowTitle();
    case H5_URL:
      return isSetH5Url();
    case OTHER_CONTENT:
      return isSetOtherContent();
    case MOBILE_IMG:
      return isSetMobileImg();
    case IPAD_IMG:
      return isSetIpadImg();
    case TV_IMG:
      return isSetTvImg();
    case DURATION_TIME:
      return isSetDurationTime();
    case STAR_LEVEL:
      return isSetStarLevel();
    case TIME_ORDER:
      return isSetTimeOrder();
    case OVERD_ROUND:
      return isSetOverdRound();
    case LIVING_ROUND:
      return isSetLivingRound();
    case TO_START_ROUND:
      return isSetToStartRound();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResourceContent)
      return this.equals((TResourceContent)that);
    return false;
  }

  public boolean equals(TResourceContent that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_resourceId = true;
    boolean that_present_resourceId = true;
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (this.resourceId != that.resourceId)
        return false;
    }

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_coverImage = true && this.isSetCoverImage();
    boolean that_present_coverImage = true && that.isSetCoverImage();
    if (this_present_coverImage || that_present_coverImage) {
      if (!(this_present_coverImage && that_present_coverImage))
        return false;
      if (!this.coverImage.equals(that.coverImage))
        return false;
    }

    boolean this_present_links = true && this.isSetLinks();
    boolean that_present_links = true && that.isSetLinks();
    if (this_present_links || that_present_links) {
      if (!(this_present_links && that_present_links))
        return false;
      if (!this.links.equals(that.links))
        return false;
    }

    boolean this_present_tagIds = true && this.isSetTagIds();
    boolean that_present_tagIds = true && that.isSetTagIds();
    if (this_present_tagIds || that_present_tagIds) {
      if (!(this_present_tagIds && that_present_tagIds))
        return false;
      if (!this.tagIds.equals(that.tagIds))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_subType = true && this.isSetSubType();
    boolean that_present_subType = true && that.isSetSubType();
    if (this_present_subType || that_present_subType) {
      if (!(this_present_subType && that_present_subType))
        return false;
      if (!this.subType.equals(that.subType))
        return false;
    }

    boolean this_present_dataSearch = true && this.isSetDataSearch();
    boolean that_present_dataSearch = true && that.isSetDataSearch();
    if (this_present_dataSearch || that_present_dataSearch) {
      if (!(this_present_dataSearch && that_present_dataSearch))
        return false;
      if (!this.dataSearch.equals(that.dataSearch))
        return false;
    }

    boolean this_present_contentItems = true && this.isSetContentItems();
    boolean that_present_contentItems = true && that.isSetContentItems();
    if (this_present_contentItems || that_present_contentItems) {
      if (!(this_present_contentItems && that_present_contentItems))
        return false;
      if (!this.contentItems.equals(that.contentItems))
        return false;
    }

    boolean this_present_showTitle = true && this.isSetShowTitle();
    boolean that_present_showTitle = true && that.isSetShowTitle();
    if (this_present_showTitle || that_present_showTitle) {
      if (!(this_present_showTitle && that_present_showTitle))
        return false;
      if (this.showTitle != that.showTitle)
        return false;
    }

    boolean this_present_h5Url = true && this.isSetH5Url();
    boolean that_present_h5Url = true && that.isSetH5Url();
    if (this_present_h5Url || that_present_h5Url) {
      if (!(this_present_h5Url && that_present_h5Url))
        return false;
      if (!this.h5Url.equals(that.h5Url))
        return false;
    }

    boolean this_present_otherContent = true && this.isSetOtherContent();
    boolean that_present_otherContent = true && that.isSetOtherContent();
    if (this_present_otherContent || that_present_otherContent) {
      if (!(this_present_otherContent && that_present_otherContent))
        return false;
      if (!this.otherContent.equals(that.otherContent))
        return false;
    }

    boolean this_present_mobileImg = true && this.isSetMobileImg();
    boolean that_present_mobileImg = true && that.isSetMobileImg();
    if (this_present_mobileImg || that_present_mobileImg) {
      if (!(this_present_mobileImg && that_present_mobileImg))
        return false;
      if (!this.mobileImg.equals(that.mobileImg))
        return false;
    }

    boolean this_present_ipadImg = true && this.isSetIpadImg();
    boolean that_present_ipadImg = true && that.isSetIpadImg();
    if (this_present_ipadImg || that_present_ipadImg) {
      if (!(this_present_ipadImg && that_present_ipadImg))
        return false;
      if (!this.ipadImg.equals(that.ipadImg))
        return false;
    }

    boolean this_present_tvImg = true && this.isSetTvImg();
    boolean that_present_tvImg = true && that.isSetTvImg();
    if (this_present_tvImg || that_present_tvImg) {
      if (!(this_present_tvImg && that_present_tvImg))
        return false;
      if (!this.tvImg.equals(that.tvImg))
        return false;
    }

    boolean this_present_durationTime = true && this.isSetDurationTime();
    boolean that_present_durationTime = true && that.isSetDurationTime();
    if (this_present_durationTime || that_present_durationTime) {
      if (!(this_present_durationTime && that_present_durationTime))
        return false;
      if (this.durationTime != that.durationTime)
        return false;
    }

    boolean this_present_starLevel = true && this.isSetStarLevel();
    boolean that_present_starLevel = true && that.isSetStarLevel();
    if (this_present_starLevel || that_present_starLevel) {
      if (!(this_present_starLevel && that_present_starLevel))
        return false;
      if (this.starLevel != that.starLevel)
        return false;
    }

    boolean this_present_timeOrder = true && this.isSetTimeOrder();
    boolean that_present_timeOrder = true && that.isSetTimeOrder();
    if (this_present_timeOrder || that_present_timeOrder) {
      if (!(this_present_timeOrder && that_present_timeOrder))
        return false;
      if (this.timeOrder != that.timeOrder)
        return false;
    }

    boolean this_present_overdRound = true && this.isSetOverdRound();
    boolean that_present_overdRound = true && that.isSetOverdRound();
    if (this_present_overdRound || that_present_overdRound) {
      if (!(this_present_overdRound && that_present_overdRound))
        return false;
      if (this.overdRound != that.overdRound)
        return false;
    }

    boolean this_present_livingRound = true && this.isSetLivingRound();
    boolean that_present_livingRound = true && that.isSetLivingRound();
    if (this_present_livingRound || that_present_livingRound) {
      if (!(this_present_livingRound && that_present_livingRound))
        return false;
      if (this.livingRound != that.livingRound)
        return false;
    }

    boolean this_present_toStartRound = true && this.isSetToStartRound();
    boolean that_present_toStartRound = true && that.isSetToStartRound();
    if (this_present_toStartRound || that_present_toStartRound) {
      if (!(this_present_toStartRound && that_present_toStartRound))
        return false;
      if (this.toStartRound != that.toStartRound)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_resourceId = true;
    list.add(present_resourceId);
    if (present_resourceId)
      list.add(resourceId);

    boolean present_itemId = true && (isSetItemId());
    list.add(present_itemId);
    if (present_itemId)
      list.add(itemId);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_coverImage = true && (isSetCoverImage());
    list.add(present_coverImage);
    if (present_coverImage)
      list.add(coverImage);

    boolean present_links = true && (isSetLinks());
    list.add(present_links);
    if (present_links)
      list.add(links);

    boolean present_tagIds = true && (isSetTagIds());
    list.add(present_tagIds);
    if (present_tagIds)
      list.add(tagIds);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_subType = true && (isSetSubType());
    list.add(present_subType);
    if (present_subType)
      list.add(subType.getValue());

    boolean present_dataSearch = true && (isSetDataSearch());
    list.add(present_dataSearch);
    if (present_dataSearch)
      list.add(dataSearch);

    boolean present_contentItems = true && (isSetContentItems());
    list.add(present_contentItems);
    if (present_contentItems)
      list.add(contentItems);

    boolean present_showTitle = true && (isSetShowTitle());
    list.add(present_showTitle);
    if (present_showTitle)
      list.add(showTitle);

    boolean present_h5Url = true && (isSetH5Url());
    list.add(present_h5Url);
    if (present_h5Url)
      list.add(h5Url);

    boolean present_otherContent = true && (isSetOtherContent());
    list.add(present_otherContent);
    if (present_otherContent)
      list.add(otherContent);

    boolean present_mobileImg = true && (isSetMobileImg());
    list.add(present_mobileImg);
    if (present_mobileImg)
      list.add(mobileImg);

    boolean present_ipadImg = true && (isSetIpadImg());
    list.add(present_ipadImg);
    if (present_ipadImg)
      list.add(ipadImg);

    boolean present_tvImg = true && (isSetTvImg());
    list.add(present_tvImg);
    if (present_tvImg)
      list.add(tvImg);

    boolean present_durationTime = true && (isSetDurationTime());
    list.add(present_durationTime);
    if (present_durationTime)
      list.add(durationTime);

    boolean present_starLevel = true && (isSetStarLevel());
    list.add(present_starLevel);
    if (present_starLevel)
      list.add(starLevel);

    boolean present_timeOrder = true && (isSetTimeOrder());
    list.add(present_timeOrder);
    if (present_timeOrder)
      list.add(timeOrder);

    boolean present_overdRound = true && (isSetOverdRound());
    list.add(present_overdRound);
    if (present_overdRound)
      list.add(overdRound);

    boolean present_livingRound = true && (isSetLivingRound());
    list.add(present_livingRound);
    if (present_livingRound)
      list.add(livingRound);

    boolean present_toStartRound = true && (isSetToStartRound());
    list.add(present_toStartRound);
    if (present_toStartRound)
      list.add(toStartRound);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResourceContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverImage()).compareTo(other.isSetCoverImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverImage, other.coverImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagIds()).compareTo(other.isSetTagIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIds, other.tagIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubType()).compareTo(other.isSetSubType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subType, other.subType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataSearch()).compareTo(other.isSetDataSearch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSearch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSearch, other.dataSearch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentItems()).compareTo(other.isSetContentItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentItems, other.contentItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowTitle()).compareTo(other.isSetShowTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showTitle, other.showTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetH5Url()).compareTo(other.isSetH5Url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetH5Url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.h5Url, other.h5Url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherContent()).compareTo(other.isSetOtherContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherContent, other.otherContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileImg()).compareTo(other.isSetMobileImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileImg, other.mobileImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIpadImg()).compareTo(other.isSetIpadImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpadImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipadImg, other.ipadImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTvImg()).compareTo(other.isSetTvImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTvImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tvImg, other.tvImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDurationTime()).compareTo(other.isSetDurationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDurationTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.durationTime, other.durationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLevel()).compareTo(other.isSetStarLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLevel, other.starLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeOrder()).compareTo(other.isSetTimeOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeOrder, other.timeOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdRound()).compareTo(other.isSetOverdRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdRound, other.overdRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLivingRound()).compareTo(other.isSetLivingRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLivingRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.livingRound, other.livingRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToStartRound()).compareTo(other.isSetToStartRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToStartRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toStartRound, other.toStartRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResourceContent(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceId:");
    sb.append(this.resourceId);
    first = false;
    if (isSetItemId()) {
      if (!first) sb.append(", ");
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetCoverImage()) {
      if (!first) sb.append(", ");
      sb.append("coverImage:");
      if (this.coverImage == null) {
        sb.append("null");
      } else {
        sb.append(this.coverImage);
      }
      first = false;
    }
    if (isSetLinks()) {
      if (!first) sb.append(", ");
      sb.append("links:");
      if (this.links == null) {
        sb.append("null");
      } else {
        sb.append(this.links);
      }
      first = false;
    }
    if (isSetTagIds()) {
      if (!first) sb.append(", ");
      sb.append("tagIds:");
      if (this.tagIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tagIds);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetSubType()) {
      if (!first) sb.append(", ");
      sb.append("subType:");
      if (this.subType == null) {
        sb.append("null");
      } else {
        sb.append(this.subType);
      }
      first = false;
    }
    if (isSetDataSearch()) {
      if (!first) sb.append(", ");
      sb.append("dataSearch:");
      if (this.dataSearch == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSearch);
      }
      first = false;
    }
    if (isSetContentItems()) {
      if (!first) sb.append(", ");
      sb.append("contentItems:");
      if (this.contentItems == null) {
        sb.append("null");
      } else {
        sb.append(this.contentItems);
      }
      first = false;
    }
    if (isSetShowTitle()) {
      if (!first) sb.append(", ");
      sb.append("showTitle:");
      sb.append(this.showTitle);
      first = false;
    }
    if (isSetH5Url()) {
      if (!first) sb.append(", ");
      sb.append("h5Url:");
      if (this.h5Url == null) {
        sb.append("null");
      } else {
        sb.append(this.h5Url);
      }
      first = false;
    }
    if (isSetOtherContent()) {
      if (!first) sb.append(", ");
      sb.append("otherContent:");
      if (this.otherContent == null) {
        sb.append("null");
      } else {
        sb.append(this.otherContent);
      }
      first = false;
    }
    if (isSetMobileImg()) {
      if (!first) sb.append(", ");
      sb.append("mobileImg:");
      if (this.mobileImg == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileImg);
      }
      first = false;
    }
    if (isSetIpadImg()) {
      if (!first) sb.append(", ");
      sb.append("ipadImg:");
      if (this.ipadImg == null) {
        sb.append("null");
      } else {
        sb.append(this.ipadImg);
      }
      first = false;
    }
    if (isSetTvImg()) {
      if (!first) sb.append(", ");
      sb.append("tvImg:");
      if (this.tvImg == null) {
        sb.append("null");
      } else {
        sb.append(this.tvImg);
      }
      first = false;
    }
    if (isSetDurationTime()) {
      if (!first) sb.append(", ");
      sb.append("durationTime:");
      sb.append(this.durationTime);
      first = false;
    }
    if (isSetStarLevel()) {
      if (!first) sb.append(", ");
      sb.append("starLevel:");
      sb.append(this.starLevel);
      first = false;
    }
    if (isSetTimeOrder()) {
      if (!first) sb.append(", ");
      sb.append("timeOrder:");
      sb.append(this.timeOrder);
      first = false;
    }
    if (isSetOverdRound()) {
      if (!first) sb.append(", ");
      sb.append("overdRound:");
      sb.append(this.overdRound);
      first = false;
    }
    if (isSetLivingRound()) {
      if (!first) sb.append(", ");
      sb.append("livingRound:");
      sb.append(this.livingRound);
      first = false;
    }
    if (isSetToStartRound()) {
      if (!first) sb.append(", ");
      sb.append("toStartRound:");
      sb.append(this.toStartRound);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceContentStandardSchemeFactory implements SchemeFactory {
    public TResourceContentStandardScheme getScheme() {
      return new TResourceContentStandardScheme();
    }
  }

  private static class TResourceContentStandardScheme extends StandardScheme<TResourceContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResourceContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resourceId = iprot.readI64();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemId = iprot.readString();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COVER_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.coverImage = new HashMap<String,String>(2*_map24.size);
                String _key25;
                String _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  _val26 = iprot.readString();
                  struct.coverImage.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setCoverImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.links = new ArrayList<TResourceLink>(_list28.size);
                TResourceLink _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = new TResourceLink();
                  _elem29.read(iprot);
                  struct.links.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.tagIds = new ArrayList<Long>(_list31.size);
                long _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readI64();
                  struct.tagIds.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setTagIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbc.api.dto.ResourceItemType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subType = com.lesports.qmt.sbc.api.dto.ResourceItemType.findByValue(iprot.readI32());
              struct.setSubTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DATA_SEARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.dataSearch = new ArrayList<ResourceItemType>(_list34.size);
                ResourceItemType _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = com.lesports.qmt.sbc.api.dto.ResourceItemType.findByValue(iprot.readI32());
                  struct.dataSearch.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setDataSearchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CONTENT_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                struct.contentItems = new ArrayList<TContentItem>(_list37.size);
                TContentItem _elem38;
                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                {
                  _elem38 = new TContentItem();
                  _elem38.read(iprot);
                  struct.contentItems.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setContentItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHOW_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showTitle = iprot.readBool();
              struct.setShowTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // H5_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.h5Url = iprot.readString();
              struct.setH5UrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OTHER_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherContent = iprot.readString();
              struct.setOtherContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MOBILE_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileImg = iprot.readString();
              struct.setMobileImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IPAD_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipadImg = iprot.readString();
              struct.setIpadImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TV_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tvImg = iprot.readString();
              struct.setTvImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // DURATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.durationTime = iprot.readI32();
              struct.setDurationTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // STAR_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.starLevel = iprot.readI32();
              struct.setStarLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TIME_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeOrder = iprot.readI32();
              struct.setTimeOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OVERD_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdRound = iprot.readI32();
              struct.setOverdRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LIVING_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.livingRound = iprot.readI32();
              struct.setLivingRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TO_START_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.toStartRound = iprot.readI32();
              struct.setToStartRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResourceContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
      oprot.writeI64(struct.resourceId);
      oprot.writeFieldEnd();
      if (struct.itemId != null) {
        if (struct.isSetItemId()) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coverImage != null) {
        if (struct.isSetCoverImage()) {
          oprot.writeFieldBegin(COVER_IMAGE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.coverImage.size()));
            for (Map.Entry<String, String> _iter40 : struct.coverImage.entrySet())
            {
              oprot.writeString(_iter40.getKey());
              oprot.writeString(_iter40.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.links != null) {
        if (struct.isSetLinks()) {
          oprot.writeFieldBegin(LINKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.links.size()));
            for (TResourceLink _iter41 : struct.links)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tagIds != null) {
        if (struct.isSetTagIds()) {
          oprot.writeFieldBegin(TAG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tagIds.size()));
            for (long _iter42 : struct.tagIds)
            {
              oprot.writeI64(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.subType != null) {
        if (struct.isSetSubType()) {
          oprot.writeFieldBegin(SUB_TYPE_FIELD_DESC);
          oprot.writeI32(struct.subType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataSearch != null) {
        if (struct.isSetDataSearch()) {
          oprot.writeFieldBegin(DATA_SEARCH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dataSearch.size()));
            for (ResourceItemType _iter43 : struct.dataSearch)
            {
              oprot.writeI32(_iter43.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.contentItems != null) {
        if (struct.isSetContentItems()) {
          oprot.writeFieldBegin(CONTENT_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contentItems.size()));
            for (TContentItem _iter44 : struct.contentItems)
            {
              _iter44.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetShowTitle()) {
        oprot.writeFieldBegin(SHOW_TITLE_FIELD_DESC);
        oprot.writeBool(struct.showTitle);
        oprot.writeFieldEnd();
      }
      if (struct.h5Url != null) {
        if (struct.isSetH5Url()) {
          oprot.writeFieldBegin(H5_URL_FIELD_DESC);
          oprot.writeString(struct.h5Url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.otherContent != null) {
        if (struct.isSetOtherContent()) {
          oprot.writeFieldBegin(OTHER_CONTENT_FIELD_DESC);
          oprot.writeString(struct.otherContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileImg != null) {
        if (struct.isSetMobileImg()) {
          oprot.writeFieldBegin(MOBILE_IMG_FIELD_DESC);
          oprot.writeString(struct.mobileImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ipadImg != null) {
        if (struct.isSetIpadImg()) {
          oprot.writeFieldBegin(IPAD_IMG_FIELD_DESC);
          oprot.writeString(struct.ipadImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tvImg != null) {
        if (struct.isSetTvImg()) {
          oprot.writeFieldBegin(TV_IMG_FIELD_DESC);
          oprot.writeString(struct.tvImg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDurationTime()) {
        oprot.writeFieldBegin(DURATION_TIME_FIELD_DESC);
        oprot.writeI32(struct.durationTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStarLevel()) {
        oprot.writeFieldBegin(STAR_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.starLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeOrder()) {
        oprot.writeFieldBegin(TIME_ORDER_FIELD_DESC);
        oprot.writeI32(struct.timeOrder);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOverdRound()) {
        oprot.writeFieldBegin(OVERD_ROUND_FIELD_DESC);
        oprot.writeI32(struct.overdRound);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLivingRound()) {
        oprot.writeFieldBegin(LIVING_ROUND_FIELD_DESC);
        oprot.writeI32(struct.livingRound);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToStartRound()) {
        oprot.writeFieldBegin(TO_START_ROUND_FIELD_DESC);
        oprot.writeI32(struct.toStartRound);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceContentTupleSchemeFactory implements SchemeFactory {
    public TResourceContentTupleScheme getScheme() {
      return new TResourceContentTupleScheme();
    }
  }

  private static class TResourceContentTupleScheme extends TupleScheme<TResourceContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResourceContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetResourceId()) {
        optionals.set(1);
      }
      if (struct.isSetItemId()) {
        optionals.set(2);
      }
      if (struct.isSetOrder()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetCoverImage()) {
        optionals.set(5);
      }
      if (struct.isSetLinks()) {
        optionals.set(6);
      }
      if (struct.isSetTagIds()) {
        optionals.set(7);
      }
      if (struct.isSetType()) {
        optionals.set(8);
      }
      if (struct.isSetSubType()) {
        optionals.set(9);
      }
      if (struct.isSetDataSearch()) {
        optionals.set(10);
      }
      if (struct.isSetContentItems()) {
        optionals.set(11);
      }
      if (struct.isSetShowTitle()) {
        optionals.set(12);
      }
      if (struct.isSetH5Url()) {
        optionals.set(13);
      }
      if (struct.isSetOtherContent()) {
        optionals.set(14);
      }
      if (struct.isSetMobileImg()) {
        optionals.set(15);
      }
      if (struct.isSetIpadImg()) {
        optionals.set(16);
      }
      if (struct.isSetTvImg()) {
        optionals.set(17);
      }
      if (struct.isSetDurationTime()) {
        optionals.set(18);
      }
      if (struct.isSetStarLevel()) {
        optionals.set(19);
      }
      if (struct.isSetTimeOrder()) {
        optionals.set(20);
      }
      if (struct.isSetOverdRound()) {
        optionals.set(21);
      }
      if (struct.isSetLivingRound()) {
        optionals.set(22);
      }
      if (struct.isSetToStartRound()) {
        optionals.set(23);
      }
      if (struct.isSetStartTime()) {
        optionals.set(24);
      }
      if (struct.isSetEndTime()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetResourceId()) {
        oprot.writeI64(struct.resourceId);
      }
      if (struct.isSetItemId()) {
        oprot.writeString(struct.itemId);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCoverImage()) {
        {
          oprot.writeI32(struct.coverImage.size());
          for (Map.Entry<String, String> _iter45 : struct.coverImage.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            oprot.writeString(_iter45.getValue());
          }
        }
      }
      if (struct.isSetLinks()) {
        {
          oprot.writeI32(struct.links.size());
          for (TResourceLink _iter46 : struct.links)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetTagIds()) {
        {
          oprot.writeI32(struct.tagIds.size());
          for (long _iter47 : struct.tagIds)
          {
            oprot.writeI64(_iter47);
          }
        }
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetSubType()) {
        oprot.writeI32(struct.subType.getValue());
      }
      if (struct.isSetDataSearch()) {
        {
          oprot.writeI32(struct.dataSearch.size());
          for (ResourceItemType _iter48 : struct.dataSearch)
          {
            oprot.writeI32(_iter48.getValue());
          }
        }
      }
      if (struct.isSetContentItems()) {
        {
          oprot.writeI32(struct.contentItems.size());
          for (TContentItem _iter49 : struct.contentItems)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetShowTitle()) {
        oprot.writeBool(struct.showTitle);
      }
      if (struct.isSetH5Url()) {
        oprot.writeString(struct.h5Url);
      }
      if (struct.isSetOtherContent()) {
        oprot.writeString(struct.otherContent);
      }
      if (struct.isSetMobileImg()) {
        oprot.writeString(struct.mobileImg);
      }
      if (struct.isSetIpadImg()) {
        oprot.writeString(struct.ipadImg);
      }
      if (struct.isSetTvImg()) {
        oprot.writeString(struct.tvImg);
      }
      if (struct.isSetDurationTime()) {
        oprot.writeI32(struct.durationTime);
      }
      if (struct.isSetStarLevel()) {
        oprot.writeI32(struct.starLevel);
      }
      if (struct.isSetTimeOrder()) {
        oprot.writeI32(struct.timeOrder);
      }
      if (struct.isSetOverdRound()) {
        oprot.writeI32(struct.overdRound);
      }
      if (struct.isSetLivingRound()) {
        oprot.writeI32(struct.livingRound);
      }
      if (struct.isSetToStartRound()) {
        oprot.writeI32(struct.toStartRound);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResourceContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceId = iprot.readI64();
        struct.setResourceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemId = iprot.readString();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.coverImage = new HashMap<String,String>(2*_map50.size);
          String _key51;
          String _val52;
          for (int _i53 = 0; _i53 < _map50.size; ++_i53)
          {
            _key51 = iprot.readString();
            _val52 = iprot.readString();
            struct.coverImage.put(_key51, _val52);
          }
        }
        struct.setCoverImageIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.links = new ArrayList<TResourceLink>(_list54.size);
          TResourceLink _elem55;
          for (int _i56 = 0; _i56 < _list54.size; ++_i56)
          {
            _elem55 = new TResourceLink();
            _elem55.read(iprot);
            struct.links.add(_elem55);
          }
        }
        struct.setLinksIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tagIds = new ArrayList<Long>(_list57.size);
          long _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = iprot.readI64();
            struct.tagIds.add(_elem58);
          }
        }
        struct.setTagIdsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.type = com.lesports.qmt.sbc.api.dto.ResourceItemType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.subType = com.lesports.qmt.sbc.api.dto.ResourceItemType.findByValue(iprot.readI32());
        struct.setSubTypeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dataSearch = new ArrayList<ResourceItemType>(_list60.size);
          ResourceItemType _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = com.lesports.qmt.sbc.api.dto.ResourceItemType.findByValue(iprot.readI32());
            struct.dataSearch.add(_elem61);
          }
        }
        struct.setDataSearchIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contentItems = new ArrayList<TContentItem>(_list63.size);
          TContentItem _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = new TContentItem();
            _elem64.read(iprot);
            struct.contentItems.add(_elem64);
          }
        }
        struct.setContentItemsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.showTitle = iprot.readBool();
        struct.setShowTitleIsSet(true);
      }
      if (incoming.get(13)) {
        struct.h5Url = iprot.readString();
        struct.setH5UrlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.otherContent = iprot.readString();
        struct.setOtherContentIsSet(true);
      }
      if (incoming.get(15)) {
        struct.mobileImg = iprot.readString();
        struct.setMobileImgIsSet(true);
      }
      if (incoming.get(16)) {
        struct.ipadImg = iprot.readString();
        struct.setIpadImgIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tvImg = iprot.readString();
        struct.setTvImgIsSet(true);
      }
      if (incoming.get(18)) {
        struct.durationTime = iprot.readI32();
        struct.setDurationTimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.starLevel = iprot.readI32();
        struct.setStarLevelIsSet(true);
      }
      if (incoming.get(20)) {
        struct.timeOrder = iprot.readI32();
        struct.setTimeOrderIsSet(true);
      }
      if (incoming.get(21)) {
        struct.overdRound = iprot.readI32();
        struct.setOverdRoundIsSet(true);
      }
      if (incoming.get(22)) {
        struct.livingRound = iprot.readI32();
        struct.setLivingRoundIsSet(true);
      }
      if (incoming.get(23)) {
        struct.toStartRound = iprot.readI32();
        struct.setToStartRoundIsSet(true);
      }
      if (incoming.get(24)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
    }
  }

}

