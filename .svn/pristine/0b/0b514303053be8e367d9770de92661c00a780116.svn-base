/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 取得某天的的赛事or节目
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetSomeDayEpisodesParam implements org.apache.thrift.TBase<GetSomeDayEpisodesParam, GetSomeDayEpisodesParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetSomeDayEpisodesParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSomeDayEpisodesParam");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cids", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField LIVE_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveTypeParam", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LIVE_SHOW_STATUS_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveShowStatusParam", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OCTOPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("octopus", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField EPISODE_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("episodeTypeParam", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SORT_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("sortParam", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetSomeDayEpisodesParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetSomeDayEpisodesParamTupleSchemeFactory());
  }

  private String date; // optional
  private long gameType; // optional
  private List<Long> cids; // optional
  private LiveTypeParam liveTypeParam; // optional
  private LiveShowStatusParam liveShowStatusParam; // optional
  private String endDate; // optional
  private boolean octopus; // optional
  private EpisodeTypeParam episodeTypeParam; // optional
  private SortParam sortParam; // optional
  private int timezone; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)1, "date"),
    GAME_TYPE((short)2, "gameType"),
    CIDS((short)3, "cids"),
    /**
     * 
     * @see LiveTypeParam
     */
    LIVE_TYPE_PARAM((short)4, "liveTypeParam"),
    /**
     * 
     * @see LiveShowStatusParam
     */
    LIVE_SHOW_STATUS_PARAM((short)6, "liveShowStatusParam"),
    END_DATE((short)7, "endDate"),
    OCTOPUS((short)8, "octopus"),
    /**
     * 
     * @see EpisodeTypeParam
     */
    EPISODE_TYPE_PARAM((short)9, "episodeTypeParam"),
    /**
     * 
     * @see SortParam
     */
    SORT_PARAM((short)10, "sortParam"),
    TIMEZONE((short)11, "timezone");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE
          return DATE;
        case 2: // GAME_TYPE
          return GAME_TYPE;
        case 3: // CIDS
          return CIDS;
        case 4: // LIVE_TYPE_PARAM
          return LIVE_TYPE_PARAM;
        case 6: // LIVE_SHOW_STATUS_PARAM
          return LIVE_SHOW_STATUS_PARAM;
        case 7: // END_DATE
          return END_DATE;
        case 8: // OCTOPUS
          return OCTOPUS;
        case 9: // EPISODE_TYPE_PARAM
          return EPISODE_TYPE_PARAM;
        case 10: // SORT_PARAM
          return SORT_PARAM;
        case 11: // TIMEZONE
          return TIMEZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMETYPE_ISSET_ID = 0;
  private static final int __OCTOPUS_ISSET_ID = 1;
  private static final int __TIMEZONE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATE,_Fields.GAME_TYPE,_Fields.CIDS,_Fields.LIVE_TYPE_PARAM,_Fields.LIVE_SHOW_STATUS_PARAM,_Fields.END_DATE,_Fields.OCTOPUS,_Fields.EPISODE_TYPE_PARAM,_Fields.SORT_PARAM,_Fields.TIMEZONE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CIDS, new org.apache.thrift.meta_data.FieldMetaData("cids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LIVE_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveTypeParam.class)));
    tmpMap.put(_Fields.LIVE_SHOW_STATUS_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveShowStatusParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveShowStatusParam.class)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCTOPUS, new org.apache.thrift.meta_data.FieldMetaData("octopus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EPISODE_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("episodeTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EpisodeTypeParam.class)));
    tmpMap.put(_Fields.SORT_PARAM, new org.apache.thrift.meta_data.FieldMetaData("sortParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SortParam.class)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSomeDayEpisodesParam.class, metaDataMap);
  }

  public GetSomeDayEpisodesParam() {
    this.octopus = false;

    this.timezone = 8;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSomeDayEpisodesParam(GetSomeDayEpisodesParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.gameType = other.gameType;
    if (other.isSetCids()) {
      List<Long> __this__cids = new ArrayList<Long>(other.cids);
      this.cids = __this__cids;
    }
    if (other.isSetLiveTypeParam()) {
      this.liveTypeParam = other.liveTypeParam;
    }
    if (other.isSetLiveShowStatusParam()) {
      this.liveShowStatusParam = other.liveShowStatusParam;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.octopus = other.octopus;
    if (other.isSetEpisodeTypeParam()) {
      this.episodeTypeParam = other.episodeTypeParam;
    }
    if (other.isSetSortParam()) {
      this.sortParam = other.sortParam;
    }
    this.timezone = other.timezone;
  }

  public GetSomeDayEpisodesParam deepCopy() {
    return new GetSomeDayEpisodesParam(this);
  }

  @Override
  public void clear() {
    this.date = null;
    setGameTypeIsSet(false);
    this.gameType = 0;
    this.cids = null;
    this.liveTypeParam = null;
    this.liveShowStatusParam = null;
    this.endDate = null;
    this.octopus = false;

    this.episodeTypeParam = null;
    this.sortParam = null;
    this.timezone = 8;

  }

  public String getDate() {
    return this.date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public long getGameType() {
    return this.gameType;
  }

  public void setGameType(long gameType) {
    this.gameType = gameType;
    setGameTypeIsSet(true);
  }

  public void unsetGameType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  public void setGameTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETYPE_ISSET_ID, value);
  }

  public int getCidsSize() {
    return (this.cids == null) ? 0 : this.cids.size();
  }

  public java.util.Iterator<Long> getCidsIterator() {
    return (this.cids == null) ? null : this.cids.iterator();
  }

  public void addToCids(long elem) {
    if (this.cids == null) {
      this.cids = new ArrayList<Long>();
    }
    this.cids.add(elem);
  }

  public List<Long> getCids() {
    return this.cids;
  }

  public void setCids(List<Long> cids) {
    this.cids = cids;
  }

  public void unsetCids() {
    this.cids = null;
  }

  /** Returns true if field cids is set (has been assigned a value) and false otherwise */
  public boolean isSetCids() {
    return this.cids != null;
  }

  public void setCidsIsSet(boolean value) {
    if (!value) {
      this.cids = null;
    }
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public LiveTypeParam getLiveTypeParam() {
    return this.liveTypeParam;
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public void setLiveTypeParam(LiveTypeParam liveTypeParam) {
    this.liveTypeParam = liveTypeParam;
  }

  public void unsetLiveTypeParam() {
    this.liveTypeParam = null;
  }

  /** Returns true if field liveTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveTypeParam() {
    return this.liveTypeParam != null;
  }

  public void setLiveTypeParamIsSet(boolean value) {
    if (!value) {
      this.liveTypeParam = null;
    }
  }

  /**
   * 
   * @see LiveShowStatusParam
   */
  public LiveShowStatusParam getLiveShowStatusParam() {
    return this.liveShowStatusParam;
  }

  /**
   * 
   * @see LiveShowStatusParam
   */
  public void setLiveShowStatusParam(LiveShowStatusParam liveShowStatusParam) {
    this.liveShowStatusParam = liveShowStatusParam;
  }

  public void unsetLiveShowStatusParam() {
    this.liveShowStatusParam = null;
  }

  /** Returns true if field liveShowStatusParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveShowStatusParam() {
    return this.liveShowStatusParam != null;
  }

  public void setLiveShowStatusParamIsSet(boolean value) {
    if (!value) {
      this.liveShowStatusParam = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public boolean isOctopus() {
    return this.octopus;
  }

  public void setOctopus(boolean octopus) {
    this.octopus = octopus;
    setOctopusIsSet(true);
  }

  public void unsetOctopus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCTOPUS_ISSET_ID);
  }

  /** Returns true if field octopus is set (has been assigned a value) and false otherwise */
  public boolean isSetOctopus() {
    return EncodingUtils.testBit(__isset_bitfield, __OCTOPUS_ISSET_ID);
  }

  public void setOctopusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCTOPUS_ISSET_ID, value);
  }

  /**
   * 
   * @see EpisodeTypeParam
   */
  public EpisodeTypeParam getEpisodeTypeParam() {
    return this.episodeTypeParam;
  }

  /**
   * 
   * @see EpisodeTypeParam
   */
  public void setEpisodeTypeParam(EpisodeTypeParam episodeTypeParam) {
    this.episodeTypeParam = episodeTypeParam;
  }

  public void unsetEpisodeTypeParam() {
    this.episodeTypeParam = null;
  }

  /** Returns true if field episodeTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetEpisodeTypeParam() {
    return this.episodeTypeParam != null;
  }

  public void setEpisodeTypeParamIsSet(boolean value) {
    if (!value) {
      this.episodeTypeParam = null;
    }
  }

  /**
   * 
   * @see SortParam
   */
  public SortParam getSortParam() {
    return this.sortParam;
  }

  /**
   * 
   * @see SortParam
   */
  public void setSortParam(SortParam sortParam) {
    this.sortParam = sortParam;
  }

  public void unsetSortParam() {
    this.sortParam = null;
  }

  /** Returns true if field sortParam is set (has been assigned a value) and false otherwise */
  public boolean isSetSortParam() {
    return this.sortParam != null;
  }

  public void setSortParamIsSet(boolean value) {
    if (!value) {
      this.sortParam = null;
    }
  }

  public int getTimezone() {
    return this.timezone;
  }

  public void setTimezone(int timezone) {
    this.timezone = timezone;
    setTimezoneIsSet(true);
  }

  public void unsetTimezone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEZONE_ISSET_ID);
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEZONE_ISSET_ID);
  }

  public void setTimezoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEZONE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case GAME_TYPE:
      if (value == null) {
        unsetGameType();
      } else {
        setGameType((Long)value);
      }
      break;

    case CIDS:
      if (value == null) {
        unsetCids();
      } else {
        setCids((List<Long>)value);
      }
      break;

    case LIVE_TYPE_PARAM:
      if (value == null) {
        unsetLiveTypeParam();
      } else {
        setLiveTypeParam((LiveTypeParam)value);
      }
      break;

    case LIVE_SHOW_STATUS_PARAM:
      if (value == null) {
        unsetLiveShowStatusParam();
      } else {
        setLiveShowStatusParam((LiveShowStatusParam)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case OCTOPUS:
      if (value == null) {
        unsetOctopus();
      } else {
        setOctopus((Boolean)value);
      }
      break;

    case EPISODE_TYPE_PARAM:
      if (value == null) {
        unsetEpisodeTypeParam();
      } else {
        setEpisodeTypeParam((EpisodeTypeParam)value);
      }
      break;

    case SORT_PARAM:
      if (value == null) {
        unsetSortParam();
      } else {
        setSortParam((SortParam)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return getDate();

    case GAME_TYPE:
      return Long.valueOf(getGameType());

    case CIDS:
      return getCids();

    case LIVE_TYPE_PARAM:
      return getLiveTypeParam();

    case LIVE_SHOW_STATUS_PARAM:
      return getLiveShowStatusParam();

    case END_DATE:
      return getEndDate();

    case OCTOPUS:
      return Boolean.valueOf(isOctopus());

    case EPISODE_TYPE_PARAM:
      return getEpisodeTypeParam();

    case SORT_PARAM:
      return getSortParam();

    case TIMEZONE:
      return Integer.valueOf(getTimezone());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return isSetDate();
    case GAME_TYPE:
      return isSetGameType();
    case CIDS:
      return isSetCids();
    case LIVE_TYPE_PARAM:
      return isSetLiveTypeParam();
    case LIVE_SHOW_STATUS_PARAM:
      return isSetLiveShowStatusParam();
    case END_DATE:
      return isSetEndDate();
    case OCTOPUS:
      return isSetOctopus();
    case EPISODE_TYPE_PARAM:
      return isSetEpisodeTypeParam();
    case SORT_PARAM:
      return isSetSortParam();
    case TIMEZONE:
      return isSetTimezone();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSomeDayEpisodesParam)
      return this.equals((GetSomeDayEpisodesParam)that);
    return false;
  }

  public boolean equals(GetSomeDayEpisodesParam that) {
    if (that == null)
      return false;

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_gameType = true && this.isSetGameType();
    boolean that_present_gameType = true && that.isSetGameType();
    if (this_present_gameType || that_present_gameType) {
      if (!(this_present_gameType && that_present_gameType))
        return false;
      if (this.gameType != that.gameType)
        return false;
    }

    boolean this_present_cids = true && this.isSetCids();
    boolean that_present_cids = true && that.isSetCids();
    if (this_present_cids || that_present_cids) {
      if (!(this_present_cids && that_present_cids))
        return false;
      if (!this.cids.equals(that.cids))
        return false;
    }

    boolean this_present_liveTypeParam = true && this.isSetLiveTypeParam();
    boolean that_present_liveTypeParam = true && that.isSetLiveTypeParam();
    if (this_present_liveTypeParam || that_present_liveTypeParam) {
      if (!(this_present_liveTypeParam && that_present_liveTypeParam))
        return false;
      if (!this.liveTypeParam.equals(that.liveTypeParam))
        return false;
    }

    boolean this_present_liveShowStatusParam = true && this.isSetLiveShowStatusParam();
    boolean that_present_liveShowStatusParam = true && that.isSetLiveShowStatusParam();
    if (this_present_liveShowStatusParam || that_present_liveShowStatusParam) {
      if (!(this_present_liveShowStatusParam && that_present_liveShowStatusParam))
        return false;
      if (!this.liveShowStatusParam.equals(that.liveShowStatusParam))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_octopus = true && this.isSetOctopus();
    boolean that_present_octopus = true && that.isSetOctopus();
    if (this_present_octopus || that_present_octopus) {
      if (!(this_present_octopus && that_present_octopus))
        return false;
      if (this.octopus != that.octopus)
        return false;
    }

    boolean this_present_episodeTypeParam = true && this.isSetEpisodeTypeParam();
    boolean that_present_episodeTypeParam = true && that.isSetEpisodeTypeParam();
    if (this_present_episodeTypeParam || that_present_episodeTypeParam) {
      if (!(this_present_episodeTypeParam && that_present_episodeTypeParam))
        return false;
      if (!this.episodeTypeParam.equals(that.episodeTypeParam))
        return false;
    }

    boolean this_present_sortParam = true && this.isSetSortParam();
    boolean that_present_sortParam = true && that.isSetSortParam();
    if (this_present_sortParam || that_present_sortParam) {
      if (!(this_present_sortParam && that_present_sortParam))
        return false;
      if (!this.sortParam.equals(that.sortParam))
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (this.timezone != that.timezone)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_gameType = true && (isSetGameType());
    list.add(present_gameType);
    if (present_gameType)
      list.add(gameType);

    boolean present_cids = true && (isSetCids());
    list.add(present_cids);
    if (present_cids)
      list.add(cids);

    boolean present_liveTypeParam = true && (isSetLiveTypeParam());
    list.add(present_liveTypeParam);
    if (present_liveTypeParam)
      list.add(liveTypeParam.getValue());

    boolean present_liveShowStatusParam = true && (isSetLiveShowStatusParam());
    list.add(present_liveShowStatusParam);
    if (present_liveShowStatusParam)
      list.add(liveShowStatusParam.getValue());

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_octopus = true && (isSetOctopus());
    list.add(present_octopus);
    if (present_octopus)
      list.add(octopus);

    boolean present_episodeTypeParam = true && (isSetEpisodeTypeParam());
    list.add(present_episodeTypeParam);
    if (present_episodeTypeParam)
      list.add(episodeTypeParam.getValue());

    boolean present_sortParam = true && (isSetSortParam());
    list.add(present_sortParam);
    if (present_sortParam)
      list.add(sortParam.getValue());

    boolean present_timezone = true && (isSetTimezone());
    list.add(present_timezone);
    if (present_timezone)
      list.add(timezone);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetSomeDayEpisodesParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameType()).compareTo(other.isSetGameType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, other.gameType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCids()).compareTo(other.isSetCids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cids, other.cids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveTypeParam()).compareTo(other.isSetLiveTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveTypeParam, other.liveTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveShowStatusParam()).compareTo(other.isSetLiveShowStatusParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveShowStatusParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveShowStatusParam, other.liveShowStatusParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOctopus()).compareTo(other.isSetOctopus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOctopus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.octopus, other.octopus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEpisodeTypeParam()).compareTo(other.isSetEpisodeTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpisodeTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.episodeTypeParam, other.episodeTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortParam()).compareTo(other.isSetSortParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortParam, other.sortParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimezone()).compareTo(other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetSomeDayEpisodesParam(");
    boolean first = true;

    if (isSetDate()) {
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetGameType()) {
      if (!first) sb.append(", ");
      sb.append("gameType:");
      sb.append(this.gameType);
      first = false;
    }
    if (isSetCids()) {
      if (!first) sb.append(", ");
      sb.append("cids:");
      if (this.cids == null) {
        sb.append("null");
      } else {
        sb.append(this.cids);
      }
      first = false;
    }
    if (isSetLiveTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("liveTypeParam:");
      if (this.liveTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveTypeParam);
      }
      first = false;
    }
    if (isSetLiveShowStatusParam()) {
      if (!first) sb.append(", ");
      sb.append("liveShowStatusParam:");
      if (this.liveShowStatusParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveShowStatusParam);
      }
      first = false;
    }
    if (isSetEndDate()) {
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
    }
    if (isSetOctopus()) {
      if (!first) sb.append(", ");
      sb.append("octopus:");
      sb.append(this.octopus);
      first = false;
    }
    if (isSetEpisodeTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("episodeTypeParam:");
      if (this.episodeTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.episodeTypeParam);
      }
      first = false;
    }
    if (isSetSortParam()) {
      if (!first) sb.append(", ");
      sb.append("sortParam:");
      if (this.sortParam == null) {
        sb.append("null");
      } else {
        sb.append(this.sortParam);
      }
      first = false;
    }
    if (isSetTimezone()) {
      if (!first) sb.append(", ");
      sb.append("timezone:");
      sb.append(this.timezone);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetSomeDayEpisodesParamStandardSchemeFactory implements SchemeFactory {
    public GetSomeDayEpisodesParamStandardScheme getScheme() {
      return new GetSomeDayEpisodesParamStandardScheme();
    }
  }

  private static class GetSomeDayEpisodesParamStandardScheme extends StandardScheme<GetSomeDayEpisodesParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetSomeDayEpisodesParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameType = iprot.readI64();
              struct.setGameTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.cids = new ArrayList<Long>(_list40.size);
                long _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readI64();
                  struct.cids.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setCidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIVE_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
              struct.setLiveTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIVE_SHOW_STATUS_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveShowStatusParam = com.lesports.qmt.sbc.api.service.LiveShowStatusParam.findByValue(iprot.readI32());
              struct.setLiveShowStatusParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OCTOPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.octopus = iprot.readBool();
              struct.setOctopusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EPISODE_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.episodeTypeParam = com.lesports.qmt.sbc.api.service.EpisodeTypeParam.findByValue(iprot.readI32());
              struct.setEpisodeTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SORT_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortParam = com.lesports.qmt.sbc.api.service.SortParam.findByValue(iprot.readI32());
              struct.setSortParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timezone = iprot.readI32();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetSomeDayEpisodesParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGameType()) {
        oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
        oprot.writeI64(struct.gameType);
        oprot.writeFieldEnd();
      }
      if (struct.cids != null) {
        if (struct.isSetCids()) {
          oprot.writeFieldBegin(CIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.cids.size()));
            for (long _iter43 : struct.cids)
            {
              oprot.writeI64(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.liveTypeParam != null) {
        if (struct.isSetLiveTypeParam()) {
          oprot.writeFieldBegin(LIVE_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.liveShowStatusParam != null) {
        if (struct.isSetLiveShowStatusParam()) {
          oprot.writeFieldBegin(LIVE_SHOW_STATUS_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveShowStatusParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.endDate != null) {
        if (struct.isSetEndDate()) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOctopus()) {
        oprot.writeFieldBegin(OCTOPUS_FIELD_DESC);
        oprot.writeBool(struct.octopus);
        oprot.writeFieldEnd();
      }
      if (struct.episodeTypeParam != null) {
        if (struct.isSetEpisodeTypeParam()) {
          oprot.writeFieldBegin(EPISODE_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.episodeTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortParam != null) {
        if (struct.isSetSortParam()) {
          oprot.writeFieldBegin(SORT_PARAM_FIELD_DESC);
          oprot.writeI32(struct.sortParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimezone()) {
        oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
        oprot.writeI32(struct.timezone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetSomeDayEpisodesParamTupleSchemeFactory implements SchemeFactory {
    public GetSomeDayEpisodesParamTupleScheme getScheme() {
      return new GetSomeDayEpisodesParamTupleScheme();
    }
  }

  private static class GetSomeDayEpisodesParamTupleScheme extends TupleScheme<GetSomeDayEpisodesParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetSomeDayEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDate()) {
        optionals.set(0);
      }
      if (struct.isSetGameType()) {
        optionals.set(1);
      }
      if (struct.isSetCids()) {
        optionals.set(2);
      }
      if (struct.isSetLiveTypeParam()) {
        optionals.set(3);
      }
      if (struct.isSetLiveShowStatusParam()) {
        optionals.set(4);
      }
      if (struct.isSetEndDate()) {
        optionals.set(5);
      }
      if (struct.isSetOctopus()) {
        optionals.set(6);
      }
      if (struct.isSetEpisodeTypeParam()) {
        optionals.set(7);
      }
      if (struct.isSetSortParam()) {
        optionals.set(8);
      }
      if (struct.isSetTimezone()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetGameType()) {
        oprot.writeI64(struct.gameType);
      }
      if (struct.isSetCids()) {
        {
          oprot.writeI32(struct.cids.size());
          for (long _iter44 : struct.cids)
          {
            oprot.writeI64(_iter44);
          }
        }
      }
      if (struct.isSetLiveTypeParam()) {
        oprot.writeI32(struct.liveTypeParam.getValue());
      }
      if (struct.isSetLiveShowStatusParam()) {
        oprot.writeI32(struct.liveShowStatusParam.getValue());
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetOctopus()) {
        oprot.writeBool(struct.octopus);
      }
      if (struct.isSetEpisodeTypeParam()) {
        oprot.writeI32(struct.episodeTypeParam.getValue());
      }
      if (struct.isSetSortParam()) {
        oprot.writeI32(struct.sortParam.getValue());
      }
      if (struct.isSetTimezone()) {
        oprot.writeI32(struct.timezone);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetSomeDayEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameType = iprot.readI64();
        struct.setGameTypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cids = new ArrayList<Long>(_list45.size);
          long _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI64();
            struct.cids.add(_elem46);
          }
        }
        struct.setCidsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
        struct.setLiveTypeParamIsSet(true);
      }
      if (incoming.get(4)) {
        struct.liveShowStatusParam = com.lesports.qmt.sbc.api.service.LiveShowStatusParam.findByValue(iprot.readI32());
        struct.setLiveShowStatusParamIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.octopus = iprot.readBool();
        struct.setOctopusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.episodeTypeParam = com.lesports.qmt.sbc.api.service.EpisodeTypeParam.findByValue(iprot.readI32());
        struct.setEpisodeTypeParamIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sortParam = com.lesports.qmt.sbc.api.service.SortParam.findByValue(iprot.readI32());
        struct.setSortParamIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timezone = iprot.readI32();
        struct.setTimezoneIsSet(true);
      }
    }
  }

}

