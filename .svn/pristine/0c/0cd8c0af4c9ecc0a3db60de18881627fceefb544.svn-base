/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.tlive.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-20")
public class TAnchor implements org.apache.thrift.TBase<TAnchor, TAnchor._Fields>, java.io.Serializable, Cloneable, Comparable<TAnchor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAnchor");

  private static final org.apache.thrift.protocol.TField ANCHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("anchorId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UP_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("upNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOWN_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("downNum", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAnchorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAnchorTupleSchemeFactory());
  }

  private long anchorId; // required
  private String name; // optional
  private String logo; // optional
  private com.lesports.qmt.tlive.api.common.AnchorRole role; // optional
  private int upNum; // optional
  private int downNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANCHOR_ID((short)1, "anchorId"),
    NAME((short)2, "name"),
    LOGO((short)3, "logo"),
    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.AnchorRole
     */
    ROLE((short)4, "role"),
    UP_NUM((short)5, "upNum"),
    DOWN_NUM((short)6, "downNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANCHOR_ID
          return ANCHOR_ID;
        case 2: // NAME
          return NAME;
        case 3: // LOGO
          return LOGO;
        case 4: // ROLE
          return ROLE;
        case 5: // UP_NUM
          return UP_NUM;
        case 6: // DOWN_NUM
          return DOWN_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANCHORID_ISSET_ID = 0;
  private static final int __UPNUM_ISSET_ID = 1;
  private static final int __DOWNNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.LOGO,_Fields.ROLE,_Fields.UP_NUM,_Fields.DOWN_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANCHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("anchorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.tlive.api.common.AnchorRole.class)));
    tmpMap.put(_Fields.UP_NUM, new org.apache.thrift.meta_data.FieldMetaData("upNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOWN_NUM, new org.apache.thrift.meta_data.FieldMetaData("downNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAnchor.class, metaDataMap);
  }

  public TAnchor() {
  }

  public TAnchor(
    long anchorId)
  {
    this();
    this.anchorId = anchorId;
    setAnchorIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAnchor(TAnchor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.anchorId = other.anchorId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    this.upNum = other.upNum;
    this.downNum = other.downNum;
  }

  public TAnchor deepCopy() {
    return new TAnchor(this);
  }

  @Override
  public void clear() {
    setAnchorIdIsSet(false);
    this.anchorId = 0;
    this.name = null;
    this.logo = null;
    this.role = null;
    setUpNumIsSet(false);
    this.upNum = 0;
    setDownNumIsSet(false);
    this.downNum = 0;
  }

  public long getAnchorId() {
    return this.anchorId;
  }

  public void setAnchorId(long anchorId) {
    this.anchorId = anchorId;
    setAnchorIdIsSet(true);
  }

  public void unsetAnchorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANCHORID_ISSET_ID);
  }

  /** Returns true if field anchorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnchorId() {
    return EncodingUtils.testBit(__isset_bitfield, __ANCHORID_ISSET_ID);
  }

  public void setAnchorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANCHORID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getLogo() {
    return this.logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.tlive.api.common.AnchorRole
   */
  public com.lesports.qmt.tlive.api.common.AnchorRole getRole() {
    return this.role;
  }

  /**
   * 
   * @see com.lesports.qmt.tlive.api.common.AnchorRole
   */
  public void setRole(com.lesports.qmt.tlive.api.common.AnchorRole role) {
    this.role = role;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public int getUpNum() {
    return this.upNum;
  }

  public void setUpNum(int upNum) {
    this.upNum = upNum;
    setUpNumIsSet(true);
  }

  public void unsetUpNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPNUM_ISSET_ID);
  }

  /** Returns true if field upNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUpNum() {
    return EncodingUtils.testBit(__isset_bitfield, __UPNUM_ISSET_ID);
  }

  public void setUpNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPNUM_ISSET_ID, value);
  }

  public int getDownNum() {
    return this.downNum;
  }

  public void setDownNum(int downNum) {
    this.downNum = downNum;
    setDownNumIsSet(true);
  }

  public void unsetDownNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOWNNUM_ISSET_ID);
  }

  /** Returns true if field downNum is set (has been assigned a value) and false otherwise */
  public boolean isSetDownNum() {
    return EncodingUtils.testBit(__isset_bitfield, __DOWNNUM_ISSET_ID);
  }

  public void setDownNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOWNNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANCHOR_ID:
      if (value == null) {
        unsetAnchorId();
      } else {
        setAnchorId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((com.lesports.qmt.tlive.api.common.AnchorRole)value);
      }
      break;

    case UP_NUM:
      if (value == null) {
        unsetUpNum();
      } else {
        setUpNum((Integer)value);
      }
      break;

    case DOWN_NUM:
      if (value == null) {
        unsetDownNum();
      } else {
        setDownNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANCHOR_ID:
      return Long.valueOf(getAnchorId());

    case NAME:
      return getName();

    case LOGO:
      return getLogo();

    case ROLE:
      return getRole();

    case UP_NUM:
      return Integer.valueOf(getUpNum());

    case DOWN_NUM:
      return Integer.valueOf(getDownNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANCHOR_ID:
      return isSetAnchorId();
    case NAME:
      return isSetName();
    case LOGO:
      return isSetLogo();
    case ROLE:
      return isSetRole();
    case UP_NUM:
      return isSetUpNum();
    case DOWN_NUM:
      return isSetDownNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAnchor)
      return this.equals((TAnchor)that);
    return false;
  }

  public boolean equals(TAnchor that) {
    if (that == null)
      return false;

    boolean this_present_anchorId = true;
    boolean that_present_anchorId = true;
    if (this_present_anchorId || that_present_anchorId) {
      if (!(this_present_anchorId && that_present_anchorId))
        return false;
      if (this.anchorId != that.anchorId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_upNum = true && this.isSetUpNum();
    boolean that_present_upNum = true && that.isSetUpNum();
    if (this_present_upNum || that_present_upNum) {
      if (!(this_present_upNum && that_present_upNum))
        return false;
      if (this.upNum != that.upNum)
        return false;
    }

    boolean this_present_downNum = true && this.isSetDownNum();
    boolean that_present_downNum = true && that.isSetDownNum();
    if (this_present_downNum || that_present_downNum) {
      if (!(this_present_downNum && that_present_downNum))
        return false;
      if (this.downNum != that.downNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_anchorId = true;
    list.add(present_anchorId);
    if (present_anchorId)
      list.add(anchorId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    boolean present_role = true && (isSetRole());
    list.add(present_role);
    if (present_role)
      list.add(role.getValue());

    boolean present_upNum = true && (isSetUpNum());
    list.add(present_upNum);
    if (present_upNum)
      list.add(upNum);

    boolean present_downNum = true && (isSetDownNum());
    list.add(present_downNum);
    if (present_downNum)
      list.add(downNum);

    return list.hashCode();
  }

  @Override
  public int compareTo(TAnchor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnchorId()).compareTo(other.isSetAnchorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnchorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchorId, other.anchorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpNum()).compareTo(other.isSetUpNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upNum, other.upNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownNum()).compareTo(other.isSetDownNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downNum, other.downNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAnchor(");
    boolean first = true;

    sb.append("anchorId:");
    sb.append(this.anchorId);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetLogo()) {
      if (!first) sb.append(", ");
      sb.append("logo:");
      if (this.logo == null) {
        sb.append("null");
      } else {
        sb.append(this.logo);
      }
      first = false;
    }
    if (isSetRole()) {
      if (!first) sb.append(", ");
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetUpNum()) {
      if (!first) sb.append(", ");
      sb.append("upNum:");
      sb.append(this.upNum);
      first = false;
    }
    if (isSetDownNum()) {
      if (!first) sb.append(", ");
      sb.append("downNum:");
      sb.append(this.downNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAnchorStandardSchemeFactory implements SchemeFactory {
    public TAnchorStandardScheme getScheme() {
      return new TAnchorStandardScheme();
    }
  }

  private static class TAnchorStandardScheme extends StandardScheme<TAnchor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAnchor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANCHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.anchorId = iprot.readI64();
              struct.setAnchorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.role = com.lesports.qmt.tlive.api.common.AnchorRole.findByValue(iprot.readI32());
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UP_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upNum = iprot.readI32();
              struct.setUpNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOWN_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.downNum = iprot.readI32();
              struct.setDownNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAnchor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANCHOR_ID_FIELD_DESC);
      oprot.writeI64(struct.anchorId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logo != null) {
        if (struct.isSetLogo()) {
          oprot.writeFieldBegin(LOGO_FIELD_DESC);
          oprot.writeString(struct.logo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeI32(struct.role.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUpNum()) {
        oprot.writeFieldBegin(UP_NUM_FIELD_DESC);
        oprot.writeI32(struct.upNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDownNum()) {
        oprot.writeFieldBegin(DOWN_NUM_FIELD_DESC);
        oprot.writeI32(struct.downNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAnchorTupleSchemeFactory implements SchemeFactory {
    public TAnchorTupleScheme getScheme() {
      return new TAnchorTupleScheme();
    }
  }

  private static class TAnchorTupleScheme extends TupleScheme<TAnchor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAnchor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnchorId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetLogo()) {
        optionals.set(2);
      }
      if (struct.isSetRole()) {
        optionals.set(3);
      }
      if (struct.isSetUpNum()) {
        optionals.set(4);
      }
      if (struct.isSetDownNum()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAnchorId()) {
        oprot.writeI64(struct.anchorId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetRole()) {
        oprot.writeI32(struct.role.getValue());
      }
      if (struct.isSetUpNum()) {
        oprot.writeI32(struct.upNum);
      }
      if (struct.isSetDownNum()) {
        oprot.writeI32(struct.downNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAnchor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.anchorId = iprot.readI64();
        struct.setAnchorIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.role = com.lesports.qmt.tlive.api.common.AnchorRole.findByValue(iprot.readI32());
        struct.setRoleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.upNum = iprot.readI32();
        struct.setUpNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.downNum = iprot.readI32();
        struct.setDownNumIsSet(true);
      }
    }
  }

}

