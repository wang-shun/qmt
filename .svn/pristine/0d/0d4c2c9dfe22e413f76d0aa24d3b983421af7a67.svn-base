/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取章鱼节目列表的请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetZhangyuEpisodesParam implements org.apache.thrift.TBase<GetZhangyuEpisodesParam, GetZhangyuEpisodesParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetZhangyuEpisodesParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetZhangyuEpisodesParam");

  private static final org.apache.thrift.protocol.TField MIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LIVE_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveTypeParam", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetZhangyuEpisodesParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetZhangyuEpisodesParamTupleSchemeFactory());
  }

  private List<Long> mids; // required
  private LiveTypeParam liveTypeParam; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MIDS((short)1, "mids"),
    /**
     * 
     * @see LiveTypeParam
     */
    LIVE_TYPE_PARAM((short)2, "liveTypeParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MIDS
          return MIDS;
        case 2: // LIVE_TYPE_PARAM
          return LIVE_TYPE_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LIVE_TYPE_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MIDS, new org.apache.thrift.meta_data.FieldMetaData("mids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LIVE_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveTypeParam.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetZhangyuEpisodesParam.class, metaDataMap);
  }

  public GetZhangyuEpisodesParam() {
  }

  public GetZhangyuEpisodesParam(
    List<Long> mids)
  {
    this();
    this.mids = mids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetZhangyuEpisodesParam(GetZhangyuEpisodesParam other) {
    if (other.isSetMids()) {
      List<Long> __this__mids = new ArrayList<Long>(other.mids);
      this.mids = __this__mids;
    }
    if (other.isSetLiveTypeParam()) {
      this.liveTypeParam = other.liveTypeParam;
    }
  }

  public GetZhangyuEpisodesParam deepCopy() {
    return new GetZhangyuEpisodesParam(this);
  }

  @Override
  public void clear() {
    this.mids = null;
    this.liveTypeParam = null;
  }

  public int getMidsSize() {
    return (this.mids == null) ? 0 : this.mids.size();
  }

  public java.util.Iterator<Long> getMidsIterator() {
    return (this.mids == null) ? null : this.mids.iterator();
  }

  public void addToMids(long elem) {
    if (this.mids == null) {
      this.mids = new ArrayList<Long>();
    }
    this.mids.add(elem);
  }

  public List<Long> getMids() {
    return this.mids;
  }

  public void setMids(List<Long> mids) {
    this.mids = mids;
  }

  public void unsetMids() {
    this.mids = null;
  }

  /** Returns true if field mids is set (has been assigned a value) and false otherwise */
  public boolean isSetMids() {
    return this.mids != null;
  }

  public void setMidsIsSet(boolean value) {
    if (!value) {
      this.mids = null;
    }
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public LiveTypeParam getLiveTypeParam() {
    return this.liveTypeParam;
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public void setLiveTypeParam(LiveTypeParam liveTypeParam) {
    this.liveTypeParam = liveTypeParam;
  }

  public void unsetLiveTypeParam() {
    this.liveTypeParam = null;
  }

  /** Returns true if field liveTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveTypeParam() {
    return this.liveTypeParam != null;
  }

  public void setLiveTypeParamIsSet(boolean value) {
    if (!value) {
      this.liveTypeParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MIDS:
      if (value == null) {
        unsetMids();
      } else {
        setMids((List<Long>)value);
      }
      break;

    case LIVE_TYPE_PARAM:
      if (value == null) {
        unsetLiveTypeParam();
      } else {
        setLiveTypeParam((LiveTypeParam)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MIDS:
      return getMids();

    case LIVE_TYPE_PARAM:
      return getLiveTypeParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MIDS:
      return isSetMids();
    case LIVE_TYPE_PARAM:
      return isSetLiveTypeParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetZhangyuEpisodesParam)
      return this.equals((GetZhangyuEpisodesParam)that);
    return false;
  }

  public boolean equals(GetZhangyuEpisodesParam that) {
    if (that == null)
      return false;

    boolean this_present_mids = true && this.isSetMids();
    boolean that_present_mids = true && that.isSetMids();
    if (this_present_mids || that_present_mids) {
      if (!(this_present_mids && that_present_mids))
        return false;
      if (!this.mids.equals(that.mids))
        return false;
    }

    boolean this_present_liveTypeParam = true && this.isSetLiveTypeParam();
    boolean that_present_liveTypeParam = true && that.isSetLiveTypeParam();
    if (this_present_liveTypeParam || that_present_liveTypeParam) {
      if (!(this_present_liveTypeParam && that_present_liveTypeParam))
        return false;
      if (!this.liveTypeParam.equals(that.liveTypeParam))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mids = true && (isSetMids());
    list.add(present_mids);
    if (present_mids)
      list.add(mids);

    boolean present_liveTypeParam = true && (isSetLiveTypeParam());
    list.add(present_liveTypeParam);
    if (present_liveTypeParam)
      list.add(liveTypeParam.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(GetZhangyuEpisodesParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMids()).compareTo(other.isSetMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mids, other.mids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveTypeParam()).compareTo(other.isSetLiveTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveTypeParam, other.liveTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetZhangyuEpisodesParam(");
    boolean first = true;

    sb.append("mids:");
    if (this.mids == null) {
      sb.append("null");
    } else {
      sb.append(this.mids);
    }
    first = false;
    if (isSetLiveTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("liveTypeParam:");
      if (this.liveTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveTypeParam);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetZhangyuEpisodesParamStandardSchemeFactory implements SchemeFactory {
    public GetZhangyuEpisodesParamStandardScheme getScheme() {
      return new GetZhangyuEpisodesParamStandardScheme();
    }
  }

  private static class GetZhangyuEpisodesParamStandardScheme extends StandardScheme<GetZhangyuEpisodesParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetZhangyuEpisodesParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.mids = new ArrayList<Long>(_list32.size);
                long _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI64();
                  struct.mids.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setMidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIVE_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
              struct.setLiveTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetZhangyuEpisodesParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.mids.size()));
          for (long _iter35 : struct.mids)
          {
            oprot.writeI64(_iter35);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.liveTypeParam != null) {
        if (struct.isSetLiveTypeParam()) {
          oprot.writeFieldBegin(LIVE_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetZhangyuEpisodesParamTupleSchemeFactory implements SchemeFactory {
    public GetZhangyuEpisodesParamTupleScheme getScheme() {
      return new GetZhangyuEpisodesParamTupleScheme();
    }
  }

  private static class GetZhangyuEpisodesParamTupleScheme extends TupleScheme<GetZhangyuEpisodesParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetZhangyuEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMids()) {
        optionals.set(0);
      }
      if (struct.isSetLiveTypeParam()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMids()) {
        {
          oprot.writeI32(struct.mids.size());
          for (long _iter36 : struct.mids)
          {
            oprot.writeI64(_iter36);
          }
        }
      }
      if (struct.isSetLiveTypeParam()) {
        oprot.writeI32(struct.liveTypeParam.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetZhangyuEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mids = new ArrayList<Long>(_list37.size);
          long _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readI64();
            struct.mids.add(_elem38);
          }
        }
        struct.setMidsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
        struct.setLiveTypeParamIsSet(true);
      }
    }
  }

}

