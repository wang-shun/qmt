/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TTopList implements org.apache.thrift.TBase<TTopList, TTopList._Fields>, java.io.Serializable, Cloneable, Comparable<TTopList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTopList");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEASON_FIELD_DESC = new org.apache.thrift.protocol.TField("season", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUBSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("substation", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("round", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCNames", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TYPE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTypeNames", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDesc", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTopListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTopListTupleSchemeFactory());
  }

  private long id; // required
  private long cid; // optional
  private String cname; // optional
  private long csid; // optional
  private String season; // optional
  private long type; // optional
  private String typeName; // optional
  private String substation; // optional
  private String round; // optional
  private String stage; // optional
  private String group; // optional
  private String url; // optional
  private String desc; // optional
  private List<TTopListItem> items; // optional
  private String name; // optional
  private int order; // optional
  private List<com.lesports.api.common.LangString> multiLangCNames; // optional
  private List<com.lesports.api.common.LangString> multiLangTypeNames; // optional
  private List<com.lesports.api.common.LangString> multiLangDesc; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CID((short)2, "cid"),
    CNAME((short)3, "cname"),
    CSID((short)4, "csid"),
    SEASON((short)5, "season"),
    TYPE((short)6, "type"),
    TYPE_NAME((short)7, "typeName"),
    SUBSTATION((short)8, "substation"),
    ROUND((short)9, "round"),
    STAGE((short)10, "stage"),
    GROUP((short)11, "group"),
    URL((short)12, "url"),
    DESC((short)13, "desc"),
    ITEMS((short)14, "items"),
    NAME((short)15, "name"),
    ORDER((short)16, "order"),
    MULTI_LANG_CNAMES((short)17, "multiLangCNames"),
    MULTI_LANG_TYPE_NAMES((short)18, "multiLangTypeNames"),
    MULTI_LANG_DESC((short)19, "multiLangDesc"),
    MULTI_LANG_NAMES((short)20, "multiLangNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CID
          return CID;
        case 3: // CNAME
          return CNAME;
        case 4: // CSID
          return CSID;
        case 5: // SEASON
          return SEASON;
        case 6: // TYPE
          return TYPE;
        case 7: // TYPE_NAME
          return TYPE_NAME;
        case 8: // SUBSTATION
          return SUBSTATION;
        case 9: // ROUND
          return ROUND;
        case 10: // STAGE
          return STAGE;
        case 11: // GROUP
          return GROUP;
        case 12: // URL
          return URL;
        case 13: // DESC
          return DESC;
        case 14: // ITEMS
          return ITEMS;
        case 15: // NAME
          return NAME;
        case 16: // ORDER
          return ORDER;
        case 17: // MULTI_LANG_CNAMES
          return MULTI_LANG_CNAMES;
        case 18: // MULTI_LANG_TYPE_NAMES
          return MULTI_LANG_TYPE_NAMES;
        case 19: // MULTI_LANG_DESC
          return MULTI_LANG_DESC;
        case 20: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private static final int __TYPE_ISSET_ID = 3;
  private static final int __ORDER_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.CNAME,_Fields.CSID,_Fields.SEASON,_Fields.TYPE,_Fields.TYPE_NAME,_Fields.SUBSTATION,_Fields.ROUND,_Fields.STAGE,_Fields.GROUP,_Fields.URL,_Fields.DESC,_Fields.ITEMS,_Fields.NAME,_Fields.ORDER,_Fields.MULTI_LANG_CNAMES,_Fields.MULTI_LANG_TYPE_NAMES,_Fields.MULTI_LANG_DESC,_Fields.MULTI_LANG_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CNAME, new org.apache.thrift.meta_data.FieldMetaData("cname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEASON, new org.apache.thrift.meta_data.FieldMetaData("season", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSTATION, new org.apache.thrift.meta_data.FieldMetaData("substation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUND, new org.apache.thrift.meta_data.FieldMetaData("round", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TTopListItem"))));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTI_LANG_CNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_TYPE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTypeNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_DESC, new org.apache.thrift.meta_data.FieldMetaData("multiLangDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTopList.class, metaDataMap);
  }

  public TTopList() {
  }

  public TTopList(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTopList(TTopList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.cid = other.cid;
    if (other.isSetCname()) {
      this.cname = other.cname;
    }
    this.csid = other.csid;
    if (other.isSetSeason()) {
      this.season = other.season;
    }
    this.type = other.type;
    if (other.isSetTypeName()) {
      this.typeName = other.typeName;
    }
    if (other.isSetSubstation()) {
      this.substation = other.substation;
    }
    if (other.isSetRound()) {
      this.round = other.round;
    }
    if (other.isSetStage()) {
      this.stage = other.stage;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetItems()) {
      List<TTopListItem> __this__items = new ArrayList<TTopListItem>(other.items.size());
      for (TTopListItem other_element : other.items) {
        __this__items.add(other_element);
      }
      this.items = __this__items;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.order = other.order;
    if (other.isSetMultiLangCNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangCNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCNames) {
        __this__multiLangCNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCNames = __this__multiLangCNames;
    }
    if (other.isSetMultiLangTypeNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangTypeNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTypeNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTypeNames) {
        __this__multiLangTypeNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTypeNames = __this__multiLangTypeNames;
    }
    if (other.isSetMultiLangDesc()) {
      List<com.lesports.api.common.LangString> __this__multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDesc.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDesc) {
        __this__multiLangDesc.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDesc = __this__multiLangDesc;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
  }

  public TTopList deepCopy() {
    return new TTopList(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.cname = null;
    setCsidIsSet(false);
    this.csid = 0;
    this.season = null;
    setTypeIsSet(false);
    this.type = 0;
    this.typeName = null;
    this.substation = null;
    this.round = null;
    this.stage = null;
    this.group = null;
    this.url = null;
    this.desc = null;
    this.items = null;
    this.name = null;
    setOrderIsSet(false);
    this.order = 0;
    this.multiLangCNames = null;
    this.multiLangTypeNames = null;
    this.multiLangDesc = null;
    this.multiLangNames = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getCname() {
    return this.cname;
  }

  public void setCname(String cname) {
    this.cname = cname;
  }

  public void unsetCname() {
    this.cname = null;
  }

  /** Returns true if field cname is set (has been assigned a value) and false otherwise */
  public boolean isSetCname() {
    return this.cname != null;
  }

  public void setCnameIsSet(boolean value) {
    if (!value) {
      this.cname = null;
    }
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public String getSeason() {
    return this.season;
  }

  public void setSeason(String season) {
    this.season = season;
  }

  public void unsetSeason() {
    this.season = null;
  }

  /** Returns true if field season is set (has been assigned a value) and false otherwise */
  public boolean isSetSeason() {
    return this.season != null;
  }

  public void setSeasonIsSet(boolean value) {
    if (!value) {
      this.season = null;
    }
  }

  public long getType() {
    return this.type;
  }

  public void setType(long type) {
    this.type = type;
    setTypeIsSet(true);
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getTypeName() {
    return this.typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }

  public void unsetTypeName() {
    this.typeName = null;
  }

  /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeName() {
    return this.typeName != null;
  }

  public void setTypeNameIsSet(boolean value) {
    if (!value) {
      this.typeName = null;
    }
  }

  public String getSubstation() {
    return this.substation;
  }

  public void setSubstation(String substation) {
    this.substation = substation;
  }

  public void unsetSubstation() {
    this.substation = null;
  }

  /** Returns true if field substation is set (has been assigned a value) and false otherwise */
  public boolean isSetSubstation() {
    return this.substation != null;
  }

  public void setSubstationIsSet(boolean value) {
    if (!value) {
      this.substation = null;
    }
  }

  public String getRound() {
    return this.round;
  }

  public void setRound(String round) {
    this.round = round;
  }

  public void unsetRound() {
    this.round = null;
  }

  /** Returns true if field round is set (has been assigned a value) and false otherwise */
  public boolean isSetRound() {
    return this.round != null;
  }

  public void setRoundIsSet(boolean value) {
    if (!value) {
      this.round = null;
    }
  }

  public String getStage() {
    return this.stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }

  public void unsetStage() {
    this.stage = null;
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return this.stage != null;
  }

  public void setStageIsSet(boolean value) {
    if (!value) {
      this.stage = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<TTopListItem> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(TTopListItem elem) {
    if (this.items == null) {
      this.items = new ArrayList<TTopListItem>();
    }
    this.items.add(elem);
  }

  public List<TTopListItem> getItems() {
    return this.items;
  }

  public void setItems(List<TTopListItem> items) {
    this.items = items;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public int getMultiLangCNamesSize() {
    return (this.multiLangCNames == null) ? 0 : this.multiLangCNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCNamesIterator() {
    return (this.multiLangCNames == null) ? null : this.multiLangCNames.iterator();
  }

  public void addToMultiLangCNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangCNames == null) {
      this.multiLangCNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCNames() {
    return this.multiLangCNames;
  }

  public void setMultiLangCNames(List<com.lesports.api.common.LangString> multiLangCNames) {
    this.multiLangCNames = multiLangCNames;
  }

  public void unsetMultiLangCNames() {
    this.multiLangCNames = null;
  }

  /** Returns true if field multiLangCNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCNames() {
    return this.multiLangCNames != null;
  }

  public void setMultiLangCNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangCNames = null;
    }
  }

  public int getMultiLangTypeNamesSize() {
    return (this.multiLangTypeNames == null) ? 0 : this.multiLangTypeNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTypeNamesIterator() {
    return (this.multiLangTypeNames == null) ? null : this.multiLangTypeNames.iterator();
  }

  public void addToMultiLangTypeNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangTypeNames == null) {
      this.multiLangTypeNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTypeNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTypeNames() {
    return this.multiLangTypeNames;
  }

  public void setMultiLangTypeNames(List<com.lesports.api.common.LangString> multiLangTypeNames) {
    this.multiLangTypeNames = multiLangTypeNames;
  }

  public void unsetMultiLangTypeNames() {
    this.multiLangTypeNames = null;
  }

  /** Returns true if field multiLangTypeNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTypeNames() {
    return this.multiLangTypeNames != null;
  }

  public void setMultiLangTypeNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangTypeNames = null;
    }
  }

  public int getMultiLangDescSize() {
    return (this.multiLangDesc == null) ? 0 : this.multiLangDesc.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDescIterator() {
    return (this.multiLangDesc == null) ? null : this.multiLangDesc.iterator();
  }

  public void addToMultiLangDesc(com.lesports.api.common.LangString elem) {
    if (this.multiLangDesc == null) {
      this.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDesc.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDesc() {
    return this.multiLangDesc;
  }

  public void setMultiLangDesc(List<com.lesports.api.common.LangString> multiLangDesc) {
    this.multiLangDesc = multiLangDesc;
  }

  public void unsetMultiLangDesc() {
    this.multiLangDesc = null;
  }

  /** Returns true if field multiLangDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDesc() {
    return this.multiLangDesc != null;
  }

  public void setMultiLangDescIsSet(boolean value) {
    if (!value) {
      this.multiLangDesc = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case CNAME:
      if (value == null) {
        unsetCname();
      } else {
        setCname((String)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case SEASON:
      if (value == null) {
        unsetSeason();
      } else {
        setSeason((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Long)value);
      }
      break;

    case TYPE_NAME:
      if (value == null) {
        unsetTypeName();
      } else {
        setTypeName((String)value);
      }
      break;

    case SUBSTATION:
      if (value == null) {
        unsetSubstation();
      } else {
        setSubstation((String)value);
      }
      break;

    case ROUND:
      if (value == null) {
        unsetRound();
      } else {
        setRound((String)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<TTopListItem>)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case MULTI_LANG_CNAMES:
      if (value == null) {
        unsetMultiLangCNames();
      } else {
        setMultiLangCNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_TYPE_NAMES:
      if (value == null) {
        unsetMultiLangTypeNames();
      } else {
        setMultiLangTypeNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_DESC:
      if (value == null) {
        unsetMultiLangDesc();
      } else {
        setMultiLangDesc((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CID:
      return Long.valueOf(getCid());

    case CNAME:
      return getCname();

    case CSID:
      return Long.valueOf(getCsid());

    case SEASON:
      return getSeason();

    case TYPE:
      return Long.valueOf(getType());

    case TYPE_NAME:
      return getTypeName();

    case SUBSTATION:
      return getSubstation();

    case ROUND:
      return getRound();

    case STAGE:
      return getStage();

    case GROUP:
      return getGroup();

    case URL:
      return getUrl();

    case DESC:
      return getDesc();

    case ITEMS:
      return getItems();

    case NAME:
      return getName();

    case ORDER:
      return Integer.valueOf(getOrder());

    case MULTI_LANG_CNAMES:
      return getMultiLangCNames();

    case MULTI_LANG_TYPE_NAMES:
      return getMultiLangTypeNames();

    case MULTI_LANG_DESC:
      return getMultiLangDesc();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CID:
      return isSetCid();
    case CNAME:
      return isSetCname();
    case CSID:
      return isSetCsid();
    case SEASON:
      return isSetSeason();
    case TYPE:
      return isSetType();
    case TYPE_NAME:
      return isSetTypeName();
    case SUBSTATION:
      return isSetSubstation();
    case ROUND:
      return isSetRound();
    case STAGE:
      return isSetStage();
    case GROUP:
      return isSetGroup();
    case URL:
      return isSetUrl();
    case DESC:
      return isSetDesc();
    case ITEMS:
      return isSetItems();
    case NAME:
      return isSetName();
    case ORDER:
      return isSetOrder();
    case MULTI_LANG_CNAMES:
      return isSetMultiLangCNames();
    case MULTI_LANG_TYPE_NAMES:
      return isSetMultiLangTypeNames();
    case MULTI_LANG_DESC:
      return isSetMultiLangDesc();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTopList)
      return this.equals((TTopList)that);
    return false;
  }

  public boolean equals(TTopList that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_cname = true && this.isSetCname();
    boolean that_present_cname = true && that.isSetCname();
    if (this_present_cname || that_present_cname) {
      if (!(this_present_cname && that_present_cname))
        return false;
      if (!this.cname.equals(that.cname))
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_season = true && this.isSetSeason();
    boolean that_present_season = true && that.isSetSeason();
    if (this_present_season || that_present_season) {
      if (!(this_present_season && that_present_season))
        return false;
      if (!this.season.equals(that.season))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_typeName = true && this.isSetTypeName();
    boolean that_present_typeName = true && that.isSetTypeName();
    if (this_present_typeName || that_present_typeName) {
      if (!(this_present_typeName && that_present_typeName))
        return false;
      if (!this.typeName.equals(that.typeName))
        return false;
    }

    boolean this_present_substation = true && this.isSetSubstation();
    boolean that_present_substation = true && that.isSetSubstation();
    if (this_present_substation || that_present_substation) {
      if (!(this_present_substation && that_present_substation))
        return false;
      if (!this.substation.equals(that.substation))
        return false;
    }

    boolean this_present_round = true && this.isSetRound();
    boolean that_present_round = true && that.isSetRound();
    if (this_present_round || that_present_round) {
      if (!(this_present_round && that_present_round))
        return false;
      if (!this.round.equals(that.round))
        return false;
    }

    boolean this_present_stage = true && this.isSetStage();
    boolean that_present_stage = true && that.isSetStage();
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (!this.stage.equals(that.stage))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_multiLangCNames = true && this.isSetMultiLangCNames();
    boolean that_present_multiLangCNames = true && that.isSetMultiLangCNames();
    if (this_present_multiLangCNames || that_present_multiLangCNames) {
      if (!(this_present_multiLangCNames && that_present_multiLangCNames))
        return false;
      if (!this.multiLangCNames.equals(that.multiLangCNames))
        return false;
    }

    boolean this_present_multiLangTypeNames = true && this.isSetMultiLangTypeNames();
    boolean that_present_multiLangTypeNames = true && that.isSetMultiLangTypeNames();
    if (this_present_multiLangTypeNames || that_present_multiLangTypeNames) {
      if (!(this_present_multiLangTypeNames && that_present_multiLangTypeNames))
        return false;
      if (!this.multiLangTypeNames.equals(that.multiLangTypeNames))
        return false;
    }

    boolean this_present_multiLangDesc = true && this.isSetMultiLangDesc();
    boolean that_present_multiLangDesc = true && that.isSetMultiLangDesc();
    if (this_present_multiLangDesc || that_present_multiLangDesc) {
      if (!(this_present_multiLangDesc && that_present_multiLangDesc))
        return false;
      if (!this.multiLangDesc.equals(that.multiLangDesc))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_cname = true && (isSetCname());
    list.add(present_cname);
    if (present_cname)
      list.add(cname);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_season = true && (isSetSeason());
    list.add(present_season);
    if (present_season)
      list.add(season);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_typeName = true && (isSetTypeName());
    list.add(present_typeName);
    if (present_typeName)
      list.add(typeName);

    boolean present_substation = true && (isSetSubstation());
    list.add(present_substation);
    if (present_substation)
      list.add(substation);

    boolean present_round = true && (isSetRound());
    list.add(present_round);
    if (present_round)
      list.add(round);

    boolean present_stage = true && (isSetStage());
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_multiLangCNames = true && (isSetMultiLangCNames());
    list.add(present_multiLangCNames);
    if (present_multiLangCNames)
      list.add(multiLangCNames);

    boolean present_multiLangTypeNames = true && (isSetMultiLangTypeNames());
    list.add(present_multiLangTypeNames);
    if (present_multiLangTypeNames)
      list.add(multiLangTypeNames);

    boolean present_multiLangDesc = true && (isSetMultiLangDesc());
    list.add(present_multiLangDesc);
    if (present_multiLangDesc)
      list.add(multiLangDesc);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTopList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCname()).compareTo(other.isSetCname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cname, other.cname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeason()).compareTo(other.isSetSeason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.season, other.season);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubstation()).compareTo(other.isSetSubstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.substation, other.substation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRound()).compareTo(other.isSetRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.round, other.round);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCNames()).compareTo(other.isSetMultiLangCNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCNames, other.multiLangCNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTypeNames()).compareTo(other.isSetMultiLangTypeNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTypeNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTypeNames, other.multiLangTypeNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDesc()).compareTo(other.isSetMultiLangDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDesc, other.multiLangDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTopList(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCname()) {
      if (!first) sb.append(", ");
      sb.append("cname:");
      if (this.cname == null) {
        sb.append("null");
      } else {
        sb.append(this.cname);
      }
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetSeason()) {
      if (!first) sb.append(", ");
      sb.append("season:");
      if (this.season == null) {
        sb.append("null");
      } else {
        sb.append(this.season);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
    }
    if (isSetTypeName()) {
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
    }
    if (isSetSubstation()) {
      if (!first) sb.append(", ");
      sb.append("substation:");
      if (this.substation == null) {
        sb.append("null");
      } else {
        sb.append(this.substation);
      }
      first = false;
    }
    if (isSetRound()) {
      if (!first) sb.append(", ");
      sb.append("round:");
      if (this.round == null) {
        sb.append("null");
      } else {
        sb.append(this.round);
      }
      first = false;
    }
    if (isSetStage()) {
      if (!first) sb.append(", ");
      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetItems()) {
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetMultiLangCNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCNames:");
      if (this.multiLangCNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCNames);
      }
      first = false;
    }
    if (isSetMultiLangTypeNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTypeNames:");
      if (this.multiLangTypeNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTypeNames);
      }
      first = false;
    }
    if (isSetMultiLangDesc()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDesc:");
      if (this.multiLangDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDesc);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTopListStandardSchemeFactory implements SchemeFactory {
    public TTopListStandardScheme getScheme() {
      return new TTopListStandardScheme();
    }
  }

  private static class TTopListStandardScheme extends StandardScheme<TTopList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTopList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cname = iprot.readString();
              struct.setCnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.season = iprot.readString();
              struct.setSeasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.type = iprot.readI64();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.typeName = iprot.readString();
              struct.setTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUBSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.substation = iprot.readString();
              struct.setSubstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.round = iprot.readString();
              struct.setRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stage = iprot.readString();
              struct.setStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.items = new ArrayList<TTopListItem>(_list0.size);
                TTopListItem _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TTopListItem();
                  _elem1.read(iprot);
                  struct.items.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MULTI_LANG_CNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.multiLangCNames = new ArrayList<com.lesports.api.common.LangString>(_list3.size);
                com.lesports.api.common.LangString _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.lesports.api.common.LangString();
                  _elem4.read(iprot);
                  struct.multiLangCNames.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MULTI_LANG_TYPE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.multiLangTypeNames = new ArrayList<com.lesports.api.common.LangString>(_list6.size);
                com.lesports.api.common.LangString _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.lesports.api.common.LangString();
                  _elem7.read(iprot);
                  struct.multiLangTypeNames.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTypeNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MULTI_LANG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list9.size);
                com.lesports.api.common.LangString _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new com.lesports.api.common.LangString();
                  _elem10.read(iprot);
                  struct.multiLangDesc.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list12.size);
                com.lesports.api.common.LangString _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new com.lesports.api.common.LangString();
                  _elem13.read(iprot);
                  struct.multiLangNames.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTopList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.cname != null) {
        if (struct.isSetCname()) {
          oprot.writeFieldBegin(CNAME_FIELD_DESC);
          oprot.writeString(struct.cname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.season != null) {
        if (struct.isSetSeason()) {
          oprot.writeFieldBegin(SEASON_FIELD_DESC);
          oprot.writeString(struct.season);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetType()) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI64(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.typeName != null) {
        if (struct.isSetTypeName()) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.substation != null) {
        if (struct.isSetSubstation()) {
          oprot.writeFieldBegin(SUBSTATION_FIELD_DESC);
          oprot.writeString(struct.substation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.round != null) {
        if (struct.isSetRound()) {
          oprot.writeFieldBegin(ROUND_FIELD_DESC);
          oprot.writeString(struct.round);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stage != null) {
        if (struct.isSetStage()) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          oprot.writeString(struct.stage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.items != null) {
        if (struct.isSetItems()) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (TTopListItem _iter15 : struct.items)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangCNames != null) {
        if (struct.isSetMultiLangCNames()) {
          oprot.writeFieldBegin(MULTI_LANG_CNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCNames.size()));
            for (com.lesports.api.common.LangString _iter16 : struct.multiLangCNames)
            {
              _iter16.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTypeNames != null) {
        if (struct.isSetMultiLangTypeNames()) {
          oprot.writeFieldBegin(MULTI_LANG_TYPE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTypeNames.size()));
            for (com.lesports.api.common.LangString _iter17 : struct.multiLangTypeNames)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangDesc != null) {
        if (struct.isSetMultiLangDesc()) {
          oprot.writeFieldBegin(MULTI_LANG_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDesc.size()));
            for (com.lesports.api.common.LangString _iter18 : struct.multiLangDesc)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter19 : struct.multiLangNames)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTopListTupleSchemeFactory implements SchemeFactory {
    public TTopListTupleScheme getScheme() {
      return new TTopListTupleScheme();
    }
  }

  private static class TTopListTupleScheme extends TupleScheme<TTopList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTopList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetCname()) {
        optionals.set(2);
      }
      if (struct.isSetCsid()) {
        optionals.set(3);
      }
      if (struct.isSetSeason()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetTypeName()) {
        optionals.set(6);
      }
      if (struct.isSetSubstation()) {
        optionals.set(7);
      }
      if (struct.isSetRound()) {
        optionals.set(8);
      }
      if (struct.isSetStage()) {
        optionals.set(9);
      }
      if (struct.isSetGroup()) {
        optionals.set(10);
      }
      if (struct.isSetUrl()) {
        optionals.set(11);
      }
      if (struct.isSetDesc()) {
        optionals.set(12);
      }
      if (struct.isSetItems()) {
        optionals.set(13);
      }
      if (struct.isSetName()) {
        optionals.set(14);
      }
      if (struct.isSetOrder()) {
        optionals.set(15);
      }
      if (struct.isSetMultiLangCNames()) {
        optionals.set(16);
      }
      if (struct.isSetMultiLangTypeNames()) {
        optionals.set(17);
      }
      if (struct.isSetMultiLangDesc()) {
        optionals.set(18);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCname()) {
        oprot.writeString(struct.cname);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetSeason()) {
        oprot.writeString(struct.season);
      }
      if (struct.isSetType()) {
        oprot.writeI64(struct.type);
      }
      if (struct.isSetTypeName()) {
        oprot.writeString(struct.typeName);
      }
      if (struct.isSetSubstation()) {
        oprot.writeString(struct.substation);
      }
      if (struct.isSetRound()) {
        oprot.writeString(struct.round);
      }
      if (struct.isSetStage()) {
        oprot.writeString(struct.stage);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (TTopListItem _iter20 : struct.items)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetMultiLangCNames()) {
        {
          oprot.writeI32(struct.multiLangCNames.size());
          for (com.lesports.api.common.LangString _iter21 : struct.multiLangCNames)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangTypeNames()) {
        {
          oprot.writeI32(struct.multiLangTypeNames.size());
          for (com.lesports.api.common.LangString _iter22 : struct.multiLangTypeNames)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangDesc()) {
        {
          oprot.writeI32(struct.multiLangDesc.size());
          for (com.lesports.api.common.LangString _iter23 : struct.multiLangDesc)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter24 : struct.multiLangNames)
          {
            _iter24.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTopList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cname = iprot.readString();
        struct.setCnameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.season = iprot.readString();
        struct.setSeasonIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readI64();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.typeName = iprot.readString();
        struct.setTypeNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.substation = iprot.readString();
        struct.setSubstationIsSet(true);
      }
      if (incoming.get(8)) {
        struct.round = iprot.readString();
        struct.setRoundIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stage = iprot.readString();
        struct.setStageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(11)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<TTopListItem>(_list25.size);
          TTopListItem _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = new TTopListItem();
            _elem26.read(iprot);
            struct.items.add(_elem26);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCNames = new ArrayList<com.lesports.api.common.LangString>(_list28.size);
          com.lesports.api.common.LangString _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new com.lesports.api.common.LangString();
            _elem29.read(iprot);
            struct.multiLangCNames.add(_elem29);
          }
        }
        struct.setMultiLangCNamesIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTypeNames = new ArrayList<com.lesports.api.common.LangString>(_list31.size);
          com.lesports.api.common.LangString _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new com.lesports.api.common.LangString();
            _elem32.read(iprot);
            struct.multiLangTypeNames.add(_elem32);
          }
        }
        struct.setMultiLangTypeNamesIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list34.size);
          com.lesports.api.common.LangString _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new com.lesports.api.common.LangString();
            _elem35.read(iprot);
            struct.multiLangDesc.add(_elem35);
          }
        }
        struct.setMultiLangDescIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list37.size);
          com.lesports.api.common.LangString _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new com.lesports.api.common.LangString();
            _elem38.read(iprot);
            struct.multiLangNames.add(_elem38);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
    }
  }

}

