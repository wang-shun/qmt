/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 奖牌信息
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TMedal implements org.apache.thrift.TBase<TMedal, TMedal._Fields>, java.io.Serializable, Cloneable, Comparable<TMedal> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMedal");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFTypeId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DISCIPLINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("disciplineId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSTypeId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MEDAL_MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("medalMatchId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MEDAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("medalType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ORGANISATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("organisationId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField COMPETITOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField COMPETITOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ORGANISATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("organisationName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DISCIPLINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("disciplineName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSTypeName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MEDAL_AHIEVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("medalAhieveTime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField PLAYER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("playerList", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMedalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMedalTupleSchemeFactory());
  }

  private long id; // optional
  private long gameFTypeId; // optional
  private long disciplineId; // optional
  private long gameSTypeId; // optional
  private long medalMatchId; // optional
  private com.lesports.qmt.sbd.api.common.MedalType medalType; // optional
  private long organisationId; // optional
  private long competitorId; // optional
  private com.lesports.qmt.sbd.api.common.CompetitorType competitorType; // optional
  private com.lesports.qmt.sbd.api.common.Gender gender; // optional
  private long csid; // optional
  private long cid; // optional
  private String competitorName; // optional
  private String result; // optional
  private String organisationName; // optional
  private String disciplineName; // optional
  private String gameSTypeName; // optional
  private String imageUrl; // optional
  private String medalAhieveTime; // optional
  private List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> playerList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GAME_FTYPE_ID((short)2, "gameFTypeId"),
    DISCIPLINE_ID((short)3, "disciplineId"),
    GAME_STYPE_ID((short)4, "gameSTypeId"),
    MEDAL_MATCH_ID((short)5, "medalMatchId"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.MedalType
     */
    MEDAL_TYPE((short)6, "medalType"),
    ORGANISATION_ID((short)7, "organisationId"),
    COMPETITOR_ID((short)8, "competitorId"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CompetitorType
     */
    COMPETITOR_TYPE((short)9, "competitorType"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.Gender
     */
    GENDER((short)10, "gender"),
    CSID((short)11, "csid"),
    CID((short)12, "cid"),
    COMPETITOR_NAME((short)13, "competitorName"),
    RESULT((short)14, "result"),
    ORGANISATION_NAME((short)15, "organisationName"),
    DISCIPLINE_NAME((short)16, "disciplineName"),
    GAME_STYPE_NAME((short)17, "gameSTypeName"),
    IMAGE_URL((short)18, "imageUrl"),
    MEDAL_AHIEVE_TIME((short)19, "medalAhieveTime"),
    PLAYER_LIST((short)20, "playerList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GAME_FTYPE_ID
          return GAME_FTYPE_ID;
        case 3: // DISCIPLINE_ID
          return DISCIPLINE_ID;
        case 4: // GAME_STYPE_ID
          return GAME_STYPE_ID;
        case 5: // MEDAL_MATCH_ID
          return MEDAL_MATCH_ID;
        case 6: // MEDAL_TYPE
          return MEDAL_TYPE;
        case 7: // ORGANISATION_ID
          return ORGANISATION_ID;
        case 8: // COMPETITOR_ID
          return COMPETITOR_ID;
        case 9: // COMPETITOR_TYPE
          return COMPETITOR_TYPE;
        case 10: // GENDER
          return GENDER;
        case 11: // CSID
          return CSID;
        case 12: // CID
          return CID;
        case 13: // COMPETITOR_NAME
          return COMPETITOR_NAME;
        case 14: // RESULT
          return RESULT;
        case 15: // ORGANISATION_NAME
          return ORGANISATION_NAME;
        case 16: // DISCIPLINE_NAME
          return DISCIPLINE_NAME;
        case 17: // GAME_STYPE_NAME
          return GAME_STYPE_NAME;
        case 18: // IMAGE_URL
          return IMAGE_URL;
        case 19: // MEDAL_AHIEVE_TIME
          return MEDAL_AHIEVE_TIME;
        case 20: // PLAYER_LIST
          return PLAYER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GAMEFTYPEID_ISSET_ID = 1;
  private static final int __DISCIPLINEID_ISSET_ID = 2;
  private static final int __GAMESTYPEID_ISSET_ID = 3;
  private static final int __MEDALMATCHID_ISSET_ID = 4;
  private static final int __ORGANISATIONID_ISSET_ID = 5;
  private static final int __COMPETITORID_ISSET_ID = 6;
  private static final int __CSID_ISSET_ID = 7;
  private static final int __CID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.GAME_FTYPE_ID,_Fields.DISCIPLINE_ID,_Fields.GAME_STYPE_ID,_Fields.MEDAL_MATCH_ID,_Fields.MEDAL_TYPE,_Fields.ORGANISATION_ID,_Fields.COMPETITOR_ID,_Fields.COMPETITOR_TYPE,_Fields.GENDER,_Fields.CSID,_Fields.CID,_Fields.COMPETITOR_NAME,_Fields.RESULT,_Fields.ORGANISATION_NAME,_Fields.DISCIPLINE_NAME,_Fields.GAME_STYPE_NAME,_Fields.IMAGE_URL,_Fields.MEDAL_AHIEVE_TIME,_Fields.PLAYER_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_FTYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("gameFTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCIPLINE_ID, new org.apache.thrift.meta_data.FieldMetaData("disciplineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("gameSTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDAL_MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("medalMatchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("medalType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.MedalType.class)));
    tmpMap.put(_Fields.ORGANISATION_ID, new org.apache.thrift.meta_data.FieldMetaData("organisationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("competitorType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CompetitorType.class)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.Gender.class)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("competitorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANISATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("organisationName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISCIPLINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("disciplineName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_STYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("gameSTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDAL_AHIEVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("medalAhieveTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYER_LIST, new org.apache.thrift.meta_data.FieldMetaData("playerList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TSimplePlayer.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMedal.class, metaDataMap);
  }

  public TMedal() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMedal(TMedal other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.gameFTypeId = other.gameFTypeId;
    this.disciplineId = other.disciplineId;
    this.gameSTypeId = other.gameSTypeId;
    this.medalMatchId = other.medalMatchId;
    if (other.isSetMedalType()) {
      this.medalType = other.medalType;
    }
    this.organisationId = other.organisationId;
    this.competitorId = other.competitorId;
    if (other.isSetCompetitorType()) {
      this.competitorType = other.competitorType;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    this.csid = other.csid;
    this.cid = other.cid;
    if (other.isSetCompetitorName()) {
      this.competitorName = other.competitorName;
    }
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetOrganisationName()) {
      this.organisationName = other.organisationName;
    }
    if (other.isSetDisciplineName()) {
      this.disciplineName = other.disciplineName;
    }
    if (other.isSetGameSTypeName()) {
      this.gameSTypeName = other.gameSTypeName;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.isSetMedalAhieveTime()) {
      this.medalAhieveTime = other.medalAhieveTime;
    }
    if (other.isSetPlayerList()) {
      List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> __this__playerList = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(other.playerList.size());
      for (com.lesports.qmt.sbd.api.dto.TSimplePlayer other_element : other.playerList) {
        __this__playerList.add(new com.lesports.qmt.sbd.api.dto.TSimplePlayer(other_element));
      }
      this.playerList = __this__playerList;
    }
  }

  public TMedal deepCopy() {
    return new TMedal(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setGameFTypeIdIsSet(false);
    this.gameFTypeId = 0;
    setDisciplineIdIsSet(false);
    this.disciplineId = 0;
    setGameSTypeIdIsSet(false);
    this.gameSTypeId = 0;
    setMedalMatchIdIsSet(false);
    this.medalMatchId = 0;
    this.medalType = null;
    setOrganisationIdIsSet(false);
    this.organisationId = 0;
    setCompetitorIdIsSet(false);
    this.competitorId = 0;
    this.competitorType = null;
    this.gender = null;
    setCsidIsSet(false);
    this.csid = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.competitorName = null;
    this.result = null;
    this.organisationName = null;
    this.disciplineName = null;
    this.gameSTypeName = null;
    this.imageUrl = null;
    this.medalAhieveTime = null;
    this.playerList = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getGameFTypeId() {
    return this.gameFTypeId;
  }

  public void setGameFTypeId(long gameFTypeId) {
    this.gameFTypeId = gameFTypeId;
    setGameFTypeIdIsSet(true);
  }

  public void unsetGameFTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  /** Returns true if field gameFTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  public void setGameFTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID, value);
  }

  public long getDisciplineId() {
    return this.disciplineId;
  }

  public void setDisciplineId(long disciplineId) {
    this.disciplineId = disciplineId;
    setDisciplineIdIsSet(true);
  }

  public void unsetDisciplineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  /** Returns true if field disciplineId is set (has been assigned a value) and false otherwise */
  public boolean isSetDisciplineId() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  public void setDisciplineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID, value);
  }

  public long getGameSTypeId() {
    return this.gameSTypeId;
  }

  public void setGameSTypeId(long gameSTypeId) {
    this.gameSTypeId = gameSTypeId;
    setGameSTypeIdIsSet(true);
  }

  public void unsetGameSTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPEID_ISSET_ID);
  }

  /** Returns true if field gameSTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPEID_ISSET_ID);
  }

  public void setGameSTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPEID_ISSET_ID, value);
  }

  public long getMedalMatchId() {
    return this.medalMatchId;
  }

  public void setMedalMatchId(long medalMatchId) {
    this.medalMatchId = medalMatchId;
    setMedalMatchIdIsSet(true);
  }

  public void unsetMedalMatchId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDALMATCHID_ISSET_ID);
  }

  /** Returns true if field medalMatchId is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalMatchId() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDALMATCHID_ISSET_ID);
  }

  public void setMedalMatchIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDALMATCHID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MedalType
   */
  public com.lesports.qmt.sbd.api.common.MedalType getMedalType() {
    return this.medalType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MedalType
   */
  public void setMedalType(com.lesports.qmt.sbd.api.common.MedalType medalType) {
    this.medalType = medalType;
  }

  public void unsetMedalType() {
    this.medalType = null;
  }

  /** Returns true if field medalType is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalType() {
    return this.medalType != null;
  }

  public void setMedalTypeIsSet(boolean value) {
    if (!value) {
      this.medalType = null;
    }
  }

  public long getOrganisationId() {
    return this.organisationId;
  }

  public void setOrganisationId(long organisationId) {
    this.organisationId = organisationId;
    setOrganisationIdIsSet(true);
  }

  public void unsetOrganisationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGANISATIONID_ISSET_ID);
  }

  /** Returns true if field organisationId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganisationId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGANISATIONID_ISSET_ID);
  }

  public void setOrganisationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGANISATIONID_ISSET_ID, value);
  }

  public long getCompetitorId() {
    return this.competitorId;
  }

  public void setCompetitorId(long competitorId) {
    this.competitorId = competitorId;
    setCompetitorIdIsSet(true);
  }

  public void unsetCompetitorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  public void setCompetitorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public com.lesports.qmt.sbd.api.common.CompetitorType getCompetitorType() {
    return this.competitorType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public void setCompetitorType(com.lesports.qmt.sbd.api.common.CompetitorType competitorType) {
    this.competitorType = competitorType;
  }

  public void unsetCompetitorType() {
    this.competitorType = null;
  }

  /** Returns true if field competitorType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorType() {
    return this.competitorType != null;
  }

  public void setCompetitorTypeIsSet(boolean value) {
    if (!value) {
      this.competitorType = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.Gender
   */
  public com.lesports.qmt.sbd.api.common.Gender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.Gender
   */
  public void setGender(com.lesports.qmt.sbd.api.common.Gender gender) {
    this.gender = gender;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getCompetitorName() {
    return this.competitorName;
  }

  public void setCompetitorName(String competitorName) {
    this.competitorName = competitorName;
  }

  public void unsetCompetitorName() {
    this.competitorName = null;
  }

  /** Returns true if field competitorName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorName() {
    return this.competitorName != null;
  }

  public void setCompetitorNameIsSet(boolean value) {
    if (!value) {
      this.competitorName = null;
    }
  }

  public String getResult() {
    return this.result;
  }

  public void setResult(String result) {
    this.result = result;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public String getOrganisationName() {
    return this.organisationName;
  }

  public void setOrganisationName(String organisationName) {
    this.organisationName = organisationName;
  }

  public void unsetOrganisationName() {
    this.organisationName = null;
  }

  /** Returns true if field organisationName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganisationName() {
    return this.organisationName != null;
  }

  public void setOrganisationNameIsSet(boolean value) {
    if (!value) {
      this.organisationName = null;
    }
  }

  public String getDisciplineName() {
    return this.disciplineName;
  }

  public void setDisciplineName(String disciplineName) {
    this.disciplineName = disciplineName;
  }

  public void unsetDisciplineName() {
    this.disciplineName = null;
  }

  /** Returns true if field disciplineName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisciplineName() {
    return this.disciplineName != null;
  }

  public void setDisciplineNameIsSet(boolean value) {
    if (!value) {
      this.disciplineName = null;
    }
  }

  public String getGameSTypeName() {
    return this.gameSTypeName;
  }

  public void setGameSTypeName(String gameSTypeName) {
    this.gameSTypeName = gameSTypeName;
  }

  public void unsetGameSTypeName() {
    this.gameSTypeName = null;
  }

  /** Returns true if field gameSTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSTypeName() {
    return this.gameSTypeName != null;
  }

  public void setGameSTypeNameIsSet(boolean value) {
    if (!value) {
      this.gameSTypeName = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public String getMedalAhieveTime() {
    return this.medalAhieveTime;
  }

  public void setMedalAhieveTime(String medalAhieveTime) {
    this.medalAhieveTime = medalAhieveTime;
  }

  public void unsetMedalAhieveTime() {
    this.medalAhieveTime = null;
  }

  /** Returns true if field medalAhieveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalAhieveTime() {
    return this.medalAhieveTime != null;
  }

  public void setMedalAhieveTimeIsSet(boolean value) {
    if (!value) {
      this.medalAhieveTime = null;
    }
  }

  public int getPlayerListSize() {
    return (this.playerList == null) ? 0 : this.playerList.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TSimplePlayer> getPlayerListIterator() {
    return (this.playerList == null) ? null : this.playerList.iterator();
  }

  public void addToPlayerList(com.lesports.qmt.sbd.api.dto.TSimplePlayer elem) {
    if (this.playerList == null) {
      this.playerList = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>();
    }
    this.playerList.add(elem);
  }

  public List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> getPlayerList() {
    return this.playerList;
  }

  public void setPlayerList(List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> playerList) {
    this.playerList = playerList;
  }

  public void unsetPlayerList() {
    this.playerList = null;
  }

  /** Returns true if field playerList is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerList() {
    return this.playerList != null;
  }

  public void setPlayerListIsSet(boolean value) {
    if (!value) {
      this.playerList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case GAME_FTYPE_ID:
      if (value == null) {
        unsetGameFTypeId();
      } else {
        setGameFTypeId((Long)value);
      }
      break;

    case DISCIPLINE_ID:
      if (value == null) {
        unsetDisciplineId();
      } else {
        setDisciplineId((Long)value);
      }
      break;

    case GAME_STYPE_ID:
      if (value == null) {
        unsetGameSTypeId();
      } else {
        setGameSTypeId((Long)value);
      }
      break;

    case MEDAL_MATCH_ID:
      if (value == null) {
        unsetMedalMatchId();
      } else {
        setMedalMatchId((Long)value);
      }
      break;

    case MEDAL_TYPE:
      if (value == null) {
        unsetMedalType();
      } else {
        setMedalType((com.lesports.qmt.sbd.api.common.MedalType)value);
      }
      break;

    case ORGANISATION_ID:
      if (value == null) {
        unsetOrganisationId();
      } else {
        setOrganisationId((Long)value);
      }
      break;

    case COMPETITOR_ID:
      if (value == null) {
        unsetCompetitorId();
      } else {
        setCompetitorId((Long)value);
      }
      break;

    case COMPETITOR_TYPE:
      if (value == null) {
        unsetCompetitorType();
      } else {
        setCompetitorType((com.lesports.qmt.sbd.api.common.CompetitorType)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((com.lesports.qmt.sbd.api.common.Gender)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case COMPETITOR_NAME:
      if (value == null) {
        unsetCompetitorName();
      } else {
        setCompetitorName((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((String)value);
      }
      break;

    case ORGANISATION_NAME:
      if (value == null) {
        unsetOrganisationName();
      } else {
        setOrganisationName((String)value);
      }
      break;

    case DISCIPLINE_NAME:
      if (value == null) {
        unsetDisciplineName();
      } else {
        setDisciplineName((String)value);
      }
      break;

    case GAME_STYPE_NAME:
      if (value == null) {
        unsetGameSTypeName();
      } else {
        setGameSTypeName((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case MEDAL_AHIEVE_TIME:
      if (value == null) {
        unsetMedalAhieveTime();
      } else {
        setMedalAhieveTime((String)value);
      }
      break;

    case PLAYER_LIST:
      if (value == null) {
        unsetPlayerList();
      } else {
        setPlayerList((List<com.lesports.qmt.sbd.api.dto.TSimplePlayer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case GAME_FTYPE_ID:
      return Long.valueOf(getGameFTypeId());

    case DISCIPLINE_ID:
      return Long.valueOf(getDisciplineId());

    case GAME_STYPE_ID:
      return Long.valueOf(getGameSTypeId());

    case MEDAL_MATCH_ID:
      return Long.valueOf(getMedalMatchId());

    case MEDAL_TYPE:
      return getMedalType();

    case ORGANISATION_ID:
      return Long.valueOf(getOrganisationId());

    case COMPETITOR_ID:
      return Long.valueOf(getCompetitorId());

    case COMPETITOR_TYPE:
      return getCompetitorType();

    case GENDER:
      return getGender();

    case CSID:
      return Long.valueOf(getCsid());

    case CID:
      return Long.valueOf(getCid());

    case COMPETITOR_NAME:
      return getCompetitorName();

    case RESULT:
      return getResult();

    case ORGANISATION_NAME:
      return getOrganisationName();

    case DISCIPLINE_NAME:
      return getDisciplineName();

    case GAME_STYPE_NAME:
      return getGameSTypeName();

    case IMAGE_URL:
      return getImageUrl();

    case MEDAL_AHIEVE_TIME:
      return getMedalAhieveTime();

    case PLAYER_LIST:
      return getPlayerList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GAME_FTYPE_ID:
      return isSetGameFTypeId();
    case DISCIPLINE_ID:
      return isSetDisciplineId();
    case GAME_STYPE_ID:
      return isSetGameSTypeId();
    case MEDAL_MATCH_ID:
      return isSetMedalMatchId();
    case MEDAL_TYPE:
      return isSetMedalType();
    case ORGANISATION_ID:
      return isSetOrganisationId();
    case COMPETITOR_ID:
      return isSetCompetitorId();
    case COMPETITOR_TYPE:
      return isSetCompetitorType();
    case GENDER:
      return isSetGender();
    case CSID:
      return isSetCsid();
    case CID:
      return isSetCid();
    case COMPETITOR_NAME:
      return isSetCompetitorName();
    case RESULT:
      return isSetResult();
    case ORGANISATION_NAME:
      return isSetOrganisationName();
    case DISCIPLINE_NAME:
      return isSetDisciplineName();
    case GAME_STYPE_NAME:
      return isSetGameSTypeName();
    case IMAGE_URL:
      return isSetImageUrl();
    case MEDAL_AHIEVE_TIME:
      return isSetMedalAhieveTime();
    case PLAYER_LIST:
      return isSetPlayerList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMedal)
      return this.equals((TMedal)that);
    return false;
  }

  public boolean equals(TMedal that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_gameFTypeId = true && this.isSetGameFTypeId();
    boolean that_present_gameFTypeId = true && that.isSetGameFTypeId();
    if (this_present_gameFTypeId || that_present_gameFTypeId) {
      if (!(this_present_gameFTypeId && that_present_gameFTypeId))
        return false;
      if (this.gameFTypeId != that.gameFTypeId)
        return false;
    }

    boolean this_present_disciplineId = true && this.isSetDisciplineId();
    boolean that_present_disciplineId = true && that.isSetDisciplineId();
    if (this_present_disciplineId || that_present_disciplineId) {
      if (!(this_present_disciplineId && that_present_disciplineId))
        return false;
      if (this.disciplineId != that.disciplineId)
        return false;
    }

    boolean this_present_gameSTypeId = true && this.isSetGameSTypeId();
    boolean that_present_gameSTypeId = true && that.isSetGameSTypeId();
    if (this_present_gameSTypeId || that_present_gameSTypeId) {
      if (!(this_present_gameSTypeId && that_present_gameSTypeId))
        return false;
      if (this.gameSTypeId != that.gameSTypeId)
        return false;
    }

    boolean this_present_medalMatchId = true && this.isSetMedalMatchId();
    boolean that_present_medalMatchId = true && that.isSetMedalMatchId();
    if (this_present_medalMatchId || that_present_medalMatchId) {
      if (!(this_present_medalMatchId && that_present_medalMatchId))
        return false;
      if (this.medalMatchId != that.medalMatchId)
        return false;
    }

    boolean this_present_medalType = true && this.isSetMedalType();
    boolean that_present_medalType = true && that.isSetMedalType();
    if (this_present_medalType || that_present_medalType) {
      if (!(this_present_medalType && that_present_medalType))
        return false;
      if (!this.medalType.equals(that.medalType))
        return false;
    }

    boolean this_present_organisationId = true && this.isSetOrganisationId();
    boolean that_present_organisationId = true && that.isSetOrganisationId();
    if (this_present_organisationId || that_present_organisationId) {
      if (!(this_present_organisationId && that_present_organisationId))
        return false;
      if (this.organisationId != that.organisationId)
        return false;
    }

    boolean this_present_competitorId = true && this.isSetCompetitorId();
    boolean that_present_competitorId = true && that.isSetCompetitorId();
    if (this_present_competitorId || that_present_competitorId) {
      if (!(this_present_competitorId && that_present_competitorId))
        return false;
      if (this.competitorId != that.competitorId)
        return false;
    }

    boolean this_present_competitorType = true && this.isSetCompetitorType();
    boolean that_present_competitorType = true && that.isSetCompetitorType();
    if (this_present_competitorType || that_present_competitorType) {
      if (!(this_present_competitorType && that_present_competitorType))
        return false;
      if (!this.competitorType.equals(that.competitorType))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_competitorName = true && this.isSetCompetitorName();
    boolean that_present_competitorName = true && that.isSetCompetitorName();
    if (this_present_competitorName || that_present_competitorName) {
      if (!(this_present_competitorName && that_present_competitorName))
        return false;
      if (!this.competitorName.equals(that.competitorName))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_organisationName = true && this.isSetOrganisationName();
    boolean that_present_organisationName = true && that.isSetOrganisationName();
    if (this_present_organisationName || that_present_organisationName) {
      if (!(this_present_organisationName && that_present_organisationName))
        return false;
      if (!this.organisationName.equals(that.organisationName))
        return false;
    }

    boolean this_present_disciplineName = true && this.isSetDisciplineName();
    boolean that_present_disciplineName = true && that.isSetDisciplineName();
    if (this_present_disciplineName || that_present_disciplineName) {
      if (!(this_present_disciplineName && that_present_disciplineName))
        return false;
      if (!this.disciplineName.equals(that.disciplineName))
        return false;
    }

    boolean this_present_gameSTypeName = true && this.isSetGameSTypeName();
    boolean that_present_gameSTypeName = true && that.isSetGameSTypeName();
    if (this_present_gameSTypeName || that_present_gameSTypeName) {
      if (!(this_present_gameSTypeName && that_present_gameSTypeName))
        return false;
      if (!this.gameSTypeName.equals(that.gameSTypeName))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_medalAhieveTime = true && this.isSetMedalAhieveTime();
    boolean that_present_medalAhieveTime = true && that.isSetMedalAhieveTime();
    if (this_present_medalAhieveTime || that_present_medalAhieveTime) {
      if (!(this_present_medalAhieveTime && that_present_medalAhieveTime))
        return false;
      if (!this.medalAhieveTime.equals(that.medalAhieveTime))
        return false;
    }

    boolean this_present_playerList = true && this.isSetPlayerList();
    boolean that_present_playerList = true && that.isSetPlayerList();
    if (this_present_playerList || that_present_playerList) {
      if (!(this_present_playerList && that_present_playerList))
        return false;
      if (!this.playerList.equals(that.playerList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_gameFTypeId = true && (isSetGameFTypeId());
    list.add(present_gameFTypeId);
    if (present_gameFTypeId)
      list.add(gameFTypeId);

    boolean present_disciplineId = true && (isSetDisciplineId());
    list.add(present_disciplineId);
    if (present_disciplineId)
      list.add(disciplineId);

    boolean present_gameSTypeId = true && (isSetGameSTypeId());
    list.add(present_gameSTypeId);
    if (present_gameSTypeId)
      list.add(gameSTypeId);

    boolean present_medalMatchId = true && (isSetMedalMatchId());
    list.add(present_medalMatchId);
    if (present_medalMatchId)
      list.add(medalMatchId);

    boolean present_medalType = true && (isSetMedalType());
    list.add(present_medalType);
    if (present_medalType)
      list.add(medalType.getValue());

    boolean present_organisationId = true && (isSetOrganisationId());
    list.add(present_organisationId);
    if (present_organisationId)
      list.add(organisationId);

    boolean present_competitorId = true && (isSetCompetitorId());
    list.add(present_competitorId);
    if (present_competitorId)
      list.add(competitorId);

    boolean present_competitorType = true && (isSetCompetitorType());
    list.add(present_competitorType);
    if (present_competitorType)
      list.add(competitorType.getValue());

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender.getValue());

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_competitorName = true && (isSetCompetitorName());
    list.add(present_competitorName);
    if (present_competitorName)
      list.add(competitorName);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_organisationName = true && (isSetOrganisationName());
    list.add(present_organisationName);
    if (present_organisationName)
      list.add(organisationName);

    boolean present_disciplineName = true && (isSetDisciplineName());
    list.add(present_disciplineName);
    if (present_disciplineName)
      list.add(disciplineName);

    boolean present_gameSTypeName = true && (isSetGameSTypeName());
    list.add(present_gameSTypeName);
    if (present_gameSTypeName)
      list.add(gameSTypeName);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_medalAhieveTime = true && (isSetMedalAhieveTime());
    list.add(present_medalAhieveTime);
    if (present_medalAhieveTime)
      list.add(medalAhieveTime);

    boolean present_playerList = true && (isSetPlayerList());
    list.add(present_playerList);
    if (present_playerList)
      list.add(playerList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMedal other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFTypeId()).compareTo(other.isSetGameFTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFTypeId, other.gameFTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisciplineId()).compareTo(other.isSetDisciplineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisciplineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disciplineId, other.disciplineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSTypeId()).compareTo(other.isSetGameSTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSTypeId, other.gameSTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalMatchId()).compareTo(other.isSetMedalMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalMatchId, other.medalMatchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalType()).compareTo(other.isSetMedalType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalType, other.medalType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganisationId()).compareTo(other.isSetOrganisationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganisationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organisationId, other.organisationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorType()).compareTo(other.isSetCompetitorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorType, other.competitorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorName()).compareTo(other.isSetCompetitorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorName, other.competitorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganisationName()).compareTo(other.isSetOrganisationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganisationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organisationName, other.organisationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisciplineName()).compareTo(other.isSetDisciplineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisciplineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disciplineName, other.disciplineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSTypeName()).compareTo(other.isSetGameSTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSTypeName, other.gameSTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalAhieveTime()).compareTo(other.isSetMedalAhieveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalAhieveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalAhieveTime, other.medalAhieveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerList()).compareTo(other.isSetPlayerList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerList, other.playerList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMedal(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetGameFTypeId()) {
      if (!first) sb.append(", ");
      sb.append("gameFTypeId:");
      sb.append(this.gameFTypeId);
      first = false;
    }
    if (isSetDisciplineId()) {
      if (!first) sb.append(", ");
      sb.append("disciplineId:");
      sb.append(this.disciplineId);
      first = false;
    }
    if (isSetGameSTypeId()) {
      if (!first) sb.append(", ");
      sb.append("gameSTypeId:");
      sb.append(this.gameSTypeId);
      first = false;
    }
    if (isSetMedalMatchId()) {
      if (!first) sb.append(", ");
      sb.append("medalMatchId:");
      sb.append(this.medalMatchId);
      first = false;
    }
    if (isSetMedalType()) {
      if (!first) sb.append(", ");
      sb.append("medalType:");
      if (this.medalType == null) {
        sb.append("null");
      } else {
        sb.append(this.medalType);
      }
      first = false;
    }
    if (isSetOrganisationId()) {
      if (!first) sb.append(", ");
      sb.append("organisationId:");
      sb.append(this.organisationId);
      first = false;
    }
    if (isSetCompetitorId()) {
      if (!first) sb.append(", ");
      sb.append("competitorId:");
      sb.append(this.competitorId);
      first = false;
    }
    if (isSetCompetitorType()) {
      if (!first) sb.append(", ");
      sb.append("competitorType:");
      if (this.competitorType == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorType);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      if (this.gender == null) {
        sb.append("null");
      } else {
        sb.append(this.gender);
      }
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCompetitorName()) {
      if (!first) sb.append(", ");
      sb.append("competitorName:");
      if (this.competitorName == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorName);
      }
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetOrganisationName()) {
      if (!first) sb.append(", ");
      sb.append("organisationName:");
      if (this.organisationName == null) {
        sb.append("null");
      } else {
        sb.append(this.organisationName);
      }
      first = false;
    }
    if (isSetDisciplineName()) {
      if (!first) sb.append(", ");
      sb.append("disciplineName:");
      if (this.disciplineName == null) {
        sb.append("null");
      } else {
        sb.append(this.disciplineName);
      }
      first = false;
    }
    if (isSetGameSTypeName()) {
      if (!first) sb.append(", ");
      sb.append("gameSTypeName:");
      if (this.gameSTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameSTypeName);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetMedalAhieveTime()) {
      if (!first) sb.append(", ");
      sb.append("medalAhieveTime:");
      if (this.medalAhieveTime == null) {
        sb.append("null");
      } else {
        sb.append(this.medalAhieveTime);
      }
      first = false;
    }
    if (isSetPlayerList()) {
      if (!first) sb.append(", ");
      sb.append("playerList:");
      if (this.playerList == null) {
        sb.append("null");
      } else {
        sb.append(this.playerList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMedalStandardSchemeFactory implements SchemeFactory {
    public TMedalStandardScheme getScheme() {
      return new TMedalStandardScheme();
    }
  }

  private static class TMedalStandardScheme extends StandardScheme<TMedal> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMedal struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_FTYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFTypeId = iprot.readI64();
              struct.setGameFTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISCIPLINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.disciplineId = iprot.readI64();
              struct.setDisciplineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GAME_STYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSTypeId = iprot.readI64();
              struct.setGameSTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MEDAL_MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.medalMatchId = iprot.readI64();
              struct.setMedalMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEDAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.medalType = com.lesports.qmt.sbd.api.common.MedalType.findByValue(iprot.readI32());
              struct.setMedalTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORGANISATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.organisationId = iprot.readI64();
              struct.setOrganisationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPETITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitorId = iprot.readI64();
              struct.setCompetitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPETITOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
              struct.setCompetitorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = com.lesports.qmt.sbd.api.common.Gender.findByValue(iprot.readI32());
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COMPETITOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.competitorName = iprot.readString();
              struct.setCompetitorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.result = iprot.readString();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORGANISATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organisationName = iprot.readString();
              struct.setOrganisationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DISCIPLINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.disciplineName = iprot.readString();
              struct.setDisciplineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GAME_STYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameSTypeName = iprot.readString();
              struct.setGameSTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MEDAL_AHIEVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medalAhieveTime = iprot.readString();
              struct.setMedalAhieveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PLAYER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.playerList = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(_list0.size);
                com.lesports.qmt.sbd.api.dto.TSimplePlayer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.lesports.qmt.sbd.api.dto.TSimplePlayer();
                  _elem1.read(iprot);
                  struct.playerList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPlayerListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMedal struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameFTypeId()) {
        oprot.writeFieldBegin(GAME_FTYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.gameFTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeFieldBegin(DISCIPLINE_ID_FIELD_DESC);
        oprot.writeI64(struct.disciplineId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameSTypeId()) {
        oprot.writeFieldBegin(GAME_STYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.gameSTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMedalMatchId()) {
        oprot.writeFieldBegin(MEDAL_MATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.medalMatchId);
        oprot.writeFieldEnd();
      }
      if (struct.medalType != null) {
        if (struct.isSetMedalType()) {
          oprot.writeFieldBegin(MEDAL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.medalType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrganisationId()) {
        oprot.writeFieldBegin(ORGANISATION_ID_FIELD_DESC);
        oprot.writeI64(struct.organisationId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompetitorId()) {
        oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorId);
        oprot.writeFieldEnd();
      }
      if (struct.competitorType != null) {
        if (struct.isSetCompetitorType()) {
          oprot.writeFieldBegin(COMPETITOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.competitorType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.gender != null) {
        if (struct.isSetGender()) {
          oprot.writeFieldBegin(GENDER_FIELD_DESC);
          oprot.writeI32(struct.gender.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.competitorName != null) {
        if (struct.isSetCompetitorName()) {
          oprot.writeFieldBegin(COMPETITOR_NAME_FIELD_DESC);
          oprot.writeString(struct.competitorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
      }
      if (struct.organisationName != null) {
        if (struct.isSetOrganisationName()) {
          oprot.writeFieldBegin(ORGANISATION_NAME_FIELD_DESC);
          oprot.writeString(struct.organisationName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.disciplineName != null) {
        if (struct.isSetDisciplineName()) {
          oprot.writeFieldBegin(DISCIPLINE_NAME_FIELD_DESC);
          oprot.writeString(struct.disciplineName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameSTypeName != null) {
        if (struct.isSetGameSTypeName()) {
          oprot.writeFieldBegin(GAME_STYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.gameSTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.medalAhieveTime != null) {
        if (struct.isSetMedalAhieveTime()) {
          oprot.writeFieldBegin(MEDAL_AHIEVE_TIME_FIELD_DESC);
          oprot.writeString(struct.medalAhieveTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerList != null) {
        if (struct.isSetPlayerList()) {
          oprot.writeFieldBegin(PLAYER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerList.size()));
            for (com.lesports.qmt.sbd.api.dto.TSimplePlayer _iter3 : struct.playerList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMedalTupleSchemeFactory implements SchemeFactory {
    public TMedalTupleScheme getScheme() {
      return new TMedalTupleScheme();
    }
  }

  private static class TMedalTupleScheme extends TupleScheme<TMedal> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMedal struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetGameFTypeId()) {
        optionals.set(1);
      }
      if (struct.isSetDisciplineId()) {
        optionals.set(2);
      }
      if (struct.isSetGameSTypeId()) {
        optionals.set(3);
      }
      if (struct.isSetMedalMatchId()) {
        optionals.set(4);
      }
      if (struct.isSetMedalType()) {
        optionals.set(5);
      }
      if (struct.isSetOrganisationId()) {
        optionals.set(6);
      }
      if (struct.isSetCompetitorId()) {
        optionals.set(7);
      }
      if (struct.isSetCompetitorType()) {
        optionals.set(8);
      }
      if (struct.isSetGender()) {
        optionals.set(9);
      }
      if (struct.isSetCsid()) {
        optionals.set(10);
      }
      if (struct.isSetCid()) {
        optionals.set(11);
      }
      if (struct.isSetCompetitorName()) {
        optionals.set(12);
      }
      if (struct.isSetResult()) {
        optionals.set(13);
      }
      if (struct.isSetOrganisationName()) {
        optionals.set(14);
      }
      if (struct.isSetDisciplineName()) {
        optionals.set(15);
      }
      if (struct.isSetGameSTypeName()) {
        optionals.set(16);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(17);
      }
      if (struct.isSetMedalAhieveTime()) {
        optionals.set(18);
      }
      if (struct.isSetPlayerList()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetGameFTypeId()) {
        oprot.writeI64(struct.gameFTypeId);
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeI64(struct.disciplineId);
      }
      if (struct.isSetGameSTypeId()) {
        oprot.writeI64(struct.gameSTypeId);
      }
      if (struct.isSetMedalMatchId()) {
        oprot.writeI64(struct.medalMatchId);
      }
      if (struct.isSetMedalType()) {
        oprot.writeI32(struct.medalType.getValue());
      }
      if (struct.isSetOrganisationId()) {
        oprot.writeI64(struct.organisationId);
      }
      if (struct.isSetCompetitorId()) {
        oprot.writeI64(struct.competitorId);
      }
      if (struct.isSetCompetitorType()) {
        oprot.writeI32(struct.competitorType.getValue());
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender.getValue());
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCompetitorName()) {
        oprot.writeString(struct.competitorName);
      }
      if (struct.isSetResult()) {
        oprot.writeString(struct.result);
      }
      if (struct.isSetOrganisationName()) {
        oprot.writeString(struct.organisationName);
      }
      if (struct.isSetDisciplineName()) {
        oprot.writeString(struct.disciplineName);
      }
      if (struct.isSetGameSTypeName()) {
        oprot.writeString(struct.gameSTypeName);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetMedalAhieveTime()) {
        oprot.writeString(struct.medalAhieveTime);
      }
      if (struct.isSetPlayerList()) {
        {
          oprot.writeI32(struct.playerList.size());
          for (com.lesports.qmt.sbd.api.dto.TSimplePlayer _iter4 : struct.playerList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMedal struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameFTypeId = iprot.readI64();
        struct.setGameFTypeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disciplineId = iprot.readI64();
        struct.setDisciplineIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gameSTypeId = iprot.readI64();
        struct.setGameSTypeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.medalMatchId = iprot.readI64();
        struct.setMedalMatchIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.medalType = com.lesports.qmt.sbd.api.common.MedalType.findByValue(iprot.readI32());
        struct.setMedalTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.organisationId = iprot.readI64();
        struct.setOrganisationIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.competitorId = iprot.readI64();
        struct.setCompetitorIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
        struct.setCompetitorTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.gender = com.lesports.qmt.sbd.api.common.Gender.findByValue(iprot.readI32());
        struct.setGenderIsSet(true);
      }
      if (incoming.get(10)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(12)) {
        struct.competitorName = iprot.readString();
        struct.setCompetitorNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.result = iprot.readString();
        struct.setResultIsSet(true);
      }
      if (incoming.get(14)) {
        struct.organisationName = iprot.readString();
        struct.setOrganisationNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.disciplineName = iprot.readString();
        struct.setDisciplineNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.gameSTypeName = iprot.readString();
        struct.setGameSTypeNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(18)) {
        struct.medalAhieveTime = iprot.readString();
        struct.setMedalAhieveTimeIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerList = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(_list5.size);
          com.lesports.qmt.sbd.api.dto.TSimplePlayer _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.lesports.qmt.sbd.api.dto.TSimplePlayer();
            _elem6.read(iprot);
            struct.playerList.add(_elem6);
          }
        }
        struct.setPlayerListIsSet(true);
      }
    }
  }

}

