/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取相关视频的请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetRelatedNewsParam implements org.apache.thrift.TBase<GetRelatedNewsParam, GetRelatedNewsParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetRelatedNewsParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRelatedNewsParam");

  private static final org.apache.thrift.protocol.TField RELATED_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("member", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STAR_FIELD_DESC = new org.apache.thrift.protocol.TField("star", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetRelatedNewsParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetRelatedNewsParamTupleSchemeFactory());
  }

  private List<Long> relatedIds; // optional
  private List<com.lesports.qmt.sbc.api.common.NewsType> types; // optional
  private int member; // optional
  private int star; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATED_IDS((short)1, "relatedIds"),
    TYPES((short)2, "types"),
    MEMBER((short)3, "member"),
    STAR((short)4, "star");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATED_IDS
          return RELATED_IDS;
        case 2: // TYPES
          return TYPES;
        case 3: // MEMBER
          return MEMBER;
        case 4: // STAR
          return STAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMBER_ISSET_ID = 0;
  private static final int __STAR_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RELATED_IDS,_Fields.TYPES,_Fields.MEMBER,_Fields.STAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATED_IDS, new org.apache.thrift.meta_data.FieldMetaData("relatedIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.NewsType.class))));
    tmpMap.put(_Fields.MEMBER, new org.apache.thrift.meta_data.FieldMetaData("member", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STAR, new org.apache.thrift.meta_data.FieldMetaData("star", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRelatedNewsParam.class, metaDataMap);
  }

  public GetRelatedNewsParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetRelatedNewsParam(GetRelatedNewsParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRelatedIds()) {
      List<Long> __this__relatedIds = new ArrayList<Long>(other.relatedIds);
      this.relatedIds = __this__relatedIds;
    }
    if (other.isSetTypes()) {
      List<com.lesports.qmt.sbc.api.common.NewsType> __this__types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>(other.types.size());
      for (com.lesports.qmt.sbc.api.common.NewsType other_element : other.types) {
        __this__types.add(other_element);
      }
      this.types = __this__types;
    }
    this.member = other.member;
    this.star = other.star;
  }

  public GetRelatedNewsParam deepCopy() {
    return new GetRelatedNewsParam(this);
  }

  @Override
  public void clear() {
    this.relatedIds = null;
    this.types = null;
    setMemberIsSet(false);
    this.member = 0;
    setStarIsSet(false);
    this.star = 0;
  }

  public int getRelatedIdsSize() {
    return (this.relatedIds == null) ? 0 : this.relatedIds.size();
  }

  public java.util.Iterator<Long> getRelatedIdsIterator() {
    return (this.relatedIds == null) ? null : this.relatedIds.iterator();
  }

  public void addToRelatedIds(long elem) {
    if (this.relatedIds == null) {
      this.relatedIds = new ArrayList<Long>();
    }
    this.relatedIds.add(elem);
  }

  public List<Long> getRelatedIds() {
    return this.relatedIds;
  }

  public void setRelatedIds(List<Long> relatedIds) {
    this.relatedIds = relatedIds;
  }

  public void unsetRelatedIds() {
    this.relatedIds = null;
  }

  /** Returns true if field relatedIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedIds() {
    return this.relatedIds != null;
  }

  public void setRelatedIdsIsSet(boolean value) {
    if (!value) {
      this.relatedIds = null;
    }
  }

  public int getTypesSize() {
    return (this.types == null) ? 0 : this.types.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbc.api.common.NewsType> getTypesIterator() {
    return (this.types == null) ? null : this.types.iterator();
  }

  public void addToTypes(com.lesports.qmt.sbc.api.common.NewsType elem) {
    if (this.types == null) {
      this.types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>();
    }
    this.types.add(elem);
  }

  public List<com.lesports.qmt.sbc.api.common.NewsType> getTypes() {
    return this.types;
  }

  public void setTypes(List<com.lesports.qmt.sbc.api.common.NewsType> types) {
    this.types = types;
  }

  public void unsetTypes() {
    this.types = null;
  }

  /** Returns true if field types is set (has been assigned a value) and false otherwise */
  public boolean isSetTypes() {
    return this.types != null;
  }

  public void setTypesIsSet(boolean value) {
    if (!value) {
      this.types = null;
    }
  }

  public int getMember() {
    return this.member;
  }

  public void setMember(int member) {
    this.member = member;
    setMemberIsSet(true);
  }

  public void unsetMember() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMBER_ISSET_ID);
  }

  /** Returns true if field member is set (has been assigned a value) and false otherwise */
  public boolean isSetMember() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMBER_ISSET_ID);
  }

  public void setMemberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMBER_ISSET_ID, value);
  }

  public int getStar() {
    return this.star;
  }

  public void setStar(int star) {
    this.star = star;
    setStarIsSet(true);
  }

  public void unsetStar() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STAR_ISSET_ID);
  }

  /** Returns true if field star is set (has been assigned a value) and false otherwise */
  public boolean isSetStar() {
    return EncodingUtils.testBit(__isset_bitfield, __STAR_ISSET_ID);
  }

  public void setStarIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STAR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATED_IDS:
      if (value == null) {
        unsetRelatedIds();
      } else {
        setRelatedIds((List<Long>)value);
      }
      break;

    case TYPES:
      if (value == null) {
        unsetTypes();
      } else {
        setTypes((List<com.lesports.qmt.sbc.api.common.NewsType>)value);
      }
      break;

    case MEMBER:
      if (value == null) {
        unsetMember();
      } else {
        setMember((Integer)value);
      }
      break;

    case STAR:
      if (value == null) {
        unsetStar();
      } else {
        setStar((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATED_IDS:
      return getRelatedIds();

    case TYPES:
      return getTypes();

    case MEMBER:
      return Integer.valueOf(getMember());

    case STAR:
      return Integer.valueOf(getStar());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATED_IDS:
      return isSetRelatedIds();
    case TYPES:
      return isSetTypes();
    case MEMBER:
      return isSetMember();
    case STAR:
      return isSetStar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetRelatedNewsParam)
      return this.equals((GetRelatedNewsParam)that);
    return false;
  }

  public boolean equals(GetRelatedNewsParam that) {
    if (that == null)
      return false;

    boolean this_present_relatedIds = true && this.isSetRelatedIds();
    boolean that_present_relatedIds = true && that.isSetRelatedIds();
    if (this_present_relatedIds || that_present_relatedIds) {
      if (!(this_present_relatedIds && that_present_relatedIds))
        return false;
      if (!this.relatedIds.equals(that.relatedIds))
        return false;
    }

    boolean this_present_types = true && this.isSetTypes();
    boolean that_present_types = true && that.isSetTypes();
    if (this_present_types || that_present_types) {
      if (!(this_present_types && that_present_types))
        return false;
      if (!this.types.equals(that.types))
        return false;
    }

    boolean this_present_member = true && this.isSetMember();
    boolean that_present_member = true && that.isSetMember();
    if (this_present_member || that_present_member) {
      if (!(this_present_member && that_present_member))
        return false;
      if (this.member != that.member)
        return false;
    }

    boolean this_present_star = true && this.isSetStar();
    boolean that_present_star = true && that.isSetStar();
    if (this_present_star || that_present_star) {
      if (!(this_present_star && that_present_star))
        return false;
      if (this.star != that.star)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_relatedIds = true && (isSetRelatedIds());
    list.add(present_relatedIds);
    if (present_relatedIds)
      list.add(relatedIds);

    boolean present_types = true && (isSetTypes());
    list.add(present_types);
    if (present_types)
      list.add(types);

    boolean present_member = true && (isSetMember());
    list.add(present_member);
    if (present_member)
      list.add(member);

    boolean present_star = true && (isSetStar());
    list.add(present_star);
    if (present_star)
      list.add(star);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetRelatedNewsParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelatedIds()).compareTo(other.isSetRelatedIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedIds, other.relatedIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMember()).compareTo(other.isSetMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.member, other.member);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStar()).compareTo(other.isSetStar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.star, other.star);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetRelatedNewsParam(");
    boolean first = true;

    if (isSetRelatedIds()) {
      sb.append("relatedIds:");
      if (this.relatedIds == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedIds);
      }
      first = false;
    }
    if (isSetTypes()) {
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
    }
    if (isSetMember()) {
      if (!first) sb.append(", ");
      sb.append("member:");
      sb.append(this.member);
      first = false;
    }
    if (isSetStar()) {
      if (!first) sb.append(", ");
      sb.append("star:");
      sb.append(this.star);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetRelatedNewsParamStandardSchemeFactory implements SchemeFactory {
    public GetRelatedNewsParamStandardScheme getScheme() {
      return new GetRelatedNewsParamStandardScheme();
    }
  }

  private static class GetRelatedNewsParamStandardScheme extends StandardScheme<GetRelatedNewsParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetRelatedNewsParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATED_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.relatedIds = new ArrayList<Long>(_list8.size);
                long _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI64();
                  struct.relatedIds.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setRelatedIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>(_list11.size);
                com.lesports.qmt.sbc.api.common.NewsType _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
                  struct.types.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.member = iprot.readI32();
              struct.setMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.star = iprot.readI32();
              struct.setStarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetRelatedNewsParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relatedIds != null) {
        if (struct.isSetRelatedIds()) {
          oprot.writeFieldBegin(RELATED_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.relatedIds.size()));
            for (long _iter14 : struct.relatedIds)
            {
              oprot.writeI64(_iter14);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.types != null) {
        if (struct.isSetTypes()) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.types.size()));
            for (com.lesports.qmt.sbc.api.common.NewsType _iter15 : struct.types)
            {
              oprot.writeI32(_iter15.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMember()) {
        oprot.writeFieldBegin(MEMBER_FIELD_DESC);
        oprot.writeI32(struct.member);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStar()) {
        oprot.writeFieldBegin(STAR_FIELD_DESC);
        oprot.writeI32(struct.star);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetRelatedNewsParamTupleSchemeFactory implements SchemeFactory {
    public GetRelatedNewsParamTupleScheme getScheme() {
      return new GetRelatedNewsParamTupleScheme();
    }
  }

  private static class GetRelatedNewsParamTupleScheme extends TupleScheme<GetRelatedNewsParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetRelatedNewsParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelatedIds()) {
        optionals.set(0);
      }
      if (struct.isSetTypes()) {
        optionals.set(1);
      }
      if (struct.isSetMember()) {
        optionals.set(2);
      }
      if (struct.isSetStar()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRelatedIds()) {
        {
          oprot.writeI32(struct.relatedIds.size());
          for (long _iter16 : struct.relatedIds)
          {
            oprot.writeI64(_iter16);
          }
        }
      }
      if (struct.isSetTypes()) {
        {
          oprot.writeI32(struct.types.size());
          for (com.lesports.qmt.sbc.api.common.NewsType _iter17 : struct.types)
          {
            oprot.writeI32(_iter17.getValue());
          }
        }
      }
      if (struct.isSetMember()) {
        oprot.writeI32(struct.member);
      }
      if (struct.isSetStar()) {
        oprot.writeI32(struct.star);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetRelatedNewsParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.relatedIds = new ArrayList<Long>(_list18.size);
          long _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI64();
            struct.relatedIds.add(_elem19);
          }
        }
        struct.setRelatedIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>(_list21.size);
          com.lesports.qmt.sbc.api.common.NewsType _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
            struct.types.add(_elem22);
          }
        }
        struct.setTypesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.member = iprot.readI32();
        struct.setMemberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.star = iprot.readI32();
        struct.setStarIsSet(true);
      }
    }
  }

}

