/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TDetailMatch implements org.apache.thrift.TBase<TDetailMatch, TDetailMatch._Fields>, java.io.Serializable, Cloneable, Comparable<TDetailMatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDetailMatch");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VENUE_FIELD_DESC = new org.apache.thrift.protocol.TField("venue", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("round", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SUBSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("substation", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField COMPETITORS_FIELD_DESC = new org.apache.thrift.protocol.TField("competitors", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField SQUADS_FIELD_DESC = new org.apache.thrift.protocol.TField("squads", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField COMPETITOR_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorStats", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField MOMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("moment", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField BEST_PLAYER_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("bestPlayerStats", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField WEATHER_FIELD_DESC = new org.apache.thrift.protocol.TField("weather", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField JUDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("judge", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_WEATHERS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangWeathers", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_JUDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangJudges", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_VENUES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangVenues", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_MOMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangMoments", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField EIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("eids", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField VS_FIELD_DESC = new org.apache.thrift.protocol.TField("vs", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField EXTEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendInfos", org.apache.thrift.protocol.TType.MAP, (short)31);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField DISCIPLINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("disciplineId", org.apache.thrift.protocol.TType.I64, (short)34);
  private static final org.apache.thrift.protocol.TField PARTNER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerType", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField CURRENT_MOMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMoment", org.apache.thrift.protocol.TType.STRUCT, (short)36);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDetailMatchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDetailMatchTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private long cid; // optional
  private long csid; // optional
  private String startTime; // optional
  private String endTime; // optional
  private String venue; // optional
  private com.lesports.api.common.MatchStatus status; // required
  private String stage; // optional
  private String round; // optional
  private String group; // optional
  private String substation; // optional
  private int number; // optional
  private List<TCompetitor> competitors; // optional
  private List<TSquad> squads; // optional
  private long eid; // optional
  private List<TCompetitorStat> competitorStats; // optional
  private String moment; // optional
  private List<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private List<TSquad> bestPlayerStats; // optional
  private String weather; // optional
  private String judge; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangWeathers; // optional
  private List<com.lesports.api.common.LangString> multiLangJudges; // optional
  private List<com.lesports.api.common.LangString> multiLangVenues; // optional
  private List<com.lesports.api.common.LangString> multiLangMoments; // optional
  private List<com.lesports.api.common.CountryLangId> eids; // optional
  private boolean vs; // optional
  private Map<String,String> extendInfos; // optional
  private long gameSType; // optional
  private long gameFType; // optional
  private long disciplineId; // optional
  private int partnerType; // optional
  private TCurrentMoment currentMoment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CID((short)3, "cid"),
    CSID((short)4, "csid"),
    START_TIME((short)5, "startTime"),
    END_TIME((short)6, "endTime"),
    VENUE((short)7, "venue"),
    /**
     * 
     * @see com.lesports.api.common.MatchStatus
     */
    STATUS((short)8, "status"),
    STAGE((short)9, "stage"),
    ROUND((short)10, "round"),
    GROUP((short)11, "group"),
    SUBSTATION((short)13, "substation"),
    NUMBER((short)14, "number"),
    COMPETITORS((short)15, "competitors"),
    SQUADS((short)16, "squads"),
    EID((short)17, "eid"),
    COMPETITOR_STATS((short)18, "competitorStats"),
    MOMENT((short)19, "moment"),
    TAGS((short)20, "tags"),
    BEST_PLAYER_STATS((short)21, "bestPlayerStats"),
    WEATHER((short)22, "weather"),
    JUDGE((short)23, "judge"),
    MULTI_LANG_NAMES((short)24, "multiLangNames"),
    MULTI_LANG_WEATHERS((short)25, "multiLangWeathers"),
    MULTI_LANG_JUDGES((short)26, "multiLangJudges"),
    MULTI_LANG_VENUES((short)27, "multiLangVenues"),
    MULTI_LANG_MOMENTS((short)28, "multiLangMoments"),
    EIDS((short)29, "eids"),
    VS((short)30, "vs"),
    EXTEND_INFOS((short)31, "extendInfos"),
    GAME_STYPE((short)32, "gameSType"),
    GAME_FTYPE((short)33, "gameFType"),
    DISCIPLINE_ID((short)34, "disciplineId"),
    PARTNER_TYPE((short)35, "partnerType"),
    CURRENT_MOMENT((short)36, "currentMoment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CID
          return CID;
        case 4: // CSID
          return CSID;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // VENUE
          return VENUE;
        case 8: // STATUS
          return STATUS;
        case 9: // STAGE
          return STAGE;
        case 10: // ROUND
          return ROUND;
        case 11: // GROUP
          return GROUP;
        case 13: // SUBSTATION
          return SUBSTATION;
        case 14: // NUMBER
          return NUMBER;
        case 15: // COMPETITORS
          return COMPETITORS;
        case 16: // SQUADS
          return SQUADS;
        case 17: // EID
          return EID;
        case 18: // COMPETITOR_STATS
          return COMPETITOR_STATS;
        case 19: // MOMENT
          return MOMENT;
        case 20: // TAGS
          return TAGS;
        case 21: // BEST_PLAYER_STATS
          return BEST_PLAYER_STATS;
        case 22: // WEATHER
          return WEATHER;
        case 23: // JUDGE
          return JUDGE;
        case 24: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 25: // MULTI_LANG_WEATHERS
          return MULTI_LANG_WEATHERS;
        case 26: // MULTI_LANG_JUDGES
          return MULTI_LANG_JUDGES;
        case 27: // MULTI_LANG_VENUES
          return MULTI_LANG_VENUES;
        case 28: // MULTI_LANG_MOMENTS
          return MULTI_LANG_MOMENTS;
        case 29: // EIDS
          return EIDS;
        case 30: // VS
          return VS;
        case 31: // EXTEND_INFOS
          return EXTEND_INFOS;
        case 32: // GAME_STYPE
          return GAME_STYPE;
        case 33: // GAME_FTYPE
          return GAME_FTYPE;
        case 34: // DISCIPLINE_ID
          return DISCIPLINE_ID;
        case 35: // PARTNER_TYPE
          return PARTNER_TYPE;
        case 36: // CURRENT_MOMENT
          return CURRENT_MOMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private static final int __NUMBER_ISSET_ID = 3;
  private static final int __EID_ISSET_ID = 4;
  private static final int __VS_ISSET_ID = 5;
  private static final int __GAMESTYPE_ISSET_ID = 6;
  private static final int __GAMEFTYPE_ISSET_ID = 7;
  private static final int __DISCIPLINEID_ISSET_ID = 8;
  private static final int __PARTNERTYPE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.CSID,_Fields.START_TIME,_Fields.END_TIME,_Fields.VENUE,_Fields.STAGE,_Fields.ROUND,_Fields.GROUP,_Fields.SUBSTATION,_Fields.NUMBER,_Fields.COMPETITORS,_Fields.SQUADS,_Fields.EID,_Fields.COMPETITOR_STATS,_Fields.MOMENT,_Fields.TAGS,_Fields.BEST_PLAYER_STATS,_Fields.WEATHER,_Fields.JUDGE,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_WEATHERS,_Fields.MULTI_LANG_JUDGES,_Fields.MULTI_LANG_VENUES,_Fields.MULTI_LANG_MOMENTS,_Fields.EIDS,_Fields.VS,_Fields.EXTEND_INFOS,_Fields.GAME_STYPE,_Fields.GAME_FTYPE,_Fields.DISCIPLINE_ID,_Fields.PARTNER_TYPE,_Fields.CURRENT_MOMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENUE, new org.apache.thrift.meta_data.FieldMetaData("venue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.MatchStatus.class)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUND, new org.apache.thrift.meta_data.FieldMetaData("round", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSTATION, new org.apache.thrift.meta_data.FieldMetaData("substation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPETITORS, new org.apache.thrift.meta_data.FieldMetaData("competitors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompetitor.class))));
    tmpMap.put(_Fields.SQUADS, new org.apache.thrift.meta_data.FieldMetaData("squads", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSquad.class))));
    tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_STATS, new org.apache.thrift.meta_data.FieldMetaData("competitorStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompetitorStat.class))));
    tmpMap.put(_Fields.MOMENT, new org.apache.thrift.meta_data.FieldMetaData("moment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.BEST_PLAYER_STATS, new org.apache.thrift.meta_data.FieldMetaData("bestPlayerStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSquad.class))));
    tmpMap.put(_Fields.WEATHER, new org.apache.thrift.meta_data.FieldMetaData("weather", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JUDGE, new org.apache.thrift.meta_data.FieldMetaData("judge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_WEATHERS, new org.apache.thrift.meta_data.FieldMetaData("multiLangWeathers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_JUDGES, new org.apache.thrift.meta_data.FieldMetaData("multiLangJudges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_VENUES, new org.apache.thrift.meta_data.FieldMetaData("multiLangVenues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_MOMENTS, new org.apache.thrift.meta_data.FieldMetaData("multiLangMoments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.EIDS, new org.apache.thrift.meta_data.FieldMetaData("eids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CountryLangId.class))));
    tmpMap.put(_Fields.VS, new org.apache.thrift.meta_data.FieldMetaData("vs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extendInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCIPLINE_ID, new org.apache.thrift.meta_data.FieldMetaData("disciplineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTNER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partnerType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_MOMENT, new org.apache.thrift.meta_data.FieldMetaData("currentMoment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCurrentMoment.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDetailMatch.class, metaDataMap);
  }

  public TDetailMatch() {
  }

  public TDetailMatch(
    long id,
    String name,
    com.lesports.api.common.MatchStatus status)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDetailMatch(TDetailMatch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.cid = other.cid;
    this.csid = other.csid;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetVenue()) {
      this.venue = other.venue;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStage()) {
      this.stage = other.stage;
    }
    if (other.isSetRound()) {
      this.round = other.round;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetSubstation()) {
      this.substation = other.substation;
    }
    this.number = other.number;
    if (other.isSetCompetitors()) {
      List<TCompetitor> __this__competitors = new ArrayList<TCompetitor>(other.competitors.size());
      for (TCompetitor other_element : other.competitors) {
        __this__competitors.add(new TCompetitor(other_element));
      }
      this.competitors = __this__competitors;
    }
    if (other.isSetSquads()) {
      List<TSquad> __this__squads = new ArrayList<TSquad>(other.squads.size());
      for (TSquad other_element : other.squads) {
        __this__squads.add(new TSquad(other_element));
      }
      this.squads = __this__squads;
    }
    this.eid = other.eid;
    if (other.isSetCompetitorStats()) {
      List<TCompetitorStat> __this__competitorStats = new ArrayList<TCompetitorStat>(other.competitorStats.size());
      for (TCompetitorStat other_element : other.competitorStats) {
        __this__competitorStats.add(new TCompetitorStat(other_element));
      }
      this.competitorStats = __this__competitorStats;
    }
    if (other.isSetMoment()) {
      this.moment = other.moment;
    }
    if (other.isSetTags()) {
      List<com.lesports.qmt.config.api.dto.TTag> __this__tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetBestPlayerStats()) {
      List<TSquad> __this__bestPlayerStats = new ArrayList<TSquad>(other.bestPlayerStats.size());
      for (TSquad other_element : other.bestPlayerStats) {
        __this__bestPlayerStats.add(new TSquad(other_element));
      }
      this.bestPlayerStats = __this__bestPlayerStats;
    }
    if (other.isSetWeather()) {
      this.weather = other.weather;
    }
    if (other.isSetJudge()) {
      this.judge = other.judge;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangWeathers()) {
      List<com.lesports.api.common.LangString> __this__multiLangWeathers = new ArrayList<com.lesports.api.common.LangString>(other.multiLangWeathers.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangWeathers) {
        __this__multiLangWeathers.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangWeathers = __this__multiLangWeathers;
    }
    if (other.isSetMultiLangJudges()) {
      List<com.lesports.api.common.LangString> __this__multiLangJudges = new ArrayList<com.lesports.api.common.LangString>(other.multiLangJudges.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangJudges) {
        __this__multiLangJudges.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangJudges = __this__multiLangJudges;
    }
    if (other.isSetMultiLangVenues()) {
      List<com.lesports.api.common.LangString> __this__multiLangVenues = new ArrayList<com.lesports.api.common.LangString>(other.multiLangVenues.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangVenues) {
        __this__multiLangVenues.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangVenues = __this__multiLangVenues;
    }
    if (other.isSetMultiLangMoments()) {
      List<com.lesports.api.common.LangString> __this__multiLangMoments = new ArrayList<com.lesports.api.common.LangString>(other.multiLangMoments.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangMoments) {
        __this__multiLangMoments.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangMoments = __this__multiLangMoments;
    }
    if (other.isSetEids()) {
      List<com.lesports.api.common.CountryLangId> __this__eids = new ArrayList<com.lesports.api.common.CountryLangId>(other.eids.size());
      for (com.lesports.api.common.CountryLangId other_element : other.eids) {
        __this__eids.add(new com.lesports.api.common.CountryLangId(other_element));
      }
      this.eids = __this__eids;
    }
    this.vs = other.vs;
    if (other.isSetExtendInfos()) {
      Map<String,String> __this__extendInfos = new HashMap<String,String>(other.extendInfos);
      this.extendInfos = __this__extendInfos;
    }
    this.gameSType = other.gameSType;
    this.gameFType = other.gameFType;
    this.disciplineId = other.disciplineId;
    this.partnerType = other.partnerType;
    if (other.isSetCurrentMoment()) {
      this.currentMoment = new TCurrentMoment(other.currentMoment);
    }
  }

  public TDetailMatch deepCopy() {
    return new TDetailMatch(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setCidIsSet(false);
    this.cid = 0;
    setCsidIsSet(false);
    this.csid = 0;
    this.startTime = null;
    this.endTime = null;
    this.venue = null;
    this.status = null;
    this.stage = null;
    this.round = null;
    this.group = null;
    this.substation = null;
    setNumberIsSet(false);
    this.number = 0;
    this.competitors = null;
    this.squads = null;
    setEidIsSet(false);
    this.eid = 0;
    this.competitorStats = null;
    this.moment = null;
    this.tags = null;
    this.bestPlayerStats = null;
    this.weather = null;
    this.judge = null;
    this.multiLangNames = null;
    this.multiLangWeathers = null;
    this.multiLangJudges = null;
    this.multiLangVenues = null;
    this.multiLangMoments = null;
    this.eids = null;
    setVsIsSet(false);
    this.vs = false;
    this.extendInfos = null;
    setGameSTypeIsSet(false);
    this.gameSType = 0;
    setGameFTypeIsSet(false);
    this.gameFType = 0;
    setDisciplineIdIsSet(false);
    this.disciplineId = 0;
    setPartnerTypeIsSet(false);
    this.partnerType = 0;
    this.currentMoment = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getVenue() {
    return this.venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }

  public void unsetVenue() {
    this.venue = null;
  }

  /** Returns true if field venue is set (has been assigned a value) and false otherwise */
  public boolean isSetVenue() {
    return this.venue != null;
  }

  public void setVenueIsSet(boolean value) {
    if (!value) {
      this.venue = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.MatchStatus
   */
  public com.lesports.api.common.MatchStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.lesports.api.common.MatchStatus
   */
  public void setStatus(com.lesports.api.common.MatchStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStage() {
    return this.stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }

  public void unsetStage() {
    this.stage = null;
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return this.stage != null;
  }

  public void setStageIsSet(boolean value) {
    if (!value) {
      this.stage = null;
    }
  }

  public String getRound() {
    return this.round;
  }

  public void setRound(String round) {
    this.round = round;
  }

  public void unsetRound() {
    this.round = null;
  }

  /** Returns true if field round is set (has been assigned a value) and false otherwise */
  public boolean isSetRound() {
    return this.round != null;
  }

  public void setRoundIsSet(boolean value) {
    if (!value) {
      this.round = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getSubstation() {
    return this.substation;
  }

  public void setSubstation(String substation) {
    this.substation = substation;
  }

  public void unsetSubstation() {
    this.substation = null;
  }

  /** Returns true if field substation is set (has been assigned a value) and false otherwise */
  public boolean isSetSubstation() {
    return this.substation != null;
  }

  public void setSubstationIsSet(boolean value) {
    if (!value) {
      this.substation = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public int getCompetitorsSize() {
    return (this.competitors == null) ? 0 : this.competitors.size();
  }

  public java.util.Iterator<TCompetitor> getCompetitorsIterator() {
    return (this.competitors == null) ? null : this.competitors.iterator();
  }

  public void addToCompetitors(TCompetitor elem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<TCompetitor>();
    }
    this.competitors.add(elem);
  }

  public List<TCompetitor> getCompetitors() {
    return this.competitors;
  }

  public void setCompetitors(List<TCompetitor> competitors) {
    this.competitors = competitors;
  }

  public void unsetCompetitors() {
    this.competitors = null;
  }

  /** Returns true if field competitors is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitors() {
    return this.competitors != null;
  }

  public void setCompetitorsIsSet(boolean value) {
    if (!value) {
      this.competitors = null;
    }
  }

  public int getSquadsSize() {
    return (this.squads == null) ? 0 : this.squads.size();
  }

  public java.util.Iterator<TSquad> getSquadsIterator() {
    return (this.squads == null) ? null : this.squads.iterator();
  }

  public void addToSquads(TSquad elem) {
    if (this.squads == null) {
      this.squads = new ArrayList<TSquad>();
    }
    this.squads.add(elem);
  }

  public List<TSquad> getSquads() {
    return this.squads;
  }

  public void setSquads(List<TSquad> squads) {
    this.squads = squads;
  }

  public void unsetSquads() {
    this.squads = null;
  }

  /** Returns true if field squads is set (has been assigned a value) and false otherwise */
  public boolean isSetSquads() {
    return this.squads != null;
  }

  public void setSquadsIsSet(boolean value) {
    if (!value) {
      this.squads = null;
    }
  }

  public long getEid() {
    return this.eid;
  }

  public void setEid(long eid) {
    this.eid = eid;
    setEidIsSet(true);
  }

  public void unsetEid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
  }

  /** Returns true if field eid is set (has been assigned a value) and false otherwise */
  public boolean isSetEid() {
    return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
  }

  public void setEidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
  }

  public int getCompetitorStatsSize() {
    return (this.competitorStats == null) ? 0 : this.competitorStats.size();
  }

  public java.util.Iterator<TCompetitorStat> getCompetitorStatsIterator() {
    return (this.competitorStats == null) ? null : this.competitorStats.iterator();
  }

  public void addToCompetitorStats(TCompetitorStat elem) {
    if (this.competitorStats == null) {
      this.competitorStats = new ArrayList<TCompetitorStat>();
    }
    this.competitorStats.add(elem);
  }

  public List<TCompetitorStat> getCompetitorStats() {
    return this.competitorStats;
  }

  public void setCompetitorStats(List<TCompetitorStat> competitorStats) {
    this.competitorStats = competitorStats;
  }

  public void unsetCompetitorStats() {
    this.competitorStats = null;
  }

  /** Returns true if field competitorStats is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorStats() {
    return this.competitorStats != null;
  }

  public void setCompetitorStatsIsSet(boolean value) {
    if (!value) {
      this.competitorStats = null;
    }
  }

  public String getMoment() {
    return this.moment;
  }

  public void setMoment(String moment) {
    this.moment = moment;
  }

  public void unsetMoment() {
    this.moment = null;
  }

  /** Returns true if field moment is set (has been assigned a value) and false otherwise */
  public boolean isSetMoment() {
    return this.moment != null;
  }

  public void setMomentIsSet(boolean value) {
    if (!value) {
      this.moment = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public List<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getBestPlayerStatsSize() {
    return (this.bestPlayerStats == null) ? 0 : this.bestPlayerStats.size();
  }

  public java.util.Iterator<TSquad> getBestPlayerStatsIterator() {
    return (this.bestPlayerStats == null) ? null : this.bestPlayerStats.iterator();
  }

  public void addToBestPlayerStats(TSquad elem) {
    if (this.bestPlayerStats == null) {
      this.bestPlayerStats = new ArrayList<TSquad>();
    }
    this.bestPlayerStats.add(elem);
  }

  public List<TSquad> getBestPlayerStats() {
    return this.bestPlayerStats;
  }

  public void setBestPlayerStats(List<TSquad> bestPlayerStats) {
    this.bestPlayerStats = bestPlayerStats;
  }

  public void unsetBestPlayerStats() {
    this.bestPlayerStats = null;
  }

  /** Returns true if field bestPlayerStats is set (has been assigned a value) and false otherwise */
  public boolean isSetBestPlayerStats() {
    return this.bestPlayerStats != null;
  }

  public void setBestPlayerStatsIsSet(boolean value) {
    if (!value) {
      this.bestPlayerStats = null;
    }
  }

  public String getWeather() {
    return this.weather;
  }

  public void setWeather(String weather) {
    this.weather = weather;
  }

  public void unsetWeather() {
    this.weather = null;
  }

  /** Returns true if field weather is set (has been assigned a value) and false otherwise */
  public boolean isSetWeather() {
    return this.weather != null;
  }

  public void setWeatherIsSet(boolean value) {
    if (!value) {
      this.weather = null;
    }
  }

  public String getJudge() {
    return this.judge;
  }

  public void setJudge(String judge) {
    this.judge = judge;
  }

  public void unsetJudge() {
    this.judge = null;
  }

  /** Returns true if field judge is set (has been assigned a value) and false otherwise */
  public boolean isSetJudge() {
    return this.judge != null;
  }

  public void setJudgeIsSet(boolean value) {
    if (!value) {
      this.judge = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangWeathersSize() {
    return (this.multiLangWeathers == null) ? 0 : this.multiLangWeathers.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangWeathersIterator() {
    return (this.multiLangWeathers == null) ? null : this.multiLangWeathers.iterator();
  }

  public void addToMultiLangWeathers(com.lesports.api.common.LangString elem) {
    if (this.multiLangWeathers == null) {
      this.multiLangWeathers = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangWeathers.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangWeathers() {
    return this.multiLangWeathers;
  }

  public void setMultiLangWeathers(List<com.lesports.api.common.LangString> multiLangWeathers) {
    this.multiLangWeathers = multiLangWeathers;
  }

  public void unsetMultiLangWeathers() {
    this.multiLangWeathers = null;
  }

  /** Returns true if field multiLangWeathers is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangWeathers() {
    return this.multiLangWeathers != null;
  }

  public void setMultiLangWeathersIsSet(boolean value) {
    if (!value) {
      this.multiLangWeathers = null;
    }
  }

  public int getMultiLangJudgesSize() {
    return (this.multiLangJudges == null) ? 0 : this.multiLangJudges.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangJudgesIterator() {
    return (this.multiLangJudges == null) ? null : this.multiLangJudges.iterator();
  }

  public void addToMultiLangJudges(com.lesports.api.common.LangString elem) {
    if (this.multiLangJudges == null) {
      this.multiLangJudges = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangJudges.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangJudges() {
    return this.multiLangJudges;
  }

  public void setMultiLangJudges(List<com.lesports.api.common.LangString> multiLangJudges) {
    this.multiLangJudges = multiLangJudges;
  }

  public void unsetMultiLangJudges() {
    this.multiLangJudges = null;
  }

  /** Returns true if field multiLangJudges is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangJudges() {
    return this.multiLangJudges != null;
  }

  public void setMultiLangJudgesIsSet(boolean value) {
    if (!value) {
      this.multiLangJudges = null;
    }
  }

  public int getMultiLangVenuesSize() {
    return (this.multiLangVenues == null) ? 0 : this.multiLangVenues.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangVenuesIterator() {
    return (this.multiLangVenues == null) ? null : this.multiLangVenues.iterator();
  }

  public void addToMultiLangVenues(com.lesports.api.common.LangString elem) {
    if (this.multiLangVenues == null) {
      this.multiLangVenues = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangVenues.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangVenues() {
    return this.multiLangVenues;
  }

  public void setMultiLangVenues(List<com.lesports.api.common.LangString> multiLangVenues) {
    this.multiLangVenues = multiLangVenues;
  }

  public void unsetMultiLangVenues() {
    this.multiLangVenues = null;
  }

  /** Returns true if field multiLangVenues is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangVenues() {
    return this.multiLangVenues != null;
  }

  public void setMultiLangVenuesIsSet(boolean value) {
    if (!value) {
      this.multiLangVenues = null;
    }
  }

  public int getMultiLangMomentsSize() {
    return (this.multiLangMoments == null) ? 0 : this.multiLangMoments.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangMomentsIterator() {
    return (this.multiLangMoments == null) ? null : this.multiLangMoments.iterator();
  }

  public void addToMultiLangMoments(com.lesports.api.common.LangString elem) {
    if (this.multiLangMoments == null) {
      this.multiLangMoments = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangMoments.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangMoments() {
    return this.multiLangMoments;
  }

  public void setMultiLangMoments(List<com.lesports.api.common.LangString> multiLangMoments) {
    this.multiLangMoments = multiLangMoments;
  }

  public void unsetMultiLangMoments() {
    this.multiLangMoments = null;
  }

  /** Returns true if field multiLangMoments is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangMoments() {
    return this.multiLangMoments != null;
  }

  public void setMultiLangMomentsIsSet(boolean value) {
    if (!value) {
      this.multiLangMoments = null;
    }
  }

  public int getEidsSize() {
    return (this.eids == null) ? 0 : this.eids.size();
  }

  public java.util.Iterator<com.lesports.api.common.CountryLangId> getEidsIterator() {
    return (this.eids == null) ? null : this.eids.iterator();
  }

  public void addToEids(com.lesports.api.common.CountryLangId elem) {
    if (this.eids == null) {
      this.eids = new ArrayList<com.lesports.api.common.CountryLangId>();
    }
    this.eids.add(elem);
  }

  public List<com.lesports.api.common.CountryLangId> getEids() {
    return this.eids;
  }

  public void setEids(List<com.lesports.api.common.CountryLangId> eids) {
    this.eids = eids;
  }

  public void unsetEids() {
    this.eids = null;
  }

  /** Returns true if field eids is set (has been assigned a value) and false otherwise */
  public boolean isSetEids() {
    return this.eids != null;
  }

  public void setEidsIsSet(boolean value) {
    if (!value) {
      this.eids = null;
    }
  }

  public boolean isVs() {
    return this.vs;
  }

  public void setVs(boolean vs) {
    this.vs = vs;
    setVsIsSet(true);
  }

  public void unsetVs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VS_ISSET_ID);
  }

  /** Returns true if field vs is set (has been assigned a value) and false otherwise */
  public boolean isSetVs() {
    return EncodingUtils.testBit(__isset_bitfield, __VS_ISSET_ID);
  }

  public void setVsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VS_ISSET_ID, value);
  }

  public int getExtendInfosSize() {
    return (this.extendInfos == null) ? 0 : this.extendInfos.size();
  }

  public void putToExtendInfos(String key, String val) {
    if (this.extendInfos == null) {
      this.extendInfos = new HashMap<String,String>();
    }
    this.extendInfos.put(key, val);
  }

  public Map<String,String> getExtendInfos() {
    return this.extendInfos;
  }

  public void setExtendInfos(Map<String,String> extendInfos) {
    this.extendInfos = extendInfos;
  }

  public void unsetExtendInfos() {
    this.extendInfos = null;
  }

  /** Returns true if field extendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendInfos() {
    return this.extendInfos != null;
  }

  public void setExtendInfosIsSet(boolean value) {
    if (!value) {
      this.extendInfos = null;
    }
  }

  public long getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(long gameSType) {
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  public void unsetGameSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  public void setGameSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPE_ISSET_ID, value);
  }

  public long getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(long gameFType) {
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
  }

  public void unsetGameFType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  public void setGameFTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID, value);
  }

  public long getDisciplineId() {
    return this.disciplineId;
  }

  public void setDisciplineId(long disciplineId) {
    this.disciplineId = disciplineId;
    setDisciplineIdIsSet(true);
  }

  public void unsetDisciplineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  /** Returns true if field disciplineId is set (has been assigned a value) and false otherwise */
  public boolean isSetDisciplineId() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  public void setDisciplineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID, value);
  }

  public int getPartnerType() {
    return this.partnerType;
  }

  public void setPartnerType(int partnerType) {
    this.partnerType = partnerType;
    setPartnerTypeIsSet(true);
  }

  public void unsetPartnerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID);
  }

  /** Returns true if field partnerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerType() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID);
  }

  public void setPartnerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID, value);
  }

  public TCurrentMoment getCurrentMoment() {
    return this.currentMoment;
  }

  public void setCurrentMoment(TCurrentMoment currentMoment) {
    this.currentMoment = currentMoment;
  }

  public void unsetCurrentMoment() {
    this.currentMoment = null;
  }

  /** Returns true if field currentMoment is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMoment() {
    return this.currentMoment != null;
  }

  public void setCurrentMomentIsSet(boolean value) {
    if (!value) {
      this.currentMoment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case VENUE:
      if (value == null) {
        unsetVenue();
      } else {
        setVenue((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.lesports.api.common.MatchStatus)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((String)value);
      }
      break;

    case ROUND:
      if (value == null) {
        unsetRound();
      } else {
        setRound((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case SUBSTATION:
      if (value == null) {
        unsetSubstation();
      } else {
        setSubstation((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case COMPETITORS:
      if (value == null) {
        unsetCompetitors();
      } else {
        setCompetitors((List<TCompetitor>)value);
      }
      break;

    case SQUADS:
      if (value == null) {
        unsetSquads();
      } else {
        setSquads((List<TSquad>)value);
      }
      break;

    case EID:
      if (value == null) {
        unsetEid();
      } else {
        setEid((Long)value);
      }
      break;

    case COMPETITOR_STATS:
      if (value == null) {
        unsetCompetitorStats();
      } else {
        setCompetitorStats((List<TCompetitorStat>)value);
      }
      break;

    case MOMENT:
      if (value == null) {
        unsetMoment();
      } else {
        setMoment((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case BEST_PLAYER_STATS:
      if (value == null) {
        unsetBestPlayerStats();
      } else {
        setBestPlayerStats((List<TSquad>)value);
      }
      break;

    case WEATHER:
      if (value == null) {
        unsetWeather();
      } else {
        setWeather((String)value);
      }
      break;

    case JUDGE:
      if (value == null) {
        unsetJudge();
      } else {
        setJudge((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_WEATHERS:
      if (value == null) {
        unsetMultiLangWeathers();
      } else {
        setMultiLangWeathers((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_JUDGES:
      if (value == null) {
        unsetMultiLangJudges();
      } else {
        setMultiLangJudges((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_VENUES:
      if (value == null) {
        unsetMultiLangVenues();
      } else {
        setMultiLangVenues((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_MOMENTS:
      if (value == null) {
        unsetMultiLangMoments();
      } else {
        setMultiLangMoments((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case EIDS:
      if (value == null) {
        unsetEids();
      } else {
        setEids((List<com.lesports.api.common.CountryLangId>)value);
      }
      break;

    case VS:
      if (value == null) {
        unsetVs();
      } else {
        setVs((Boolean)value);
      }
      break;

    case EXTEND_INFOS:
      if (value == null) {
        unsetExtendInfos();
      } else {
        setExtendInfos((Map<String,String>)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((Long)value);
      }
      break;

    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((Long)value);
      }
      break;

    case DISCIPLINE_ID:
      if (value == null) {
        unsetDisciplineId();
      } else {
        setDisciplineId((Long)value);
      }
      break;

    case PARTNER_TYPE:
      if (value == null) {
        unsetPartnerType();
      } else {
        setPartnerType((Integer)value);
      }
      break;

    case CURRENT_MOMENT:
      if (value == null) {
        unsetCurrentMoment();
      } else {
        setCurrentMoment((TCurrentMoment)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case CID:
      return Long.valueOf(getCid());

    case CSID:
      return Long.valueOf(getCsid());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case VENUE:
      return getVenue();

    case STATUS:
      return getStatus();

    case STAGE:
      return getStage();

    case ROUND:
      return getRound();

    case GROUP:
      return getGroup();

    case SUBSTATION:
      return getSubstation();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case COMPETITORS:
      return getCompetitors();

    case SQUADS:
      return getSquads();

    case EID:
      return Long.valueOf(getEid());

    case COMPETITOR_STATS:
      return getCompetitorStats();

    case MOMENT:
      return getMoment();

    case TAGS:
      return getTags();

    case BEST_PLAYER_STATS:
      return getBestPlayerStats();

    case WEATHER:
      return getWeather();

    case JUDGE:
      return getJudge();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_WEATHERS:
      return getMultiLangWeathers();

    case MULTI_LANG_JUDGES:
      return getMultiLangJudges();

    case MULTI_LANG_VENUES:
      return getMultiLangVenues();

    case MULTI_LANG_MOMENTS:
      return getMultiLangMoments();

    case EIDS:
      return getEids();

    case VS:
      return Boolean.valueOf(isVs());

    case EXTEND_INFOS:
      return getExtendInfos();

    case GAME_STYPE:
      return Long.valueOf(getGameSType());

    case GAME_FTYPE:
      return Long.valueOf(getGameFType());

    case DISCIPLINE_ID:
      return Long.valueOf(getDisciplineId());

    case PARTNER_TYPE:
      return Integer.valueOf(getPartnerType());

    case CURRENT_MOMENT:
      return getCurrentMoment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CID:
      return isSetCid();
    case CSID:
      return isSetCsid();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case VENUE:
      return isSetVenue();
    case STATUS:
      return isSetStatus();
    case STAGE:
      return isSetStage();
    case ROUND:
      return isSetRound();
    case GROUP:
      return isSetGroup();
    case SUBSTATION:
      return isSetSubstation();
    case NUMBER:
      return isSetNumber();
    case COMPETITORS:
      return isSetCompetitors();
    case SQUADS:
      return isSetSquads();
    case EID:
      return isSetEid();
    case COMPETITOR_STATS:
      return isSetCompetitorStats();
    case MOMENT:
      return isSetMoment();
    case TAGS:
      return isSetTags();
    case BEST_PLAYER_STATS:
      return isSetBestPlayerStats();
    case WEATHER:
      return isSetWeather();
    case JUDGE:
      return isSetJudge();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_WEATHERS:
      return isSetMultiLangWeathers();
    case MULTI_LANG_JUDGES:
      return isSetMultiLangJudges();
    case MULTI_LANG_VENUES:
      return isSetMultiLangVenues();
    case MULTI_LANG_MOMENTS:
      return isSetMultiLangMoments();
    case EIDS:
      return isSetEids();
    case VS:
      return isSetVs();
    case EXTEND_INFOS:
      return isSetExtendInfos();
    case GAME_STYPE:
      return isSetGameSType();
    case GAME_FTYPE:
      return isSetGameFType();
    case DISCIPLINE_ID:
      return isSetDisciplineId();
    case PARTNER_TYPE:
      return isSetPartnerType();
    case CURRENT_MOMENT:
      return isSetCurrentMoment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDetailMatch)
      return this.equals((TDetailMatch)that);
    return false;
  }

  public boolean equals(TDetailMatch that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_venue = true && this.isSetVenue();
    boolean that_present_venue = true && that.isSetVenue();
    if (this_present_venue || that_present_venue) {
      if (!(this_present_venue && that_present_venue))
        return false;
      if (!this.venue.equals(that.venue))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_stage = true && this.isSetStage();
    boolean that_present_stage = true && that.isSetStage();
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (!this.stage.equals(that.stage))
        return false;
    }

    boolean this_present_round = true && this.isSetRound();
    boolean that_present_round = true && that.isSetRound();
    if (this_present_round || that_present_round) {
      if (!(this_present_round && that_present_round))
        return false;
      if (!this.round.equals(that.round))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_substation = true && this.isSetSubstation();
    boolean that_present_substation = true && that.isSetSubstation();
    if (this_present_substation || that_present_substation) {
      if (!(this_present_substation && that_present_substation))
        return false;
      if (!this.substation.equals(that.substation))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_competitors = true && this.isSetCompetitors();
    boolean that_present_competitors = true && that.isSetCompetitors();
    if (this_present_competitors || that_present_competitors) {
      if (!(this_present_competitors && that_present_competitors))
        return false;
      if (!this.competitors.equals(that.competitors))
        return false;
    }

    boolean this_present_squads = true && this.isSetSquads();
    boolean that_present_squads = true && that.isSetSquads();
    if (this_present_squads || that_present_squads) {
      if (!(this_present_squads && that_present_squads))
        return false;
      if (!this.squads.equals(that.squads))
        return false;
    }

    boolean this_present_eid = true && this.isSetEid();
    boolean that_present_eid = true && that.isSetEid();
    if (this_present_eid || that_present_eid) {
      if (!(this_present_eid && that_present_eid))
        return false;
      if (this.eid != that.eid)
        return false;
    }

    boolean this_present_competitorStats = true && this.isSetCompetitorStats();
    boolean that_present_competitorStats = true && that.isSetCompetitorStats();
    if (this_present_competitorStats || that_present_competitorStats) {
      if (!(this_present_competitorStats && that_present_competitorStats))
        return false;
      if (!this.competitorStats.equals(that.competitorStats))
        return false;
    }

    boolean this_present_moment = true && this.isSetMoment();
    boolean that_present_moment = true && that.isSetMoment();
    if (this_present_moment || that_present_moment) {
      if (!(this_present_moment && that_present_moment))
        return false;
      if (!this.moment.equals(that.moment))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_bestPlayerStats = true && this.isSetBestPlayerStats();
    boolean that_present_bestPlayerStats = true && that.isSetBestPlayerStats();
    if (this_present_bestPlayerStats || that_present_bestPlayerStats) {
      if (!(this_present_bestPlayerStats && that_present_bestPlayerStats))
        return false;
      if (!this.bestPlayerStats.equals(that.bestPlayerStats))
        return false;
    }

    boolean this_present_weather = true && this.isSetWeather();
    boolean that_present_weather = true && that.isSetWeather();
    if (this_present_weather || that_present_weather) {
      if (!(this_present_weather && that_present_weather))
        return false;
      if (!this.weather.equals(that.weather))
        return false;
    }

    boolean this_present_judge = true && this.isSetJudge();
    boolean that_present_judge = true && that.isSetJudge();
    if (this_present_judge || that_present_judge) {
      if (!(this_present_judge && that_present_judge))
        return false;
      if (!this.judge.equals(that.judge))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangWeathers = true && this.isSetMultiLangWeathers();
    boolean that_present_multiLangWeathers = true && that.isSetMultiLangWeathers();
    if (this_present_multiLangWeathers || that_present_multiLangWeathers) {
      if (!(this_present_multiLangWeathers && that_present_multiLangWeathers))
        return false;
      if (!this.multiLangWeathers.equals(that.multiLangWeathers))
        return false;
    }

    boolean this_present_multiLangJudges = true && this.isSetMultiLangJudges();
    boolean that_present_multiLangJudges = true && that.isSetMultiLangJudges();
    if (this_present_multiLangJudges || that_present_multiLangJudges) {
      if (!(this_present_multiLangJudges && that_present_multiLangJudges))
        return false;
      if (!this.multiLangJudges.equals(that.multiLangJudges))
        return false;
    }

    boolean this_present_multiLangVenues = true && this.isSetMultiLangVenues();
    boolean that_present_multiLangVenues = true && that.isSetMultiLangVenues();
    if (this_present_multiLangVenues || that_present_multiLangVenues) {
      if (!(this_present_multiLangVenues && that_present_multiLangVenues))
        return false;
      if (!this.multiLangVenues.equals(that.multiLangVenues))
        return false;
    }

    boolean this_present_multiLangMoments = true && this.isSetMultiLangMoments();
    boolean that_present_multiLangMoments = true && that.isSetMultiLangMoments();
    if (this_present_multiLangMoments || that_present_multiLangMoments) {
      if (!(this_present_multiLangMoments && that_present_multiLangMoments))
        return false;
      if (!this.multiLangMoments.equals(that.multiLangMoments))
        return false;
    }

    boolean this_present_eids = true && this.isSetEids();
    boolean that_present_eids = true && that.isSetEids();
    if (this_present_eids || that_present_eids) {
      if (!(this_present_eids && that_present_eids))
        return false;
      if (!this.eids.equals(that.eids))
        return false;
    }

    boolean this_present_vs = true && this.isSetVs();
    boolean that_present_vs = true && that.isSetVs();
    if (this_present_vs || that_present_vs) {
      if (!(this_present_vs && that_present_vs))
        return false;
      if (this.vs != that.vs)
        return false;
    }

    boolean this_present_extendInfos = true && this.isSetExtendInfos();
    boolean that_present_extendInfos = true && that.isSetExtendInfos();
    if (this_present_extendInfos || that_present_extendInfos) {
      if (!(this_present_extendInfos && that_present_extendInfos))
        return false;
      if (!this.extendInfos.equals(that.extendInfos))
        return false;
    }

    boolean this_present_gameSType = true && this.isSetGameSType();
    boolean that_present_gameSType = true && that.isSetGameSType();
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (this.gameSType != that.gameSType)
        return false;
    }

    boolean this_present_gameFType = true && this.isSetGameFType();
    boolean that_present_gameFType = true && that.isSetGameFType();
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (this.gameFType != that.gameFType)
        return false;
    }

    boolean this_present_disciplineId = true && this.isSetDisciplineId();
    boolean that_present_disciplineId = true && that.isSetDisciplineId();
    if (this_present_disciplineId || that_present_disciplineId) {
      if (!(this_present_disciplineId && that_present_disciplineId))
        return false;
      if (this.disciplineId != that.disciplineId)
        return false;
    }

    boolean this_present_partnerType = true && this.isSetPartnerType();
    boolean that_present_partnerType = true && that.isSetPartnerType();
    if (this_present_partnerType || that_present_partnerType) {
      if (!(this_present_partnerType && that_present_partnerType))
        return false;
      if (this.partnerType != that.partnerType)
        return false;
    }

    boolean this_present_currentMoment = true && this.isSetCurrentMoment();
    boolean that_present_currentMoment = true && that.isSetCurrentMoment();
    if (this_present_currentMoment || that_present_currentMoment) {
      if (!(this_present_currentMoment && that_present_currentMoment))
        return false;
      if (!this.currentMoment.equals(that.currentMoment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_venue = true && (isSetVenue());
    list.add(present_venue);
    if (present_venue)
      list.add(venue);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_stage = true && (isSetStage());
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_round = true && (isSetRound());
    list.add(present_round);
    if (present_round)
      list.add(round);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_substation = true && (isSetSubstation());
    list.add(present_substation);
    if (present_substation)
      list.add(substation);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_competitors = true && (isSetCompetitors());
    list.add(present_competitors);
    if (present_competitors)
      list.add(competitors);

    boolean present_squads = true && (isSetSquads());
    list.add(present_squads);
    if (present_squads)
      list.add(squads);

    boolean present_eid = true && (isSetEid());
    list.add(present_eid);
    if (present_eid)
      list.add(eid);

    boolean present_competitorStats = true && (isSetCompetitorStats());
    list.add(present_competitorStats);
    if (present_competitorStats)
      list.add(competitorStats);

    boolean present_moment = true && (isSetMoment());
    list.add(present_moment);
    if (present_moment)
      list.add(moment);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_bestPlayerStats = true && (isSetBestPlayerStats());
    list.add(present_bestPlayerStats);
    if (present_bestPlayerStats)
      list.add(bestPlayerStats);

    boolean present_weather = true && (isSetWeather());
    list.add(present_weather);
    if (present_weather)
      list.add(weather);

    boolean present_judge = true && (isSetJudge());
    list.add(present_judge);
    if (present_judge)
      list.add(judge);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangWeathers = true && (isSetMultiLangWeathers());
    list.add(present_multiLangWeathers);
    if (present_multiLangWeathers)
      list.add(multiLangWeathers);

    boolean present_multiLangJudges = true && (isSetMultiLangJudges());
    list.add(present_multiLangJudges);
    if (present_multiLangJudges)
      list.add(multiLangJudges);

    boolean present_multiLangVenues = true && (isSetMultiLangVenues());
    list.add(present_multiLangVenues);
    if (present_multiLangVenues)
      list.add(multiLangVenues);

    boolean present_multiLangMoments = true && (isSetMultiLangMoments());
    list.add(present_multiLangMoments);
    if (present_multiLangMoments)
      list.add(multiLangMoments);

    boolean present_eids = true && (isSetEids());
    list.add(present_eids);
    if (present_eids)
      list.add(eids);

    boolean present_vs = true && (isSetVs());
    list.add(present_vs);
    if (present_vs)
      list.add(vs);

    boolean present_extendInfos = true && (isSetExtendInfos());
    list.add(present_extendInfos);
    if (present_extendInfos)
      list.add(extendInfos);

    boolean present_gameSType = true && (isSetGameSType());
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_gameFType = true && (isSetGameFType());
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_disciplineId = true && (isSetDisciplineId());
    list.add(present_disciplineId);
    if (present_disciplineId)
      list.add(disciplineId);

    boolean present_partnerType = true && (isSetPartnerType());
    list.add(present_partnerType);
    if (present_partnerType)
      list.add(partnerType);

    boolean present_currentMoment = true && (isSetCurrentMoment());
    list.add(present_currentMoment);
    if (present_currentMoment)
      list.add(currentMoment);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDetailMatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVenue()).compareTo(other.isSetVenue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venue, other.venue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRound()).compareTo(other.isSetRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.round, other.round);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubstation()).compareTo(other.isSetSubstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.substation, other.substation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitors()).compareTo(other.isSetCompetitors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitors, other.competitors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquads()).compareTo(other.isSetSquads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squads, other.squads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorStats()).compareTo(other.isSetCompetitorStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorStats, other.competitorStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoment()).compareTo(other.isSetMoment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moment, other.moment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBestPlayerStats()).compareTo(other.isSetBestPlayerStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBestPlayerStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bestPlayerStats, other.bestPlayerStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeather()).compareTo(other.isSetWeather());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeather()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weather, other.weather);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJudge()).compareTo(other.isSetJudge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judge, other.judge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangWeathers()).compareTo(other.isSetMultiLangWeathers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangWeathers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangWeathers, other.multiLangWeathers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangJudges()).compareTo(other.isSetMultiLangJudges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangJudges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangJudges, other.multiLangJudges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangVenues()).compareTo(other.isSetMultiLangVenues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangVenues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangVenues, other.multiLangVenues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangMoments()).compareTo(other.isSetMultiLangMoments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangMoments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangMoments, other.multiLangMoments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEids()).compareTo(other.isSetEids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eids, other.eids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVs()).compareTo(other.isSetVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vs, other.vs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendInfos()).compareTo(other.isSetExtendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendInfos, other.extendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisciplineId()).compareTo(other.isSetDisciplineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisciplineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disciplineId, other.disciplineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerType()).compareTo(other.isSetPartnerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerType, other.partnerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMoment()).compareTo(other.isSetCurrentMoment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMoment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMoment, other.currentMoment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDetailMatch(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetVenue()) {
      if (!first) sb.append(", ");
      sb.append("venue:");
      if (this.venue == null) {
        sb.append("null");
      } else {
        sb.append(this.venue);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetStage()) {
      if (!first) sb.append(", ");
      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
    }
    if (isSetRound()) {
      if (!first) sb.append(", ");
      sb.append("round:");
      if (this.round == null) {
        sb.append("null");
      } else {
        sb.append(this.round);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetSubstation()) {
      if (!first) sb.append(", ");
      sb.append("substation:");
      if (this.substation == null) {
        sb.append("null");
      } else {
        sb.append(this.substation);
      }
      first = false;
    }
    if (isSetNumber()) {
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (isSetCompetitors()) {
      if (!first) sb.append(", ");
      sb.append("competitors:");
      if (this.competitors == null) {
        sb.append("null");
      } else {
        sb.append(this.competitors);
      }
      first = false;
    }
    if (isSetSquads()) {
      if (!first) sb.append(", ");
      sb.append("squads:");
      if (this.squads == null) {
        sb.append("null");
      } else {
        sb.append(this.squads);
      }
      first = false;
    }
    if (isSetEid()) {
      if (!first) sb.append(", ");
      sb.append("eid:");
      sb.append(this.eid);
      first = false;
    }
    if (isSetCompetitorStats()) {
      if (!first) sb.append(", ");
      sb.append("competitorStats:");
      if (this.competitorStats == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorStats);
      }
      first = false;
    }
    if (isSetMoment()) {
      if (!first) sb.append(", ");
      sb.append("moment:");
      if (this.moment == null) {
        sb.append("null");
      } else {
        sb.append(this.moment);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetBestPlayerStats()) {
      if (!first) sb.append(", ");
      sb.append("bestPlayerStats:");
      if (this.bestPlayerStats == null) {
        sb.append("null");
      } else {
        sb.append(this.bestPlayerStats);
      }
      first = false;
    }
    if (isSetWeather()) {
      if (!first) sb.append(", ");
      sb.append("weather:");
      if (this.weather == null) {
        sb.append("null");
      } else {
        sb.append(this.weather);
      }
      first = false;
    }
    if (isSetJudge()) {
      if (!first) sb.append(", ");
      sb.append("judge:");
      if (this.judge == null) {
        sb.append("null");
      } else {
        sb.append(this.judge);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangWeathers()) {
      if (!first) sb.append(", ");
      sb.append("multiLangWeathers:");
      if (this.multiLangWeathers == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangWeathers);
      }
      first = false;
    }
    if (isSetMultiLangJudges()) {
      if (!first) sb.append(", ");
      sb.append("multiLangJudges:");
      if (this.multiLangJudges == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangJudges);
      }
      first = false;
    }
    if (isSetMultiLangVenues()) {
      if (!first) sb.append(", ");
      sb.append("multiLangVenues:");
      if (this.multiLangVenues == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangVenues);
      }
      first = false;
    }
    if (isSetMultiLangMoments()) {
      if (!first) sb.append(", ");
      sb.append("multiLangMoments:");
      if (this.multiLangMoments == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangMoments);
      }
      first = false;
    }
    if (isSetEids()) {
      if (!first) sb.append(", ");
      sb.append("eids:");
      if (this.eids == null) {
        sb.append("null");
      } else {
        sb.append(this.eids);
      }
      first = false;
    }
    if (isSetVs()) {
      if (!first) sb.append(", ");
      sb.append("vs:");
      sb.append(this.vs);
      first = false;
    }
    if (isSetExtendInfos()) {
      if (!first) sb.append(", ");
      sb.append("extendInfos:");
      if (this.extendInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extendInfos);
      }
      first = false;
    }
    if (isSetGameSType()) {
      if (!first) sb.append(", ");
      sb.append("gameSType:");
      sb.append(this.gameSType);
      first = false;
    }
    if (isSetGameFType()) {
      if (!first) sb.append(", ");
      sb.append("gameFType:");
      sb.append(this.gameFType);
      first = false;
    }
    if (isSetDisciplineId()) {
      if (!first) sb.append(", ");
      sb.append("disciplineId:");
      sb.append(this.disciplineId);
      first = false;
    }
    if (isSetPartnerType()) {
      if (!first) sb.append(", ");
      sb.append("partnerType:");
      sb.append(this.partnerType);
      first = false;
    }
    if (isSetCurrentMoment()) {
      if (!first) sb.append(", ");
      sb.append("currentMoment:");
      if (this.currentMoment == null) {
        sb.append("null");
      } else {
        sb.append(this.currentMoment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (currentMoment != null) {
      currentMoment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDetailMatchStandardSchemeFactory implements SchemeFactory {
    public TDetailMatchStandardScheme getScheme() {
      return new TDetailMatchStandardScheme();
    }
  }

  private static class TDetailMatchStandardScheme extends StandardScheme<TDetailMatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDetailMatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VENUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.venue = iprot.readString();
              struct.setVenueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stage = iprot.readString();
              struct.setStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.round = iprot.readString();
              struct.setRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUBSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.substation = iprot.readString();
              struct.setSubstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMPETITORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                struct.competitors = new ArrayList<TCompetitor>(_list208.size);
                TCompetitor _elem209;
                for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                {
                  _elem209 = new TCompetitor();
                  _elem209.read(iprot);
                  struct.competitors.add(_elem209);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SQUADS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                struct.squads = new ArrayList<TSquad>(_list211.size);
                TSquad _elem212;
                for (int _i213 = 0; _i213 < _list211.size; ++_i213)
                {
                  _elem212 = new TSquad();
                  _elem212.read(iprot);
                  struct.squads.add(_elem212);
                }
                iprot.readListEnd();
              }
              struct.setSquadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eid = iprot.readI64();
              struct.setEidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COMPETITOR_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.competitorStats = new ArrayList<TCompetitorStat>(_list214.size);
                TCompetitorStat _elem215;
                for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                {
                  _elem215 = new TCompetitorStat();
                  _elem215.read(iprot);
                  struct.competitorStats.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MOMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moment = iprot.readString();
              struct.setMomentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list217.size);
                com.lesports.qmt.config.api.dto.TTag _elem218;
                for (int _i219 = 0; _i219 < _list217.size; ++_i219)
                {
                  _elem218 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem218.read(iprot);
                  struct.tags.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BEST_PLAYER_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                struct.bestPlayerStats = new ArrayList<TSquad>(_list220.size);
                TSquad _elem221;
                for (int _i222 = 0; _i222 < _list220.size; ++_i222)
                {
                  _elem221 = new TSquad();
                  _elem221.read(iprot);
                  struct.bestPlayerStats.add(_elem221);
                }
                iprot.readListEnd();
              }
              struct.setBestPlayerStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // WEATHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weather = iprot.readString();
              struct.setWeatherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // JUDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.judge = iprot.readString();
              struct.setJudgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list223 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list223.size);
                com.lesports.api.common.LangString _elem224;
                for (int _i225 = 0; _i225 < _list223.size; ++_i225)
                {
                  _elem224 = new com.lesports.api.common.LangString();
                  _elem224.read(iprot);
                  struct.multiLangNames.add(_elem224);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MULTI_LANG_WEATHERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                struct.multiLangWeathers = new ArrayList<com.lesports.api.common.LangString>(_list226.size);
                com.lesports.api.common.LangString _elem227;
                for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                {
                  _elem227 = new com.lesports.api.common.LangString();
                  _elem227.read(iprot);
                  struct.multiLangWeathers.add(_elem227);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangWeathersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MULTI_LANG_JUDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list229 = iprot.readListBegin();
                struct.multiLangJudges = new ArrayList<com.lesports.api.common.LangString>(_list229.size);
                com.lesports.api.common.LangString _elem230;
                for (int _i231 = 0; _i231 < _list229.size; ++_i231)
                {
                  _elem230 = new com.lesports.api.common.LangString();
                  _elem230.read(iprot);
                  struct.multiLangJudges.add(_elem230);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangJudgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MULTI_LANG_VENUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                struct.multiLangVenues = new ArrayList<com.lesports.api.common.LangString>(_list232.size);
                com.lesports.api.common.LangString _elem233;
                for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                {
                  _elem233 = new com.lesports.api.common.LangString();
                  _elem233.read(iprot);
                  struct.multiLangVenues.add(_elem233);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangVenuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MULTI_LANG_MOMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list235 = iprot.readListBegin();
                struct.multiLangMoments = new ArrayList<com.lesports.api.common.LangString>(_list235.size);
                com.lesports.api.common.LangString _elem236;
                for (int _i237 = 0; _i237 < _list235.size; ++_i237)
                {
                  _elem236 = new com.lesports.api.common.LangString();
                  _elem236.read(iprot);
                  struct.multiLangMoments.add(_elem236);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangMomentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // EIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                struct.eids = new ArrayList<com.lesports.api.common.CountryLangId>(_list238.size);
                com.lesports.api.common.CountryLangId _elem239;
                for (int _i240 = 0; _i240 < _list238.size; ++_i240)
                {
                  _elem239 = new com.lesports.api.common.CountryLangId();
                  _elem239.read(iprot);
                  struct.eids.add(_elem239);
                }
                iprot.readListEnd();
              }
              struct.setEidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // VS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vs = iprot.readBool();
              struct.setVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // EXTEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map241 = iprot.readMapBegin();
                struct.extendInfos = new HashMap<String,String>(2*_map241.size);
                String _key242;
                String _val243;
                for (int _i244 = 0; _i244 < _map241.size; ++_i244)
                {
                  _key242 = iprot.readString();
                  _val243 = iprot.readString();
                  struct.extendInfos.put(_key242, _val243);
                }
                iprot.readMapEnd();
              }
              struct.setExtendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSType = iprot.readI64();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFType = iprot.readI64();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DISCIPLINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.disciplineId = iprot.readI64();
              struct.setDisciplineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PARTNER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerType = iprot.readI32();
              struct.setPartnerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CURRENT_MOMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentMoment = new TCurrentMoment();
              struct.currentMoment.read(iprot);
              struct.setCurrentMomentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDetailMatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.venue != null) {
        if (struct.isSetVenue()) {
          oprot.writeFieldBegin(VENUE_FIELD_DESC);
          oprot.writeString(struct.venue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stage != null) {
        if (struct.isSetStage()) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          oprot.writeString(struct.stage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.round != null) {
        if (struct.isSetRound()) {
          oprot.writeFieldBegin(ROUND_FIELD_DESC);
          oprot.writeString(struct.round);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.substation != null) {
        if (struct.isSetSubstation()) {
          oprot.writeFieldBegin(SUBSTATION_FIELD_DESC);
          oprot.writeString(struct.substation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.competitors != null) {
        if (struct.isSetCompetitors()) {
          oprot.writeFieldBegin(COMPETITORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.competitors.size()));
            for (TCompetitor _iter245 : struct.competitors)
            {
              _iter245.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.squads != null) {
        if (struct.isSetSquads()) {
          oprot.writeFieldBegin(SQUADS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.squads.size()));
            for (TSquad _iter246 : struct.squads)
            {
              _iter246.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEid()) {
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
      }
      if (struct.competitorStats != null) {
        if (struct.isSetCompetitorStats()) {
          oprot.writeFieldBegin(COMPETITOR_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.competitorStats.size()));
            for (TCompetitorStat _iter247 : struct.competitorStats)
            {
              _iter247.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.moment != null) {
        if (struct.isSetMoment()) {
          oprot.writeFieldBegin(MOMENT_FIELD_DESC);
          oprot.writeString(struct.moment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter248 : struct.tags)
            {
              _iter248.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bestPlayerStats != null) {
        if (struct.isSetBestPlayerStats()) {
          oprot.writeFieldBegin(BEST_PLAYER_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bestPlayerStats.size()));
            for (TSquad _iter249 : struct.bestPlayerStats)
            {
              _iter249.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.weather != null) {
        if (struct.isSetWeather()) {
          oprot.writeFieldBegin(WEATHER_FIELD_DESC);
          oprot.writeString(struct.weather);
          oprot.writeFieldEnd();
        }
      }
      if (struct.judge != null) {
        if (struct.isSetJudge()) {
          oprot.writeFieldBegin(JUDGE_FIELD_DESC);
          oprot.writeString(struct.judge);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter250 : struct.multiLangNames)
            {
              _iter250.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangWeathers != null) {
        if (struct.isSetMultiLangWeathers()) {
          oprot.writeFieldBegin(MULTI_LANG_WEATHERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangWeathers.size()));
            for (com.lesports.api.common.LangString _iter251 : struct.multiLangWeathers)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangJudges != null) {
        if (struct.isSetMultiLangJudges()) {
          oprot.writeFieldBegin(MULTI_LANG_JUDGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangJudges.size()));
            for (com.lesports.api.common.LangString _iter252 : struct.multiLangJudges)
            {
              _iter252.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangVenues != null) {
        if (struct.isSetMultiLangVenues()) {
          oprot.writeFieldBegin(MULTI_LANG_VENUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangVenues.size()));
            for (com.lesports.api.common.LangString _iter253 : struct.multiLangVenues)
            {
              _iter253.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangMoments != null) {
        if (struct.isSetMultiLangMoments()) {
          oprot.writeFieldBegin(MULTI_LANG_MOMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangMoments.size()));
            for (com.lesports.api.common.LangString _iter254 : struct.multiLangMoments)
            {
              _iter254.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eids != null) {
        if (struct.isSetEids()) {
          oprot.writeFieldBegin(EIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eids.size()));
            for (com.lesports.api.common.CountryLangId _iter255 : struct.eids)
            {
              _iter255.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVs()) {
        oprot.writeFieldBegin(VS_FIELD_DESC);
        oprot.writeBool(struct.vs);
        oprot.writeFieldEnd();
      }
      if (struct.extendInfos != null) {
        if (struct.isSetExtendInfos()) {
          oprot.writeFieldBegin(EXTEND_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendInfos.size()));
            for (Map.Entry<String, String> _iter256 : struct.extendInfos.entrySet())
            {
              oprot.writeString(_iter256.getKey());
              oprot.writeString(_iter256.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGameSType()) {
        oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
        oprot.writeI64(struct.gameSType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameFType()) {
        oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
        oprot.writeI64(struct.gameFType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeFieldBegin(DISCIPLINE_ID_FIELD_DESC);
        oprot.writeI64(struct.disciplineId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartnerType()) {
        oprot.writeFieldBegin(PARTNER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.partnerType);
        oprot.writeFieldEnd();
      }
      if (struct.currentMoment != null) {
        if (struct.isSetCurrentMoment()) {
          oprot.writeFieldBegin(CURRENT_MOMENT_FIELD_DESC);
          struct.currentMoment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDetailMatchTupleSchemeFactory implements SchemeFactory {
    public TDetailMatchTupleScheme getScheme() {
      return new TDetailMatchTupleScheme();
    }
  }

  private static class TDetailMatchTupleScheme extends TupleScheme<TDetailMatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDetailMatch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCid()) {
        optionals.set(2);
      }
      if (struct.isSetCsid()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetVenue()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetStage()) {
        optionals.set(8);
      }
      if (struct.isSetRound()) {
        optionals.set(9);
      }
      if (struct.isSetGroup()) {
        optionals.set(10);
      }
      if (struct.isSetSubstation()) {
        optionals.set(11);
      }
      if (struct.isSetNumber()) {
        optionals.set(12);
      }
      if (struct.isSetCompetitors()) {
        optionals.set(13);
      }
      if (struct.isSetSquads()) {
        optionals.set(14);
      }
      if (struct.isSetEid()) {
        optionals.set(15);
      }
      if (struct.isSetCompetitorStats()) {
        optionals.set(16);
      }
      if (struct.isSetMoment()) {
        optionals.set(17);
      }
      if (struct.isSetTags()) {
        optionals.set(18);
      }
      if (struct.isSetBestPlayerStats()) {
        optionals.set(19);
      }
      if (struct.isSetWeather()) {
        optionals.set(20);
      }
      if (struct.isSetJudge()) {
        optionals.set(21);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(22);
      }
      if (struct.isSetMultiLangWeathers()) {
        optionals.set(23);
      }
      if (struct.isSetMultiLangJudges()) {
        optionals.set(24);
      }
      if (struct.isSetMultiLangVenues()) {
        optionals.set(25);
      }
      if (struct.isSetMultiLangMoments()) {
        optionals.set(26);
      }
      if (struct.isSetEids()) {
        optionals.set(27);
      }
      if (struct.isSetVs()) {
        optionals.set(28);
      }
      if (struct.isSetExtendInfos()) {
        optionals.set(29);
      }
      if (struct.isSetGameSType()) {
        optionals.set(30);
      }
      if (struct.isSetGameFType()) {
        optionals.set(31);
      }
      if (struct.isSetDisciplineId()) {
        optionals.set(32);
      }
      if (struct.isSetPartnerType()) {
        optionals.set(33);
      }
      if (struct.isSetCurrentMoment()) {
        optionals.set(34);
      }
      oprot.writeBitSet(optionals, 35);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetVenue()) {
        oprot.writeString(struct.venue);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetStage()) {
        oprot.writeString(struct.stage);
      }
      if (struct.isSetRound()) {
        oprot.writeString(struct.round);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetSubstation()) {
        oprot.writeString(struct.substation);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetCompetitors()) {
        {
          oprot.writeI32(struct.competitors.size());
          for (TCompetitor _iter257 : struct.competitors)
          {
            _iter257.write(oprot);
          }
        }
      }
      if (struct.isSetSquads()) {
        {
          oprot.writeI32(struct.squads.size());
          for (TSquad _iter258 : struct.squads)
          {
            _iter258.write(oprot);
          }
        }
      }
      if (struct.isSetEid()) {
        oprot.writeI64(struct.eid);
      }
      if (struct.isSetCompetitorStats()) {
        {
          oprot.writeI32(struct.competitorStats.size());
          for (TCompetitorStat _iter259 : struct.competitorStats)
          {
            _iter259.write(oprot);
          }
        }
      }
      if (struct.isSetMoment()) {
        oprot.writeString(struct.moment);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter260 : struct.tags)
          {
            _iter260.write(oprot);
          }
        }
      }
      if (struct.isSetBestPlayerStats()) {
        {
          oprot.writeI32(struct.bestPlayerStats.size());
          for (TSquad _iter261 : struct.bestPlayerStats)
          {
            _iter261.write(oprot);
          }
        }
      }
      if (struct.isSetWeather()) {
        oprot.writeString(struct.weather);
      }
      if (struct.isSetJudge()) {
        oprot.writeString(struct.judge);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter262 : struct.multiLangNames)
          {
            _iter262.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangWeathers()) {
        {
          oprot.writeI32(struct.multiLangWeathers.size());
          for (com.lesports.api.common.LangString _iter263 : struct.multiLangWeathers)
          {
            _iter263.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangJudges()) {
        {
          oprot.writeI32(struct.multiLangJudges.size());
          for (com.lesports.api.common.LangString _iter264 : struct.multiLangJudges)
          {
            _iter264.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangVenues()) {
        {
          oprot.writeI32(struct.multiLangVenues.size());
          for (com.lesports.api.common.LangString _iter265 : struct.multiLangVenues)
          {
            _iter265.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangMoments()) {
        {
          oprot.writeI32(struct.multiLangMoments.size());
          for (com.lesports.api.common.LangString _iter266 : struct.multiLangMoments)
          {
            _iter266.write(oprot);
          }
        }
      }
      if (struct.isSetEids()) {
        {
          oprot.writeI32(struct.eids.size());
          for (com.lesports.api.common.CountryLangId _iter267 : struct.eids)
          {
            _iter267.write(oprot);
          }
        }
      }
      if (struct.isSetVs()) {
        oprot.writeBool(struct.vs);
      }
      if (struct.isSetExtendInfos()) {
        {
          oprot.writeI32(struct.extendInfos.size());
          for (Map.Entry<String, String> _iter268 : struct.extendInfos.entrySet())
          {
            oprot.writeString(_iter268.getKey());
            oprot.writeString(_iter268.getValue());
          }
        }
      }
      if (struct.isSetGameSType()) {
        oprot.writeI64(struct.gameSType);
      }
      if (struct.isSetGameFType()) {
        oprot.writeI64(struct.gameFType);
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeI64(struct.disciplineId);
      }
      if (struct.isSetPartnerType()) {
        oprot.writeI32(struct.partnerType);
      }
      if (struct.isSetCurrentMoment()) {
        struct.currentMoment.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDetailMatch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(35);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.venue = iprot.readString();
        struct.setVenueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stage = iprot.readString();
        struct.setStageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.round = iprot.readString();
        struct.setRoundIsSet(true);
      }
      if (incoming.get(10)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(11)) {
        struct.substation = iprot.readString();
        struct.setSubstationIsSet(true);
      }
      if (incoming.get(12)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.competitors = new ArrayList<TCompetitor>(_list269.size);
          TCompetitor _elem270;
          for (int _i271 = 0; _i271 < _list269.size; ++_i271)
          {
            _elem270 = new TCompetitor();
            _elem270.read(iprot);
            struct.competitors.add(_elem270);
          }
        }
        struct.setCompetitorsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list272 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.squads = new ArrayList<TSquad>(_list272.size);
          TSquad _elem273;
          for (int _i274 = 0; _i274 < _list272.size; ++_i274)
          {
            _elem273 = new TSquad();
            _elem273.read(iprot);
            struct.squads.add(_elem273);
          }
        }
        struct.setSquadsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.eid = iprot.readI64();
        struct.setEidIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list275 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.competitorStats = new ArrayList<TCompetitorStat>(_list275.size);
          TCompetitorStat _elem276;
          for (int _i277 = 0; _i277 < _list275.size; ++_i277)
          {
            _elem276 = new TCompetitorStat();
            _elem276.read(iprot);
            struct.competitorStats.add(_elem276);
          }
        }
        struct.setCompetitorStatsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.moment = iprot.readString();
        struct.setMomentIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list278 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list278.size);
          com.lesports.qmt.config.api.dto.TTag _elem279;
          for (int _i280 = 0; _i280 < _list278.size; ++_i280)
          {
            _elem279 = new com.lesports.qmt.config.api.dto.TTag();
            _elem279.read(iprot);
            struct.tags.add(_elem279);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list281 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bestPlayerStats = new ArrayList<TSquad>(_list281.size);
          TSquad _elem282;
          for (int _i283 = 0; _i283 < _list281.size; ++_i283)
          {
            _elem282 = new TSquad();
            _elem282.read(iprot);
            struct.bestPlayerStats.add(_elem282);
          }
        }
        struct.setBestPlayerStatsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.weather = iprot.readString();
        struct.setWeatherIsSet(true);
      }
      if (incoming.get(21)) {
        struct.judge = iprot.readString();
        struct.setJudgeIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list284 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list284.size);
          com.lesports.api.common.LangString _elem285;
          for (int _i286 = 0; _i286 < _list284.size; ++_i286)
          {
            _elem285 = new com.lesports.api.common.LangString();
            _elem285.read(iprot);
            struct.multiLangNames.add(_elem285);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list287 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangWeathers = new ArrayList<com.lesports.api.common.LangString>(_list287.size);
          com.lesports.api.common.LangString _elem288;
          for (int _i289 = 0; _i289 < _list287.size; ++_i289)
          {
            _elem288 = new com.lesports.api.common.LangString();
            _elem288.read(iprot);
            struct.multiLangWeathers.add(_elem288);
          }
        }
        struct.setMultiLangWeathersIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list290 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangJudges = new ArrayList<com.lesports.api.common.LangString>(_list290.size);
          com.lesports.api.common.LangString _elem291;
          for (int _i292 = 0; _i292 < _list290.size; ++_i292)
          {
            _elem291 = new com.lesports.api.common.LangString();
            _elem291.read(iprot);
            struct.multiLangJudges.add(_elem291);
          }
        }
        struct.setMultiLangJudgesIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangVenues = new ArrayList<com.lesports.api.common.LangString>(_list293.size);
          com.lesports.api.common.LangString _elem294;
          for (int _i295 = 0; _i295 < _list293.size; ++_i295)
          {
            _elem294 = new com.lesports.api.common.LangString();
            _elem294.read(iprot);
            struct.multiLangVenues.add(_elem294);
          }
        }
        struct.setMultiLangVenuesIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list296 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangMoments = new ArrayList<com.lesports.api.common.LangString>(_list296.size);
          com.lesports.api.common.LangString _elem297;
          for (int _i298 = 0; _i298 < _list296.size; ++_i298)
          {
            _elem297 = new com.lesports.api.common.LangString();
            _elem297.read(iprot);
            struct.multiLangMoments.add(_elem297);
          }
        }
        struct.setMultiLangMomentsIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list299 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.eids = new ArrayList<com.lesports.api.common.CountryLangId>(_list299.size);
          com.lesports.api.common.CountryLangId _elem300;
          for (int _i301 = 0; _i301 < _list299.size; ++_i301)
          {
            _elem300 = new com.lesports.api.common.CountryLangId();
            _elem300.read(iprot);
            struct.eids.add(_elem300);
          }
        }
        struct.setEidsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.vs = iprot.readBool();
        struct.setVsIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TMap _map302 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extendInfos = new HashMap<String,String>(2*_map302.size);
          String _key303;
          String _val304;
          for (int _i305 = 0; _i305 < _map302.size; ++_i305)
          {
            _key303 = iprot.readString();
            _val304 = iprot.readString();
            struct.extendInfos.put(_key303, _val304);
          }
        }
        struct.setExtendInfosIsSet(true);
      }
      if (incoming.get(30)) {
        struct.gameSType = iprot.readI64();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.gameFType = iprot.readI64();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.disciplineId = iprot.readI64();
        struct.setDisciplineIdIsSet(true);
      }
      if (incoming.get(33)) {
        struct.partnerType = iprot.readI32();
        struct.setPartnerTypeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.currentMoment = new TCurrentMoment();
        struct.currentMoment.read(iprot);
        struct.setCurrentMomentIsSet(true);
      }
    }
  }

}

