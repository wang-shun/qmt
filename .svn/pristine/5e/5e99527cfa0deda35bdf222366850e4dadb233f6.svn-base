/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.cms.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-3")
public class TColumn implements org.apache.thrift.TBase<TColumn, TColumn._Fields>, java.io.Serializable, Cloneable, Comparable<TColumn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumn");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyword", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FULL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("fullPath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PC_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("pcPage", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField M_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("mPage", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField DUMMY_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("dummyPage", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SUB_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subChannelId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField M_TEMPLATE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mTemplateUrl", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private String keyword; // optional
  private String desc; // optional
  private String path; // optional
  private long channelId; // optional
  private String fullPath; // optional
  private com.lesports.qmt.cms.api.dto.TColumnPage pcPage; // optional
  private com.lesports.qmt.cms.api.dto.TColumnPage mPage; // optional
  private com.lesports.qmt.cms.api.dto.TColumnPage dummyPage; // optional
  private String title; // optional
  private long subChannelId; // optional
  private String mTemplateUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    KEYWORD((short)3, "keyword"),
    DESC((short)4, "desc"),
    PATH((short)5, "path"),
    CHANNEL_ID((short)6, "channelId"),
    FULL_PATH((short)7, "fullPath"),
    PC_PAGE((short)8, "pcPage"),
    M_PAGE((short)9, "mPage"),
    DUMMY_PAGE((short)10, "dummyPage"),
    TITLE((short)11, "title"),
    SUB_CHANNEL_ID((short)12, "subChannelId"),
    M_TEMPLATE_URL((short)13, "mTemplateUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // KEYWORD
          return KEYWORD;
        case 4: // DESC
          return DESC;
        case 5: // PATH
          return PATH;
        case 6: // CHANNEL_ID
          return CHANNEL_ID;
        case 7: // FULL_PATH
          return FULL_PATH;
        case 8: // PC_PAGE
          return PC_PAGE;
        case 9: // M_PAGE
          return M_PAGE;
        case 10: // DUMMY_PAGE
          return DUMMY_PAGE;
        case 11: // TITLE
          return TITLE;
        case 12: // SUB_CHANNEL_ID
          return SUB_CHANNEL_ID;
        case 13: // M_TEMPLATE_URL
          return M_TEMPLATE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CHANNELID_ISSET_ID = 1;
  private static final int __SUBCHANNELID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.KEYWORD,_Fields.DESC,_Fields.PATH,_Fields.CHANNEL_ID,_Fields.FULL_PATH,_Fields.PC_PAGE,_Fields.M_PAGE,_Fields.DUMMY_PAGE,_Fields.TITLE,_Fields.SUB_CHANNEL_ID,_Fields.M_TEMPLATE_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORD, new org.apache.thrift.meta_data.FieldMetaData("keyword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FULL_PATH, new org.apache.thrift.meta_data.FieldMetaData("fullPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PC_PAGE, new org.apache.thrift.meta_data.FieldMetaData("pcPage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.cms.api.dto.TColumnPage.class)));
    tmpMap.put(_Fields.M_PAGE, new org.apache.thrift.meta_data.FieldMetaData("mPage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.cms.api.dto.TColumnPage.class)));
    tmpMap.put(_Fields.DUMMY_PAGE, new org.apache.thrift.meta_data.FieldMetaData("dummyPage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.cms.api.dto.TColumnPage.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("subChannelId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.M_TEMPLATE_URL, new org.apache.thrift.meta_data.FieldMetaData("mTemplateUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumn.class, metaDataMap);
  }

  public TColumn() {
  }

  public TColumn(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumn(TColumn other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetKeyword()) {
      this.keyword = other.keyword;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.channelId = other.channelId;
    if (other.isSetFullPath()) {
      this.fullPath = other.fullPath;
    }
    if (other.isSetPcPage()) {
      this.pcPage = new com.lesports.qmt.cms.api.dto.TColumnPage(other.pcPage);
    }
    if (other.isSetMPage()) {
      this.mPage = new com.lesports.qmt.cms.api.dto.TColumnPage(other.mPage);
    }
    if (other.isSetDummyPage()) {
      this.dummyPage = new com.lesports.qmt.cms.api.dto.TColumnPage(other.dummyPage);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.subChannelId = other.subChannelId;
    if (other.isSetMTemplateUrl()) {
      this.mTemplateUrl = other.mTemplateUrl;
    }
  }

  public TColumn deepCopy() {
    return new TColumn(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.keyword = null;
    this.desc = null;
    this.path = null;
    setChannelIdIsSet(false);
    this.channelId = 0;
    this.fullPath = null;
    this.pcPage = null;
    this.mPage = null;
    this.dummyPage = null;
    this.title = null;
    setSubChannelIdIsSet(false);
    this.subChannelId = 0;
    this.mTemplateUrl = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getKeyword() {
    return this.keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }

  public void unsetKeyword() {
    this.keyword = null;
  }

  /** Returns true if field keyword is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyword() {
    return this.keyword != null;
  }

  public void setKeywordIsSet(boolean value) {
    if (!value) {
      this.keyword = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public long getChannelId() {
    return this.channelId;
  }

  public void setChannelId(long channelId) {
    this.channelId = channelId;
    setChannelIdIsSet(true);
  }

  public void unsetChannelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  public void setChannelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
  }

  public String getFullPath() {
    return this.fullPath;
  }

  public void setFullPath(String fullPath) {
    this.fullPath = fullPath;
  }

  public void unsetFullPath() {
    this.fullPath = null;
  }

  /** Returns true if field fullPath is set (has been assigned a value) and false otherwise */
  public boolean isSetFullPath() {
    return this.fullPath != null;
  }

  public void setFullPathIsSet(boolean value) {
    if (!value) {
      this.fullPath = null;
    }
  }

  public com.lesports.qmt.cms.api.dto.TColumnPage getPcPage() {
    return this.pcPage;
  }

  public void setPcPage(com.lesports.qmt.cms.api.dto.TColumnPage pcPage) {
    this.pcPage = pcPage;
  }

  public void unsetPcPage() {
    this.pcPage = null;
  }

  /** Returns true if field pcPage is set (has been assigned a value) and false otherwise */
  public boolean isSetPcPage() {
    return this.pcPage != null;
  }

  public void setPcPageIsSet(boolean value) {
    if (!value) {
      this.pcPage = null;
    }
  }

  public com.lesports.qmt.cms.api.dto.TColumnPage getMPage() {
    return this.mPage;
  }

  public void setMPage(com.lesports.qmt.cms.api.dto.TColumnPage mPage) {
    this.mPage = mPage;
  }

  public void unsetMPage() {
    this.mPage = null;
  }

  /** Returns true if field mPage is set (has been assigned a value) and false otherwise */
  public boolean isSetMPage() {
    return this.mPage != null;
  }

  public void setMPageIsSet(boolean value) {
    if (!value) {
      this.mPage = null;
    }
  }

  public com.lesports.qmt.cms.api.dto.TColumnPage getDummyPage() {
    return this.dummyPage;
  }

  public void setDummyPage(com.lesports.qmt.cms.api.dto.TColumnPage dummyPage) {
    this.dummyPage = dummyPage;
  }

  public void unsetDummyPage() {
    this.dummyPage = null;
  }

  /** Returns true if field dummyPage is set (has been assigned a value) and false otherwise */
  public boolean isSetDummyPage() {
    return this.dummyPage != null;
  }

  public void setDummyPageIsSet(boolean value) {
    if (!value) {
      this.dummyPage = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public long getSubChannelId() {
    return this.subChannelId;
  }

  public void setSubChannelId(long subChannelId) {
    this.subChannelId = subChannelId;
    setSubChannelIdIsSet(true);
  }

  public void unsetSubChannelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBCHANNELID_ISSET_ID);
  }

  /** Returns true if field subChannelId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubChannelId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBCHANNELID_ISSET_ID);
  }

  public void setSubChannelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBCHANNELID_ISSET_ID, value);
  }

  public String getMTemplateUrl() {
    return this.mTemplateUrl;
  }

  public void setMTemplateUrl(String mTemplateUrl) {
    this.mTemplateUrl = mTemplateUrl;
  }

  public void unsetMTemplateUrl() {
    this.mTemplateUrl = null;
  }

  /** Returns true if field mTemplateUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMTemplateUrl() {
    return this.mTemplateUrl != null;
  }

  public void setMTemplateUrlIsSet(boolean value) {
    if (!value) {
      this.mTemplateUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case KEYWORD:
      if (value == null) {
        unsetKeyword();
      } else {
        setKeyword((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((Long)value);
      }
      break;

    case FULL_PATH:
      if (value == null) {
        unsetFullPath();
      } else {
        setFullPath((String)value);
      }
      break;

    case PC_PAGE:
      if (value == null) {
        unsetPcPage();
      } else {
        setPcPage((com.lesports.qmt.cms.api.dto.TColumnPage)value);
      }
      break;

    case M_PAGE:
      if (value == null) {
        unsetMPage();
      } else {
        setMPage((com.lesports.qmt.cms.api.dto.TColumnPage)value);
      }
      break;

    case DUMMY_PAGE:
      if (value == null) {
        unsetDummyPage();
      } else {
        setDummyPage((com.lesports.qmt.cms.api.dto.TColumnPage)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case SUB_CHANNEL_ID:
      if (value == null) {
        unsetSubChannelId();
      } else {
        setSubChannelId((Long)value);
      }
      break;

    case M_TEMPLATE_URL:
      if (value == null) {
        unsetMTemplateUrl();
      } else {
        setMTemplateUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case KEYWORD:
      return getKeyword();

    case DESC:
      return getDesc();

    case PATH:
      return getPath();

    case CHANNEL_ID:
      return Long.valueOf(getChannelId());

    case FULL_PATH:
      return getFullPath();

    case PC_PAGE:
      return getPcPage();

    case M_PAGE:
      return getMPage();

    case DUMMY_PAGE:
      return getDummyPage();

    case TITLE:
      return getTitle();

    case SUB_CHANNEL_ID:
      return Long.valueOf(getSubChannelId());

    case M_TEMPLATE_URL:
      return getMTemplateUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case KEYWORD:
      return isSetKeyword();
    case DESC:
      return isSetDesc();
    case PATH:
      return isSetPath();
    case CHANNEL_ID:
      return isSetChannelId();
    case FULL_PATH:
      return isSetFullPath();
    case PC_PAGE:
      return isSetPcPage();
    case M_PAGE:
      return isSetMPage();
    case DUMMY_PAGE:
      return isSetDummyPage();
    case TITLE:
      return isSetTitle();
    case SUB_CHANNEL_ID:
      return isSetSubChannelId();
    case M_TEMPLATE_URL:
      return isSetMTemplateUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumn)
      return this.equals((TColumn)that);
    return false;
  }

  public boolean equals(TColumn that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_keyword = true && this.isSetKeyword();
    boolean that_present_keyword = true && that.isSetKeyword();
    if (this_present_keyword || that_present_keyword) {
      if (!(this_present_keyword && that_present_keyword))
        return false;
      if (!this.keyword.equals(that.keyword))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (this.channelId != that.channelId)
        return false;
    }

    boolean this_present_fullPath = true && this.isSetFullPath();
    boolean that_present_fullPath = true && that.isSetFullPath();
    if (this_present_fullPath || that_present_fullPath) {
      if (!(this_present_fullPath && that_present_fullPath))
        return false;
      if (!this.fullPath.equals(that.fullPath))
        return false;
    }

    boolean this_present_pcPage = true && this.isSetPcPage();
    boolean that_present_pcPage = true && that.isSetPcPage();
    if (this_present_pcPage || that_present_pcPage) {
      if (!(this_present_pcPage && that_present_pcPage))
        return false;
      if (!this.pcPage.equals(that.pcPage))
        return false;
    }

    boolean this_present_mPage = true && this.isSetMPage();
    boolean that_present_mPage = true && that.isSetMPage();
    if (this_present_mPage || that_present_mPage) {
      if (!(this_present_mPage && that_present_mPage))
        return false;
      if (!this.mPage.equals(that.mPage))
        return false;
    }

    boolean this_present_dummyPage = true && this.isSetDummyPage();
    boolean that_present_dummyPage = true && that.isSetDummyPage();
    if (this_present_dummyPage || that_present_dummyPage) {
      if (!(this_present_dummyPage && that_present_dummyPage))
        return false;
      if (!this.dummyPage.equals(that.dummyPage))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_subChannelId = true && this.isSetSubChannelId();
    boolean that_present_subChannelId = true && that.isSetSubChannelId();
    if (this_present_subChannelId || that_present_subChannelId) {
      if (!(this_present_subChannelId && that_present_subChannelId))
        return false;
      if (this.subChannelId != that.subChannelId)
        return false;
    }

    boolean this_present_mTemplateUrl = true && this.isSetMTemplateUrl();
    boolean that_present_mTemplateUrl = true && that.isSetMTemplateUrl();
    if (this_present_mTemplateUrl || that_present_mTemplateUrl) {
      if (!(this_present_mTemplateUrl && that_present_mTemplateUrl))
        return false;
      if (!this.mTemplateUrl.equals(that.mTemplateUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_keyword = true && (isSetKeyword());
    list.add(present_keyword);
    if (present_keyword)
      list.add(keyword);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_channelId = true && (isSetChannelId());
    list.add(present_channelId);
    if (present_channelId)
      list.add(channelId);

    boolean present_fullPath = true && (isSetFullPath());
    list.add(present_fullPath);
    if (present_fullPath)
      list.add(fullPath);

    boolean present_pcPage = true && (isSetPcPage());
    list.add(present_pcPage);
    if (present_pcPage)
      list.add(pcPage);

    boolean present_mPage = true && (isSetMPage());
    list.add(present_mPage);
    if (present_mPage)
      list.add(mPage);

    boolean present_dummyPage = true && (isSetDummyPage());
    list.add(present_dummyPage);
    if (present_dummyPage)
      list.add(dummyPage);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_subChannelId = true && (isSetSubChannelId());
    list.add(present_subChannelId);
    if (present_subChannelId)
      list.add(subChannelId);

    boolean present_mTemplateUrl = true && (isSetMTemplateUrl());
    list.add(present_mTemplateUrl);
    if (present_mTemplateUrl)
      list.add(mTemplateUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(TColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(other.isSetKeyword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyword, other.keyword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullPath()).compareTo(other.isSetFullPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullPath, other.fullPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcPage()).compareTo(other.isSetPcPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcPage, other.pcPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMPage()).compareTo(other.isSetMPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mPage, other.mPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDummyPage()).compareTo(other.isSetDummyPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDummyPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dummyPage, other.dummyPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubChannelId()).compareTo(other.isSetSubChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subChannelId, other.subChannelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMTemplateUrl()).compareTo(other.isSetMTemplateUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMTemplateUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mTemplateUrl, other.mTemplateUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumn(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetKeyword()) {
      if (!first) sb.append(", ");
      sb.append("keyword:");
      if (this.keyword == null) {
        sb.append("null");
      } else {
        sb.append(this.keyword);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetChannelId()) {
      if (!first) sb.append(", ");
      sb.append("channelId:");
      sb.append(this.channelId);
      first = false;
    }
    if (isSetFullPath()) {
      if (!first) sb.append(", ");
      sb.append("fullPath:");
      if (this.fullPath == null) {
        sb.append("null");
      } else {
        sb.append(this.fullPath);
      }
      first = false;
    }
    if (isSetPcPage()) {
      if (!first) sb.append(", ");
      sb.append("pcPage:");
      if (this.pcPage == null) {
        sb.append("null");
      } else {
        sb.append(this.pcPage);
      }
      first = false;
    }
    if (isSetMPage()) {
      if (!first) sb.append(", ");
      sb.append("mPage:");
      if (this.mPage == null) {
        sb.append("null");
      } else {
        sb.append(this.mPage);
      }
      first = false;
    }
    if (isSetDummyPage()) {
      if (!first) sb.append(", ");
      sb.append("dummyPage:");
      if (this.dummyPage == null) {
        sb.append("null");
      } else {
        sb.append(this.dummyPage);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetSubChannelId()) {
      if (!first) sb.append(", ");
      sb.append("subChannelId:");
      sb.append(this.subChannelId);
      first = false;
    }
    if (isSetMTemplateUrl()) {
      if (!first) sb.append(", ");
      sb.append("mTemplateUrl:");
      if (this.mTemplateUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.mTemplateUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pcPage != null) {
      pcPage.validate();
    }
    if (mPage != null) {
      mPage.validate();
    }
    if (dummyPage != null) {
      dummyPage.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStandardSchemeFactory implements SchemeFactory {
    public TColumnStandardScheme getScheme() {
      return new TColumnStandardScheme();
    }
  }

  private static class TColumnStandardScheme extends StandardScheme<TColumn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyword = iprot.readString();
              struct.setKeywordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.channelId = iprot.readI64();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FULL_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullPath = iprot.readString();
              struct.setFullPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PC_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pcPage = new com.lesports.qmt.cms.api.dto.TColumnPage();
              struct.pcPage.read(iprot);
              struct.setPcPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // M_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mPage = new com.lesports.qmt.cms.api.dto.TColumnPage();
              struct.mPage.read(iprot);
              struct.setMPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DUMMY_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dummyPage = new com.lesports.qmt.cms.api.dto.TColumnPage();
              struct.dummyPage.read(iprot);
              struct.setDummyPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUB_CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subChannelId = iprot.readI64();
              struct.setSubChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // M_TEMPLATE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mTemplateUrl = iprot.readString();
              struct.setMTemplateUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyword != null) {
        if (struct.isSetKeyword()) {
          oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
          oprot.writeString(struct.keyword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChannelId()) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeI64(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.fullPath != null) {
        if (struct.isSetFullPath()) {
          oprot.writeFieldBegin(FULL_PATH_FIELD_DESC);
          oprot.writeString(struct.fullPath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pcPage != null) {
        if (struct.isSetPcPage()) {
          oprot.writeFieldBegin(PC_PAGE_FIELD_DESC);
          struct.pcPage.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mPage != null) {
        if (struct.isSetMPage()) {
          oprot.writeFieldBegin(M_PAGE_FIELD_DESC);
          struct.mPage.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dummyPage != null) {
        if (struct.isSetDummyPage()) {
          oprot.writeFieldBegin(DUMMY_PAGE_FIELD_DESC);
          struct.dummyPage.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSubChannelId()) {
        oprot.writeFieldBegin(SUB_CHANNEL_ID_FIELD_DESC);
        oprot.writeI64(struct.subChannelId);
        oprot.writeFieldEnd();
      }
      if (struct.mTemplateUrl != null) {
        if (struct.isSetMTemplateUrl()) {
          oprot.writeFieldBegin(M_TEMPLATE_URL_FIELD_DESC);
          oprot.writeString(struct.mTemplateUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnTupleSchemeFactory implements SchemeFactory {
    public TColumnTupleScheme getScheme() {
      return new TColumnTupleScheme();
    }
  }

  private static class TColumnTupleScheme extends TupleScheme<TColumn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetKeyword()) {
        optionals.set(2);
      }
      if (struct.isSetDesc()) {
        optionals.set(3);
      }
      if (struct.isSetPath()) {
        optionals.set(4);
      }
      if (struct.isSetChannelId()) {
        optionals.set(5);
      }
      if (struct.isSetFullPath()) {
        optionals.set(6);
      }
      if (struct.isSetPcPage()) {
        optionals.set(7);
      }
      if (struct.isSetMPage()) {
        optionals.set(8);
      }
      if (struct.isSetDummyPage()) {
        optionals.set(9);
      }
      if (struct.isSetTitle()) {
        optionals.set(10);
      }
      if (struct.isSetSubChannelId()) {
        optionals.set(11);
      }
      if (struct.isSetMTemplateUrl()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetKeyword()) {
        oprot.writeString(struct.keyword);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetChannelId()) {
        oprot.writeI64(struct.channelId);
      }
      if (struct.isSetFullPath()) {
        oprot.writeString(struct.fullPath);
      }
      if (struct.isSetPcPage()) {
        struct.pcPage.write(oprot);
      }
      if (struct.isSetMPage()) {
        struct.mPage.write(oprot);
      }
      if (struct.isSetDummyPage()) {
        struct.dummyPage.write(oprot);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetSubChannelId()) {
        oprot.writeI64(struct.subChannelId);
      }
      if (struct.isSetMTemplateUrl()) {
        oprot.writeString(struct.mTemplateUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumn struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.keyword = iprot.readString();
        struct.setKeywordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(5)) {
        struct.channelId = iprot.readI64();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fullPath = iprot.readString();
        struct.setFullPathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pcPage = new com.lesports.qmt.cms.api.dto.TColumnPage();
        struct.pcPage.read(iprot);
        struct.setPcPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mPage = new com.lesports.qmt.cms.api.dto.TColumnPage();
        struct.mPage.read(iprot);
        struct.setMPageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dummyPage = new com.lesports.qmt.cms.api.dto.TColumnPage();
        struct.dummyPage.read(iprot);
        struct.setDummyPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(11)) {
        struct.subChannelId = iprot.readI64();
        struct.setSubChannelIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mTemplateUrl = iprot.readString();
        struct.setMTemplateUrlIsSet(true);
      }
    }
  }

}

