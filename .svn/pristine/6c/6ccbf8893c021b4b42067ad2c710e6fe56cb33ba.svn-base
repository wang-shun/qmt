/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class THistoryMatch implements org.apache.thrift.TBase<THistoryMatch, THistoryMatch._Fields>, java.io.Serializable, Cloneable, Comparable<THistoryMatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THistoryMatch");

  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("round", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField COMPETITORS_FIELD_DESC = new org.apache.thrift.protocol.TField("competitors", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("abbreviation", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_STAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangStages", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_ROUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangRounds", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_ABBRS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangAbbrs", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new THistoryMatchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new THistoryMatchTupleSchemeFactory());
  }

  private long mid; // required
  private long csid; // optional
  private long cid; // optional
  private String stage; // optional
  private String round; // optional
  private String startTime; // optional
  private String startDate; // optional
  private String name; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.qmt.sbd.api.dto.TCompetitor> competitors; // optional
  private String abbreviation; // optional
  private com.lesports.qmt.sbd.api.common.MatchResult result; // optional
  private List<com.lesports.api.common.LangString> multiLangStages; // optional
  private List<com.lesports.api.common.LangString> multiLangRounds; // optional
  private List<com.lesports.api.common.LangString> multiLangAbbrs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MID((short)1, "mid"),
    CSID((short)2, "csid"),
    CID((short)3, "cid"),
    STAGE((short)4, "stage"),
    ROUND((short)5, "round"),
    START_TIME((short)6, "startTime"),
    START_DATE((short)7, "startDate"),
    NAME((short)8, "name"),
    MULTI_LANG_NAMES((short)9, "multiLangNames"),
    COMPETITORS((short)10, "competitors"),
    ABBREVIATION((short)11, "abbreviation"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.MatchResult
     */
    RESULT((short)12, "result"),
    MULTI_LANG_STAGES((short)13, "multiLangStages"),
    MULTI_LANG_ROUNDS((short)14, "multiLangRounds"),
    MULTI_LANG_ABBRS((short)15, "multiLangAbbrs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MID
          return MID;
        case 2: // CSID
          return CSID;
        case 3: // CID
          return CID;
        case 4: // STAGE
          return STAGE;
        case 5: // ROUND
          return ROUND;
        case 6: // START_TIME
          return START_TIME;
        case 7: // START_DATE
          return START_DATE;
        case 8: // NAME
          return NAME;
        case 9: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 10: // COMPETITORS
          return COMPETITORS;
        case 11: // ABBREVIATION
          return ABBREVIATION;
        case 12: // RESULT
          return RESULT;
        case 13: // MULTI_LANG_STAGES
          return MULTI_LANG_STAGES;
        case 14: // MULTI_LANG_ROUNDS
          return MULTI_LANG_ROUNDS;
        case 15: // MULTI_LANG_ABBRS
          return MULTI_LANG_ABBRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MID_ISSET_ID = 0;
  private static final int __CSID_ISSET_ID = 1;
  private static final int __CID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CSID,_Fields.CID,_Fields.STAGE,_Fields.ROUND,_Fields.START_TIME,_Fields.START_DATE,_Fields.NAME,_Fields.MULTI_LANG_NAMES,_Fields.COMPETITORS,_Fields.ABBREVIATION,_Fields.RESULT,_Fields.MULTI_LANG_STAGES,_Fields.MULTI_LANG_ROUNDS,_Fields.MULTI_LANG_ABBRS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUND, new org.apache.thrift.meta_data.FieldMetaData("round", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.COMPETITORS, new org.apache.thrift.meta_data.FieldMetaData("competitors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitor.class))));
    tmpMap.put(_Fields.ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("abbreviation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.MatchResult.class)));
    tmpMap.put(_Fields.MULTI_LANG_STAGES, new org.apache.thrift.meta_data.FieldMetaData("multiLangStages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_ROUNDS, new org.apache.thrift.meta_data.FieldMetaData("multiLangRounds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_ABBRS, new org.apache.thrift.meta_data.FieldMetaData("multiLangAbbrs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THistoryMatch.class, metaDataMap);
  }

  public THistoryMatch() {
  }

  public THistoryMatch(
    long mid)
  {
    this();
    this.mid = mid;
    setMidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THistoryMatch(THistoryMatch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.mid = other.mid;
    this.csid = other.csid;
    this.cid = other.cid;
    if (other.isSetStage()) {
      this.stage = other.stage;
    }
    if (other.isSetRound()) {
      this.round = other.round;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetCompetitors()) {
      List<com.lesports.qmt.sbd.api.dto.TCompetitor> __this__competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>(other.competitors.size());
      for (com.lesports.qmt.sbd.api.dto.TCompetitor other_element : other.competitors) {
        __this__competitors.add(new com.lesports.qmt.sbd.api.dto.TCompetitor(other_element));
      }
      this.competitors = __this__competitors;
    }
    if (other.isSetAbbreviation()) {
      this.abbreviation = other.abbreviation;
    }
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetMultiLangStages()) {
      List<com.lesports.api.common.LangString> __this__multiLangStages = new ArrayList<com.lesports.api.common.LangString>(other.multiLangStages.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangStages) {
        __this__multiLangStages.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangStages = __this__multiLangStages;
    }
    if (other.isSetMultiLangRounds()) {
      List<com.lesports.api.common.LangString> __this__multiLangRounds = new ArrayList<com.lesports.api.common.LangString>(other.multiLangRounds.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangRounds) {
        __this__multiLangRounds.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangRounds = __this__multiLangRounds;
    }
    if (other.isSetMultiLangAbbrs()) {
      List<com.lesports.api.common.LangString> __this__multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(other.multiLangAbbrs.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangAbbrs) {
        __this__multiLangAbbrs.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangAbbrs = __this__multiLangAbbrs;
    }
  }

  public THistoryMatch deepCopy() {
    return new THistoryMatch(this);
  }

  @Override
  public void clear() {
    setMidIsSet(false);
    this.mid = 0;
    setCsidIsSet(false);
    this.csid = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.stage = null;
    this.round = null;
    this.startTime = null;
    this.startDate = null;
    this.name = null;
    this.multiLangNames = null;
    this.competitors = null;
    this.abbreviation = null;
    this.result = null;
    this.multiLangStages = null;
    this.multiLangRounds = null;
    this.multiLangAbbrs = null;
  }

  public long getMid() {
    return this.mid;
  }

  public void setMid(long mid) {
    this.mid = mid;
    setMidIsSet(true);
  }

  public void unsetMid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getStage() {
    return this.stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }

  public void unsetStage() {
    this.stage = null;
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return this.stage != null;
  }

  public void setStageIsSet(boolean value) {
    if (!value) {
      this.stage = null;
    }
  }

  public String getRound() {
    return this.round;
  }

  public void setRound(String round) {
    this.round = round;
  }

  public void unsetRound() {
    this.round = null;
  }

  /** Returns true if field round is set (has been assigned a value) and false otherwise */
  public boolean isSetRound() {
    return this.round != null;
  }

  public void setRoundIsSet(boolean value) {
    if (!value) {
      this.round = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getCompetitorsSize() {
    return (this.competitors == null) ? 0 : this.competitors.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TCompetitor> getCompetitorsIterator() {
    return (this.competitors == null) ? null : this.competitors.iterator();
  }

  public void addToCompetitors(com.lesports.qmt.sbd.api.dto.TCompetitor elem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>();
    }
    this.competitors.add(elem);
  }

  public List<com.lesports.qmt.sbd.api.dto.TCompetitor> getCompetitors() {
    return this.competitors;
  }

  public void setCompetitors(List<com.lesports.qmt.sbd.api.dto.TCompetitor> competitors) {
    this.competitors = competitors;
  }

  public void unsetCompetitors() {
    this.competitors = null;
  }

  /** Returns true if field competitors is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitors() {
    return this.competitors != null;
  }

  public void setCompetitorsIsSet(boolean value) {
    if (!value) {
      this.competitors = null;
    }
  }

  public String getAbbreviation() {
    return this.abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }

  public void unsetAbbreviation() {
    this.abbreviation = null;
  }

  /** Returns true if field abbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetAbbreviation() {
    return this.abbreviation != null;
  }

  public void setAbbreviationIsSet(boolean value) {
    if (!value) {
      this.abbreviation = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchResult
   */
  public com.lesports.qmt.sbd.api.common.MatchResult getResult() {
    return this.result;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchResult
   */
  public void setResult(com.lesports.qmt.sbd.api.common.MatchResult result) {
    this.result = result;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public int getMultiLangStagesSize() {
    return (this.multiLangStages == null) ? 0 : this.multiLangStages.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangStagesIterator() {
    return (this.multiLangStages == null) ? null : this.multiLangStages.iterator();
  }

  public void addToMultiLangStages(com.lesports.api.common.LangString elem) {
    if (this.multiLangStages == null) {
      this.multiLangStages = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangStages.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangStages() {
    return this.multiLangStages;
  }

  public void setMultiLangStages(List<com.lesports.api.common.LangString> multiLangStages) {
    this.multiLangStages = multiLangStages;
  }

  public void unsetMultiLangStages() {
    this.multiLangStages = null;
  }

  /** Returns true if field multiLangStages is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangStages() {
    return this.multiLangStages != null;
  }

  public void setMultiLangStagesIsSet(boolean value) {
    if (!value) {
      this.multiLangStages = null;
    }
  }

  public int getMultiLangRoundsSize() {
    return (this.multiLangRounds == null) ? 0 : this.multiLangRounds.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangRoundsIterator() {
    return (this.multiLangRounds == null) ? null : this.multiLangRounds.iterator();
  }

  public void addToMultiLangRounds(com.lesports.api.common.LangString elem) {
    if (this.multiLangRounds == null) {
      this.multiLangRounds = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangRounds.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangRounds() {
    return this.multiLangRounds;
  }

  public void setMultiLangRounds(List<com.lesports.api.common.LangString> multiLangRounds) {
    this.multiLangRounds = multiLangRounds;
  }

  public void unsetMultiLangRounds() {
    this.multiLangRounds = null;
  }

  /** Returns true if field multiLangRounds is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangRounds() {
    return this.multiLangRounds != null;
  }

  public void setMultiLangRoundsIsSet(boolean value) {
    if (!value) {
      this.multiLangRounds = null;
    }
  }

  public int getMultiLangAbbrsSize() {
    return (this.multiLangAbbrs == null) ? 0 : this.multiLangAbbrs.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangAbbrsIterator() {
    return (this.multiLangAbbrs == null) ? null : this.multiLangAbbrs.iterator();
  }

  public void addToMultiLangAbbrs(com.lesports.api.common.LangString elem) {
    if (this.multiLangAbbrs == null) {
      this.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangAbbrs.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangAbbrs() {
    return this.multiLangAbbrs;
  }

  public void setMultiLangAbbrs(List<com.lesports.api.common.LangString> multiLangAbbrs) {
    this.multiLangAbbrs = multiLangAbbrs;
  }

  public void unsetMultiLangAbbrs() {
    this.multiLangAbbrs = null;
  }

  /** Returns true if field multiLangAbbrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangAbbrs() {
    return this.multiLangAbbrs != null;
  }

  public void setMultiLangAbbrsIsSet(boolean value) {
    if (!value) {
      this.multiLangAbbrs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((String)value);
      }
      break;

    case ROUND:
      if (value == null) {
        unsetRound();
      } else {
        setRound((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case COMPETITORS:
      if (value == null) {
        unsetCompetitors();
      } else {
        setCompetitors((List<com.lesports.qmt.sbd.api.dto.TCompetitor>)value);
      }
      break;

    case ABBREVIATION:
      if (value == null) {
        unsetAbbreviation();
      } else {
        setAbbreviation((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((com.lesports.qmt.sbd.api.common.MatchResult)value);
      }
      break;

    case MULTI_LANG_STAGES:
      if (value == null) {
        unsetMultiLangStages();
      } else {
        setMultiLangStages((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_ROUNDS:
      if (value == null) {
        unsetMultiLangRounds();
      } else {
        setMultiLangRounds((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_ABBRS:
      if (value == null) {
        unsetMultiLangAbbrs();
      } else {
        setMultiLangAbbrs((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MID:
      return Long.valueOf(getMid());

    case CSID:
      return Long.valueOf(getCsid());

    case CID:
      return Long.valueOf(getCid());

    case STAGE:
      return getStage();

    case ROUND:
      return getRound();

    case START_TIME:
      return getStartTime();

    case START_DATE:
      return getStartDate();

    case NAME:
      return getName();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case COMPETITORS:
      return getCompetitors();

    case ABBREVIATION:
      return getAbbreviation();

    case RESULT:
      return getResult();

    case MULTI_LANG_STAGES:
      return getMultiLangStages();

    case MULTI_LANG_ROUNDS:
      return getMultiLangRounds();

    case MULTI_LANG_ABBRS:
      return getMultiLangAbbrs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MID:
      return isSetMid();
    case CSID:
      return isSetCsid();
    case CID:
      return isSetCid();
    case STAGE:
      return isSetStage();
    case ROUND:
      return isSetRound();
    case START_TIME:
      return isSetStartTime();
    case START_DATE:
      return isSetStartDate();
    case NAME:
      return isSetName();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case COMPETITORS:
      return isSetCompetitors();
    case ABBREVIATION:
      return isSetAbbreviation();
    case RESULT:
      return isSetResult();
    case MULTI_LANG_STAGES:
      return isSetMultiLangStages();
    case MULTI_LANG_ROUNDS:
      return isSetMultiLangRounds();
    case MULTI_LANG_ABBRS:
      return isSetMultiLangAbbrs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof THistoryMatch)
      return this.equals((THistoryMatch)that);
    return false;
  }

  public boolean equals(THistoryMatch that) {
    if (that == null)
      return false;

    boolean this_present_mid = true;
    boolean that_present_mid = true;
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_stage = true && this.isSetStage();
    boolean that_present_stage = true && that.isSetStage();
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (!this.stage.equals(that.stage))
        return false;
    }

    boolean this_present_round = true && this.isSetRound();
    boolean that_present_round = true && that.isSetRound();
    if (this_present_round || that_present_round) {
      if (!(this_present_round && that_present_round))
        return false;
      if (!this.round.equals(that.round))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_competitors = true && this.isSetCompetitors();
    boolean that_present_competitors = true && that.isSetCompetitors();
    if (this_present_competitors || that_present_competitors) {
      if (!(this_present_competitors && that_present_competitors))
        return false;
      if (!this.competitors.equals(that.competitors))
        return false;
    }

    boolean this_present_abbreviation = true && this.isSetAbbreviation();
    boolean that_present_abbreviation = true && that.isSetAbbreviation();
    if (this_present_abbreviation || that_present_abbreviation) {
      if (!(this_present_abbreviation && that_present_abbreviation))
        return false;
      if (!this.abbreviation.equals(that.abbreviation))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_multiLangStages = true && this.isSetMultiLangStages();
    boolean that_present_multiLangStages = true && that.isSetMultiLangStages();
    if (this_present_multiLangStages || that_present_multiLangStages) {
      if (!(this_present_multiLangStages && that_present_multiLangStages))
        return false;
      if (!this.multiLangStages.equals(that.multiLangStages))
        return false;
    }

    boolean this_present_multiLangRounds = true && this.isSetMultiLangRounds();
    boolean that_present_multiLangRounds = true && that.isSetMultiLangRounds();
    if (this_present_multiLangRounds || that_present_multiLangRounds) {
      if (!(this_present_multiLangRounds && that_present_multiLangRounds))
        return false;
      if (!this.multiLangRounds.equals(that.multiLangRounds))
        return false;
    }

    boolean this_present_multiLangAbbrs = true && this.isSetMultiLangAbbrs();
    boolean that_present_multiLangAbbrs = true && that.isSetMultiLangAbbrs();
    if (this_present_multiLangAbbrs || that_present_multiLangAbbrs) {
      if (!(this_present_multiLangAbbrs && that_present_multiLangAbbrs))
        return false;
      if (!this.multiLangAbbrs.equals(that.multiLangAbbrs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mid = true;
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_stage = true && (isSetStage());
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_round = true && (isSetRound());
    list.add(present_round);
    if (present_round)
      list.add(round);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_competitors = true && (isSetCompetitors());
    list.add(present_competitors);
    if (present_competitors)
      list.add(competitors);

    boolean present_abbreviation = true && (isSetAbbreviation());
    list.add(present_abbreviation);
    if (present_abbreviation)
      list.add(abbreviation);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result.getValue());

    boolean present_multiLangStages = true && (isSetMultiLangStages());
    list.add(present_multiLangStages);
    if (present_multiLangStages)
      list.add(multiLangStages);

    boolean present_multiLangRounds = true && (isSetMultiLangRounds());
    list.add(present_multiLangRounds);
    if (present_multiLangRounds)
      list.add(multiLangRounds);

    boolean present_multiLangAbbrs = true && (isSetMultiLangAbbrs());
    list.add(present_multiLangAbbrs);
    if (present_multiLangAbbrs)
      list.add(multiLangAbbrs);

    return list.hashCode();
  }

  @Override
  public int compareTo(THistoryMatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRound()).compareTo(other.isSetRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.round, other.round);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitors()).compareTo(other.isSetCompetitors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitors, other.competitors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbbreviation()).compareTo(other.isSetAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbreviation, other.abbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangStages()).compareTo(other.isSetMultiLangStages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangStages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangStages, other.multiLangStages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangRounds()).compareTo(other.isSetMultiLangRounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangRounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangRounds, other.multiLangRounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangAbbrs()).compareTo(other.isSetMultiLangAbbrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangAbbrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangAbbrs, other.multiLangAbbrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("THistoryMatch(");
    boolean first = true;

    sb.append("mid:");
    sb.append(this.mid);
    first = false;
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetStage()) {
      if (!first) sb.append(", ");
      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
    }
    if (isSetRound()) {
      if (!first) sb.append(", ");
      sb.append("round:");
      if (this.round == null) {
        sb.append("null");
      } else {
        sb.append(this.round);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetStartDate()) {
      if (!first) sb.append(", ");
      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetCompetitors()) {
      if (!first) sb.append(", ");
      sb.append("competitors:");
      if (this.competitors == null) {
        sb.append("null");
      } else {
        sb.append(this.competitors);
      }
      first = false;
    }
    if (isSetAbbreviation()) {
      if (!first) sb.append(", ");
      sb.append("abbreviation:");
      if (this.abbreviation == null) {
        sb.append("null");
      } else {
        sb.append(this.abbreviation);
      }
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetMultiLangStages()) {
      if (!first) sb.append(", ");
      sb.append("multiLangStages:");
      if (this.multiLangStages == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangStages);
      }
      first = false;
    }
    if (isSetMultiLangRounds()) {
      if (!first) sb.append(", ");
      sb.append("multiLangRounds:");
      if (this.multiLangRounds == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangRounds);
      }
      first = false;
    }
    if (isSetMultiLangAbbrs()) {
      if (!first) sb.append(", ");
      sb.append("multiLangAbbrs:");
      if (this.multiLangAbbrs == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangAbbrs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THistoryMatchStandardSchemeFactory implements SchemeFactory {
    public THistoryMatchStandardScheme getScheme() {
      return new THistoryMatchStandardScheme();
    }
  }

  private static class THistoryMatchStandardScheme extends StandardScheme<THistoryMatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, THistoryMatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mid = iprot.readI64();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stage = iprot.readString();
              struct.setStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.round = iprot.readString();
              struct.setRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list0.size);
                com.lesports.api.common.LangString _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.lesports.api.common.LangString();
                  _elem1.read(iprot);
                  struct.multiLangNames.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPETITORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>(_list3.size);
                com.lesports.qmt.sbd.api.dto.TCompetitor _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.lesports.qmt.sbd.api.dto.TCompetitor();
                  _elem4.read(iprot);
                  struct.competitors.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abbreviation = iprot.readString();
              struct.setAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result = com.lesports.qmt.sbd.api.common.MatchResult.findByValue(iprot.readI32());
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MULTI_LANG_STAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.multiLangStages = new ArrayList<com.lesports.api.common.LangString>(_list6.size);
                com.lesports.api.common.LangString _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.lesports.api.common.LangString();
                  _elem7.read(iprot);
                  struct.multiLangStages.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangStagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MULTI_LANG_ROUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.multiLangRounds = new ArrayList<com.lesports.api.common.LangString>(_list9.size);
                com.lesports.api.common.LangString _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new com.lesports.api.common.LangString();
                  _elem10.read(iprot);
                  struct.multiLangRounds.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangRoundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MULTI_LANG_ABBRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(_list12.size);
                com.lesports.api.common.LangString _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new com.lesports.api.common.LangString();
                  _elem13.read(iprot);
                  struct.multiLangAbbrs.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangAbbrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, THistoryMatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeI64(struct.mid);
      oprot.writeFieldEnd();
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.stage != null) {
        if (struct.isSetStage()) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          oprot.writeString(struct.stage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.round != null) {
        if (struct.isSetRound()) {
          oprot.writeFieldBegin(ROUND_FIELD_DESC);
          oprot.writeString(struct.round);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startDate != null) {
        if (struct.isSetStartDate()) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter15 : struct.multiLangNames)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitors != null) {
        if (struct.isSetCompetitors()) {
          oprot.writeFieldBegin(COMPETITORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.competitors.size()));
            for (com.lesports.qmt.sbd.api.dto.TCompetitor _iter16 : struct.competitors)
            {
              _iter16.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.abbreviation != null) {
        if (struct.isSetAbbreviation()) {
          oprot.writeFieldBegin(ABBREVIATION_FIELD_DESC);
          oprot.writeString(struct.abbreviation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeI32(struct.result.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangStages != null) {
        if (struct.isSetMultiLangStages()) {
          oprot.writeFieldBegin(MULTI_LANG_STAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangStages.size()));
            for (com.lesports.api.common.LangString _iter17 : struct.multiLangStages)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangRounds != null) {
        if (struct.isSetMultiLangRounds()) {
          oprot.writeFieldBegin(MULTI_LANG_ROUNDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangRounds.size()));
            for (com.lesports.api.common.LangString _iter18 : struct.multiLangRounds)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangAbbrs != null) {
        if (struct.isSetMultiLangAbbrs()) {
          oprot.writeFieldBegin(MULTI_LANG_ABBRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangAbbrs.size()));
            for (com.lesports.api.common.LangString _iter19 : struct.multiLangAbbrs)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THistoryMatchTupleSchemeFactory implements SchemeFactory {
    public THistoryMatchTupleScheme getScheme() {
      return new THistoryMatchTupleScheme();
    }
  }

  private static class THistoryMatchTupleScheme extends TupleScheme<THistoryMatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THistoryMatch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMid()) {
        optionals.set(0);
      }
      if (struct.isSetCsid()) {
        optionals.set(1);
      }
      if (struct.isSetCid()) {
        optionals.set(2);
      }
      if (struct.isSetStage()) {
        optionals.set(3);
      }
      if (struct.isSetRound()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetStartDate()) {
        optionals.set(6);
      }
      if (struct.isSetName()) {
        optionals.set(7);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(8);
      }
      if (struct.isSetCompetitors()) {
        optionals.set(9);
      }
      if (struct.isSetAbbreviation()) {
        optionals.set(10);
      }
      if (struct.isSetResult()) {
        optionals.set(11);
      }
      if (struct.isSetMultiLangStages()) {
        optionals.set(12);
      }
      if (struct.isSetMultiLangRounds()) {
        optionals.set(13);
      }
      if (struct.isSetMultiLangAbbrs()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetMid()) {
        oprot.writeI64(struct.mid);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetStage()) {
        oprot.writeString(struct.stage);
      }
      if (struct.isSetRound()) {
        oprot.writeString(struct.round);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter20 : struct.multiLangNames)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetCompetitors()) {
        {
          oprot.writeI32(struct.competitors.size());
          for (com.lesports.qmt.sbd.api.dto.TCompetitor _iter21 : struct.competitors)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetAbbreviation()) {
        oprot.writeString(struct.abbreviation);
      }
      if (struct.isSetResult()) {
        oprot.writeI32(struct.result.getValue());
      }
      if (struct.isSetMultiLangStages()) {
        {
          oprot.writeI32(struct.multiLangStages.size());
          for (com.lesports.api.common.LangString _iter22 : struct.multiLangStages)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangRounds()) {
        {
          oprot.writeI32(struct.multiLangRounds.size());
          for (com.lesports.api.common.LangString _iter23 : struct.multiLangRounds)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangAbbrs()) {
        {
          oprot.writeI32(struct.multiLangAbbrs.size());
          for (com.lesports.api.common.LangString _iter24 : struct.multiLangAbbrs)
          {
            _iter24.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THistoryMatch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.mid = iprot.readI64();
        struct.setMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stage = iprot.readString();
        struct.setStageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.round = iprot.readString();
        struct.setRoundIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list25.size);
          com.lesports.api.common.LangString _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            _elem26 = new com.lesports.api.common.LangString();
            _elem26.read(iprot);
            struct.multiLangNames.add(_elem26);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>(_list28.size);
          com.lesports.qmt.sbd.api.dto.TCompetitor _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new com.lesports.qmt.sbd.api.dto.TCompetitor();
            _elem29.read(iprot);
            struct.competitors.add(_elem29);
          }
        }
        struct.setCompetitorsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.abbreviation = iprot.readString();
        struct.setAbbreviationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.result = com.lesports.qmt.sbd.api.common.MatchResult.findByValue(iprot.readI32());
        struct.setResultIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangStages = new ArrayList<com.lesports.api.common.LangString>(_list31.size);
          com.lesports.api.common.LangString _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new com.lesports.api.common.LangString();
            _elem32.read(iprot);
            struct.multiLangStages.add(_elem32);
          }
        }
        struct.setMultiLangStagesIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangRounds = new ArrayList<com.lesports.api.common.LangString>(_list34.size);
          com.lesports.api.common.LangString _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new com.lesports.api.common.LangString();
            _elem35.read(iprot);
            struct.multiLangRounds.add(_elem35);
          }
        }
        struct.setMultiLangRoundsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(_list37.size);
          com.lesports.api.common.LangString _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new com.lesports.api.common.LangString();
            _elem38.read(iprot);
            struct.multiLangAbbrs.add(_elem38);
          }
        }
        struct.setMultiLangAbbrsIsSet(true);
      }
    }
  }

}

