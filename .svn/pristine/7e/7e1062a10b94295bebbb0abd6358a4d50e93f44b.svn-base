/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TCompetitorSeasonStat implements org.apache.thrift.TBase<TCompetitorSeasonStat, TCompetitorSeasonStat._Fields>, java.io.Serializable, Cloneable, Comparable<TCompetitorSeasonStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompetitorSeasonStat");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField SEASON_FIELD_DESC = new org.apache.thrift.protocol.TField("season", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField C_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TEAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField AVG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("avgStats", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField TOP_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("topStats", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField TEAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamName", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCompetitorSeasonStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCompetitorSeasonStatTupleSchemeFactory());
  }

  private long id; // required
  private long mid; // required
  private long competitorId; // optional
  private com.lesports.qmt.sbd.api.common.CompetitorType type; // optional
  private long csid; // optional
  private long cid; // optional
  private Map<String,String> stats; // optional
  private String season; // optional
  private String cName; // optional
  private int teamType; // optional
  private Map<String,String> avgStats; // optional
  private Map<String,String> topStats; // optional
  private long tid; // optional
  private String teamName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MID((short)2, "mid"),
    COMPETITOR_ID((short)3, "competitorId"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CompetitorType
     */
    TYPE((short)4, "type"),
    CSID((short)5, "csid"),
    CID((short)6, "cid"),
    STATS((short)7, "stats"),
    SEASON((short)8, "season"),
    C_NAME((short)9, "cName"),
    TEAM_TYPE((short)10, "teamType"),
    AVG_STATS((short)11, "avgStats"),
    TOP_STATS((short)12, "topStats"),
    TID((short)13, "tid"),
    TEAM_NAME((short)14, "teamName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MID
          return MID;
        case 3: // COMPETITOR_ID
          return COMPETITOR_ID;
        case 4: // TYPE
          return TYPE;
        case 5: // CSID
          return CSID;
        case 6: // CID
          return CID;
        case 7: // STATS
          return STATS;
        case 8: // SEASON
          return SEASON;
        case 9: // C_NAME
          return C_NAME;
        case 10: // TEAM_TYPE
          return TEAM_TYPE;
        case 11: // AVG_STATS
          return AVG_STATS;
        case 12: // TOP_STATS
          return TOP_STATS;
        case 13: // TID
          return TID;
        case 14: // TEAM_NAME
          return TEAM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MID_ISSET_ID = 1;
  private static final int __COMPETITORID_ISSET_ID = 2;
  private static final int __CSID_ISSET_ID = 3;
  private static final int __CID_ISSET_ID = 4;
  private static final int __TEAMTYPE_ISSET_ID = 5;
  private static final int __TID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPETITOR_ID,_Fields.TYPE,_Fields.CSID,_Fields.CID,_Fields.STATS,_Fields.SEASON,_Fields.C_NAME,_Fields.TEAM_TYPE,_Fields.AVG_STATS,_Fields.TOP_STATS,_Fields.TID,_Fields.TEAM_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CompetitorType.class)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SEASON, new org.apache.thrift.meta_data.FieldMetaData("season", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C_NAME, new org.apache.thrift.meta_data.FieldMetaData("cName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("teamType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVG_STATS, new org.apache.thrift.meta_data.FieldMetaData("avgStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOP_STATS, new org.apache.thrift.meta_data.FieldMetaData("topStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompetitorSeasonStat.class, metaDataMap);
  }

  public TCompetitorSeasonStat() {
  }

  public TCompetitorSeasonStat(
    long id,
    long mid)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.mid = mid;
    setMidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompetitorSeasonStat(TCompetitorSeasonStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.mid = other.mid;
    this.competitorId = other.competitorId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.csid = other.csid;
    this.cid = other.cid;
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    if (other.isSetSeason()) {
      this.season = other.season;
    }
    if (other.isSetCName()) {
      this.cName = other.cName;
    }
    this.teamType = other.teamType;
    if (other.isSetAvgStats()) {
      Map<String,String> __this__avgStats = new HashMap<String,String>(other.avgStats);
      this.avgStats = __this__avgStats;
    }
    if (other.isSetTopStats()) {
      Map<String,String> __this__topStats = new HashMap<String,String>(other.topStats);
      this.topStats = __this__topStats;
    }
    this.tid = other.tid;
    if (other.isSetTeamName()) {
      this.teamName = other.teamName;
    }
  }

  public TCompetitorSeasonStat deepCopy() {
    return new TCompetitorSeasonStat(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMidIsSet(false);
    this.mid = 0;
    setCompetitorIdIsSet(false);
    this.competitorId = 0;
    this.type = null;
    setCsidIsSet(false);
    this.csid = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.stats = null;
    this.season = null;
    this.cName = null;
    setTeamTypeIsSet(false);
    this.teamType = 0;
    this.avgStats = null;
    this.topStats = null;
    setTidIsSet(false);
    this.tid = 0;
    this.teamName = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMid() {
    return this.mid;
  }

  public void setMid(long mid) {
    this.mid = mid;
    setMidIsSet(true);
  }

  public void unsetMid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public long getCompetitorId() {
    return this.competitorId;
  }

  public void setCompetitorId(long competitorId) {
    this.competitorId = competitorId;
    setCompetitorIdIsSet(true);
  }

  public void unsetCompetitorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  public void setCompetitorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public com.lesports.qmt.sbd.api.common.CompetitorType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public void setType(com.lesports.qmt.sbd.api.common.CompetitorType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public String getSeason() {
    return this.season;
  }

  public void setSeason(String season) {
    this.season = season;
  }

  public void unsetSeason() {
    this.season = null;
  }

  /** Returns true if field season is set (has been assigned a value) and false otherwise */
  public boolean isSetSeason() {
    return this.season != null;
  }

  public void setSeasonIsSet(boolean value) {
    if (!value) {
      this.season = null;
    }
  }

  public String getCName() {
    return this.cName;
  }

  public void setCName(String cName) {
    this.cName = cName;
  }

  public void unsetCName() {
    this.cName = null;
  }

  /** Returns true if field cName is set (has been assigned a value) and false otherwise */
  public boolean isSetCName() {
    return this.cName != null;
  }

  public void setCNameIsSet(boolean value) {
    if (!value) {
      this.cName = null;
    }
  }

  public int getTeamType() {
    return this.teamType;
  }

  public void setTeamType(int teamType) {
    this.teamType = teamType;
    setTeamTypeIsSet(true);
  }

  public void unsetTeamType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  /** Returns true if field teamType is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamType() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  public void setTeamTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMTYPE_ISSET_ID, value);
  }

  public int getAvgStatsSize() {
    return (this.avgStats == null) ? 0 : this.avgStats.size();
  }

  public void putToAvgStats(String key, String val) {
    if (this.avgStats == null) {
      this.avgStats = new HashMap<String,String>();
    }
    this.avgStats.put(key, val);
  }

  public Map<String,String> getAvgStats() {
    return this.avgStats;
  }

  public void setAvgStats(Map<String,String> avgStats) {
    this.avgStats = avgStats;
  }

  public void unsetAvgStats() {
    this.avgStats = null;
  }

  /** Returns true if field avgStats is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgStats() {
    return this.avgStats != null;
  }

  public void setAvgStatsIsSet(boolean value) {
    if (!value) {
      this.avgStats = null;
    }
  }

  public int getTopStatsSize() {
    return (this.topStats == null) ? 0 : this.topStats.size();
  }

  public void putToTopStats(String key, String val) {
    if (this.topStats == null) {
      this.topStats = new HashMap<String,String>();
    }
    this.topStats.put(key, val);
  }

  public Map<String,String> getTopStats() {
    return this.topStats;
  }

  public void setTopStats(Map<String,String> topStats) {
    this.topStats = topStats;
  }

  public void unsetTopStats() {
    this.topStats = null;
  }

  /** Returns true if field topStats is set (has been assigned a value) and false otherwise */
  public boolean isSetTopStats() {
    return this.topStats != null;
  }

  public void setTopStatsIsSet(boolean value) {
    if (!value) {
      this.topStats = null;
    }
  }

  public long getTid() {
    return this.tid;
  }

  public void setTid(long tid) {
    this.tid = tid;
    setTidIsSet(true);
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public String getTeamName() {
    return this.teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }

  public void unsetTeamName() {
    this.teamName = null;
  }

  /** Returns true if field teamName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamName() {
    return this.teamName != null;
  }

  public void setTeamNameIsSet(boolean value) {
    if (!value) {
      this.teamName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((Long)value);
      }
      break;

    case COMPETITOR_ID:
      if (value == null) {
        unsetCompetitorId();
      } else {
        setCompetitorId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.lesports.qmt.sbd.api.common.CompetitorType)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case SEASON:
      if (value == null) {
        unsetSeason();
      } else {
        setSeason((String)value);
      }
      break;

    case C_NAME:
      if (value == null) {
        unsetCName();
      } else {
        setCName((String)value);
      }
      break;

    case TEAM_TYPE:
      if (value == null) {
        unsetTeamType();
      } else {
        setTeamType((Integer)value);
      }
      break;

    case AVG_STATS:
      if (value == null) {
        unsetAvgStats();
      } else {
        setAvgStats((Map<String,String>)value);
      }
      break;

    case TOP_STATS:
      if (value == null) {
        unsetTopStats();
      } else {
        setTopStats((Map<String,String>)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Long)value);
      }
      break;

    case TEAM_NAME:
      if (value == null) {
        unsetTeamName();
      } else {
        setTeamName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MID:
      return Long.valueOf(getMid());

    case COMPETITOR_ID:
      return Long.valueOf(getCompetitorId());

    case TYPE:
      return getType();

    case CSID:
      return Long.valueOf(getCsid());

    case CID:
      return Long.valueOf(getCid());

    case STATS:
      return getStats();

    case SEASON:
      return getSeason();

    case C_NAME:
      return getCName();

    case TEAM_TYPE:
      return Integer.valueOf(getTeamType());

    case AVG_STATS:
      return getAvgStats();

    case TOP_STATS:
      return getTopStats();

    case TID:
      return Long.valueOf(getTid());

    case TEAM_NAME:
      return getTeamName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MID:
      return isSetMid();
    case COMPETITOR_ID:
      return isSetCompetitorId();
    case TYPE:
      return isSetType();
    case CSID:
      return isSetCsid();
    case CID:
      return isSetCid();
    case STATS:
      return isSetStats();
    case SEASON:
      return isSetSeason();
    case C_NAME:
      return isSetCName();
    case TEAM_TYPE:
      return isSetTeamType();
    case AVG_STATS:
      return isSetAvgStats();
    case TOP_STATS:
      return isSetTopStats();
    case TID:
      return isSetTid();
    case TEAM_NAME:
      return isSetTeamName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCompetitorSeasonStat)
      return this.equals((TCompetitorSeasonStat)that);
    return false;
  }

  public boolean equals(TCompetitorSeasonStat that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_mid = true;
    boolean that_present_mid = true;
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_competitorId = true && this.isSetCompetitorId();
    boolean that_present_competitorId = true && that.isSetCompetitorId();
    if (this_present_competitorId || that_present_competitorId) {
      if (!(this_present_competitorId && that_present_competitorId))
        return false;
      if (this.competitorId != that.competitorId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_season = true && this.isSetSeason();
    boolean that_present_season = true && that.isSetSeason();
    if (this_present_season || that_present_season) {
      if (!(this_present_season && that_present_season))
        return false;
      if (!this.season.equals(that.season))
        return false;
    }

    boolean this_present_cName = true && this.isSetCName();
    boolean that_present_cName = true && that.isSetCName();
    if (this_present_cName || that_present_cName) {
      if (!(this_present_cName && that_present_cName))
        return false;
      if (!this.cName.equals(that.cName))
        return false;
    }

    boolean this_present_teamType = true && this.isSetTeamType();
    boolean that_present_teamType = true && that.isSetTeamType();
    if (this_present_teamType || that_present_teamType) {
      if (!(this_present_teamType && that_present_teamType))
        return false;
      if (this.teamType != that.teamType)
        return false;
    }

    boolean this_present_avgStats = true && this.isSetAvgStats();
    boolean that_present_avgStats = true && that.isSetAvgStats();
    if (this_present_avgStats || that_present_avgStats) {
      if (!(this_present_avgStats && that_present_avgStats))
        return false;
      if (!this.avgStats.equals(that.avgStats))
        return false;
    }

    boolean this_present_topStats = true && this.isSetTopStats();
    boolean that_present_topStats = true && that.isSetTopStats();
    if (this_present_topStats || that_present_topStats) {
      if (!(this_present_topStats && that_present_topStats))
        return false;
      if (!this.topStats.equals(that.topStats))
        return false;
    }

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_teamName = true && this.isSetTeamName();
    boolean that_present_teamName = true && that.isSetTeamName();
    if (this_present_teamName || that_present_teamName) {
      if (!(this_present_teamName && that_present_teamName))
        return false;
      if (!this.teamName.equals(that.teamName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_mid = true;
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_competitorId = true && (isSetCompetitorId());
    list.add(present_competitorId);
    if (present_competitorId)
      list.add(competitorId);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_season = true && (isSetSeason());
    list.add(present_season);
    if (present_season)
      list.add(season);

    boolean present_cName = true && (isSetCName());
    list.add(present_cName);
    if (present_cName)
      list.add(cName);

    boolean present_teamType = true && (isSetTeamType());
    list.add(present_teamType);
    if (present_teamType)
      list.add(teamType);

    boolean present_avgStats = true && (isSetAvgStats());
    list.add(present_avgStats);
    if (present_avgStats)
      list.add(avgStats);

    boolean present_topStats = true && (isSetTopStats());
    list.add(present_topStats);
    if (present_topStats)
      list.add(topStats);

    boolean present_tid = true && (isSetTid());
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_teamName = true && (isSetTeamName());
    list.add(present_teamName);
    if (present_teamName)
      list.add(teamName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCompetitorSeasonStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeason()).compareTo(other.isSetSeason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.season, other.season);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCName()).compareTo(other.isSetCName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cName, other.cName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamType()).compareTo(other.isSetTeamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamType, other.teamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgStats()).compareTo(other.isSetAvgStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgStats, other.avgStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopStats()).compareTo(other.isSetTopStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topStats, other.topStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamName()).compareTo(other.isSetTeamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamName, other.teamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCompetitorSeasonStat(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mid:");
    sb.append(this.mid);
    first = false;
    if (isSetCompetitorId()) {
      if (!first) sb.append(", ");
      sb.append("competitorId:");
      sb.append(this.competitorId);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetSeason()) {
      if (!first) sb.append(", ");
      sb.append("season:");
      if (this.season == null) {
        sb.append("null");
      } else {
        sb.append(this.season);
      }
      first = false;
    }
    if (isSetCName()) {
      if (!first) sb.append(", ");
      sb.append("cName:");
      if (this.cName == null) {
        sb.append("null");
      } else {
        sb.append(this.cName);
      }
      first = false;
    }
    if (isSetTeamType()) {
      if (!first) sb.append(", ");
      sb.append("teamType:");
      sb.append(this.teamType);
      first = false;
    }
    if (isSetAvgStats()) {
      if (!first) sb.append(", ");
      sb.append("avgStats:");
      if (this.avgStats == null) {
        sb.append("null");
      } else {
        sb.append(this.avgStats);
      }
      first = false;
    }
    if (isSetTopStats()) {
      if (!first) sb.append(", ");
      sb.append("topStats:");
      if (this.topStats == null) {
        sb.append("null");
      } else {
        sb.append(this.topStats);
      }
      first = false;
    }
    if (isSetTid()) {
      if (!first) sb.append(", ");
      sb.append("tid:");
      sb.append(this.tid);
      first = false;
    }
    if (isSetTeamName()) {
      if (!first) sb.append(", ");
      sb.append("teamName:");
      if (this.teamName == null) {
        sb.append("null");
      } else {
        sb.append(this.teamName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompetitorSeasonStatStandardSchemeFactory implements SchemeFactory {
    public TCompetitorSeasonStatStandardScheme getScheme() {
      return new TCompetitorSeasonStatStandardScheme();
    }
  }

  private static class TCompetitorSeasonStatStandardScheme extends StandardScheme<TCompetitorSeasonStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompetitorSeasonStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mid = iprot.readI64();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPETITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitorId = iprot.readI64();
              struct.setCompetitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.stats.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SEASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.season = iprot.readString();
              struct.setSeasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // C_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cName = iprot.readString();
              struct.setCNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teamType = iprot.readI32();
              struct.setTeamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AVG_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.avgStats = new HashMap<String,String>(2*_map4.size);
                String _key5;
                String _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  struct.avgStats.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setAvgStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOP_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.topStats = new HashMap<String,String>(2*_map8.size);
                String _key9;
                String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.topStats.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setTopStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tid = iprot.readI64();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TEAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamName = iprot.readString();
              struct.setTeamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompetitorSeasonStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeI64(struct.mid);
      oprot.writeFieldEnd();
      if (struct.isSetCompetitorId()) {
        oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter12 : struct.stats.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.season != null) {
        if (struct.isSetSeason()) {
          oprot.writeFieldBegin(SEASON_FIELD_DESC);
          oprot.writeString(struct.season);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cName != null) {
        if (struct.isSetCName()) {
          oprot.writeFieldBegin(C_NAME_FIELD_DESC);
          oprot.writeString(struct.cName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTeamType()) {
        oprot.writeFieldBegin(TEAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.teamType);
        oprot.writeFieldEnd();
      }
      if (struct.avgStats != null) {
        if (struct.isSetAvgStats()) {
          oprot.writeFieldBegin(AVG_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.avgStats.size()));
            for (Map.Entry<String, String> _iter13 : struct.avgStats.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.topStats != null) {
        if (struct.isSetTopStats()) {
          oprot.writeFieldBegin(TOP_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.topStats.size()));
            for (Map.Entry<String, String> _iter14 : struct.topStats.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTid()) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeI64(struct.tid);
        oprot.writeFieldEnd();
      }
      if (struct.teamName != null) {
        if (struct.isSetTeamName()) {
          oprot.writeFieldBegin(TEAM_NAME_FIELD_DESC);
          oprot.writeString(struct.teamName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompetitorSeasonStatTupleSchemeFactory implements SchemeFactory {
    public TCompetitorSeasonStatTupleScheme getScheme() {
      return new TCompetitorSeasonStatTupleScheme();
    }
  }

  private static class TCompetitorSeasonStatTupleScheme extends TupleScheme<TCompetitorSeasonStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompetitorSeasonStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMid()) {
        optionals.set(1);
      }
      if (struct.isSetCompetitorId()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetCsid()) {
        optionals.set(4);
      }
      if (struct.isSetCid()) {
        optionals.set(5);
      }
      if (struct.isSetStats()) {
        optionals.set(6);
      }
      if (struct.isSetSeason()) {
        optionals.set(7);
      }
      if (struct.isSetCName()) {
        optionals.set(8);
      }
      if (struct.isSetTeamType()) {
        optionals.set(9);
      }
      if (struct.isSetAvgStats()) {
        optionals.set(10);
      }
      if (struct.isSetTopStats()) {
        optionals.set(11);
      }
      if (struct.isSetTid()) {
        optionals.set(12);
      }
      if (struct.isSetTeamName()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMid()) {
        oprot.writeI64(struct.mid);
      }
      if (struct.isSetCompetitorId()) {
        oprot.writeI64(struct.competitorId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter15 : struct.stats.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetSeason()) {
        oprot.writeString(struct.season);
      }
      if (struct.isSetCName()) {
        oprot.writeString(struct.cName);
      }
      if (struct.isSetTeamType()) {
        oprot.writeI32(struct.teamType);
      }
      if (struct.isSetAvgStats()) {
        {
          oprot.writeI32(struct.avgStats.size());
          for (Map.Entry<String, String> _iter16 : struct.avgStats.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeString(_iter16.getValue());
          }
        }
      }
      if (struct.isSetTopStats()) {
        {
          oprot.writeI32(struct.topStats.size());
          for (Map.Entry<String, String> _iter17 : struct.topStats.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            oprot.writeString(_iter17.getValue());
          }
        }
      }
      if (struct.isSetTid()) {
        oprot.writeI64(struct.tid);
      }
      if (struct.isSetTeamName()) {
        oprot.writeString(struct.teamName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompetitorSeasonStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mid = iprot.readI64();
        struct.setMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.competitorId = iprot.readI64();
        struct.setCompetitorIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map18 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map18.size);
          String _key19;
          String _val20;
          for (int _i21 = 0; _i21 < _map18.size; ++_i21)
          {
            _key19 = iprot.readString();
            _val20 = iprot.readString();
            struct.stats.put(_key19, _val20);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.season = iprot.readString();
        struct.setSeasonIsSet(true);
      }
      if (incoming.get(8)) {
        struct.cName = iprot.readString();
        struct.setCNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.teamType = iprot.readI32();
        struct.setTeamTypeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.avgStats = new HashMap<String,String>(2*_map22.size);
          String _key23;
          String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.avgStats.put(_key23, _val24);
          }
        }
        struct.setAvgStatsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topStats = new HashMap<String,String>(2*_map26.size);
          String _key27;
          String _val28;
          for (int _i29 = 0; _i29 < _map26.size; ++_i29)
          {
            _key27 = iprot.readString();
            _val28 = iprot.readString();
            struct.topStats.put(_key27, _val28);
          }
        }
        struct.setTopStatsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.tid = iprot.readI64();
        struct.setTidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.teamName = iprot.readString();
        struct.setTeamNameIsSet(true);
      }
    }
  }

}

