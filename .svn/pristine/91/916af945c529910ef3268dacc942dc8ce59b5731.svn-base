/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TCompetitionSeason implements org.apache.thrift.TBase<TCompetitionSeason, TCompetitionSeason._Fields>, java.io.Serializable, Cloneable, Comparable<TCompetitionSeason> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompetitionSeason");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SEASON_FIELD_DESC = new org.apache.thrift.protocol.TField("season", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OFFICIAL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("officialUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SHIELD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("shieldType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField VS_FIELD_DESC = new org.apache.thrift.protocol.TField("vs", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField GAME_FNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField GAME_SNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MATCH_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("matchSystem", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField LIVE_PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("livePlatforms", org.apache.thrift.protocol.TType.SET, (short)20);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CITYS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCitys", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GAME_FNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGameFNames", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GAME_SNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGameSNames", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField CURRENT_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("currentRound", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField TOTAL_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("totalRound", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField CURRENT_ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentRoundId", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField OVER_SEASON_FIELD_DESC = new org.apache.thrift.protocol.TField("overSeason", org.apache.thrift.protocol.TType.BOOL, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCompetitionSeasonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCompetitionSeasonTupleSchemeFactory());
  }

  private long id; // required
  private long cid; // required
  private long gameFType; // required
  private long gameSType; // required
  private String season; // optional
  private String name; // optional
  private String officialUrl; // optional
  private String logoUrl; // optional
  private String city; // optional
  private int status; // optional
  private int shieldType; // optional
  private boolean vs; // optional
  private String gameFName; // optional
  private String gameSName; // optional
  private String startTime; // optional
  private String endTime; // optional
  private com.lesports.qmt.sbd.api.common.MatchSystem matchSystem; // optional
  private Set<com.lesports.api.common.Platform> livePlatforms; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangCitys; // optional
  private List<com.lesports.api.common.LangString> multiLangGameFNames; // optional
  private List<com.lesports.api.common.LangString> multiLangGameSNames; // optional
  private int currentRound; // optional
  private int totalRound; // optional
  private long currentRoundId; // optional
  private boolean overSeason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CID((short)2, "cid"),
    GAME_FTYPE((short)3, "gameFType"),
    GAME_STYPE((short)4, "gameSType"),
    SEASON((short)6, "season"),
    NAME((short)8, "name"),
    OFFICIAL_URL((short)9, "officialUrl"),
    LOGO_URL((short)10, "logoUrl"),
    CITY((short)11, "city"),
    STATUS((short)12, "status"),
    SHIELD_TYPE((short)13, "shieldType"),
    VS((short)14, "vs"),
    GAME_FNAME((short)15, "gameFName"),
    GAME_SNAME((short)16, "gameSName"),
    START_TIME((short)17, "startTime"),
    END_TIME((short)18, "endTime"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.MatchSystem
     */
    MATCH_SYSTEM((short)19, "matchSystem"),
    LIVE_PLATFORMS((short)20, "livePlatforms"),
    MULTI_LANG_NAMES((short)21, "multiLangNames"),
    MULTI_LANG_CITYS((short)22, "multiLangCitys"),
    MULTI_LANG_GAME_FNAMES((short)23, "multiLangGameFNames"),
    MULTI_LANG_GAME_SNAMES((short)24, "multiLangGameSNames"),
    CURRENT_ROUND((short)25, "currentRound"),
    TOTAL_ROUND((short)26, "totalRound"),
    CURRENT_ROUND_ID((short)27, "currentRoundId"),
    OVER_SEASON((short)28, "overSeason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CID
          return CID;
        case 3: // GAME_FTYPE
          return GAME_FTYPE;
        case 4: // GAME_STYPE
          return GAME_STYPE;
        case 6: // SEASON
          return SEASON;
        case 8: // NAME
          return NAME;
        case 9: // OFFICIAL_URL
          return OFFICIAL_URL;
        case 10: // LOGO_URL
          return LOGO_URL;
        case 11: // CITY
          return CITY;
        case 12: // STATUS
          return STATUS;
        case 13: // SHIELD_TYPE
          return SHIELD_TYPE;
        case 14: // VS
          return VS;
        case 15: // GAME_FNAME
          return GAME_FNAME;
        case 16: // GAME_SNAME
          return GAME_SNAME;
        case 17: // START_TIME
          return START_TIME;
        case 18: // END_TIME
          return END_TIME;
        case 19: // MATCH_SYSTEM
          return MATCH_SYSTEM;
        case 20: // LIVE_PLATFORMS
          return LIVE_PLATFORMS;
        case 21: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 22: // MULTI_LANG_CITYS
          return MULTI_LANG_CITYS;
        case 23: // MULTI_LANG_GAME_FNAMES
          return MULTI_LANG_GAME_FNAMES;
        case 24: // MULTI_LANG_GAME_SNAMES
          return MULTI_LANG_GAME_SNAMES;
        case 25: // CURRENT_ROUND
          return CURRENT_ROUND;
        case 26: // TOTAL_ROUND
          return TOTAL_ROUND;
        case 27: // CURRENT_ROUND_ID
          return CURRENT_ROUND_ID;
        case 28: // OVER_SEASON
          return OVER_SEASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __GAMEFTYPE_ISSET_ID = 2;
  private static final int __GAMESTYPE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __SHIELDTYPE_ISSET_ID = 5;
  private static final int __VS_ISSET_ID = 6;
  private static final int __CURRENTROUND_ISSET_ID = 7;
  private static final int __TOTALROUND_ISSET_ID = 8;
  private static final int __CURRENTROUNDID_ISSET_ID = 9;
  private static final int __OVERSEASON_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SEASON,_Fields.NAME,_Fields.OFFICIAL_URL,_Fields.LOGO_URL,_Fields.CITY,_Fields.STATUS,_Fields.SHIELD_TYPE,_Fields.VS,_Fields.GAME_FNAME,_Fields.GAME_SNAME,_Fields.START_TIME,_Fields.END_TIME,_Fields.MATCH_SYSTEM,_Fields.LIVE_PLATFORMS,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_CITYS,_Fields.MULTI_LANG_GAME_FNAMES,_Fields.MULTI_LANG_GAME_SNAMES,_Fields.CURRENT_ROUND,_Fields.TOTAL_ROUND,_Fields.CURRENT_ROUND_ID,_Fields.OVER_SEASON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEASON, new org.apache.thrift.meta_data.FieldMetaData("season", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICIAL_URL, new org.apache.thrift.meta_data.FieldMetaData("officialUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHIELD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("shieldType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VS, new org.apache.thrift.meta_data.FieldMetaData("vs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GAME_FNAME, new org.apache.thrift.meta_data.FieldMetaData("gameFName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_SNAME, new org.apache.thrift.meta_data.FieldMetaData("gameSName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("matchSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.MatchSystem.class)));
    tmpMap.put(_Fields.LIVE_PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("livePlatforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_CITYS, new org.apache.thrift.meta_data.FieldMetaData("multiLangCitys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_GAME_FNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangGameFNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_GAME_SNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangGameSNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CURRENT_ROUND, new org.apache.thrift.meta_data.FieldMetaData("currentRound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_ROUND, new org.apache.thrift.meta_data.FieldMetaData("totalRound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("currentRoundId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OVER_SEASON, new org.apache.thrift.meta_data.FieldMetaData("overSeason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompetitionSeason.class, metaDataMap);
  }

  public TCompetitionSeason() {
  }

  public TCompetitionSeason(
    long id,
    long cid,
    long gameFType,
    long gameSType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.cid = cid;
    setCidIsSet(true);
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompetitionSeason(TCompetitionSeason other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.cid = other.cid;
    this.gameFType = other.gameFType;
    this.gameSType = other.gameSType;
    if (other.isSetSeason()) {
      this.season = other.season;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetOfficialUrl()) {
      this.officialUrl = other.officialUrl;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.status = other.status;
    this.shieldType = other.shieldType;
    this.vs = other.vs;
    if (other.isSetGameFName()) {
      this.gameFName = other.gameFName;
    }
    if (other.isSetGameSName()) {
      this.gameSName = other.gameSName;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetMatchSystem()) {
      this.matchSystem = other.matchSystem;
    }
    if (other.isSetLivePlatforms()) {
      Set<com.lesports.api.common.Platform> __this__livePlatforms = new HashSet<com.lesports.api.common.Platform>(other.livePlatforms.size());
      for (com.lesports.api.common.Platform other_element : other.livePlatforms) {
        __this__livePlatforms.add(other_element);
      }
      this.livePlatforms = __this__livePlatforms;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangCitys()) {
      List<com.lesports.api.common.LangString> __this__multiLangCitys = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCitys.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCitys) {
        __this__multiLangCitys.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCitys = __this__multiLangCitys;
    }
    if (other.isSetMultiLangGameFNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGameFNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGameFNames) {
        __this__multiLangGameFNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGameFNames = __this__multiLangGameFNames;
    }
    if (other.isSetMultiLangGameSNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGameSNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGameSNames) {
        __this__multiLangGameSNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGameSNames = __this__multiLangGameSNames;
    }
    this.currentRound = other.currentRound;
    this.totalRound = other.totalRound;
    this.currentRoundId = other.currentRoundId;
    this.overSeason = other.overSeason;
  }

  public TCompetitionSeason deepCopy() {
    return new TCompetitionSeason(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCidIsSet(false);
    this.cid = 0;
    setGameFTypeIsSet(false);
    this.gameFType = 0;
    setGameSTypeIsSet(false);
    this.gameSType = 0;
    this.season = null;
    this.name = null;
    this.officialUrl = null;
    this.logoUrl = null;
    this.city = null;
    setStatusIsSet(false);
    this.status = 0;
    setShieldTypeIsSet(false);
    this.shieldType = 0;
    setVsIsSet(false);
    this.vs = false;
    this.gameFName = null;
    this.gameSName = null;
    this.startTime = null;
    this.endTime = null;
    this.matchSystem = null;
    this.livePlatforms = null;
    this.multiLangNames = null;
    this.multiLangCitys = null;
    this.multiLangGameFNames = null;
    this.multiLangGameSNames = null;
    setCurrentRoundIsSet(false);
    this.currentRound = 0;
    setTotalRoundIsSet(false);
    this.totalRound = 0;
    setCurrentRoundIdIsSet(false);
    this.currentRoundId = 0;
    setOverSeasonIsSet(false);
    this.overSeason = false;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(long gameFType) {
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
  }

  public void unsetGameFType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  public void setGameFTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID, value);
  }

  public long getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(long gameSType) {
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  public void unsetGameSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  public void setGameSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPE_ISSET_ID, value);
  }

  public String getSeason() {
    return this.season;
  }

  public void setSeason(String season) {
    this.season = season;
  }

  public void unsetSeason() {
    this.season = null;
  }

  /** Returns true if field season is set (has been assigned a value) and false otherwise */
  public boolean isSetSeason() {
    return this.season != null;
  }

  public void setSeasonIsSet(boolean value) {
    if (!value) {
      this.season = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getOfficialUrl() {
    return this.officialUrl;
  }

  public void setOfficialUrl(String officialUrl) {
    this.officialUrl = officialUrl;
  }

  public void unsetOfficialUrl() {
    this.officialUrl = null;
  }

  /** Returns true if field officialUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialUrl() {
    return this.officialUrl != null;
  }

  public void setOfficialUrlIsSet(boolean value) {
    if (!value) {
      this.officialUrl = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public void setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getShieldType() {
    return this.shieldType;
  }

  public void setShieldType(int shieldType) {
    this.shieldType = shieldType;
    setShieldTypeIsSet(true);
  }

  public void unsetShieldType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHIELDTYPE_ISSET_ID);
  }

  /** Returns true if field shieldType is set (has been assigned a value) and false otherwise */
  public boolean isSetShieldType() {
    return EncodingUtils.testBit(__isset_bitfield, __SHIELDTYPE_ISSET_ID);
  }

  public void setShieldTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHIELDTYPE_ISSET_ID, value);
  }

  public boolean isVs() {
    return this.vs;
  }

  public void setVs(boolean vs) {
    this.vs = vs;
    setVsIsSet(true);
  }

  public void unsetVs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VS_ISSET_ID);
  }

  /** Returns true if field vs is set (has been assigned a value) and false otherwise */
  public boolean isSetVs() {
    return EncodingUtils.testBit(__isset_bitfield, __VS_ISSET_ID);
  }

  public void setVsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VS_ISSET_ID, value);
  }

  public String getGameFName() {
    return this.gameFName;
  }

  public void setGameFName(String gameFName) {
    this.gameFName = gameFName;
  }

  public void unsetGameFName() {
    this.gameFName = null;
  }

  /** Returns true if field gameFName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFName() {
    return this.gameFName != null;
  }

  public void setGameFNameIsSet(boolean value) {
    if (!value) {
      this.gameFName = null;
    }
  }

  public String getGameSName() {
    return this.gameSName;
  }

  public void setGameSName(String gameSName) {
    this.gameSName = gameSName;
  }

  public void unsetGameSName() {
    this.gameSName = null;
  }

  /** Returns true if field gameSName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSName() {
    return this.gameSName != null;
  }

  public void setGameSNameIsSet(boolean value) {
    if (!value) {
      this.gameSName = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchSystem
   */
  public com.lesports.qmt.sbd.api.common.MatchSystem getMatchSystem() {
    return this.matchSystem;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchSystem
   */
  public void setMatchSystem(com.lesports.qmt.sbd.api.common.MatchSystem matchSystem) {
    this.matchSystem = matchSystem;
  }

  public void unsetMatchSystem() {
    this.matchSystem = null;
  }

  /** Returns true if field matchSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchSystem() {
    return this.matchSystem != null;
  }

  public void setMatchSystemIsSet(boolean value) {
    if (!value) {
      this.matchSystem = null;
    }
  }

  public int getLivePlatformsSize() {
    return (this.livePlatforms == null) ? 0 : this.livePlatforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getLivePlatformsIterator() {
    return (this.livePlatforms == null) ? null : this.livePlatforms.iterator();
  }

  public void addToLivePlatforms(com.lesports.api.common.Platform elem) {
    if (this.livePlatforms == null) {
      this.livePlatforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.livePlatforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getLivePlatforms() {
    return this.livePlatforms;
  }

  public void setLivePlatforms(Set<com.lesports.api.common.Platform> livePlatforms) {
    this.livePlatforms = livePlatforms;
  }

  public void unsetLivePlatforms() {
    this.livePlatforms = null;
  }

  /** Returns true if field livePlatforms is set (has been assigned a value) and false otherwise */
  public boolean isSetLivePlatforms() {
    return this.livePlatforms != null;
  }

  public void setLivePlatformsIsSet(boolean value) {
    if (!value) {
      this.livePlatforms = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangCitysSize() {
    return (this.multiLangCitys == null) ? 0 : this.multiLangCitys.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCitysIterator() {
    return (this.multiLangCitys == null) ? null : this.multiLangCitys.iterator();
  }

  public void addToMultiLangCitys(com.lesports.api.common.LangString elem) {
    if (this.multiLangCitys == null) {
      this.multiLangCitys = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCitys.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCitys() {
    return this.multiLangCitys;
  }

  public void setMultiLangCitys(List<com.lesports.api.common.LangString> multiLangCitys) {
    this.multiLangCitys = multiLangCitys;
  }

  public void unsetMultiLangCitys() {
    this.multiLangCitys = null;
  }

  /** Returns true if field multiLangCitys is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCitys() {
    return this.multiLangCitys != null;
  }

  public void setMultiLangCitysIsSet(boolean value) {
    if (!value) {
      this.multiLangCitys = null;
    }
  }

  public int getMultiLangGameFNamesSize() {
    return (this.multiLangGameFNames == null) ? 0 : this.multiLangGameFNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGameFNamesIterator() {
    return (this.multiLangGameFNames == null) ? null : this.multiLangGameFNames.iterator();
  }

  public void addToMultiLangGameFNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangGameFNames == null) {
      this.multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGameFNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGameFNames() {
    return this.multiLangGameFNames;
  }

  public void setMultiLangGameFNames(List<com.lesports.api.common.LangString> multiLangGameFNames) {
    this.multiLangGameFNames = multiLangGameFNames;
  }

  public void unsetMultiLangGameFNames() {
    this.multiLangGameFNames = null;
  }

  /** Returns true if field multiLangGameFNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGameFNames() {
    return this.multiLangGameFNames != null;
  }

  public void setMultiLangGameFNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangGameFNames = null;
    }
  }

  public int getMultiLangGameSNamesSize() {
    return (this.multiLangGameSNames == null) ? 0 : this.multiLangGameSNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGameSNamesIterator() {
    return (this.multiLangGameSNames == null) ? null : this.multiLangGameSNames.iterator();
  }

  public void addToMultiLangGameSNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangGameSNames == null) {
      this.multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGameSNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGameSNames() {
    return this.multiLangGameSNames;
  }

  public void setMultiLangGameSNames(List<com.lesports.api.common.LangString> multiLangGameSNames) {
    this.multiLangGameSNames = multiLangGameSNames;
  }

  public void unsetMultiLangGameSNames() {
    this.multiLangGameSNames = null;
  }

  /** Returns true if field multiLangGameSNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGameSNames() {
    return this.multiLangGameSNames != null;
  }

  public void setMultiLangGameSNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangGameSNames = null;
    }
  }

  public int getCurrentRound() {
    return this.currentRound;
  }

  public void setCurrentRound(int currentRound) {
    this.currentRound = currentRound;
    setCurrentRoundIsSet(true);
  }

  public void unsetCurrentRound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTROUND_ISSET_ID);
  }

  /** Returns true if field currentRound is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentRound() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTROUND_ISSET_ID);
  }

  public void setCurrentRoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTROUND_ISSET_ID, value);
  }

  public int getTotalRound() {
    return this.totalRound;
  }

  public void setTotalRound(int totalRound) {
    this.totalRound = totalRound;
    setTotalRoundIsSet(true);
  }

  public void unsetTotalRound() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALROUND_ISSET_ID);
  }

  /** Returns true if field totalRound is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRound() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALROUND_ISSET_ID);
  }

  public void setTotalRoundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALROUND_ISSET_ID, value);
  }

  public long getCurrentRoundId() {
    return this.currentRoundId;
  }

  public void setCurrentRoundId(long currentRoundId) {
    this.currentRoundId = currentRoundId;
    setCurrentRoundIdIsSet(true);
  }

  public void unsetCurrentRoundId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTROUNDID_ISSET_ID);
  }

  /** Returns true if field currentRoundId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentRoundId() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTROUNDID_ISSET_ID);
  }

  public void setCurrentRoundIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTROUNDID_ISSET_ID, value);
  }

  public boolean isOverSeason() {
    return this.overSeason;
  }

  public void setOverSeason(boolean overSeason) {
    this.overSeason = overSeason;
    setOverSeasonIsSet(true);
  }

  public void unsetOverSeason() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERSEASON_ISSET_ID);
  }

  /** Returns true if field overSeason is set (has been assigned a value) and false otherwise */
  public boolean isSetOverSeason() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERSEASON_ISSET_ID);
  }

  public void setOverSeasonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERSEASON_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((Long)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((Long)value);
      }
      break;

    case SEASON:
      if (value == null) {
        unsetSeason();
      } else {
        setSeason((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case OFFICIAL_URL:
      if (value == null) {
        unsetOfficialUrl();
      } else {
        setOfficialUrl((String)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SHIELD_TYPE:
      if (value == null) {
        unsetShieldType();
      } else {
        setShieldType((Integer)value);
      }
      break;

    case VS:
      if (value == null) {
        unsetVs();
      } else {
        setVs((Boolean)value);
      }
      break;

    case GAME_FNAME:
      if (value == null) {
        unsetGameFName();
      } else {
        setGameFName((String)value);
      }
      break;

    case GAME_SNAME:
      if (value == null) {
        unsetGameSName();
      } else {
        setGameSName((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case MATCH_SYSTEM:
      if (value == null) {
        unsetMatchSystem();
      } else {
        setMatchSystem((com.lesports.qmt.sbd.api.common.MatchSystem)value);
      }
      break;

    case LIVE_PLATFORMS:
      if (value == null) {
        unsetLivePlatforms();
      } else {
        setLivePlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_CITYS:
      if (value == null) {
        unsetMultiLangCitys();
      } else {
        setMultiLangCitys((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_GAME_FNAMES:
      if (value == null) {
        unsetMultiLangGameFNames();
      } else {
        setMultiLangGameFNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_GAME_SNAMES:
      if (value == null) {
        unsetMultiLangGameSNames();
      } else {
        setMultiLangGameSNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CURRENT_ROUND:
      if (value == null) {
        unsetCurrentRound();
      } else {
        setCurrentRound((Integer)value);
      }
      break;

    case TOTAL_ROUND:
      if (value == null) {
        unsetTotalRound();
      } else {
        setTotalRound((Integer)value);
      }
      break;

    case CURRENT_ROUND_ID:
      if (value == null) {
        unsetCurrentRoundId();
      } else {
        setCurrentRoundId((Long)value);
      }
      break;

    case OVER_SEASON:
      if (value == null) {
        unsetOverSeason();
      } else {
        setOverSeason((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CID:
      return Long.valueOf(getCid());

    case GAME_FTYPE:
      return Long.valueOf(getGameFType());

    case GAME_STYPE:
      return Long.valueOf(getGameSType());

    case SEASON:
      return getSeason();

    case NAME:
      return getName();

    case OFFICIAL_URL:
      return getOfficialUrl();

    case LOGO_URL:
      return getLogoUrl();

    case CITY:
      return getCity();

    case STATUS:
      return Integer.valueOf(getStatus());

    case SHIELD_TYPE:
      return Integer.valueOf(getShieldType());

    case VS:
      return Boolean.valueOf(isVs());

    case GAME_FNAME:
      return getGameFName();

    case GAME_SNAME:
      return getGameSName();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case MATCH_SYSTEM:
      return getMatchSystem();

    case LIVE_PLATFORMS:
      return getLivePlatforms();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_CITYS:
      return getMultiLangCitys();

    case MULTI_LANG_GAME_FNAMES:
      return getMultiLangGameFNames();

    case MULTI_LANG_GAME_SNAMES:
      return getMultiLangGameSNames();

    case CURRENT_ROUND:
      return Integer.valueOf(getCurrentRound());

    case TOTAL_ROUND:
      return Integer.valueOf(getTotalRound());

    case CURRENT_ROUND_ID:
      return Long.valueOf(getCurrentRoundId());

    case OVER_SEASON:
      return Boolean.valueOf(isOverSeason());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CID:
      return isSetCid();
    case GAME_FTYPE:
      return isSetGameFType();
    case GAME_STYPE:
      return isSetGameSType();
    case SEASON:
      return isSetSeason();
    case NAME:
      return isSetName();
    case OFFICIAL_URL:
      return isSetOfficialUrl();
    case LOGO_URL:
      return isSetLogoUrl();
    case CITY:
      return isSetCity();
    case STATUS:
      return isSetStatus();
    case SHIELD_TYPE:
      return isSetShieldType();
    case VS:
      return isSetVs();
    case GAME_FNAME:
      return isSetGameFName();
    case GAME_SNAME:
      return isSetGameSName();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case MATCH_SYSTEM:
      return isSetMatchSystem();
    case LIVE_PLATFORMS:
      return isSetLivePlatforms();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_CITYS:
      return isSetMultiLangCitys();
    case MULTI_LANG_GAME_FNAMES:
      return isSetMultiLangGameFNames();
    case MULTI_LANG_GAME_SNAMES:
      return isSetMultiLangGameSNames();
    case CURRENT_ROUND:
      return isSetCurrentRound();
    case TOTAL_ROUND:
      return isSetTotalRound();
    case CURRENT_ROUND_ID:
      return isSetCurrentRoundId();
    case OVER_SEASON:
      return isSetOverSeason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCompetitionSeason)
      return this.equals((TCompetitionSeason)that);
    return false;
  }

  public boolean equals(TCompetitionSeason that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cid = true;
    boolean that_present_cid = true;
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_gameFType = true;
    boolean that_present_gameFType = true;
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (this.gameFType != that.gameFType)
        return false;
    }

    boolean this_present_gameSType = true;
    boolean that_present_gameSType = true;
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (this.gameSType != that.gameSType)
        return false;
    }

    boolean this_present_season = true && this.isSetSeason();
    boolean that_present_season = true && that.isSetSeason();
    if (this_present_season || that_present_season) {
      if (!(this_present_season && that_present_season))
        return false;
      if (!this.season.equals(that.season))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_officialUrl = true && this.isSetOfficialUrl();
    boolean that_present_officialUrl = true && that.isSetOfficialUrl();
    if (this_present_officialUrl || that_present_officialUrl) {
      if (!(this_present_officialUrl && that_present_officialUrl))
        return false;
      if (!this.officialUrl.equals(that.officialUrl))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_shieldType = true && this.isSetShieldType();
    boolean that_present_shieldType = true && that.isSetShieldType();
    if (this_present_shieldType || that_present_shieldType) {
      if (!(this_present_shieldType && that_present_shieldType))
        return false;
      if (this.shieldType != that.shieldType)
        return false;
    }

    boolean this_present_vs = true && this.isSetVs();
    boolean that_present_vs = true && that.isSetVs();
    if (this_present_vs || that_present_vs) {
      if (!(this_present_vs && that_present_vs))
        return false;
      if (this.vs != that.vs)
        return false;
    }

    boolean this_present_gameFName = true && this.isSetGameFName();
    boolean that_present_gameFName = true && that.isSetGameFName();
    if (this_present_gameFName || that_present_gameFName) {
      if (!(this_present_gameFName && that_present_gameFName))
        return false;
      if (!this.gameFName.equals(that.gameFName))
        return false;
    }

    boolean this_present_gameSName = true && this.isSetGameSName();
    boolean that_present_gameSName = true && that.isSetGameSName();
    if (this_present_gameSName || that_present_gameSName) {
      if (!(this_present_gameSName && that_present_gameSName))
        return false;
      if (!this.gameSName.equals(that.gameSName))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_matchSystem = true && this.isSetMatchSystem();
    boolean that_present_matchSystem = true && that.isSetMatchSystem();
    if (this_present_matchSystem || that_present_matchSystem) {
      if (!(this_present_matchSystem && that_present_matchSystem))
        return false;
      if (!this.matchSystem.equals(that.matchSystem))
        return false;
    }

    boolean this_present_livePlatforms = true && this.isSetLivePlatforms();
    boolean that_present_livePlatforms = true && that.isSetLivePlatforms();
    if (this_present_livePlatforms || that_present_livePlatforms) {
      if (!(this_present_livePlatforms && that_present_livePlatforms))
        return false;
      if (!this.livePlatforms.equals(that.livePlatforms))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangCitys = true && this.isSetMultiLangCitys();
    boolean that_present_multiLangCitys = true && that.isSetMultiLangCitys();
    if (this_present_multiLangCitys || that_present_multiLangCitys) {
      if (!(this_present_multiLangCitys && that_present_multiLangCitys))
        return false;
      if (!this.multiLangCitys.equals(that.multiLangCitys))
        return false;
    }

    boolean this_present_multiLangGameFNames = true && this.isSetMultiLangGameFNames();
    boolean that_present_multiLangGameFNames = true && that.isSetMultiLangGameFNames();
    if (this_present_multiLangGameFNames || that_present_multiLangGameFNames) {
      if (!(this_present_multiLangGameFNames && that_present_multiLangGameFNames))
        return false;
      if (!this.multiLangGameFNames.equals(that.multiLangGameFNames))
        return false;
    }

    boolean this_present_multiLangGameSNames = true && this.isSetMultiLangGameSNames();
    boolean that_present_multiLangGameSNames = true && that.isSetMultiLangGameSNames();
    if (this_present_multiLangGameSNames || that_present_multiLangGameSNames) {
      if (!(this_present_multiLangGameSNames && that_present_multiLangGameSNames))
        return false;
      if (!this.multiLangGameSNames.equals(that.multiLangGameSNames))
        return false;
    }

    boolean this_present_currentRound = true && this.isSetCurrentRound();
    boolean that_present_currentRound = true && that.isSetCurrentRound();
    if (this_present_currentRound || that_present_currentRound) {
      if (!(this_present_currentRound && that_present_currentRound))
        return false;
      if (this.currentRound != that.currentRound)
        return false;
    }

    boolean this_present_totalRound = true && this.isSetTotalRound();
    boolean that_present_totalRound = true && that.isSetTotalRound();
    if (this_present_totalRound || that_present_totalRound) {
      if (!(this_present_totalRound && that_present_totalRound))
        return false;
      if (this.totalRound != that.totalRound)
        return false;
    }

    boolean this_present_currentRoundId = true && this.isSetCurrentRoundId();
    boolean that_present_currentRoundId = true && that.isSetCurrentRoundId();
    if (this_present_currentRoundId || that_present_currentRoundId) {
      if (!(this_present_currentRoundId && that_present_currentRoundId))
        return false;
      if (this.currentRoundId != that.currentRoundId)
        return false;
    }

    boolean this_present_overSeason = true && this.isSetOverSeason();
    boolean that_present_overSeason = true && that.isSetOverSeason();
    if (this_present_overSeason || that_present_overSeason) {
      if (!(this_present_overSeason && that_present_overSeason))
        return false;
      if (this.overSeason != that.overSeason)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_cid = true;
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_gameFType = true;
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_gameSType = true;
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_season = true && (isSetSeason());
    list.add(present_season);
    if (present_season)
      list.add(season);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_officialUrl = true && (isSetOfficialUrl());
    list.add(present_officialUrl);
    if (present_officialUrl)
      list.add(officialUrl);

    boolean present_logoUrl = true && (isSetLogoUrl());
    list.add(present_logoUrl);
    if (present_logoUrl)
      list.add(logoUrl);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_shieldType = true && (isSetShieldType());
    list.add(present_shieldType);
    if (present_shieldType)
      list.add(shieldType);

    boolean present_vs = true && (isSetVs());
    list.add(present_vs);
    if (present_vs)
      list.add(vs);

    boolean present_gameFName = true && (isSetGameFName());
    list.add(present_gameFName);
    if (present_gameFName)
      list.add(gameFName);

    boolean present_gameSName = true && (isSetGameSName());
    list.add(present_gameSName);
    if (present_gameSName)
      list.add(gameSName);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_matchSystem = true && (isSetMatchSystem());
    list.add(present_matchSystem);
    if (present_matchSystem)
      list.add(matchSystem.getValue());

    boolean present_livePlatforms = true && (isSetLivePlatforms());
    list.add(present_livePlatforms);
    if (present_livePlatforms)
      list.add(livePlatforms);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangCitys = true && (isSetMultiLangCitys());
    list.add(present_multiLangCitys);
    if (present_multiLangCitys)
      list.add(multiLangCitys);

    boolean present_multiLangGameFNames = true && (isSetMultiLangGameFNames());
    list.add(present_multiLangGameFNames);
    if (present_multiLangGameFNames)
      list.add(multiLangGameFNames);

    boolean present_multiLangGameSNames = true && (isSetMultiLangGameSNames());
    list.add(present_multiLangGameSNames);
    if (present_multiLangGameSNames)
      list.add(multiLangGameSNames);

    boolean present_currentRound = true && (isSetCurrentRound());
    list.add(present_currentRound);
    if (present_currentRound)
      list.add(currentRound);

    boolean present_totalRound = true && (isSetTotalRound());
    list.add(present_totalRound);
    if (present_totalRound)
      list.add(totalRound);

    boolean present_currentRoundId = true && (isSetCurrentRoundId());
    list.add(present_currentRoundId);
    if (present_currentRoundId)
      list.add(currentRoundId);

    boolean present_overSeason = true && (isSetOverSeason());
    list.add(present_overSeason);
    if (present_overSeason)
      list.add(overSeason);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCompetitionSeason other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeason()).compareTo(other.isSetSeason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.season, other.season);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialUrl()).compareTo(other.isSetOfficialUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialUrl, other.officialUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShieldType()).compareTo(other.isSetShieldType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShieldType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shieldType, other.shieldType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVs()).compareTo(other.isSetVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vs, other.vs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFName()).compareTo(other.isSetGameFName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFName, other.gameFName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSName()).compareTo(other.isSetGameSName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSName, other.gameSName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchSystem()).compareTo(other.isSetMatchSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchSystem, other.matchSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLivePlatforms()).compareTo(other.isSetLivePlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLivePlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.livePlatforms, other.livePlatforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCitys()).compareTo(other.isSetMultiLangCitys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCitys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCitys, other.multiLangCitys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGameFNames()).compareTo(other.isSetMultiLangGameFNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGameFNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGameFNames, other.multiLangGameFNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGameSNames()).compareTo(other.isSetMultiLangGameSNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGameSNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGameSNames, other.multiLangGameSNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentRound()).compareTo(other.isSetCurrentRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentRound, other.currentRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalRound()).compareTo(other.isSetTotalRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalRound, other.totalRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentRoundId()).compareTo(other.isSetCurrentRoundId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentRoundId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentRoundId, other.currentRoundId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverSeason()).compareTo(other.isSetOverSeason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverSeason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overSeason, other.overSeason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCompetitionSeason(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cid:");
    sb.append(this.cid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameFType:");
    sb.append(this.gameFType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameSType:");
    sb.append(this.gameSType);
    first = false;
    if (isSetSeason()) {
      if (!first) sb.append(", ");
      sb.append("season:");
      if (this.season == null) {
        sb.append("null");
      } else {
        sb.append(this.season);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetOfficialUrl()) {
      if (!first) sb.append(", ");
      sb.append("officialUrl:");
      if (this.officialUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.officialUrl);
      }
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
    }
    if (isSetShieldType()) {
      if (!first) sb.append(", ");
      sb.append("shieldType:");
      sb.append(this.shieldType);
      first = false;
    }
    if (isSetVs()) {
      if (!first) sb.append(", ");
      sb.append("vs:");
      sb.append(this.vs);
      first = false;
    }
    if (isSetGameFName()) {
      if (!first) sb.append(", ");
      sb.append("gameFName:");
      if (this.gameFName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameFName);
      }
      first = false;
    }
    if (isSetGameSName()) {
      if (!first) sb.append(", ");
      sb.append("gameSName:");
      if (this.gameSName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameSName);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetMatchSystem()) {
      if (!first) sb.append(", ");
      sb.append("matchSystem:");
      if (this.matchSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.matchSystem);
      }
      first = false;
    }
    if (isSetLivePlatforms()) {
      if (!first) sb.append(", ");
      sb.append("livePlatforms:");
      if (this.livePlatforms == null) {
        sb.append("null");
      } else {
        sb.append(this.livePlatforms);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangCitys()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCitys:");
      if (this.multiLangCitys == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCitys);
      }
      first = false;
    }
    if (isSetMultiLangGameFNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGameFNames:");
      if (this.multiLangGameFNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGameFNames);
      }
      first = false;
    }
    if (isSetMultiLangGameSNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGameSNames:");
      if (this.multiLangGameSNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGameSNames);
      }
      first = false;
    }
    if (isSetCurrentRound()) {
      if (!first) sb.append(", ");
      sb.append("currentRound:");
      sb.append(this.currentRound);
      first = false;
    }
    if (isSetTotalRound()) {
      if (!first) sb.append(", ");
      sb.append("totalRound:");
      sb.append(this.totalRound);
      first = false;
    }
    if (isSetCurrentRoundId()) {
      if (!first) sb.append(", ");
      sb.append("currentRoundId:");
      sb.append(this.currentRoundId);
      first = false;
    }
    if (isSetOverSeason()) {
      if (!first) sb.append(", ");
      sb.append("overSeason:");
      sb.append(this.overSeason);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompetitionSeasonStandardSchemeFactory implements SchemeFactory {
    public TCompetitionSeasonStandardScheme getScheme() {
      return new TCompetitionSeasonStandardScheme();
    }
  }

  private static class TCompetitionSeasonStandardScheme extends StandardScheme<TCompetitionSeason> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompetitionSeason struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFType = iprot.readI64();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSType = iprot.readI64();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.season = iprot.readString();
              struct.setSeasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OFFICIAL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officialUrl = iprot.readString();
              struct.setOfficialUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHIELD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shieldType = iprot.readI32();
              struct.setShieldTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // VS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vs = iprot.readBool();
              struct.setVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GAME_FNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameFName = iprot.readString();
              struct.setGameFNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GAME_SNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameSName = iprot.readString();
              struct.setGameSNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MATCH_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchSystem = com.lesports.qmt.sbd.api.common.MatchSystem.findByValue(iprot.readI32());
              struct.setMatchSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LIVE_PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set64 = iprot.readSetBegin();
                struct.livePlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set64.size);
                com.lesports.api.common.Platform _elem65;
                for (int _i66 = 0; _i66 < _set64.size; ++_i66)
                {
                  _elem65 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.livePlatforms.add(_elem65);
                }
                iprot.readSetEnd();
              }
              struct.setLivePlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list67.size);
                com.lesports.api.common.LangString _elem68;
                for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                {
                  _elem68 = new com.lesports.api.common.LangString();
                  _elem68.read(iprot);
                  struct.multiLangNames.add(_elem68);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MULTI_LANG_CITYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                struct.multiLangCitys = new ArrayList<com.lesports.api.common.LangString>(_list70.size);
                com.lesports.api.common.LangString _elem71;
                for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                {
                  _elem71 = new com.lesports.api.common.LangString();
                  _elem71.read(iprot);
                  struct.multiLangCitys.add(_elem71);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCitysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MULTI_LANG_GAME_FNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list73 = iprot.readListBegin();
                struct.multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>(_list73.size);
                com.lesports.api.common.LangString _elem74;
                for (int _i75 = 0; _i75 < _list73.size; ++_i75)
                {
                  _elem74 = new com.lesports.api.common.LangString();
                  _elem74.read(iprot);
                  struct.multiLangGameFNames.add(_elem74);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGameFNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MULTI_LANG_GAME_SNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>(_list76.size);
                com.lesports.api.common.LangString _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = new com.lesports.api.common.LangString();
                  _elem77.read(iprot);
                  struct.multiLangGameSNames.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGameSNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CURRENT_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentRound = iprot.readI32();
              struct.setCurrentRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // TOTAL_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalRound = iprot.readI32();
              struct.setTotalRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CURRENT_ROUND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentRoundId = iprot.readI64();
              struct.setCurrentRoundIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OVER_SEASON
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.overSeason = iprot.readBool();
              struct.setOverSeasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompetitionSeason struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CID_FIELD_DESC);
      oprot.writeI64(struct.cid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
      oprot.writeI64(struct.gameFType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
      oprot.writeI64(struct.gameSType);
      oprot.writeFieldEnd();
      if (struct.season != null) {
        if (struct.isSetSeason()) {
          oprot.writeFieldBegin(SEASON_FIELD_DESC);
          oprot.writeString(struct.season);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.officialUrl != null) {
        if (struct.isSetOfficialUrl()) {
          oprot.writeFieldBegin(OFFICIAL_URL_FIELD_DESC);
          oprot.writeString(struct.officialUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShieldType()) {
        oprot.writeFieldBegin(SHIELD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.shieldType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVs()) {
        oprot.writeFieldBegin(VS_FIELD_DESC);
        oprot.writeBool(struct.vs);
        oprot.writeFieldEnd();
      }
      if (struct.gameFName != null) {
        if (struct.isSetGameFName()) {
          oprot.writeFieldBegin(GAME_FNAME_FIELD_DESC);
          oprot.writeString(struct.gameFName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameSName != null) {
        if (struct.isSetGameSName()) {
          oprot.writeFieldBegin(GAME_SNAME_FIELD_DESC);
          oprot.writeString(struct.gameSName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchSystem != null) {
        if (struct.isSetMatchSystem()) {
          oprot.writeFieldBegin(MATCH_SYSTEM_FIELD_DESC);
          oprot.writeI32(struct.matchSystem.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.livePlatforms != null) {
        if (struct.isSetLivePlatforms()) {
          oprot.writeFieldBegin(LIVE_PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.livePlatforms.size()));
            for (com.lesports.api.common.Platform _iter79 : struct.livePlatforms)
            {
              oprot.writeI32(_iter79.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter80 : struct.multiLangNames)
            {
              _iter80.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCitys != null) {
        if (struct.isSetMultiLangCitys()) {
          oprot.writeFieldBegin(MULTI_LANG_CITYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCitys.size()));
            for (com.lesports.api.common.LangString _iter81 : struct.multiLangCitys)
            {
              _iter81.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangGameFNames != null) {
        if (struct.isSetMultiLangGameFNames()) {
          oprot.writeFieldBegin(MULTI_LANG_GAME_FNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGameFNames.size()));
            for (com.lesports.api.common.LangString _iter82 : struct.multiLangGameFNames)
            {
              _iter82.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangGameSNames != null) {
        if (struct.isSetMultiLangGameSNames()) {
          oprot.writeFieldBegin(MULTI_LANG_GAME_SNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGameSNames.size()));
            for (com.lesports.api.common.LangString _iter83 : struct.multiLangGameSNames)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurrentRound()) {
        oprot.writeFieldBegin(CURRENT_ROUND_FIELD_DESC);
        oprot.writeI32(struct.currentRound);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalRound()) {
        oprot.writeFieldBegin(TOTAL_ROUND_FIELD_DESC);
        oprot.writeI32(struct.totalRound);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrentRoundId()) {
        oprot.writeFieldBegin(CURRENT_ROUND_ID_FIELD_DESC);
        oprot.writeI64(struct.currentRoundId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOverSeason()) {
        oprot.writeFieldBegin(OVER_SEASON_FIELD_DESC);
        oprot.writeBool(struct.overSeason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompetitionSeasonTupleSchemeFactory implements SchemeFactory {
    public TCompetitionSeasonTupleScheme getScheme() {
      return new TCompetitionSeasonTupleScheme();
    }
  }

  private static class TCompetitionSeasonTupleScheme extends TupleScheme<TCompetitionSeason> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompetitionSeason struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetGameFType()) {
        optionals.set(2);
      }
      if (struct.isSetGameSType()) {
        optionals.set(3);
      }
      if (struct.isSetSeason()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetOfficialUrl()) {
        optionals.set(6);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(7);
      }
      if (struct.isSetCity()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      if (struct.isSetShieldType()) {
        optionals.set(10);
      }
      if (struct.isSetVs()) {
        optionals.set(11);
      }
      if (struct.isSetGameFName()) {
        optionals.set(12);
      }
      if (struct.isSetGameSName()) {
        optionals.set(13);
      }
      if (struct.isSetStartTime()) {
        optionals.set(14);
      }
      if (struct.isSetEndTime()) {
        optionals.set(15);
      }
      if (struct.isSetMatchSystem()) {
        optionals.set(16);
      }
      if (struct.isSetLivePlatforms()) {
        optionals.set(17);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(18);
      }
      if (struct.isSetMultiLangCitys()) {
        optionals.set(19);
      }
      if (struct.isSetMultiLangGameFNames()) {
        optionals.set(20);
      }
      if (struct.isSetMultiLangGameSNames()) {
        optionals.set(21);
      }
      if (struct.isSetCurrentRound()) {
        optionals.set(22);
      }
      if (struct.isSetTotalRound()) {
        optionals.set(23);
      }
      if (struct.isSetCurrentRoundId()) {
        optionals.set(24);
      }
      if (struct.isSetOverSeason()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetGameFType()) {
        oprot.writeI64(struct.gameFType);
      }
      if (struct.isSetGameSType()) {
        oprot.writeI64(struct.gameSType);
      }
      if (struct.isSetSeason()) {
        oprot.writeString(struct.season);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetOfficialUrl()) {
        oprot.writeString(struct.officialUrl);
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetShieldType()) {
        oprot.writeI32(struct.shieldType);
      }
      if (struct.isSetVs()) {
        oprot.writeBool(struct.vs);
      }
      if (struct.isSetGameFName()) {
        oprot.writeString(struct.gameFName);
      }
      if (struct.isSetGameSName()) {
        oprot.writeString(struct.gameSName);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetMatchSystem()) {
        oprot.writeI32(struct.matchSystem.getValue());
      }
      if (struct.isSetLivePlatforms()) {
        {
          oprot.writeI32(struct.livePlatforms.size());
          for (com.lesports.api.common.Platform _iter84 : struct.livePlatforms)
          {
            oprot.writeI32(_iter84.getValue());
          }
        }
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter85 : struct.multiLangNames)
          {
            _iter85.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangCitys()) {
        {
          oprot.writeI32(struct.multiLangCitys.size());
          for (com.lesports.api.common.LangString _iter86 : struct.multiLangCitys)
          {
            _iter86.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangGameFNames()) {
        {
          oprot.writeI32(struct.multiLangGameFNames.size());
          for (com.lesports.api.common.LangString _iter87 : struct.multiLangGameFNames)
          {
            _iter87.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangGameSNames()) {
        {
          oprot.writeI32(struct.multiLangGameSNames.size());
          for (com.lesports.api.common.LangString _iter88 : struct.multiLangGameSNames)
          {
            _iter88.write(oprot);
          }
        }
      }
      if (struct.isSetCurrentRound()) {
        oprot.writeI32(struct.currentRound);
      }
      if (struct.isSetTotalRound()) {
        oprot.writeI32(struct.totalRound);
      }
      if (struct.isSetCurrentRoundId()) {
        oprot.writeI64(struct.currentRoundId);
      }
      if (struct.isSetOverSeason()) {
        oprot.writeBool(struct.overSeason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompetitionSeason struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gameFType = iprot.readI64();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gameSType = iprot.readI64();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.season = iprot.readString();
        struct.setSeasonIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.officialUrl = iprot.readString();
        struct.setOfficialUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.shieldType = iprot.readI32();
        struct.setShieldTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.vs = iprot.readBool();
        struct.setVsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.gameFName = iprot.readString();
        struct.setGameFNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.gameSName = iprot.readString();
        struct.setGameSNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.matchSystem = com.lesports.qmt.sbd.api.common.MatchSystem.findByValue(iprot.readI32());
        struct.setMatchSystemIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TSet _set89 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.livePlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set89.size);
          com.lesports.api.common.Platform _elem90;
          for (int _i91 = 0; _i91 < _set89.size; ++_i91)
          {
            _elem90 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.livePlatforms.add(_elem90);
          }
        }
        struct.setLivePlatformsIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list92.size);
          com.lesports.api.common.LangString _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = new com.lesports.api.common.LangString();
            _elem93.read(iprot);
            struct.multiLangNames.add(_elem93);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCitys = new ArrayList<com.lesports.api.common.LangString>(_list95.size);
          com.lesports.api.common.LangString _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = new com.lesports.api.common.LangString();
            _elem96.read(iprot);
            struct.multiLangCitys.add(_elem96);
          }
        }
        struct.setMultiLangCitysIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>(_list98.size);
          com.lesports.api.common.LangString _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = new com.lesports.api.common.LangString();
            _elem99.read(iprot);
            struct.multiLangGameFNames.add(_elem99);
          }
        }
        struct.setMultiLangGameFNamesIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>(_list101.size);
          com.lesports.api.common.LangString _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = new com.lesports.api.common.LangString();
            _elem102.read(iprot);
            struct.multiLangGameSNames.add(_elem102);
          }
        }
        struct.setMultiLangGameSNamesIsSet(true);
      }
      if (incoming.get(22)) {
        struct.currentRound = iprot.readI32();
        struct.setCurrentRoundIsSet(true);
      }
      if (incoming.get(23)) {
        struct.totalRound = iprot.readI32();
        struct.setTotalRoundIsSet(true);
      }
      if (incoming.get(24)) {
        struct.currentRoundId = iprot.readI64();
        struct.setCurrentRoundIdIsSet(true);
      }
      if (incoming.get(25)) {
        struct.overSeason = iprot.readBool();
        struct.setOverSeasonIsSet(true);
      }
    }
  }

}

