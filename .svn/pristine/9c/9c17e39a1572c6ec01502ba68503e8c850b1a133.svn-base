/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TMedalList implements org.apache.thrift.TBase<TMedalList, TMedalList._Fields>, java.io.Serializable, Cloneable, Comparable<TMedalList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMedalList");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField OPERATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operateType", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMedalListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMedalListTupleSchemeFactory());
  }

  private long id; // required
  private long cid; // optional
  private long csid; // optional
  private long itemId; // optional
  private String itemName; // optional
  private MedalListType type; // optional
  private Map<String,String> stats; // optional
  private String createAt; // optional
  private String updateAt; // optional
  private List<TMedalItemDetail> items; // optional
  private OperateType operateType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CID((short)2, "cid"),
    CSID((short)3, "csid"),
    ITEM_ID((short)4, "itemId"),
    ITEM_NAME((short)5, "itemName"),
    TYPE((short)6, "type"),
    STATS((short)7, "stats"),
    CREATE_AT((short)8, "createAt"),
    UPDATE_AT((short)9, "updateAt"),
    ITEMS((short)10, "items"),
    OPERATE_TYPE((short)11, "operateType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CID
          return CID;
        case 3: // CSID
          return CSID;
        case 4: // ITEM_ID
          return ITEM_ID;
        case 5: // ITEM_NAME
          return ITEM_NAME;
        case 6: // TYPE
          return TYPE;
        case 7: // STATS
          return STATS;
        case 8: // CREATE_AT
          return CREATE_AT;
        case 9: // UPDATE_AT
          return UPDATE_AT;
        case 10: // ITEMS
          return ITEMS;
        case 11: // OPERATE_TYPE
          return OPERATE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private static final int __ITEMID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.CSID,_Fields.ITEM_ID,_Fields.ITEM_NAME,_Fields.TYPE,_Fields.STATS,_Fields.CREATE_AT,_Fields.UPDATE_AT,_Fields.ITEMS,_Fields.OPERATE_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "MedalListType")));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TMedalItemDetail"))));
    tmpMap.put(_Fields.OPERATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "OperateType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMedalList.class, metaDataMap);
  }

  public TMedalList() {
  }

  public TMedalList(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMedalList(TMedalList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.cid = other.cid;
    this.csid = other.csid;
    this.itemId = other.itemId;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
    if (other.isSetItems()) {
      List<TMedalItemDetail> __this__items = new ArrayList<TMedalItemDetail>(other.items.size());
      for (TMedalItemDetail other_element : other.items) {
        __this__items.add(other_element);
      }
      this.items = __this__items;
    }
    if (other.isSetOperateType()) {
      this.operateType = other.operateType;
    }
  }

  public TMedalList deepCopy() {
    return new TMedalList(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCidIsSet(false);
    this.cid = 0;
    setCsidIsSet(false);
    this.csid = 0;
    setItemIdIsSet(false);
    this.itemId = 0;
    this.itemName = null;
    this.type = null;
    this.stats = null;
    this.createAt = null;
    this.updateAt = null;
    this.items = null;
    this.operateType = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public long getItemId() {
    return this.itemId;
  }

  public void setItemId(long itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
  }

  public void unsetItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public MedalListType getType() {
    return this.type;
  }

  public void setType(MedalListType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public void setCreateAt(String createAt) {
    this.createAt = createAt;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public void setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<TMedalItemDetail> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(TMedalItemDetail elem) {
    if (this.items == null) {
      this.items = new ArrayList<TMedalItemDetail>();
    }
    this.items.add(elem);
  }

  public List<TMedalItemDetail> getItems() {
    return this.items;
  }

  public void setItems(List<TMedalItemDetail> items) {
    this.items = items;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public OperateType getOperateType() {
    return this.operateType;
  }

  public void setOperateType(OperateType operateType) {
    this.operateType = operateType;
  }

  public void unsetOperateType() {
    this.operateType = null;
  }

  /** Returns true if field operateType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateType() {
    return this.operateType != null;
  }

  public void setOperateTypeIsSet(boolean value) {
    if (!value) {
      this.operateType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((Long)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MedalListType)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<TMedalItemDetail>)value);
      }
      break;

    case OPERATE_TYPE:
      if (value == null) {
        unsetOperateType();
      } else {
        setOperateType((OperateType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case CID:
      return Long.valueOf(getCid());

    case CSID:
      return Long.valueOf(getCsid());

    case ITEM_ID:
      return Long.valueOf(getItemId());

    case ITEM_NAME:
      return getItemName();

    case TYPE:
      return getType();

    case STATS:
      return getStats();

    case CREATE_AT:
      return getCreateAt();

    case UPDATE_AT:
      return getUpdateAt();

    case ITEMS:
      return getItems();

    case OPERATE_TYPE:
      return getOperateType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CID:
      return isSetCid();
    case CSID:
      return isSetCsid();
    case ITEM_ID:
      return isSetItemId();
    case ITEM_NAME:
      return isSetItemName();
    case TYPE:
      return isSetType();
    case STATS:
      return isSetStats();
    case CREATE_AT:
      return isSetCreateAt();
    case UPDATE_AT:
      return isSetUpdateAt();
    case ITEMS:
      return isSetItems();
    case OPERATE_TYPE:
      return isSetOperateType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMedalList)
      return this.equals((TMedalList)that);
    return false;
  }

  public boolean equals(TMedalList that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_operateType = true && this.isSetOperateType();
    boolean that_present_operateType = true && that.isSetOperateType();
    if (this_present_operateType || that_present_operateType) {
      if (!(this_present_operateType && that_present_operateType))
        return false;
      if (!this.operateType.equals(that.operateType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_itemId = true && (isSetItemId());
    list.add(present_itemId);
    if (present_itemId)
      list.add(itemId);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_createAt = true && (isSetCreateAt());
    list.add(present_createAt);
    if (present_createAt)
      list.add(createAt);

    boolean present_updateAt = true && (isSetUpdateAt());
    list.add(present_updateAt);
    if (present_updateAt)
      list.add(updateAt);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    boolean present_operateType = true && (isSetOperateType());
    list.add(present_operateType);
    if (present_operateType)
      list.add(operateType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TMedalList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateType()).compareTo(other.isSetOperateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateType, other.operateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMedalList(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetItemId()) {
      if (!first) sb.append(", ");
      sb.append("itemId:");
      sb.append(this.itemId);
      first = false;
    }
    if (isSetItemName()) {
      if (!first) sb.append(", ");
      sb.append("itemName:");
      if (this.itemName == null) {
        sb.append("null");
      } else {
        sb.append(this.itemName);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetCreateAt()) {
      if (!first) sb.append(", ");
      sb.append("createAt:");
      if (this.createAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createAt);
      }
      first = false;
    }
    if (isSetUpdateAt()) {
      if (!first) sb.append(", ");
      sb.append("updateAt:");
      if (this.updateAt == null) {
        sb.append("null");
      } else {
        sb.append(this.updateAt);
      }
      first = false;
    }
    if (isSetItems()) {
      if (!first) sb.append(", ");
      sb.append("items:");
      if (this.items == null) {
        sb.append("null");
      } else {
        sb.append(this.items);
      }
      first = false;
    }
    if (isSetOperateType()) {
      if (!first) sb.append(", ");
      sb.append("operateType:");
      if (this.operateType == null) {
        sb.append("null");
      } else {
        sb.append(this.operateType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMedalListStandardSchemeFactory implements SchemeFactory {
    public TMedalListStandardScheme getScheme() {
      return new TMedalListStandardScheme();
    }
  }

  private static class TMedalListStandardScheme extends StandardScheme<TMedalList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMedalList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.itemId = iprot.readI64();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbd.api.dto.MedalListType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.stats.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.items = new ArrayList<TMedalItemDetail>(_list4.size);
                TMedalItemDetail _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new TMedalItemDetail();
                  _elem5.read(iprot);
                  struct.items.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPERATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operateType = com.lesports.qmt.sbd.api.dto.OperateType.findByValue(iprot.readI32());
              struct.setOperateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMedalList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetItemId()) {
        oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.itemId);
        oprot.writeFieldEnd();
      }
      if (struct.itemName != null) {
        if (struct.isSetItemName()) {
          oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
          oprot.writeString(struct.itemName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter7 : struct.stats.entrySet())
            {
              oprot.writeString(_iter7.getKey());
              oprot.writeString(_iter7.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.createAt != null) {
        if (struct.isSetCreateAt()) {
          oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
          oprot.writeString(struct.createAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateAt != null) {
        if (struct.isSetUpdateAt()) {
          oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
          oprot.writeString(struct.updateAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.items != null) {
        if (struct.isSetItems()) {
          oprot.writeFieldBegin(ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
            for (TMedalItemDetail _iter8 : struct.items)
            {
              _iter8.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.operateType != null) {
        if (struct.isSetOperateType()) {
          oprot.writeFieldBegin(OPERATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.operateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMedalListTupleSchemeFactory implements SchemeFactory {
    public TMedalListTupleScheme getScheme() {
      return new TMedalListTupleScheme();
    }
  }

  private static class TMedalListTupleScheme extends TupleScheme<TMedalList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMedalList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetCsid()) {
        optionals.set(2);
      }
      if (struct.isSetItemId()) {
        optionals.set(3);
      }
      if (struct.isSetItemName()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetStats()) {
        optionals.set(6);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(8);
      }
      if (struct.isSetItems()) {
        optionals.set(9);
      }
      if (struct.isSetOperateType()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetItemId()) {
        oprot.writeI64(struct.itemId);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter9 : struct.stats.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
        }
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (TMedalItemDetail _iter10 : struct.items)
          {
            _iter10.write(oprot);
          }
        }
      }
      if (struct.isSetOperateType()) {
        oprot.writeI32(struct.operateType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMedalList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemId = iprot.readI64();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = com.lesports.qmt.sbd.api.dto.MedalListType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map11.size);
          String _key12;
          String _val13;
          for (int _i14 = 0; _i14 < _map11.size; ++_i14)
          {
            _key12 = iprot.readString();
            _val13 = iprot.readString();
            struct.stats.put(_key12, _val13);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new ArrayList<TMedalItemDetail>(_list15.size);
          TMedalItemDetail _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new TMedalItemDetail();
            _elem16.read(iprot);
            struct.items.add(_elem16);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.operateType = com.lesports.qmt.sbd.api.dto.OperateType.findByValue(iprot.readI32());
        struct.setOperateTypeIsSet(true);
      }
    }
  }

}

