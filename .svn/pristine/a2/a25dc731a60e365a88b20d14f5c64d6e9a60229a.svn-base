/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 支持简单模糊搜索球队的请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-9")
public class GetTeams4SimpleSearchParam implements org.apache.thrift.TBase<GetTeams4SimpleSearchParam, GetTeams4SimpleSearchParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetTeams4SimpleSearchParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTeams4SimpleSearchParam");

  private static final org.apache.thrift.protocol.TField FIRST_LETTER_FIELD_DESC = new org.apache.thrift.protocol.TField("firstLetter", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LECI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leciId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OCTOPUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("octopusName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetTeams4SimpleSearchParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetTeams4SimpleSearchParamTupleSchemeFactory());
  }

  private String firstLetter; // optional
  private String name; // optional
  private int teamType; // optional
  private long leciId; // optional
  private String octopusName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_LETTER((short)1, "firstLetter"),
    NAME((short)2, "name"),
    TEAM_TYPE((short)3, "teamType"),
    LECI_ID((short)4, "leciId"),
    OCTOPUS_NAME((short)5, "octopusName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_LETTER
          return FIRST_LETTER;
        case 2: // NAME
          return NAME;
        case 3: // TEAM_TYPE
          return TEAM_TYPE;
        case 4: // LECI_ID
          return LECI_ID;
        case 5: // OCTOPUS_NAME
          return OCTOPUS_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEAMTYPE_ISSET_ID = 0;
  private static final int __LECIID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FIRST_LETTER,_Fields.NAME,_Fields.TEAM_TYPE,_Fields.LECI_ID,_Fields.OCTOPUS_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_LETTER, new org.apache.thrift.meta_data.FieldMetaData("firstLetter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("teamType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LECI_ID, new org.apache.thrift.meta_data.FieldMetaData("leciId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OCTOPUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("octopusName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTeams4SimpleSearchParam.class, metaDataMap);
  }

  public GetTeams4SimpleSearchParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetTeams4SimpleSearchParam(GetTeams4SimpleSearchParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFirstLetter()) {
      this.firstLetter = other.firstLetter;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.teamType = other.teamType;
    this.leciId = other.leciId;
    if (other.isSetOctopusName()) {
      this.octopusName = other.octopusName;
    }
  }

  public GetTeams4SimpleSearchParam deepCopy() {
    return new GetTeams4SimpleSearchParam(this);
  }

  @Override
  public void clear() {
    this.firstLetter = null;
    this.name = null;
    setTeamTypeIsSet(false);
    this.teamType = 0;
    setLeciIdIsSet(false);
    this.leciId = 0;
    this.octopusName = null;
  }

  public String getFirstLetter() {
    return this.firstLetter;
  }

  public void setFirstLetter(String firstLetter) {
    this.firstLetter = firstLetter;
  }

  public void unsetFirstLetter() {
    this.firstLetter = null;
  }

  /** Returns true if field firstLetter is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstLetter() {
    return this.firstLetter != null;
  }

  public void setFirstLetterIsSet(boolean value) {
    if (!value) {
      this.firstLetter = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getTeamType() {
    return this.teamType;
  }

  public void setTeamType(int teamType) {
    this.teamType = teamType;
    setTeamTypeIsSet(true);
  }

  public void unsetTeamType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  /** Returns true if field teamType is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamType() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  public void setTeamTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMTYPE_ISSET_ID, value);
  }

  public long getLeciId() {
    return this.leciId;
  }

  public void setLeciId(long leciId) {
    this.leciId = leciId;
    setLeciIdIsSet(true);
  }

  public void unsetLeciId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LECIID_ISSET_ID);
  }

  /** Returns true if field leciId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeciId() {
    return EncodingUtils.testBit(__isset_bitfield, __LECIID_ISSET_ID);
  }

  public void setLeciIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LECIID_ISSET_ID, value);
  }

  public String getOctopusName() {
    return this.octopusName;
  }

  public void setOctopusName(String octopusName) {
    this.octopusName = octopusName;
  }

  public void unsetOctopusName() {
    this.octopusName = null;
  }

  /** Returns true if field octopusName is set (has been assigned a value) and false otherwise */
  public boolean isSetOctopusName() {
    return this.octopusName != null;
  }

  public void setOctopusNameIsSet(boolean value) {
    if (!value) {
      this.octopusName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIRST_LETTER:
      if (value == null) {
        unsetFirstLetter();
      } else {
        setFirstLetter((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TEAM_TYPE:
      if (value == null) {
        unsetTeamType();
      } else {
        setTeamType((Integer)value);
      }
      break;

    case LECI_ID:
      if (value == null) {
        unsetLeciId();
      } else {
        setLeciId((Long)value);
      }
      break;

    case OCTOPUS_NAME:
      if (value == null) {
        unsetOctopusName();
      } else {
        setOctopusName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_LETTER:
      return getFirstLetter();

    case NAME:
      return getName();

    case TEAM_TYPE:
      return Integer.valueOf(getTeamType());

    case LECI_ID:
      return Long.valueOf(getLeciId());

    case OCTOPUS_NAME:
      return getOctopusName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIRST_LETTER:
      return isSetFirstLetter();
    case NAME:
      return isSetName();
    case TEAM_TYPE:
      return isSetTeamType();
    case LECI_ID:
      return isSetLeciId();
    case OCTOPUS_NAME:
      return isSetOctopusName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetTeams4SimpleSearchParam)
      return this.equals((GetTeams4SimpleSearchParam)that);
    return false;
  }

  public boolean equals(GetTeams4SimpleSearchParam that) {
    if (that == null)
      return false;

    boolean this_present_firstLetter = true && this.isSetFirstLetter();
    boolean that_present_firstLetter = true && that.isSetFirstLetter();
    if (this_present_firstLetter || that_present_firstLetter) {
      if (!(this_present_firstLetter && that_present_firstLetter))
        return false;
      if (!this.firstLetter.equals(that.firstLetter))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_teamType = true && this.isSetTeamType();
    boolean that_present_teamType = true && that.isSetTeamType();
    if (this_present_teamType || that_present_teamType) {
      if (!(this_present_teamType && that_present_teamType))
        return false;
      if (this.teamType != that.teamType)
        return false;
    }

    boolean this_present_leciId = true && this.isSetLeciId();
    boolean that_present_leciId = true && that.isSetLeciId();
    if (this_present_leciId || that_present_leciId) {
      if (!(this_present_leciId && that_present_leciId))
        return false;
      if (this.leciId != that.leciId)
        return false;
    }

    boolean this_present_octopusName = true && this.isSetOctopusName();
    boolean that_present_octopusName = true && that.isSetOctopusName();
    if (this_present_octopusName || that_present_octopusName) {
      if (!(this_present_octopusName && that_present_octopusName))
        return false;
      if (!this.octopusName.equals(that.octopusName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_firstLetter = true && (isSetFirstLetter());
    list.add(present_firstLetter);
    if (present_firstLetter)
      list.add(firstLetter);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_teamType = true && (isSetTeamType());
    list.add(present_teamType);
    if (present_teamType)
      list.add(teamType);

    boolean present_leciId = true && (isSetLeciId());
    list.add(present_leciId);
    if (present_leciId)
      list.add(leciId);

    boolean present_octopusName = true && (isSetOctopusName());
    list.add(present_octopusName);
    if (present_octopusName)
      list.add(octopusName);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetTeams4SimpleSearchParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirstLetter()).compareTo(other.isSetFirstLetter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstLetter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstLetter, other.firstLetter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamType()).compareTo(other.isSetTeamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamType, other.teamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeciId()).compareTo(other.isSetLeciId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeciId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leciId, other.leciId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOctopusName()).compareTo(other.isSetOctopusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOctopusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.octopusName, other.octopusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetTeams4SimpleSearchParam(");
    boolean first = true;

    if (isSetFirstLetter()) {
      sb.append("firstLetter:");
      if (this.firstLetter == null) {
        sb.append("null");
      } else {
        sb.append(this.firstLetter);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetTeamType()) {
      if (!first) sb.append(", ");
      sb.append("teamType:");
      sb.append(this.teamType);
      first = false;
    }
    if (isSetLeciId()) {
      if (!first) sb.append(", ");
      sb.append("leciId:");
      sb.append(this.leciId);
      first = false;
    }
    if (isSetOctopusName()) {
      if (!first) sb.append(", ");
      sb.append("octopusName:");
      if (this.octopusName == null) {
        sb.append("null");
      } else {
        sb.append(this.octopusName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetTeams4SimpleSearchParamStandardSchemeFactory implements SchemeFactory {
    public GetTeams4SimpleSearchParamStandardScheme getScheme() {
      return new GetTeams4SimpleSearchParamStandardScheme();
    }
  }

  private static class GetTeams4SimpleSearchParamStandardScheme extends StandardScheme<GetTeams4SimpleSearchParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetTeams4SimpleSearchParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_LETTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstLetter = iprot.readString();
              struct.setFirstLetterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teamType = iprot.readI32();
              struct.setTeamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LECI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leciId = iprot.readI64();
              struct.setLeciIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OCTOPUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.octopusName = iprot.readString();
              struct.setOctopusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetTeams4SimpleSearchParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.firstLetter != null) {
        if (struct.isSetFirstLetter()) {
          oprot.writeFieldBegin(FIRST_LETTER_FIELD_DESC);
          oprot.writeString(struct.firstLetter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTeamType()) {
        oprot.writeFieldBegin(TEAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.teamType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeciId()) {
        oprot.writeFieldBegin(LECI_ID_FIELD_DESC);
        oprot.writeI64(struct.leciId);
        oprot.writeFieldEnd();
      }
      if (struct.octopusName != null) {
        if (struct.isSetOctopusName()) {
          oprot.writeFieldBegin(OCTOPUS_NAME_FIELD_DESC);
          oprot.writeString(struct.octopusName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetTeams4SimpleSearchParamTupleSchemeFactory implements SchemeFactory {
    public GetTeams4SimpleSearchParamTupleScheme getScheme() {
      return new GetTeams4SimpleSearchParamTupleScheme();
    }
  }

  private static class GetTeams4SimpleSearchParamTupleScheme extends TupleScheme<GetTeams4SimpleSearchParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetTeams4SimpleSearchParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFirstLetter()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTeamType()) {
        optionals.set(2);
      }
      if (struct.isSetLeciId()) {
        optionals.set(3);
      }
      if (struct.isSetOctopusName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFirstLetter()) {
        oprot.writeString(struct.firstLetter);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTeamType()) {
        oprot.writeI32(struct.teamType);
      }
      if (struct.isSetLeciId()) {
        oprot.writeI64(struct.leciId);
      }
      if (struct.isSetOctopusName()) {
        oprot.writeString(struct.octopusName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetTeams4SimpleSearchParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.firstLetter = iprot.readString();
        struct.setFirstLetterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.teamType = iprot.readI32();
        struct.setTeamTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.leciId = iprot.readI64();
        struct.setLeciIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.octopusName = iprot.readString();
        struct.setOctopusNameIsSet(true);
      }
    }
  }

}

