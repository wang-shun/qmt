/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-9")
public class GetCompetitorSeasonStatsParam implements org.apache.thrift.TBase<GetCompetitorSeasonStatsParam, GetCompetitorSeasonStatsParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetCompetitorSeasonStatsParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCompetitorSeasonStatsParam");

  private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryCurrent", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField COMPETITOR_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorIds", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetCompetitorSeasonStatsParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetCompetitorSeasonStatsParamTupleSchemeFactory());
  }

  private long competitorId; // optional
  private long cid; // optional
  private long csid; // optional
  private boolean queryCurrent; // optional
  private List<Long> competitorIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPETITOR_ID((short)1, "competitorId"),
    CID((short)2, "cid"),
    CSID((short)3, "csid"),
    QUERY_CURRENT((short)4, "queryCurrent"),
    COMPETITOR_IDS((short)5, "competitorIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPETITOR_ID
          return COMPETITOR_ID;
        case 2: // CID
          return CID;
        case 3: // CSID
          return CSID;
        case 4: // QUERY_CURRENT
          return QUERY_CURRENT;
        case 5: // COMPETITOR_IDS
          return COMPETITOR_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPETITORID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private static final int __QUERYCURRENT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPETITOR_ID,_Fields.CID,_Fields.CSID,_Fields.QUERY_CURRENT,_Fields.COMPETITOR_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_CURRENT, new org.apache.thrift.meta_data.FieldMetaData("queryCurrent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMPETITOR_IDS, new org.apache.thrift.meta_data.FieldMetaData("competitorIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCompetitorSeasonStatsParam.class, metaDataMap);
  }

  public GetCompetitorSeasonStatsParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetCompetitorSeasonStatsParam(GetCompetitorSeasonStatsParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.competitorId = other.competitorId;
    this.cid = other.cid;
    this.csid = other.csid;
    this.queryCurrent = other.queryCurrent;
    if (other.isSetCompetitorIds()) {
      List<Long> __this__competitorIds = new ArrayList<Long>(other.competitorIds);
      this.competitorIds = __this__competitorIds;
    }
  }

  public GetCompetitorSeasonStatsParam deepCopy() {
    return new GetCompetitorSeasonStatsParam(this);
  }

  @Override
  public void clear() {
    setCompetitorIdIsSet(false);
    this.competitorId = 0;
    setCidIsSet(false);
    this.cid = 0;
    setCsidIsSet(false);
    this.csid = 0;
    setQueryCurrentIsSet(false);
    this.queryCurrent = false;
    this.competitorIds = null;
  }

  public long getCompetitorId() {
    return this.competitorId;
  }

  public void setCompetitorId(long competitorId) {
    this.competitorId = competitorId;
    setCompetitorIdIsSet(true);
  }

  public void unsetCompetitorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  public void setCompetitorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public boolean isQueryCurrent() {
    return this.queryCurrent;
  }

  public void setQueryCurrent(boolean queryCurrent) {
    this.queryCurrent = queryCurrent;
    setQueryCurrentIsSet(true);
  }

  public void unsetQueryCurrent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYCURRENT_ISSET_ID);
  }

  /** Returns true if field queryCurrent is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryCurrent() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYCURRENT_ISSET_ID);
  }

  public void setQueryCurrentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYCURRENT_ISSET_ID, value);
  }

  public int getCompetitorIdsSize() {
    return (this.competitorIds == null) ? 0 : this.competitorIds.size();
  }

  public java.util.Iterator<Long> getCompetitorIdsIterator() {
    return (this.competitorIds == null) ? null : this.competitorIds.iterator();
  }

  public void addToCompetitorIds(long elem) {
    if (this.competitorIds == null) {
      this.competitorIds = new ArrayList<Long>();
    }
    this.competitorIds.add(elem);
  }

  public List<Long> getCompetitorIds() {
    return this.competitorIds;
  }

  public void setCompetitorIds(List<Long> competitorIds) {
    this.competitorIds = competitorIds;
  }

  public void unsetCompetitorIds() {
    this.competitorIds = null;
  }

  /** Returns true if field competitorIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorIds() {
    return this.competitorIds != null;
  }

  public void setCompetitorIdsIsSet(boolean value) {
    if (!value) {
      this.competitorIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPETITOR_ID:
      if (value == null) {
        unsetCompetitorId();
      } else {
        setCompetitorId((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case QUERY_CURRENT:
      if (value == null) {
        unsetQueryCurrent();
      } else {
        setQueryCurrent((Boolean)value);
      }
      break;

    case COMPETITOR_IDS:
      if (value == null) {
        unsetCompetitorIds();
      } else {
        setCompetitorIds((List<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPETITOR_ID:
      return Long.valueOf(getCompetitorId());

    case CID:
      return Long.valueOf(getCid());

    case CSID:
      return Long.valueOf(getCsid());

    case QUERY_CURRENT:
      return Boolean.valueOf(isQueryCurrent());

    case COMPETITOR_IDS:
      return getCompetitorIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPETITOR_ID:
      return isSetCompetitorId();
    case CID:
      return isSetCid();
    case CSID:
      return isSetCsid();
    case QUERY_CURRENT:
      return isSetQueryCurrent();
    case COMPETITOR_IDS:
      return isSetCompetitorIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetCompetitorSeasonStatsParam)
      return this.equals((GetCompetitorSeasonStatsParam)that);
    return false;
  }

  public boolean equals(GetCompetitorSeasonStatsParam that) {
    if (that == null)
      return false;

    boolean this_present_competitorId = true && this.isSetCompetitorId();
    boolean that_present_competitorId = true && that.isSetCompetitorId();
    if (this_present_competitorId || that_present_competitorId) {
      if (!(this_present_competitorId && that_present_competitorId))
        return false;
      if (this.competitorId != that.competitorId)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_queryCurrent = true && this.isSetQueryCurrent();
    boolean that_present_queryCurrent = true && that.isSetQueryCurrent();
    if (this_present_queryCurrent || that_present_queryCurrent) {
      if (!(this_present_queryCurrent && that_present_queryCurrent))
        return false;
      if (this.queryCurrent != that.queryCurrent)
        return false;
    }

    boolean this_present_competitorIds = true && this.isSetCompetitorIds();
    boolean that_present_competitorIds = true && that.isSetCompetitorIds();
    if (this_present_competitorIds || that_present_competitorIds) {
      if (!(this_present_competitorIds && that_present_competitorIds))
        return false;
      if (!this.competitorIds.equals(that.competitorIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_competitorId = true && (isSetCompetitorId());
    list.add(present_competitorId);
    if (present_competitorId)
      list.add(competitorId);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_queryCurrent = true && (isSetQueryCurrent());
    list.add(present_queryCurrent);
    if (present_queryCurrent)
      list.add(queryCurrent);

    boolean present_competitorIds = true && (isSetCompetitorIds());
    list.add(present_competitorIds);
    if (present_competitorIds)
      list.add(competitorIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetCompetitorSeasonStatsParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryCurrent()).compareTo(other.isSetQueryCurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryCurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCurrent, other.queryCurrent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorIds()).compareTo(other.isSetCompetitorIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorIds, other.competitorIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetCompetitorSeasonStatsParam(");
    boolean first = true;

    if (isSetCompetitorId()) {
      sb.append("competitorId:");
      sb.append(this.competitorId);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetQueryCurrent()) {
      if (!first) sb.append(", ");
      sb.append("queryCurrent:");
      sb.append(this.queryCurrent);
      first = false;
    }
    if (isSetCompetitorIds()) {
      if (!first) sb.append(", ");
      sb.append("competitorIds:");
      if (this.competitorIds == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetCompetitorSeasonStatsParamStandardSchemeFactory implements SchemeFactory {
    public GetCompetitorSeasonStatsParamStandardScheme getScheme() {
      return new GetCompetitorSeasonStatsParamStandardScheme();
    }
  }

  private static class GetCompetitorSeasonStatsParamStandardScheme extends StandardScheme<GetCompetitorSeasonStatsParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetCompetitorSeasonStatsParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPETITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitorId = iprot.readI64();
              struct.setCompetitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_CURRENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.queryCurrent = iprot.readBool();
              struct.setQueryCurrentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPETITOR_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.competitorIds = new ArrayList<Long>(_list16.size);
                long _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readI64();
                  struct.competitorIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetCompetitorSeasonStatsParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompetitorId()) {
        oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryCurrent()) {
        oprot.writeFieldBegin(QUERY_CURRENT_FIELD_DESC);
        oprot.writeBool(struct.queryCurrent);
        oprot.writeFieldEnd();
      }
      if (struct.competitorIds != null) {
        if (struct.isSetCompetitorIds()) {
          oprot.writeFieldBegin(COMPETITOR_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.competitorIds.size()));
            for (long _iter19 : struct.competitorIds)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetCompetitorSeasonStatsParamTupleSchemeFactory implements SchemeFactory {
    public GetCompetitorSeasonStatsParamTupleScheme getScheme() {
      return new GetCompetitorSeasonStatsParamTupleScheme();
    }
  }

  private static class GetCompetitorSeasonStatsParamTupleScheme extends TupleScheme<GetCompetitorSeasonStatsParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetCompetitorSeasonStatsParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompetitorId()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetCsid()) {
        optionals.set(2);
      }
      if (struct.isSetQueryCurrent()) {
        optionals.set(3);
      }
      if (struct.isSetCompetitorIds()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCompetitorId()) {
        oprot.writeI64(struct.competitorId);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetQueryCurrent()) {
        oprot.writeBool(struct.queryCurrent);
      }
      if (struct.isSetCompetitorIds()) {
        {
          oprot.writeI32(struct.competitorIds.size());
          for (long _iter20 : struct.competitorIds)
          {
            oprot.writeI64(_iter20);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetCompetitorSeasonStatsParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.competitorId = iprot.readI64();
        struct.setCompetitorIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryCurrent = iprot.readBool();
        struct.setQueryCurrentIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.competitorIds = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.competitorIds.add(_elem22);
          }
        }
        struct.setCompetitorIdsIsSet(true);
      }
    }
  }

}

