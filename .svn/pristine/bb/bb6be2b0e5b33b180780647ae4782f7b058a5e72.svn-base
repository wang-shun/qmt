/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TTotalCompetitionVo implements org.apache.thrift.TBase<TTotalCompetitionVo, TTotalCompetitionVo._Fields>, java.io.Serializable, Cloneable, Comparable<TTotalCompetitionVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTotalCompetitionVo");

  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_COMPETITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCompetitionList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTotalCompetitionVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTotalCompetitionVoTupleSchemeFactory());
  }

  private long cid; // optional
  private long countryId; // optional
  private String date; // optional
  private List<TTotalCompetition> totalCompetitionList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CID((short)1, "cid"),
    COUNTRY_ID((short)2, "countryId"),
    DATE((short)3, "date"),
    TOTAL_COMPETITION_LIST((short)4, "totalCompetitionList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CID
          return CID;
        case 2: // COUNTRY_ID
          return COUNTRY_ID;
        case 3: // DATE
          return DATE;
        case 4: // TOTAL_COMPETITION_LIST
          return TOTAL_COMPETITION_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CID_ISSET_ID = 0;
  private static final int __COUNTRYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.COUNTRY_ID,_Fields.DATE,_Fields.TOTAL_COMPETITION_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_COMPETITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("totalCompetitionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTotalCompetition.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTotalCompetitionVo.class, metaDataMap);
  }

  public TTotalCompetitionVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTotalCompetitionVo(TTotalCompetitionVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cid = other.cid;
    this.countryId = other.countryId;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetTotalCompetitionList()) {
      List<TTotalCompetition> __this__totalCompetitionList = new ArrayList<TTotalCompetition>(other.totalCompetitionList.size());
      for (TTotalCompetition other_element : other.totalCompetitionList) {
        __this__totalCompetitionList.add(new TTotalCompetition(other_element));
      }
      this.totalCompetitionList = __this__totalCompetitionList;
    }
  }

  public TTotalCompetitionVo deepCopy() {
    return new TTotalCompetitionVo(this);
  }

  @Override
  public void clear() {
    setCidIsSet(false);
    this.cid = 0;
    setCountryIdIsSet(false);
    this.countryId = 0;
    this.date = null;
    this.totalCompetitionList = null;
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getCountryId() {
    return this.countryId;
  }

  public void setCountryId(long countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
  }

  public void unsetCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public String getDate() {
    return this.date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getTotalCompetitionListSize() {
    return (this.totalCompetitionList == null) ? 0 : this.totalCompetitionList.size();
  }

  public java.util.Iterator<TTotalCompetition> getTotalCompetitionListIterator() {
    return (this.totalCompetitionList == null) ? null : this.totalCompetitionList.iterator();
  }

  public void addToTotalCompetitionList(TTotalCompetition elem) {
    if (this.totalCompetitionList == null) {
      this.totalCompetitionList = new ArrayList<TTotalCompetition>();
    }
    this.totalCompetitionList.add(elem);
  }

  public List<TTotalCompetition> getTotalCompetitionList() {
    return this.totalCompetitionList;
  }

  public void setTotalCompetitionList(List<TTotalCompetition> totalCompetitionList) {
    this.totalCompetitionList = totalCompetitionList;
  }

  public void unsetTotalCompetitionList() {
    this.totalCompetitionList = null;
  }

  /** Returns true if field totalCompetitionList is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCompetitionList() {
    return this.totalCompetitionList != null;
  }

  public void setTotalCompetitionListIsSet(boolean value) {
    if (!value) {
      this.totalCompetitionList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((Long)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case TOTAL_COMPETITION_LIST:
      if (value == null) {
        unsetTotalCompetitionList();
      } else {
        setTotalCompetitionList((List<TTotalCompetition>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CID:
      return Long.valueOf(getCid());

    case COUNTRY_ID:
      return Long.valueOf(getCountryId());

    case DATE:
      return getDate();

    case TOTAL_COMPETITION_LIST:
      return getTotalCompetitionList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CID:
      return isSetCid();
    case COUNTRY_ID:
      return isSetCountryId();
    case DATE:
      return isSetDate();
    case TOTAL_COMPETITION_LIST:
      return isSetTotalCompetitionList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTotalCompetitionVo)
      return this.equals((TTotalCompetitionVo)that);
    return false;
  }

  public boolean equals(TTotalCompetitionVo that) {
    if (that == null)
      return false;

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_totalCompetitionList = true && this.isSetTotalCompetitionList();
    boolean that_present_totalCompetitionList = true && that.isSetTotalCompetitionList();
    if (this_present_totalCompetitionList || that_present_totalCompetitionList) {
      if (!(this_present_totalCompetitionList && that_present_totalCompetitionList))
        return false;
      if (!this.totalCompetitionList.equals(that.totalCompetitionList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_countryId = true && (isSetCountryId());
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_totalCompetitionList = true && (isSetTotalCompetitionList());
    list.add(present_totalCompetitionList);
    if (present_totalCompetitionList)
      list.add(totalCompetitionList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTotalCompetitionVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCompetitionList()).compareTo(other.isSetTotalCompetitionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCompetitionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCompetitionList, other.totalCompetitionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTotalCompetitionVo(");
    boolean first = true;

    if (isSetCid()) {
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCountryId()) {
      if (!first) sb.append(", ");
      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetTotalCompetitionList()) {
      if (!first) sb.append(", ");
      sb.append("totalCompetitionList:");
      if (this.totalCompetitionList == null) {
        sb.append("null");
      } else {
        sb.append(this.totalCompetitionList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTotalCompetitionVoStandardSchemeFactory implements SchemeFactory {
    public TTotalCompetitionVoStandardScheme getScheme() {
      return new TTotalCompetitionVoStandardScheme();
    }
  }

  private static class TTotalCompetitionVoStandardScheme extends StandardScheme<TTotalCompetitionVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTotalCompetitionVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.countryId = iprot.readI64();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_COMPETITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.totalCompetitionList = new ArrayList<TTotalCompetition>(_list112.size);
                TTotalCompetition _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = new TTotalCompetition();
                  _elem113.read(iprot);
                  struct.totalCompetitionList.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setTotalCompetitionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTotalCompetitionVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCountryId()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.countryId);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.totalCompetitionList != null) {
        if (struct.isSetTotalCompetitionList()) {
          oprot.writeFieldBegin(TOTAL_COMPETITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.totalCompetitionList.size()));
            for (TTotalCompetition _iter115 : struct.totalCompetitionList)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTotalCompetitionVoTupleSchemeFactory implements SchemeFactory {
    public TTotalCompetitionVoTupleScheme getScheme() {
      return new TTotalCompetitionVoTupleScheme();
    }
  }

  private static class TTotalCompetitionVoTupleScheme extends TupleScheme<TTotalCompetitionVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTotalCompetitionVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCid()) {
        optionals.set(0);
      }
      if (struct.isSetCountryId()) {
        optionals.set(1);
      }
      if (struct.isSetDate()) {
        optionals.set(2);
      }
      if (struct.isSetTotalCompetitionList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI64(struct.countryId);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetTotalCompetitionList()) {
        {
          oprot.writeI32(struct.totalCompetitionList.size());
          for (TTotalCompetition _iter116 : struct.totalCompetitionList)
          {
            _iter116.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTotalCompetitionVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.countryId = iprot.readI64();
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.totalCompetitionList = new ArrayList<TTotalCompetition>(_list117.size);
          TTotalCompetition _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new TTotalCompetition();
            _elem118.read(iprot);
            struct.totalCompetitionList.add(_elem118);
          }
        }
        struct.setTotalCompetitionListIsSet(true);
      }
    }
  }

}

