/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TCurrentMoment implements org.apache.thrift.TBase<TCurrentMoment, TCurrentMoment._Fields>, java.io.Serializable, Cloneable, Comparable<TCurrentMoment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCurrentMoment");

  private static final org.apache.thrift.protocol.TField SECTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField SORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_SECTION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangSectionNames", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCurrentMomentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCurrentMomentTupleSchemeFactory());
  }

  private String sectionName; // optional
  private double time; // optional
  private com.lesports.qmt.sbd.api.common.TimeSort sort; // optional
  private List<com.lesports.api.common.LangString> multiLangSectionNames; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SECTION_NAME((short)1, "sectionName"),
    TIME((short)2, "time"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.TimeSort
     */
    SORT((short)3, "sort"),
    MULTI_LANG_SECTION_NAMES((short)4, "multiLangSectionNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SECTION_NAME
          return SECTION_NAME;
        case 2: // TIME
          return TIME;
        case 3: // SORT
          return SORT;
        case 4: // MULTI_LANG_SECTION_NAMES
          return MULTI_LANG_SECTION_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SECTION_NAME,_Fields.TIME,_Fields.SORT,_Fields.MULTI_LANG_SECTION_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SECTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("sectionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SORT, new org.apache.thrift.meta_data.FieldMetaData("sort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.TimeSort.class)));
    tmpMap.put(_Fields.MULTI_LANG_SECTION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangSectionNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCurrentMoment.class, metaDataMap);
  }

  public TCurrentMoment() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCurrentMoment(TCurrentMoment other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSectionName()) {
      this.sectionName = other.sectionName;
    }
    this.time = other.time;
    if (other.isSetSort()) {
      this.sort = other.sort;
    }
    if (other.isSetMultiLangSectionNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangSectionNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangSectionNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangSectionNames) {
        __this__multiLangSectionNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangSectionNames = __this__multiLangSectionNames;
    }
  }

  public TCurrentMoment deepCopy() {
    return new TCurrentMoment(this);
  }

  @Override
  public void clear() {
    this.sectionName = null;
    setTimeIsSet(false);
    this.time = 0.0;
    this.sort = null;
    this.multiLangSectionNames = null;
  }

  public String getSectionName() {
    return this.sectionName;
  }

  public void setSectionName(String sectionName) {
    this.sectionName = sectionName;
  }

  public void unsetSectionName() {
    this.sectionName = null;
  }

  /** Returns true if field sectionName is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionName() {
    return this.sectionName != null;
  }

  public void setSectionNameIsSet(boolean value) {
    if (!value) {
      this.sectionName = null;
    }
  }

  public double getTime() {
    return this.time;
  }

  public void setTime(double time) {
    this.time = time;
    setTimeIsSet(true);
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.TimeSort
   */
  public com.lesports.qmt.sbd.api.common.TimeSort getSort() {
    return this.sort;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.TimeSort
   */
  public void setSort(com.lesports.qmt.sbd.api.common.TimeSort sort) {
    this.sort = sort;
  }

  public void unsetSort() {
    this.sort = null;
  }

  /** Returns true if field sort is set (has been assigned a value) and false otherwise */
  public boolean isSetSort() {
    return this.sort != null;
  }

  public void setSortIsSet(boolean value) {
    if (!value) {
      this.sort = null;
    }
  }

  public int getMultiLangSectionNamesSize() {
    return (this.multiLangSectionNames == null) ? 0 : this.multiLangSectionNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangSectionNamesIterator() {
    return (this.multiLangSectionNames == null) ? null : this.multiLangSectionNames.iterator();
  }

  public void addToMultiLangSectionNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangSectionNames == null) {
      this.multiLangSectionNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangSectionNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangSectionNames() {
    return this.multiLangSectionNames;
  }

  public void setMultiLangSectionNames(List<com.lesports.api.common.LangString> multiLangSectionNames) {
    this.multiLangSectionNames = multiLangSectionNames;
  }

  public void unsetMultiLangSectionNames() {
    this.multiLangSectionNames = null;
  }

  /** Returns true if field multiLangSectionNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangSectionNames() {
    return this.multiLangSectionNames != null;
  }

  public void setMultiLangSectionNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangSectionNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SECTION_NAME:
      if (value == null) {
        unsetSectionName();
      } else {
        setSectionName((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Double)value);
      }
      break;

    case SORT:
      if (value == null) {
        unsetSort();
      } else {
        setSort((com.lesports.qmt.sbd.api.common.TimeSort)value);
      }
      break;

    case MULTI_LANG_SECTION_NAMES:
      if (value == null) {
        unsetMultiLangSectionNames();
      } else {
        setMultiLangSectionNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SECTION_NAME:
      return getSectionName();

    case TIME:
      return Double.valueOf(getTime());

    case SORT:
      return getSort();

    case MULTI_LANG_SECTION_NAMES:
      return getMultiLangSectionNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SECTION_NAME:
      return isSetSectionName();
    case TIME:
      return isSetTime();
    case SORT:
      return isSetSort();
    case MULTI_LANG_SECTION_NAMES:
      return isSetMultiLangSectionNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCurrentMoment)
      return this.equals((TCurrentMoment)that);
    return false;
  }

  public boolean equals(TCurrentMoment that) {
    if (that == null)
      return false;

    boolean this_present_sectionName = true && this.isSetSectionName();
    boolean that_present_sectionName = true && that.isSetSectionName();
    if (this_present_sectionName || that_present_sectionName) {
      if (!(this_present_sectionName && that_present_sectionName))
        return false;
      if (!this.sectionName.equals(that.sectionName))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_sort = true && this.isSetSort();
    boolean that_present_sort = true && that.isSetSort();
    if (this_present_sort || that_present_sort) {
      if (!(this_present_sort && that_present_sort))
        return false;
      if (!this.sort.equals(that.sort))
        return false;
    }

    boolean this_present_multiLangSectionNames = true && this.isSetMultiLangSectionNames();
    boolean that_present_multiLangSectionNames = true && that.isSetMultiLangSectionNames();
    if (this_present_multiLangSectionNames || that_present_multiLangSectionNames) {
      if (!(this_present_multiLangSectionNames && that_present_multiLangSectionNames))
        return false;
      if (!this.multiLangSectionNames.equals(that.multiLangSectionNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sectionName = true && (isSetSectionName());
    list.add(present_sectionName);
    if (present_sectionName)
      list.add(sectionName);

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_sort = true && (isSetSort());
    list.add(present_sort);
    if (present_sort)
      list.add(sort.getValue());

    boolean present_multiLangSectionNames = true && (isSetMultiLangSectionNames());
    list.add(present_multiLangSectionNames);
    if (present_multiLangSectionNames)
      list.add(multiLangSectionNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCurrentMoment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSectionName()).compareTo(other.isSetSectionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionName, other.sectionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSort()).compareTo(other.isSetSort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort, other.sort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangSectionNames()).compareTo(other.isSetMultiLangSectionNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangSectionNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangSectionNames, other.multiLangSectionNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCurrentMoment(");
    boolean first = true;

    if (isSetSectionName()) {
      sb.append("sectionName:");
      if (this.sectionName == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionName);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    if (isSetSort()) {
      if (!first) sb.append(", ");
      sb.append("sort:");
      if (this.sort == null) {
        sb.append("null");
      } else {
        sb.append(this.sort);
      }
      first = false;
    }
    if (isSetMultiLangSectionNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangSectionNames:");
      if (this.multiLangSectionNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangSectionNames);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCurrentMomentStandardSchemeFactory implements SchemeFactory {
    public TCurrentMomentStandardScheme getScheme() {
      return new TCurrentMomentStandardScheme();
    }
  }

  private static class TCurrentMomentStandardScheme extends StandardScheme<TCurrentMoment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCurrentMoment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SECTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sectionName = iprot.readString();
              struct.setSectionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.time = iprot.readDouble();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sort = com.lesports.qmt.sbd.api.common.TimeSort.findByValue(iprot.readI32());
              struct.setSortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MULTI_LANG_SECTION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.multiLangSectionNames = new ArrayList<com.lesports.api.common.LangString>(_list8.size);
                com.lesports.api.common.LangString _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new com.lesports.api.common.LangString();
                  _elem9.read(iprot);
                  struct.multiLangSectionNames.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangSectionNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCurrentMoment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sectionName != null) {
        if (struct.isSetSectionName()) {
          oprot.writeFieldBegin(SECTION_NAME_FIELD_DESC);
          oprot.writeString(struct.sectionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeDouble(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.sort != null) {
        if (struct.isSetSort()) {
          oprot.writeFieldBegin(SORT_FIELD_DESC);
          oprot.writeI32(struct.sort.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangSectionNames != null) {
        if (struct.isSetMultiLangSectionNames()) {
          oprot.writeFieldBegin(MULTI_LANG_SECTION_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangSectionNames.size()));
            for (com.lesports.api.common.LangString _iter11 : struct.multiLangSectionNames)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCurrentMomentTupleSchemeFactory implements SchemeFactory {
    public TCurrentMomentTupleScheme getScheme() {
      return new TCurrentMomentTupleScheme();
    }
  }

  private static class TCurrentMomentTupleScheme extends TupleScheme<TCurrentMoment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCurrentMoment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSectionName()) {
        optionals.set(0);
      }
      if (struct.isSetTime()) {
        optionals.set(1);
      }
      if (struct.isSetSort()) {
        optionals.set(2);
      }
      if (struct.isSetMultiLangSectionNames()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSectionName()) {
        oprot.writeString(struct.sectionName);
      }
      if (struct.isSetTime()) {
        oprot.writeDouble(struct.time);
      }
      if (struct.isSetSort()) {
        oprot.writeI32(struct.sort.getValue());
      }
      if (struct.isSetMultiLangSectionNames()) {
        {
          oprot.writeI32(struct.multiLangSectionNames.size());
          for (com.lesports.api.common.LangString _iter12 : struct.multiLangSectionNames)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCurrentMoment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sectionName = iprot.readString();
        struct.setSectionNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time = iprot.readDouble();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sort = com.lesports.qmt.sbd.api.common.TimeSort.findByValue(iprot.readI32());
        struct.setSortIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangSectionNames = new ArrayList<com.lesports.api.common.LangString>(_list13.size);
          com.lesports.api.common.LangString _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new com.lesports.api.common.LangString();
            _elem14.read(iprot);
            struct.multiLangSectionNames.add(_elem14);
          }
        }
        struct.setMultiLangSectionNamesIsSet(true);
      }
    }
  }

}

