/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TMedalItem implements org.apache.thrift.TBase<TMedalItem, TMedalItem._Fields>, java.io.Serializable, Cloneable, Comparable<TMedalItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMedalItem");

  private static final org.apache.thrift.protocol.TField GAME_FTYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFTypeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DISCIPLINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("disciplineId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSTypeId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GOLD_MEDAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("goldMedalCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SILVER_MEDAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("silverMedalCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BRONZE_MEDAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bronzeMedalCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ORGANISATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("organisationId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ORGANISATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("organisationName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField RANK_SITUATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rankSituationType", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMedalItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMedalItemTupleSchemeFactory());
  }

  private long gameFTypeId; // optional
  private long disciplineId; // optional
  private long gameSTypeId; // optional
  private String itemName; // optional
  private String date; // optional
  private int goldMedalCount; // optional
  private int silverMedalCount; // optional
  private int bronzeMedalCount; // optional
  private long organisationId; // optional
  private long csid; // optional
  private long cid; // optional
  private String result; // optional
  private String organisationName; // optional
  private String imageUrl; // optional
  private int rank; // optional
  private com.lesports.qmt.sbd.api.common.Gender gender; // optional
  private RankSituationType rankSituationType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_FTYPE_ID((short)1, "gameFTypeId"),
    DISCIPLINE_ID((short)2, "disciplineId"),
    GAME_STYPE_ID((short)3, "gameSTypeId"),
    ITEM_NAME((short)4, "itemName"),
    DATE((short)5, "date"),
    GOLD_MEDAL_COUNT((short)6, "goldMedalCount"),
    SILVER_MEDAL_COUNT((short)7, "silverMedalCount"),
    BRONZE_MEDAL_COUNT((short)8, "bronzeMedalCount"),
    ORGANISATION_ID((short)9, "organisationId"),
    CSID((short)10, "csid"),
    CID((short)11, "cid"),
    RESULT((short)12, "result"),
    ORGANISATION_NAME((short)13, "organisationName"),
    IMAGE_URL((short)14, "imageUrl"),
    RANK((short)15, "rank"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.Gender
     */
    GENDER((short)16, "gender"),
    RANK_SITUATION_TYPE((short)17, "rankSituationType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_FTYPE_ID
          return GAME_FTYPE_ID;
        case 2: // DISCIPLINE_ID
          return DISCIPLINE_ID;
        case 3: // GAME_STYPE_ID
          return GAME_STYPE_ID;
        case 4: // ITEM_NAME
          return ITEM_NAME;
        case 5: // DATE
          return DATE;
        case 6: // GOLD_MEDAL_COUNT
          return GOLD_MEDAL_COUNT;
        case 7: // SILVER_MEDAL_COUNT
          return SILVER_MEDAL_COUNT;
        case 8: // BRONZE_MEDAL_COUNT
          return BRONZE_MEDAL_COUNT;
        case 9: // ORGANISATION_ID
          return ORGANISATION_ID;
        case 10: // CSID
          return CSID;
        case 11: // CID
          return CID;
        case 12: // RESULT
          return RESULT;
        case 13: // ORGANISATION_NAME
          return ORGANISATION_NAME;
        case 14: // IMAGE_URL
          return IMAGE_URL;
        case 15: // RANK
          return RANK;
        case 16: // GENDER
          return GENDER;
        case 17: // RANK_SITUATION_TYPE
          return RANK_SITUATION_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMEFTYPEID_ISSET_ID = 0;
  private static final int __DISCIPLINEID_ISSET_ID = 1;
  private static final int __GAMESTYPEID_ISSET_ID = 2;
  private static final int __GOLDMEDALCOUNT_ISSET_ID = 3;
  private static final int __SILVERMEDALCOUNT_ISSET_ID = 4;
  private static final int __BRONZEMEDALCOUNT_ISSET_ID = 5;
  private static final int __ORGANISATIONID_ISSET_ID = 6;
  private static final int __CSID_ISSET_ID = 7;
  private static final int __CID_ISSET_ID = 8;
  private static final int __RANK_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GAME_FTYPE_ID,_Fields.DISCIPLINE_ID,_Fields.GAME_STYPE_ID,_Fields.ITEM_NAME,_Fields.DATE,_Fields.GOLD_MEDAL_COUNT,_Fields.SILVER_MEDAL_COUNT,_Fields.BRONZE_MEDAL_COUNT,_Fields.ORGANISATION_ID,_Fields.CSID,_Fields.CID,_Fields.RESULT,_Fields.ORGANISATION_NAME,_Fields.IMAGE_URL,_Fields.RANK,_Fields.GENDER,_Fields.RANK_SITUATION_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_FTYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("gameFTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCIPLINE_ID, new org.apache.thrift.meta_data.FieldMetaData("disciplineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("gameSTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOLD_MEDAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("goldMedalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SILVER_MEDAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("silverMedalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRONZE_MEDAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("bronzeMedalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORGANISATION_ID, new org.apache.thrift.meta_data.FieldMetaData("organisationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORGANISATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("organisationName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.Gender.class)));
    tmpMap.put(_Fields.RANK_SITUATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rankSituationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "RankSituationType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMedalItem.class, metaDataMap);
  }

  public TMedalItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMedalItem(TMedalItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gameFTypeId = other.gameFTypeId;
    this.disciplineId = other.disciplineId;
    this.gameSTypeId = other.gameSTypeId;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.goldMedalCount = other.goldMedalCount;
    this.silverMedalCount = other.silverMedalCount;
    this.bronzeMedalCount = other.bronzeMedalCount;
    this.organisationId = other.organisationId;
    this.csid = other.csid;
    this.cid = other.cid;
    if (other.isSetResult()) {
      this.result = other.result;
    }
    if (other.isSetOrganisationName()) {
      this.organisationName = other.organisationName;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.rank = other.rank;
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetRankSituationType()) {
      this.rankSituationType = other.rankSituationType;
    }
  }

  public TMedalItem deepCopy() {
    return new TMedalItem(this);
  }

  @Override
  public void clear() {
    setGameFTypeIdIsSet(false);
    this.gameFTypeId = 0;
    setDisciplineIdIsSet(false);
    this.disciplineId = 0;
    setGameSTypeIdIsSet(false);
    this.gameSTypeId = 0;
    this.itemName = null;
    this.date = null;
    setGoldMedalCountIsSet(false);
    this.goldMedalCount = 0;
    setSilverMedalCountIsSet(false);
    this.silverMedalCount = 0;
    setBronzeMedalCountIsSet(false);
    this.bronzeMedalCount = 0;
    setOrganisationIdIsSet(false);
    this.organisationId = 0;
    setCsidIsSet(false);
    this.csid = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.result = null;
    this.organisationName = null;
    this.imageUrl = null;
    setRankIsSet(false);
    this.rank = 0;
    this.gender = null;
    this.rankSituationType = null;
  }

  public long getGameFTypeId() {
    return this.gameFTypeId;
  }

  public void setGameFTypeId(long gameFTypeId) {
    this.gameFTypeId = gameFTypeId;
    setGameFTypeIdIsSet(true);
  }

  public void unsetGameFTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  /** Returns true if field gameFTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  public void setGameFTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID, value);
  }

  public long getDisciplineId() {
    return this.disciplineId;
  }

  public void setDisciplineId(long disciplineId) {
    this.disciplineId = disciplineId;
    setDisciplineIdIsSet(true);
  }

  public void unsetDisciplineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  /** Returns true if field disciplineId is set (has been assigned a value) and false otherwise */
  public boolean isSetDisciplineId() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  public void setDisciplineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID, value);
  }

  public long getGameSTypeId() {
    return this.gameSTypeId;
  }

  public void setGameSTypeId(long gameSTypeId) {
    this.gameSTypeId = gameSTypeId;
    setGameSTypeIdIsSet(true);
  }

  public void unsetGameSTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPEID_ISSET_ID);
  }

  /** Returns true if field gameSTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPEID_ISSET_ID);
  }

  public void setGameSTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPEID_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getGoldMedalCount() {
    return this.goldMedalCount;
  }

  public void setGoldMedalCount(int goldMedalCount) {
    this.goldMedalCount = goldMedalCount;
    setGoldMedalCountIsSet(true);
  }

  public void unsetGoldMedalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLDMEDALCOUNT_ISSET_ID);
  }

  /** Returns true if field goldMedalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGoldMedalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLDMEDALCOUNT_ISSET_ID);
  }

  public void setGoldMedalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLDMEDALCOUNT_ISSET_ID, value);
  }

  public int getSilverMedalCount() {
    return this.silverMedalCount;
  }

  public void setSilverMedalCount(int silverMedalCount) {
    this.silverMedalCount = silverMedalCount;
    setSilverMedalCountIsSet(true);
  }

  public void unsetSilverMedalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SILVERMEDALCOUNT_ISSET_ID);
  }

  /** Returns true if field silverMedalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSilverMedalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SILVERMEDALCOUNT_ISSET_ID);
  }

  public void setSilverMedalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SILVERMEDALCOUNT_ISSET_ID, value);
  }

  public int getBronzeMedalCount() {
    return this.bronzeMedalCount;
  }

  public void setBronzeMedalCount(int bronzeMedalCount) {
    this.bronzeMedalCount = bronzeMedalCount;
    setBronzeMedalCountIsSet(true);
  }

  public void unsetBronzeMedalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRONZEMEDALCOUNT_ISSET_ID);
  }

  /** Returns true if field bronzeMedalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBronzeMedalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BRONZEMEDALCOUNT_ISSET_ID);
  }

  public void setBronzeMedalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRONZEMEDALCOUNT_ISSET_ID, value);
  }

  public long getOrganisationId() {
    return this.organisationId;
  }

  public void setOrganisationId(long organisationId) {
    this.organisationId = organisationId;
    setOrganisationIdIsSet(true);
  }

  public void unsetOrganisationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGANISATIONID_ISSET_ID);
  }

  /** Returns true if field organisationId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganisationId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGANISATIONID_ISSET_ID);
  }

  public void setOrganisationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGANISATIONID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getResult() {
    return this.result;
  }

  public void setResult(String result) {
    this.result = result;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public String getOrganisationName() {
    return this.organisationName;
  }

  public void setOrganisationName(String organisationName) {
    this.organisationName = organisationName;
  }

  public void unsetOrganisationName() {
    this.organisationName = null;
  }

  /** Returns true if field organisationName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganisationName() {
    return this.organisationName != null;
  }

  public void setOrganisationNameIsSet(boolean value) {
    if (!value) {
      this.organisationName = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public int getRank() {
    return this.rank;
  }

  public void setRank(int rank) {
    this.rank = rank;
    setRankIsSet(true);
  }

  public void unsetRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.Gender
   */
  public com.lesports.qmt.sbd.api.common.Gender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.Gender
   */
  public void setGender(com.lesports.qmt.sbd.api.common.Gender gender) {
    this.gender = gender;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public RankSituationType getRankSituationType() {
    return this.rankSituationType;
  }

  public void setRankSituationType(RankSituationType rankSituationType) {
    this.rankSituationType = rankSituationType;
  }

  public void unsetRankSituationType() {
    this.rankSituationType = null;
  }

  /** Returns true if field rankSituationType is set (has been assigned a value) and false otherwise */
  public boolean isSetRankSituationType() {
    return this.rankSituationType != null;
  }

  public void setRankSituationTypeIsSet(boolean value) {
    if (!value) {
      this.rankSituationType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_FTYPE_ID:
      if (value == null) {
        unsetGameFTypeId();
      } else {
        setGameFTypeId((Long)value);
      }
      break;

    case DISCIPLINE_ID:
      if (value == null) {
        unsetDisciplineId();
      } else {
        setDisciplineId((Long)value);
      }
      break;

    case GAME_STYPE_ID:
      if (value == null) {
        unsetGameSTypeId();
      } else {
        setGameSTypeId((Long)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case GOLD_MEDAL_COUNT:
      if (value == null) {
        unsetGoldMedalCount();
      } else {
        setGoldMedalCount((Integer)value);
      }
      break;

    case SILVER_MEDAL_COUNT:
      if (value == null) {
        unsetSilverMedalCount();
      } else {
        setSilverMedalCount((Integer)value);
      }
      break;

    case BRONZE_MEDAL_COUNT:
      if (value == null) {
        unsetBronzeMedalCount();
      } else {
        setBronzeMedalCount((Integer)value);
      }
      break;

    case ORGANISATION_ID:
      if (value == null) {
        unsetOrganisationId();
      } else {
        setOrganisationId((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((String)value);
      }
      break;

    case ORGANISATION_NAME:
      if (value == null) {
        unsetOrganisationName();
      } else {
        setOrganisationName((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((Integer)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((com.lesports.qmt.sbd.api.common.Gender)value);
      }
      break;

    case RANK_SITUATION_TYPE:
      if (value == null) {
        unsetRankSituationType();
      } else {
        setRankSituationType((RankSituationType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_FTYPE_ID:
      return Long.valueOf(getGameFTypeId());

    case DISCIPLINE_ID:
      return Long.valueOf(getDisciplineId());

    case GAME_STYPE_ID:
      return Long.valueOf(getGameSTypeId());

    case ITEM_NAME:
      return getItemName();

    case DATE:
      return getDate();

    case GOLD_MEDAL_COUNT:
      return Integer.valueOf(getGoldMedalCount());

    case SILVER_MEDAL_COUNT:
      return Integer.valueOf(getSilverMedalCount());

    case BRONZE_MEDAL_COUNT:
      return Integer.valueOf(getBronzeMedalCount());

    case ORGANISATION_ID:
      return Long.valueOf(getOrganisationId());

    case CSID:
      return Long.valueOf(getCsid());

    case CID:
      return Long.valueOf(getCid());

    case RESULT:
      return getResult();

    case ORGANISATION_NAME:
      return getOrganisationName();

    case IMAGE_URL:
      return getImageUrl();

    case RANK:
      return Integer.valueOf(getRank());

    case GENDER:
      return getGender();

    case RANK_SITUATION_TYPE:
      return getRankSituationType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_FTYPE_ID:
      return isSetGameFTypeId();
    case DISCIPLINE_ID:
      return isSetDisciplineId();
    case GAME_STYPE_ID:
      return isSetGameSTypeId();
    case ITEM_NAME:
      return isSetItemName();
    case DATE:
      return isSetDate();
    case GOLD_MEDAL_COUNT:
      return isSetGoldMedalCount();
    case SILVER_MEDAL_COUNT:
      return isSetSilverMedalCount();
    case BRONZE_MEDAL_COUNT:
      return isSetBronzeMedalCount();
    case ORGANISATION_ID:
      return isSetOrganisationId();
    case CSID:
      return isSetCsid();
    case CID:
      return isSetCid();
    case RESULT:
      return isSetResult();
    case ORGANISATION_NAME:
      return isSetOrganisationName();
    case IMAGE_URL:
      return isSetImageUrl();
    case RANK:
      return isSetRank();
    case GENDER:
      return isSetGender();
    case RANK_SITUATION_TYPE:
      return isSetRankSituationType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMedalItem)
      return this.equals((TMedalItem)that);
    return false;
  }

  public boolean equals(TMedalItem that) {
    if (that == null)
      return false;

    boolean this_present_gameFTypeId = true && this.isSetGameFTypeId();
    boolean that_present_gameFTypeId = true && that.isSetGameFTypeId();
    if (this_present_gameFTypeId || that_present_gameFTypeId) {
      if (!(this_present_gameFTypeId && that_present_gameFTypeId))
        return false;
      if (this.gameFTypeId != that.gameFTypeId)
        return false;
    }

    boolean this_present_disciplineId = true && this.isSetDisciplineId();
    boolean that_present_disciplineId = true && that.isSetDisciplineId();
    if (this_present_disciplineId || that_present_disciplineId) {
      if (!(this_present_disciplineId && that_present_disciplineId))
        return false;
      if (this.disciplineId != that.disciplineId)
        return false;
    }

    boolean this_present_gameSTypeId = true && this.isSetGameSTypeId();
    boolean that_present_gameSTypeId = true && that.isSetGameSTypeId();
    if (this_present_gameSTypeId || that_present_gameSTypeId) {
      if (!(this_present_gameSTypeId && that_present_gameSTypeId))
        return false;
      if (this.gameSTypeId != that.gameSTypeId)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_goldMedalCount = true && this.isSetGoldMedalCount();
    boolean that_present_goldMedalCount = true && that.isSetGoldMedalCount();
    if (this_present_goldMedalCount || that_present_goldMedalCount) {
      if (!(this_present_goldMedalCount && that_present_goldMedalCount))
        return false;
      if (this.goldMedalCount != that.goldMedalCount)
        return false;
    }

    boolean this_present_silverMedalCount = true && this.isSetSilverMedalCount();
    boolean that_present_silverMedalCount = true && that.isSetSilverMedalCount();
    if (this_present_silverMedalCount || that_present_silverMedalCount) {
      if (!(this_present_silverMedalCount && that_present_silverMedalCount))
        return false;
      if (this.silverMedalCount != that.silverMedalCount)
        return false;
    }

    boolean this_present_bronzeMedalCount = true && this.isSetBronzeMedalCount();
    boolean that_present_bronzeMedalCount = true && that.isSetBronzeMedalCount();
    if (this_present_bronzeMedalCount || that_present_bronzeMedalCount) {
      if (!(this_present_bronzeMedalCount && that_present_bronzeMedalCount))
        return false;
      if (this.bronzeMedalCount != that.bronzeMedalCount)
        return false;
    }

    boolean this_present_organisationId = true && this.isSetOrganisationId();
    boolean that_present_organisationId = true && that.isSetOrganisationId();
    if (this_present_organisationId || that_present_organisationId) {
      if (!(this_present_organisationId && that_present_organisationId))
        return false;
      if (this.organisationId != that.organisationId)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_organisationName = true && this.isSetOrganisationName();
    boolean that_present_organisationName = true && that.isSetOrganisationName();
    if (this_present_organisationName || that_present_organisationName) {
      if (!(this_present_organisationName && that_present_organisationName))
        return false;
      if (!this.organisationName.equals(that.organisationName))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_rankSituationType = true && this.isSetRankSituationType();
    boolean that_present_rankSituationType = true && that.isSetRankSituationType();
    if (this_present_rankSituationType || that_present_rankSituationType) {
      if (!(this_present_rankSituationType && that_present_rankSituationType))
        return false;
      if (!this.rankSituationType.equals(that.rankSituationType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameFTypeId = true && (isSetGameFTypeId());
    list.add(present_gameFTypeId);
    if (present_gameFTypeId)
      list.add(gameFTypeId);

    boolean present_disciplineId = true && (isSetDisciplineId());
    list.add(present_disciplineId);
    if (present_disciplineId)
      list.add(disciplineId);

    boolean present_gameSTypeId = true && (isSetGameSTypeId());
    list.add(present_gameSTypeId);
    if (present_gameSTypeId)
      list.add(gameSTypeId);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_goldMedalCount = true && (isSetGoldMedalCount());
    list.add(present_goldMedalCount);
    if (present_goldMedalCount)
      list.add(goldMedalCount);

    boolean present_silverMedalCount = true && (isSetSilverMedalCount());
    list.add(present_silverMedalCount);
    if (present_silverMedalCount)
      list.add(silverMedalCount);

    boolean present_bronzeMedalCount = true && (isSetBronzeMedalCount());
    list.add(present_bronzeMedalCount);
    if (present_bronzeMedalCount)
      list.add(bronzeMedalCount);

    boolean present_organisationId = true && (isSetOrganisationId());
    list.add(present_organisationId);
    if (present_organisationId)
      list.add(organisationId);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_organisationName = true && (isSetOrganisationName());
    list.add(present_organisationName);
    if (present_organisationName)
      list.add(organisationName);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_rank = true && (isSetRank());
    list.add(present_rank);
    if (present_rank)
      list.add(rank);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender.getValue());

    boolean present_rankSituationType = true && (isSetRankSituationType());
    list.add(present_rankSituationType);
    if (present_rankSituationType)
      list.add(rankSituationType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TMedalItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameFTypeId()).compareTo(other.isSetGameFTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFTypeId, other.gameFTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisciplineId()).compareTo(other.isSetDisciplineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisciplineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disciplineId, other.disciplineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSTypeId()).compareTo(other.isSetGameSTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSTypeId, other.gameSTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoldMedalCount()).compareTo(other.isSetGoldMedalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoldMedalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldMedalCount, other.goldMedalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSilverMedalCount()).compareTo(other.isSetSilverMedalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSilverMedalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.silverMedalCount, other.silverMedalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBronzeMedalCount()).compareTo(other.isSetBronzeMedalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBronzeMedalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bronzeMedalCount, other.bronzeMedalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganisationId()).compareTo(other.isSetOrganisationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganisationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organisationId, other.organisationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganisationName()).compareTo(other.isSetOrganisationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganisationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organisationName, other.organisationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRankSituationType()).compareTo(other.isSetRankSituationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRankSituationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rankSituationType, other.rankSituationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMedalItem(");
    boolean first = true;

    if (isSetGameFTypeId()) {
      sb.append("gameFTypeId:");
      sb.append(this.gameFTypeId);
      first = false;
    }
    if (isSetDisciplineId()) {
      if (!first) sb.append(", ");
      sb.append("disciplineId:");
      sb.append(this.disciplineId);
      first = false;
    }
    if (isSetGameSTypeId()) {
      if (!first) sb.append(", ");
      sb.append("gameSTypeId:");
      sb.append(this.gameSTypeId);
      first = false;
    }
    if (isSetItemName()) {
      if (!first) sb.append(", ");
      sb.append("itemName:");
      if (this.itemName == null) {
        sb.append("null");
      } else {
        sb.append(this.itemName);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetGoldMedalCount()) {
      if (!first) sb.append(", ");
      sb.append("goldMedalCount:");
      sb.append(this.goldMedalCount);
      first = false;
    }
    if (isSetSilverMedalCount()) {
      if (!first) sb.append(", ");
      sb.append("silverMedalCount:");
      sb.append(this.silverMedalCount);
      first = false;
    }
    if (isSetBronzeMedalCount()) {
      if (!first) sb.append(", ");
      sb.append("bronzeMedalCount:");
      sb.append(this.bronzeMedalCount);
      first = false;
    }
    if (isSetOrganisationId()) {
      if (!first) sb.append(", ");
      sb.append("organisationId:");
      sb.append(this.organisationId);
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetOrganisationName()) {
      if (!first) sb.append(", ");
      sb.append("organisationName:");
      if (this.organisationName == null) {
        sb.append("null");
      } else {
        sb.append(this.organisationName);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetRank()) {
      if (!first) sb.append(", ");
      sb.append("rank:");
      sb.append(this.rank);
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      if (this.gender == null) {
        sb.append("null");
      } else {
        sb.append(this.gender);
      }
      first = false;
    }
    if (isSetRankSituationType()) {
      if (!first) sb.append(", ");
      sb.append("rankSituationType:");
      if (this.rankSituationType == null) {
        sb.append("null");
      } else {
        sb.append(this.rankSituationType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMedalItemStandardSchemeFactory implements SchemeFactory {
    public TMedalItemStandardScheme getScheme() {
      return new TMedalItemStandardScheme();
    }
  }

  private static class TMedalItemStandardScheme extends StandardScheme<TMedalItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMedalItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_FTYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFTypeId = iprot.readI64();
              struct.setGameFTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISCIPLINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.disciplineId = iprot.readI64();
              struct.setDisciplineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GAME_STYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSTypeId = iprot.readI64();
              struct.setGameSTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GOLD_MEDAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goldMedalCount = iprot.readI32();
              struct.setGoldMedalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SILVER_MEDAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.silverMedalCount = iprot.readI32();
              struct.setSilverMedalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BRONZE_MEDAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bronzeMedalCount = iprot.readI32();
              struct.setBronzeMedalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORGANISATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.organisationId = iprot.readI64();
              struct.setOrganisationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.result = iprot.readString();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORGANISATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organisationName = iprot.readString();
              struct.setOrganisationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rank = iprot.readI32();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = com.lesports.qmt.sbd.api.common.Gender.findByValue(iprot.readI32());
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RANK_SITUATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rankSituationType = com.lesports.qmt.sbd.api.dto.RankSituationType.findByValue(iprot.readI32());
              struct.setRankSituationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMedalItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetGameFTypeId()) {
        oprot.writeFieldBegin(GAME_FTYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.gameFTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeFieldBegin(DISCIPLINE_ID_FIELD_DESC);
        oprot.writeI64(struct.disciplineId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameSTypeId()) {
        oprot.writeFieldBegin(GAME_STYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.gameSTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.itemName != null) {
        if (struct.isSetItemName()) {
          oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
          oprot.writeString(struct.itemName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGoldMedalCount()) {
        oprot.writeFieldBegin(GOLD_MEDAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.goldMedalCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSilverMedalCount()) {
        oprot.writeFieldBegin(SILVER_MEDAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.silverMedalCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBronzeMedalCount()) {
        oprot.writeFieldBegin(BRONZE_MEDAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.bronzeMedalCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrganisationId()) {
        oprot.writeFieldBegin(ORGANISATION_ID_FIELD_DESC);
        oprot.writeI64(struct.organisationId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
      }
      if (struct.organisationName != null) {
        if (struct.isSetOrganisationName()) {
          oprot.writeFieldBegin(ORGANISATION_NAME_FIELD_DESC);
          oprot.writeString(struct.organisationName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRank()) {
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeI32(struct.rank);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        if (struct.isSetGender()) {
          oprot.writeFieldBegin(GENDER_FIELD_DESC);
          oprot.writeI32(struct.gender.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.rankSituationType != null) {
        if (struct.isSetRankSituationType()) {
          oprot.writeFieldBegin(RANK_SITUATION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.rankSituationType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMedalItemTupleSchemeFactory implements SchemeFactory {
    public TMedalItemTupleScheme getScheme() {
      return new TMedalItemTupleScheme();
    }
  }

  private static class TMedalItemTupleScheme extends TupleScheme<TMedalItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMedalItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameFTypeId()) {
        optionals.set(0);
      }
      if (struct.isSetDisciplineId()) {
        optionals.set(1);
      }
      if (struct.isSetGameSTypeId()) {
        optionals.set(2);
      }
      if (struct.isSetItemName()) {
        optionals.set(3);
      }
      if (struct.isSetDate()) {
        optionals.set(4);
      }
      if (struct.isSetGoldMedalCount()) {
        optionals.set(5);
      }
      if (struct.isSetSilverMedalCount()) {
        optionals.set(6);
      }
      if (struct.isSetBronzeMedalCount()) {
        optionals.set(7);
      }
      if (struct.isSetOrganisationId()) {
        optionals.set(8);
      }
      if (struct.isSetCsid()) {
        optionals.set(9);
      }
      if (struct.isSetCid()) {
        optionals.set(10);
      }
      if (struct.isSetResult()) {
        optionals.set(11);
      }
      if (struct.isSetOrganisationName()) {
        optionals.set(12);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(13);
      }
      if (struct.isSetRank()) {
        optionals.set(14);
      }
      if (struct.isSetGender()) {
        optionals.set(15);
      }
      if (struct.isSetRankSituationType()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetGameFTypeId()) {
        oprot.writeI64(struct.gameFTypeId);
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeI64(struct.disciplineId);
      }
      if (struct.isSetGameSTypeId()) {
        oprot.writeI64(struct.gameSTypeId);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetGoldMedalCount()) {
        oprot.writeI32(struct.goldMedalCount);
      }
      if (struct.isSetSilverMedalCount()) {
        oprot.writeI32(struct.silverMedalCount);
      }
      if (struct.isSetBronzeMedalCount()) {
        oprot.writeI32(struct.bronzeMedalCount);
      }
      if (struct.isSetOrganisationId()) {
        oprot.writeI64(struct.organisationId);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetResult()) {
        oprot.writeString(struct.result);
      }
      if (struct.isSetOrganisationName()) {
        oprot.writeString(struct.organisationName);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetRank()) {
        oprot.writeI32(struct.rank);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender.getValue());
      }
      if (struct.isSetRankSituationType()) {
        oprot.writeI32(struct.rankSituationType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMedalItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.gameFTypeId = iprot.readI64();
        struct.setGameFTypeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.disciplineId = iprot.readI64();
        struct.setDisciplineIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gameSTypeId = iprot.readI64();
        struct.setGameSTypeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.goldMedalCount = iprot.readI32();
        struct.setGoldMedalCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.silverMedalCount = iprot.readI32();
        struct.setSilverMedalCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bronzeMedalCount = iprot.readI32();
        struct.setBronzeMedalCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.organisationId = iprot.readI64();
        struct.setOrganisationIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(11)) {
        struct.result = iprot.readString();
        struct.setResultIsSet(true);
      }
      if (incoming.get(12)) {
        struct.organisationName = iprot.readString();
        struct.setOrganisationNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rank = iprot.readI32();
        struct.setRankIsSet(true);
      }
      if (incoming.get(15)) {
        struct.gender = com.lesports.qmt.sbd.api.common.Gender.findByValue(iprot.readI32());
        struct.setGenderIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rankSituationType = com.lesports.qmt.sbd.api.dto.RankSituationType.findByValue(iprot.readI32());
        struct.setRankSituationTypeIsSet(true);
      }
    }
  }

}

