/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TMedalRankVo implements org.apache.thrift.TBase<TMedalRankVo, TMedalRankVo._Fields>, java.io.Serializable, Cloneable, Comparable<TMedalRankVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMedalRankVo");

  private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GAME_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameTypeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COUNTRY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("countryName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GOLD_MEDAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("goldMedalCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SILVER_MEDAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("silverMedalCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BRONZE_MEDAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("bronzeMedalCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MEDAL_ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("medalItemList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField QUERY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAGE_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("pageTotal", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMedalRankVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMedalRankVoTupleSchemeFactory());
  }

  private long gameType; // optional
  private String gameTypeName; // optional
  private long countryId; // optional
  private String countryName; // optional
  private String date; // optional
  private int goldMedalCount; // optional
  private int silverMedalCount; // optional
  private int bronzeMedalCount; // optional
  private List<TMedalItem> medalItemList; // optional
  private String imageUrl; // optional
  private String queryDate; // optional
  private int pageTotal; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_TYPE((short)4, "gameType"),
    GAME_TYPE_NAME((short)5, "gameTypeName"),
    COUNTRY_ID((short)1, "countryId"),
    COUNTRY_NAME((short)2, "countryName"),
    DATE((short)3, "date"),
    GOLD_MEDAL_COUNT((short)6, "goldMedalCount"),
    SILVER_MEDAL_COUNT((short)7, "silverMedalCount"),
    BRONZE_MEDAL_COUNT((short)8, "bronzeMedalCount"),
    MEDAL_ITEM_LIST((short)9, "medalItemList"),
    IMAGE_URL((short)10, "imageUrl"),
    QUERY_DATE((short)11, "queryDate"),
    PAGE_TOTAL((short)12, "pageTotal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 4: // GAME_TYPE
          return GAME_TYPE;
        case 5: // GAME_TYPE_NAME
          return GAME_TYPE_NAME;
        case 1: // COUNTRY_ID
          return COUNTRY_ID;
        case 2: // COUNTRY_NAME
          return COUNTRY_NAME;
        case 3: // DATE
          return DATE;
        case 6: // GOLD_MEDAL_COUNT
          return GOLD_MEDAL_COUNT;
        case 7: // SILVER_MEDAL_COUNT
          return SILVER_MEDAL_COUNT;
        case 8: // BRONZE_MEDAL_COUNT
          return BRONZE_MEDAL_COUNT;
        case 9: // MEDAL_ITEM_LIST
          return MEDAL_ITEM_LIST;
        case 10: // IMAGE_URL
          return IMAGE_URL;
        case 11: // QUERY_DATE
          return QUERY_DATE;
        case 12: // PAGE_TOTAL
          return PAGE_TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMETYPE_ISSET_ID = 0;
  private static final int __COUNTRYID_ISSET_ID = 1;
  private static final int __GOLDMEDALCOUNT_ISSET_ID = 2;
  private static final int __SILVERMEDALCOUNT_ISSET_ID = 3;
  private static final int __BRONZEMEDALCOUNT_ISSET_ID = 4;
  private static final int __PAGETOTAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GAME_TYPE,_Fields.GAME_TYPE_NAME,_Fields.COUNTRY_ID,_Fields.COUNTRY_NAME,_Fields.DATE,_Fields.GOLD_MEDAL_COUNT,_Fields.SILVER_MEDAL_COUNT,_Fields.BRONZE_MEDAL_COUNT,_Fields.MEDAL_ITEM_LIST,_Fields.IMAGE_URL,_Fields.QUERY_DATE,_Fields.PAGE_TOTAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("gameTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNTRY_NAME, new org.apache.thrift.meta_data.FieldMetaData("countryName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOLD_MEDAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("goldMedalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SILVER_MEDAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("silverMedalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRONZE_MEDAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("bronzeMedalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEDAL_ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("medalItemList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMedalItem.class))));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_DATE, new org.apache.thrift.meta_data.FieldMetaData("queryDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("pageTotal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMedalRankVo.class, metaDataMap);
  }

  public TMedalRankVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMedalRankVo(TMedalRankVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gameType = other.gameType;
    if (other.isSetGameTypeName()) {
      this.gameTypeName = other.gameTypeName;
    }
    this.countryId = other.countryId;
    if (other.isSetCountryName()) {
      this.countryName = other.countryName;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.goldMedalCount = other.goldMedalCount;
    this.silverMedalCount = other.silverMedalCount;
    this.bronzeMedalCount = other.bronzeMedalCount;
    if (other.isSetMedalItemList()) {
      List<TMedalItem> __this__medalItemList = new ArrayList<TMedalItem>(other.medalItemList.size());
      for (TMedalItem other_element : other.medalItemList) {
        __this__medalItemList.add(new TMedalItem(other_element));
      }
      this.medalItemList = __this__medalItemList;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.isSetQueryDate()) {
      this.queryDate = other.queryDate;
    }
    this.pageTotal = other.pageTotal;
  }

  public TMedalRankVo deepCopy() {
    return new TMedalRankVo(this);
  }

  @Override
  public void clear() {
    setGameTypeIsSet(false);
    this.gameType = 0;
    this.gameTypeName = null;
    setCountryIdIsSet(false);
    this.countryId = 0;
    this.countryName = null;
    this.date = null;
    setGoldMedalCountIsSet(false);
    this.goldMedalCount = 0;
    setSilverMedalCountIsSet(false);
    this.silverMedalCount = 0;
    setBronzeMedalCountIsSet(false);
    this.bronzeMedalCount = 0;
    this.medalItemList = null;
    this.imageUrl = null;
    this.queryDate = null;
    setPageTotalIsSet(false);
    this.pageTotal = 0;
  }

  public long getGameType() {
    return this.gameType;
  }

  public void setGameType(long gameType) {
    this.gameType = gameType;
    setGameTypeIsSet(true);
  }

  public void unsetGameType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  public void setGameTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETYPE_ISSET_ID, value);
  }

  public String getGameTypeName() {
    return this.gameTypeName;
  }

  public void setGameTypeName(String gameTypeName) {
    this.gameTypeName = gameTypeName;
  }

  public void unsetGameTypeName() {
    this.gameTypeName = null;
  }

  /** Returns true if field gameTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameTypeName() {
    return this.gameTypeName != null;
  }

  public void setGameTypeNameIsSet(boolean value) {
    if (!value) {
      this.gameTypeName = null;
    }
  }

  public long getCountryId() {
    return this.countryId;
  }

  public void setCountryId(long countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
  }

  public void unsetCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public String getCountryName() {
    return this.countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }

  public void unsetCountryName() {
    this.countryName = null;
  }

  /** Returns true if field countryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryName() {
    return this.countryName != null;
  }

  public void setCountryNameIsSet(boolean value) {
    if (!value) {
      this.countryName = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getGoldMedalCount() {
    return this.goldMedalCount;
  }

  public void setGoldMedalCount(int goldMedalCount) {
    this.goldMedalCount = goldMedalCount;
    setGoldMedalCountIsSet(true);
  }

  public void unsetGoldMedalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOLDMEDALCOUNT_ISSET_ID);
  }

  /** Returns true if field goldMedalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetGoldMedalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __GOLDMEDALCOUNT_ISSET_ID);
  }

  public void setGoldMedalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOLDMEDALCOUNT_ISSET_ID, value);
  }

  public int getSilverMedalCount() {
    return this.silverMedalCount;
  }

  public void setSilverMedalCount(int silverMedalCount) {
    this.silverMedalCount = silverMedalCount;
    setSilverMedalCountIsSet(true);
  }

  public void unsetSilverMedalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SILVERMEDALCOUNT_ISSET_ID);
  }

  /** Returns true if field silverMedalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSilverMedalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SILVERMEDALCOUNT_ISSET_ID);
  }

  public void setSilverMedalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SILVERMEDALCOUNT_ISSET_ID, value);
  }

  public int getBronzeMedalCount() {
    return this.bronzeMedalCount;
  }

  public void setBronzeMedalCount(int bronzeMedalCount) {
    this.bronzeMedalCount = bronzeMedalCount;
    setBronzeMedalCountIsSet(true);
  }

  public void unsetBronzeMedalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRONZEMEDALCOUNT_ISSET_ID);
  }

  /** Returns true if field bronzeMedalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBronzeMedalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __BRONZEMEDALCOUNT_ISSET_ID);
  }

  public void setBronzeMedalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRONZEMEDALCOUNT_ISSET_ID, value);
  }

  public int getMedalItemListSize() {
    return (this.medalItemList == null) ? 0 : this.medalItemList.size();
  }

  public java.util.Iterator<TMedalItem> getMedalItemListIterator() {
    return (this.medalItemList == null) ? null : this.medalItemList.iterator();
  }

  public void addToMedalItemList(TMedalItem elem) {
    if (this.medalItemList == null) {
      this.medalItemList = new ArrayList<TMedalItem>();
    }
    this.medalItemList.add(elem);
  }

  public List<TMedalItem> getMedalItemList() {
    return this.medalItemList;
  }

  public void setMedalItemList(List<TMedalItem> medalItemList) {
    this.medalItemList = medalItemList;
  }

  public void unsetMedalItemList() {
    this.medalItemList = null;
  }

  /** Returns true if field medalItemList is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalItemList() {
    return this.medalItemList != null;
  }

  public void setMedalItemListIsSet(boolean value) {
    if (!value) {
      this.medalItemList = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public String getQueryDate() {
    return this.queryDate;
  }

  public void setQueryDate(String queryDate) {
    this.queryDate = queryDate;
  }

  public void unsetQueryDate() {
    this.queryDate = null;
  }

  /** Returns true if field queryDate is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryDate() {
    return this.queryDate != null;
  }

  public void setQueryDateIsSet(boolean value) {
    if (!value) {
      this.queryDate = null;
    }
  }

  public int getPageTotal() {
    return this.pageTotal;
  }

  public void setPageTotal(int pageTotal) {
    this.pageTotal = pageTotal;
    setPageTotalIsSet(true);
  }

  public void unsetPageTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGETOTAL_ISSET_ID);
  }

  /** Returns true if field pageTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetPageTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGETOTAL_ISSET_ID);
  }

  public void setPageTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGETOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_TYPE:
      if (value == null) {
        unsetGameType();
      } else {
        setGameType((Long)value);
      }
      break;

    case GAME_TYPE_NAME:
      if (value == null) {
        unsetGameTypeName();
      } else {
        setGameTypeName((String)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((Long)value);
      }
      break;

    case COUNTRY_NAME:
      if (value == null) {
        unsetCountryName();
      } else {
        setCountryName((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case GOLD_MEDAL_COUNT:
      if (value == null) {
        unsetGoldMedalCount();
      } else {
        setGoldMedalCount((Integer)value);
      }
      break;

    case SILVER_MEDAL_COUNT:
      if (value == null) {
        unsetSilverMedalCount();
      } else {
        setSilverMedalCount((Integer)value);
      }
      break;

    case BRONZE_MEDAL_COUNT:
      if (value == null) {
        unsetBronzeMedalCount();
      } else {
        setBronzeMedalCount((Integer)value);
      }
      break;

    case MEDAL_ITEM_LIST:
      if (value == null) {
        unsetMedalItemList();
      } else {
        setMedalItemList((List<TMedalItem>)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case QUERY_DATE:
      if (value == null) {
        unsetQueryDate();
      } else {
        setQueryDate((String)value);
      }
      break;

    case PAGE_TOTAL:
      if (value == null) {
        unsetPageTotal();
      } else {
        setPageTotal((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_TYPE:
      return Long.valueOf(getGameType());

    case GAME_TYPE_NAME:
      return getGameTypeName();

    case COUNTRY_ID:
      return Long.valueOf(getCountryId());

    case COUNTRY_NAME:
      return getCountryName();

    case DATE:
      return getDate();

    case GOLD_MEDAL_COUNT:
      return Integer.valueOf(getGoldMedalCount());

    case SILVER_MEDAL_COUNT:
      return Integer.valueOf(getSilverMedalCount());

    case BRONZE_MEDAL_COUNT:
      return Integer.valueOf(getBronzeMedalCount());

    case MEDAL_ITEM_LIST:
      return getMedalItemList();

    case IMAGE_URL:
      return getImageUrl();

    case QUERY_DATE:
      return getQueryDate();

    case PAGE_TOTAL:
      return Integer.valueOf(getPageTotal());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_TYPE:
      return isSetGameType();
    case GAME_TYPE_NAME:
      return isSetGameTypeName();
    case COUNTRY_ID:
      return isSetCountryId();
    case COUNTRY_NAME:
      return isSetCountryName();
    case DATE:
      return isSetDate();
    case GOLD_MEDAL_COUNT:
      return isSetGoldMedalCount();
    case SILVER_MEDAL_COUNT:
      return isSetSilverMedalCount();
    case BRONZE_MEDAL_COUNT:
      return isSetBronzeMedalCount();
    case MEDAL_ITEM_LIST:
      return isSetMedalItemList();
    case IMAGE_URL:
      return isSetImageUrl();
    case QUERY_DATE:
      return isSetQueryDate();
    case PAGE_TOTAL:
      return isSetPageTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMedalRankVo)
      return this.equals((TMedalRankVo)that);
    return false;
  }

  public boolean equals(TMedalRankVo that) {
    if (that == null)
      return false;

    boolean this_present_gameType = true && this.isSetGameType();
    boolean that_present_gameType = true && that.isSetGameType();
    if (this_present_gameType || that_present_gameType) {
      if (!(this_present_gameType && that_present_gameType))
        return false;
      if (this.gameType != that.gameType)
        return false;
    }

    boolean this_present_gameTypeName = true && this.isSetGameTypeName();
    boolean that_present_gameTypeName = true && that.isSetGameTypeName();
    if (this_present_gameTypeName || that_present_gameTypeName) {
      if (!(this_present_gameTypeName && that_present_gameTypeName))
        return false;
      if (!this.gameTypeName.equals(that.gameTypeName))
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    boolean this_present_countryName = true && this.isSetCountryName();
    boolean that_present_countryName = true && that.isSetCountryName();
    if (this_present_countryName || that_present_countryName) {
      if (!(this_present_countryName && that_present_countryName))
        return false;
      if (!this.countryName.equals(that.countryName))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_goldMedalCount = true && this.isSetGoldMedalCount();
    boolean that_present_goldMedalCount = true && that.isSetGoldMedalCount();
    if (this_present_goldMedalCount || that_present_goldMedalCount) {
      if (!(this_present_goldMedalCount && that_present_goldMedalCount))
        return false;
      if (this.goldMedalCount != that.goldMedalCount)
        return false;
    }

    boolean this_present_silverMedalCount = true && this.isSetSilverMedalCount();
    boolean that_present_silverMedalCount = true && that.isSetSilverMedalCount();
    if (this_present_silverMedalCount || that_present_silverMedalCount) {
      if (!(this_present_silverMedalCount && that_present_silverMedalCount))
        return false;
      if (this.silverMedalCount != that.silverMedalCount)
        return false;
    }

    boolean this_present_bronzeMedalCount = true && this.isSetBronzeMedalCount();
    boolean that_present_bronzeMedalCount = true && that.isSetBronzeMedalCount();
    if (this_present_bronzeMedalCount || that_present_bronzeMedalCount) {
      if (!(this_present_bronzeMedalCount && that_present_bronzeMedalCount))
        return false;
      if (this.bronzeMedalCount != that.bronzeMedalCount)
        return false;
    }

    boolean this_present_medalItemList = true && this.isSetMedalItemList();
    boolean that_present_medalItemList = true && that.isSetMedalItemList();
    if (this_present_medalItemList || that_present_medalItemList) {
      if (!(this_present_medalItemList && that_present_medalItemList))
        return false;
      if (!this.medalItemList.equals(that.medalItemList))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_queryDate = true && this.isSetQueryDate();
    boolean that_present_queryDate = true && that.isSetQueryDate();
    if (this_present_queryDate || that_present_queryDate) {
      if (!(this_present_queryDate && that_present_queryDate))
        return false;
      if (!this.queryDate.equals(that.queryDate))
        return false;
    }

    boolean this_present_pageTotal = true && this.isSetPageTotal();
    boolean that_present_pageTotal = true && that.isSetPageTotal();
    if (this_present_pageTotal || that_present_pageTotal) {
      if (!(this_present_pageTotal && that_present_pageTotal))
        return false;
      if (this.pageTotal != that.pageTotal)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameType = true && (isSetGameType());
    list.add(present_gameType);
    if (present_gameType)
      list.add(gameType);

    boolean present_gameTypeName = true && (isSetGameTypeName());
    list.add(present_gameTypeName);
    if (present_gameTypeName)
      list.add(gameTypeName);

    boolean present_countryId = true && (isSetCountryId());
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId);

    boolean present_countryName = true && (isSetCountryName());
    list.add(present_countryName);
    if (present_countryName)
      list.add(countryName);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_goldMedalCount = true && (isSetGoldMedalCount());
    list.add(present_goldMedalCount);
    if (present_goldMedalCount)
      list.add(goldMedalCount);

    boolean present_silverMedalCount = true && (isSetSilverMedalCount());
    list.add(present_silverMedalCount);
    if (present_silverMedalCount)
      list.add(silverMedalCount);

    boolean present_bronzeMedalCount = true && (isSetBronzeMedalCount());
    list.add(present_bronzeMedalCount);
    if (present_bronzeMedalCount)
      list.add(bronzeMedalCount);

    boolean present_medalItemList = true && (isSetMedalItemList());
    list.add(present_medalItemList);
    if (present_medalItemList)
      list.add(medalItemList);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_queryDate = true && (isSetQueryDate());
    list.add(present_queryDate);
    if (present_queryDate)
      list.add(queryDate);

    boolean present_pageTotal = true && (isSetPageTotal());
    list.add(present_pageTotal);
    if (present_pageTotal)
      list.add(pageTotal);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMedalRankVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameType()).compareTo(other.isSetGameType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, other.gameType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameTypeName()).compareTo(other.isSetGameTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameTypeName, other.gameTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryName()).compareTo(other.isSetCountryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryName, other.countryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoldMedalCount()).compareTo(other.isSetGoldMedalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoldMedalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goldMedalCount, other.goldMedalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSilverMedalCount()).compareTo(other.isSetSilverMedalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSilverMedalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.silverMedalCount, other.silverMedalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBronzeMedalCount()).compareTo(other.isSetBronzeMedalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBronzeMedalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bronzeMedalCount, other.bronzeMedalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalItemList()).compareTo(other.isSetMedalItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalItemList, other.medalItemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryDate()).compareTo(other.isSetQueryDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryDate, other.queryDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageTotal()).compareTo(other.isSetPageTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageTotal, other.pageTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMedalRankVo(");
    boolean first = true;

    if (isSetGameType()) {
      sb.append("gameType:");
      sb.append(this.gameType);
      first = false;
    }
    if (isSetGameTypeName()) {
      if (!first) sb.append(", ");
      sb.append("gameTypeName:");
      if (this.gameTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameTypeName);
      }
      first = false;
    }
    if (isSetCountryId()) {
      if (!first) sb.append(", ");
      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
    }
    if (isSetCountryName()) {
      if (!first) sb.append(", ");
      sb.append("countryName:");
      if (this.countryName == null) {
        sb.append("null");
      } else {
        sb.append(this.countryName);
      }
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetGoldMedalCount()) {
      if (!first) sb.append(", ");
      sb.append("goldMedalCount:");
      sb.append(this.goldMedalCount);
      first = false;
    }
    if (isSetSilverMedalCount()) {
      if (!first) sb.append(", ");
      sb.append("silverMedalCount:");
      sb.append(this.silverMedalCount);
      first = false;
    }
    if (isSetBronzeMedalCount()) {
      if (!first) sb.append(", ");
      sb.append("bronzeMedalCount:");
      sb.append(this.bronzeMedalCount);
      first = false;
    }
    if (isSetMedalItemList()) {
      if (!first) sb.append(", ");
      sb.append("medalItemList:");
      if (this.medalItemList == null) {
        sb.append("null");
      } else {
        sb.append(this.medalItemList);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetQueryDate()) {
      if (!first) sb.append(", ");
      sb.append("queryDate:");
      if (this.queryDate == null) {
        sb.append("null");
      } else {
        sb.append(this.queryDate);
      }
      first = false;
    }
    if (isSetPageTotal()) {
      if (!first) sb.append(", ");
      sb.append("pageTotal:");
      sb.append(this.pageTotal);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMedalRankVoStandardSchemeFactory implements SchemeFactory {
    public TMedalRankVoStandardScheme getScheme() {
      return new TMedalRankVoStandardScheme();
    }
  }

  private static class TMedalRankVoStandardScheme extends StandardScheme<TMedalRankVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMedalRankVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 4: // GAME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameType = iprot.readI64();
              struct.setGameTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GAME_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameTypeName = iprot.readString();
              struct.setGameTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.countryId = iprot.readI64();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNTRY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryName = iprot.readString();
              struct.setCountryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GOLD_MEDAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.goldMedalCount = iprot.readI32();
              struct.setGoldMedalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SILVER_MEDAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.silverMedalCount = iprot.readI32();
              struct.setSilverMedalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BRONZE_MEDAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bronzeMedalCount = iprot.readI32();
              struct.setBronzeMedalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEDAL_ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.medalItemList = new ArrayList<TMedalItem>(_list8.size);
                TMedalItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TMedalItem();
                  _elem9.read(iprot);
                  struct.medalItemList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setMedalItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // QUERY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryDate = iprot.readString();
              struct.setQueryDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAGE_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageTotal = iprot.readI32();
              struct.setPageTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMedalRankVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCountryId()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.countryId);
        oprot.writeFieldEnd();
      }
      if (struct.countryName != null) {
        if (struct.isSetCountryName()) {
          oprot.writeFieldBegin(COUNTRY_NAME_FIELD_DESC);
          oprot.writeString(struct.countryName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGameType()) {
        oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
        oprot.writeI64(struct.gameType);
        oprot.writeFieldEnd();
      }
      if (struct.gameTypeName != null) {
        if (struct.isSetGameTypeName()) {
          oprot.writeFieldBegin(GAME_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.gameTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGoldMedalCount()) {
        oprot.writeFieldBegin(GOLD_MEDAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.goldMedalCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSilverMedalCount()) {
        oprot.writeFieldBegin(SILVER_MEDAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.silverMedalCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBronzeMedalCount()) {
        oprot.writeFieldBegin(BRONZE_MEDAL_COUNT_FIELD_DESC);
        oprot.writeI32(struct.bronzeMedalCount);
        oprot.writeFieldEnd();
      }
      if (struct.medalItemList != null) {
        if (struct.isSetMedalItemList()) {
          oprot.writeFieldBegin(MEDAL_ITEM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.medalItemList.size()));
            for (TMedalItem _iter11 : struct.medalItemList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryDate != null) {
        if (struct.isSetQueryDate()) {
          oprot.writeFieldBegin(QUERY_DATE_FIELD_DESC);
          oprot.writeString(struct.queryDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPageTotal()) {
        oprot.writeFieldBegin(PAGE_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.pageTotal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMedalRankVoTupleSchemeFactory implements SchemeFactory {
    public TMedalRankVoTupleScheme getScheme() {
      return new TMedalRankVoTupleScheme();
    }
  }

  private static class TMedalRankVoTupleScheme extends TupleScheme<TMedalRankVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMedalRankVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameType()) {
        optionals.set(0);
      }
      if (struct.isSetGameTypeName()) {
        optionals.set(1);
      }
      if (struct.isSetCountryId()) {
        optionals.set(2);
      }
      if (struct.isSetCountryName()) {
        optionals.set(3);
      }
      if (struct.isSetDate()) {
        optionals.set(4);
      }
      if (struct.isSetGoldMedalCount()) {
        optionals.set(5);
      }
      if (struct.isSetSilverMedalCount()) {
        optionals.set(6);
      }
      if (struct.isSetBronzeMedalCount()) {
        optionals.set(7);
      }
      if (struct.isSetMedalItemList()) {
        optionals.set(8);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(9);
      }
      if (struct.isSetQueryDate()) {
        optionals.set(10);
      }
      if (struct.isSetPageTotal()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetGameType()) {
        oprot.writeI64(struct.gameType);
      }
      if (struct.isSetGameTypeName()) {
        oprot.writeString(struct.gameTypeName);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI64(struct.countryId);
      }
      if (struct.isSetCountryName()) {
        oprot.writeString(struct.countryName);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetGoldMedalCount()) {
        oprot.writeI32(struct.goldMedalCount);
      }
      if (struct.isSetSilverMedalCount()) {
        oprot.writeI32(struct.silverMedalCount);
      }
      if (struct.isSetBronzeMedalCount()) {
        oprot.writeI32(struct.bronzeMedalCount);
      }
      if (struct.isSetMedalItemList()) {
        {
          oprot.writeI32(struct.medalItemList.size());
          for (TMedalItem _iter12 : struct.medalItemList)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetQueryDate()) {
        oprot.writeString(struct.queryDate);
      }
      if (struct.isSetPageTotal()) {
        oprot.writeI32(struct.pageTotal);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMedalRankVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.gameType = iprot.readI64();
        struct.setGameTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameTypeName = iprot.readString();
        struct.setGameTypeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.countryId = iprot.readI64();
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.countryName = iprot.readString();
        struct.setCountryNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.goldMedalCount = iprot.readI32();
        struct.setGoldMedalCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.silverMedalCount = iprot.readI32();
        struct.setSilverMedalCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bronzeMedalCount = iprot.readI32();
        struct.setBronzeMedalCountIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.medalItemList = new ArrayList<TMedalItem>(_list13.size);
          TMedalItem _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new TMedalItem();
            _elem14.read(iprot);
            struct.medalItemList.add(_elem14);
          }
        }
        struct.setMedalItemListIsSet(true);
      }
      if (incoming.get(9)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.queryDate = iprot.readString();
        struct.setQueryDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pageTotal = iprot.readI32();
        struct.setPageTotalIsSet(true);
      }
    }
  }

}

