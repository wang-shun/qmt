/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TSimplePlayer implements org.apache.thrift.TBase<TSimplePlayer, TSimplePlayer._Fields>, java.io.Serializable, Cloneable, Comparable<TSimplePlayer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSimplePlayer");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STARTING_FIELD_DESC = new org.apache.thrift.protocol.TField("starting", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField SQUAD_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("squadOrder", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DNP_FIELD_DESC = new org.apache.thrift.protocol.TField("dnp", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EXTEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendInfos", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField RESULT_EXTEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultExtendInfos", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField COUNTRY_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("countryImgUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangPosition", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSimplePlayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSimplePlayerTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private int number; // optional
  private String position; // optional
  private boolean starting; // optional
  private Map<String,String> stats; // optional
  private int squadOrder; // optional
  private int dnp; // optional
  private Map<String,String> extendInfos; // optional
  private Map<String,String> resultExtendInfos; // optional
  private long positionId; // optional
  private String countryImgUrl; // optional
  private List<com.lesports.api.common.LangString> multiLangPosition; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    NUMBER((short)3, "number"),
    POSITION((short)4, "position"),
    STARTING((short)5, "starting"),
    STATS((short)6, "stats"),
    SQUAD_ORDER((short)7, "squadOrder"),
    DNP((short)8, "dnp"),
    EXTEND_INFOS((short)9, "extendInfos"),
    RESULT_EXTEND_INFOS((short)10, "resultExtendInfos"),
    POSITION_ID((short)11, "positionId"),
    COUNTRY_IMG_URL((short)12, "countryImgUrl"),
    MULTI_LANG_POSITION((short)13, "multiLangPosition"),
    MULTI_LANG_NAMES((short)14, "multiLangNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // NUMBER
          return NUMBER;
        case 4: // POSITION
          return POSITION;
        case 5: // STARTING
          return STARTING;
        case 6: // STATS
          return STATS;
        case 7: // SQUAD_ORDER
          return SQUAD_ORDER;
        case 8: // DNP
          return DNP;
        case 9: // EXTEND_INFOS
          return EXTEND_INFOS;
        case 10: // RESULT_EXTEND_INFOS
          return RESULT_EXTEND_INFOS;
        case 11: // POSITION_ID
          return POSITION_ID;
        case 12: // COUNTRY_IMG_URL
          return COUNTRY_IMG_URL;
        case 13: // MULTI_LANG_POSITION
          return MULTI_LANG_POSITION;
        case 14: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __NUMBER_ISSET_ID = 1;
  private static final int __STARTING_ISSET_ID = 2;
  private static final int __SQUADORDER_ISSET_ID = 3;
  private static final int __DNP_ISSET_ID = 4;
  private static final int __POSITIONID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.NUMBER,_Fields.POSITION,_Fields.STARTING,_Fields.STATS,_Fields.SQUAD_ORDER,_Fields.DNP,_Fields.EXTEND_INFOS,_Fields.RESULT_EXTEND_INFOS,_Fields.POSITION_ID,_Fields.COUNTRY_IMG_URL,_Fields.MULTI_LANG_POSITION,_Fields.MULTI_LANG_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTING, new org.apache.thrift.meta_data.FieldMetaData("starting", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SQUAD_ORDER, new org.apache.thrift.meta_data.FieldMetaData("squadOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DNP, new org.apache.thrift.meta_data.FieldMetaData("dnp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extendInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RESULT_EXTEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("resultExtendInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNTRY_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("countryImgUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_POSITION, new org.apache.thrift.meta_data.FieldMetaData("multiLangPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSimplePlayer.class, metaDataMap);
  }

  public TSimplePlayer() {
  }

  public TSimplePlayer(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSimplePlayer(TSimplePlayer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.number = other.number;
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    this.starting = other.starting;
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    this.squadOrder = other.squadOrder;
    this.dnp = other.dnp;
    if (other.isSetExtendInfos()) {
      Map<String,String> __this__extendInfos = new HashMap<String,String>(other.extendInfos);
      this.extendInfos = __this__extendInfos;
    }
    if (other.isSetResultExtendInfos()) {
      Map<String,String> __this__resultExtendInfos = new HashMap<String,String>(other.resultExtendInfos);
      this.resultExtendInfos = __this__resultExtendInfos;
    }
    this.positionId = other.positionId;
    if (other.isSetCountryImgUrl()) {
      this.countryImgUrl = other.countryImgUrl;
    }
    if (other.isSetMultiLangPosition()) {
      List<com.lesports.api.common.LangString> __this__multiLangPosition = new ArrayList<com.lesports.api.common.LangString>(other.multiLangPosition.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangPosition) {
        __this__multiLangPosition.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangPosition = __this__multiLangPosition;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
  }

  public TSimplePlayer deepCopy() {
    return new TSimplePlayer(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setNumberIsSet(false);
    this.number = 0;
    this.position = null;
    setStartingIsSet(false);
    this.starting = false;
    this.stats = null;
    setSquadOrderIsSet(false);
    this.squadOrder = 0;
    setDnpIsSet(false);
    this.dnp = 0;
    this.extendInfos = null;
    this.resultExtendInfos = null;
    setPositionIdIsSet(false);
    this.positionId = 0;
    this.countryImgUrl = null;
    this.multiLangPosition = null;
    this.multiLangNames = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public String getPosition() {
    return this.position;
  }

  public void setPosition(String position) {
    this.position = position;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public boolean isStarting() {
    return this.starting;
  }

  public void setStarting(boolean starting) {
    this.starting = starting;
    setStartingIsSet(true);
  }

  public void unsetStarting() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTING_ISSET_ID);
  }

  /** Returns true if field starting is set (has been assigned a value) and false otherwise */
  public boolean isSetStarting() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTING_ISSET_ID);
  }

  public void setStartingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTING_ISSET_ID, value);
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public int getSquadOrder() {
    return this.squadOrder;
  }

  public void setSquadOrder(int squadOrder) {
    this.squadOrder = squadOrder;
    setSquadOrderIsSet(true);
  }

  public void unsetSquadOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SQUADORDER_ISSET_ID);
  }

  /** Returns true if field squadOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSquadOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __SQUADORDER_ISSET_ID);
  }

  public void setSquadOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SQUADORDER_ISSET_ID, value);
  }

  public int getDnp() {
    return this.dnp;
  }

  public void setDnp(int dnp) {
    this.dnp = dnp;
    setDnpIsSet(true);
  }

  public void unsetDnp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DNP_ISSET_ID);
  }

  /** Returns true if field dnp is set (has been assigned a value) and false otherwise */
  public boolean isSetDnp() {
    return EncodingUtils.testBit(__isset_bitfield, __DNP_ISSET_ID);
  }

  public void setDnpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DNP_ISSET_ID, value);
  }

  public int getExtendInfosSize() {
    return (this.extendInfos == null) ? 0 : this.extendInfos.size();
  }

  public void putToExtendInfos(String key, String val) {
    if (this.extendInfos == null) {
      this.extendInfos = new HashMap<String,String>();
    }
    this.extendInfos.put(key, val);
  }

  public Map<String,String> getExtendInfos() {
    return this.extendInfos;
  }

  public void setExtendInfos(Map<String,String> extendInfos) {
    this.extendInfos = extendInfos;
  }

  public void unsetExtendInfos() {
    this.extendInfos = null;
  }

  /** Returns true if field extendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendInfos() {
    return this.extendInfos != null;
  }

  public void setExtendInfosIsSet(boolean value) {
    if (!value) {
      this.extendInfos = null;
    }
  }

  public int getResultExtendInfosSize() {
    return (this.resultExtendInfos == null) ? 0 : this.resultExtendInfos.size();
  }

  public void putToResultExtendInfos(String key, String val) {
    if (this.resultExtendInfos == null) {
      this.resultExtendInfos = new HashMap<String,String>();
    }
    this.resultExtendInfos.put(key, val);
  }

  public Map<String,String> getResultExtendInfos() {
    return this.resultExtendInfos;
  }

  public void setResultExtendInfos(Map<String,String> resultExtendInfos) {
    this.resultExtendInfos = resultExtendInfos;
  }

  public void unsetResultExtendInfos() {
    this.resultExtendInfos = null;
  }

  /** Returns true if field resultExtendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetResultExtendInfos() {
    return this.resultExtendInfos != null;
  }

  public void setResultExtendInfosIsSet(boolean value) {
    if (!value) {
      this.resultExtendInfos = null;
    }
  }

  public long getPositionId() {
    return this.positionId;
  }

  public void setPositionId(long positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
  }

  public void unsetPositionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public String getCountryImgUrl() {
    return this.countryImgUrl;
  }

  public void setCountryImgUrl(String countryImgUrl) {
    this.countryImgUrl = countryImgUrl;
  }

  public void unsetCountryImgUrl() {
    this.countryImgUrl = null;
  }

  /** Returns true if field countryImgUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryImgUrl() {
    return this.countryImgUrl != null;
  }

  public void setCountryImgUrlIsSet(boolean value) {
    if (!value) {
      this.countryImgUrl = null;
    }
  }

  public int getMultiLangPositionSize() {
    return (this.multiLangPosition == null) ? 0 : this.multiLangPosition.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangPositionIterator() {
    return (this.multiLangPosition == null) ? null : this.multiLangPosition.iterator();
  }

  public void addToMultiLangPosition(com.lesports.api.common.LangString elem) {
    if (this.multiLangPosition == null) {
      this.multiLangPosition = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangPosition.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangPosition() {
    return this.multiLangPosition;
  }

  public void setMultiLangPosition(List<com.lesports.api.common.LangString> multiLangPosition) {
    this.multiLangPosition = multiLangPosition;
  }

  public void unsetMultiLangPosition() {
    this.multiLangPosition = null;
  }

  /** Returns true if field multiLangPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangPosition() {
    return this.multiLangPosition != null;
  }

  public void setMultiLangPositionIsSet(boolean value) {
    if (!value) {
      this.multiLangPosition = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case STARTING:
      if (value == null) {
        unsetStarting();
      } else {
        setStarting((Boolean)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case SQUAD_ORDER:
      if (value == null) {
        unsetSquadOrder();
      } else {
        setSquadOrder((Integer)value);
      }
      break;

    case DNP:
      if (value == null) {
        unsetDnp();
      } else {
        setDnp((Integer)value);
      }
      break;

    case EXTEND_INFOS:
      if (value == null) {
        unsetExtendInfos();
      } else {
        setExtendInfos((Map<String,String>)value);
      }
      break;

    case RESULT_EXTEND_INFOS:
      if (value == null) {
        unsetResultExtendInfos();
      } else {
        setResultExtendInfos((Map<String,String>)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Long)value);
      }
      break;

    case COUNTRY_IMG_URL:
      if (value == null) {
        unsetCountryImgUrl();
      } else {
        setCountryImgUrl((String)value);
      }
      break;

    case MULTI_LANG_POSITION:
      if (value == null) {
        unsetMultiLangPosition();
      } else {
        setMultiLangPosition((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case POSITION:
      return getPosition();

    case STARTING:
      return Boolean.valueOf(isStarting());

    case STATS:
      return getStats();

    case SQUAD_ORDER:
      return Integer.valueOf(getSquadOrder());

    case DNP:
      return Integer.valueOf(getDnp());

    case EXTEND_INFOS:
      return getExtendInfos();

    case RESULT_EXTEND_INFOS:
      return getResultExtendInfos();

    case POSITION_ID:
      return Long.valueOf(getPositionId());

    case COUNTRY_IMG_URL:
      return getCountryImgUrl();

    case MULTI_LANG_POSITION:
      return getMultiLangPosition();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case NUMBER:
      return isSetNumber();
    case POSITION:
      return isSetPosition();
    case STARTING:
      return isSetStarting();
    case STATS:
      return isSetStats();
    case SQUAD_ORDER:
      return isSetSquadOrder();
    case DNP:
      return isSetDnp();
    case EXTEND_INFOS:
      return isSetExtendInfos();
    case RESULT_EXTEND_INFOS:
      return isSetResultExtendInfos();
    case POSITION_ID:
      return isSetPositionId();
    case COUNTRY_IMG_URL:
      return isSetCountryImgUrl();
    case MULTI_LANG_POSITION:
      return isSetMultiLangPosition();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSimplePlayer)
      return this.equals((TSimplePlayer)that);
    return false;
  }

  public boolean equals(TSimplePlayer that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_starting = true && this.isSetStarting();
    boolean that_present_starting = true && that.isSetStarting();
    if (this_present_starting || that_present_starting) {
      if (!(this_present_starting && that_present_starting))
        return false;
      if (this.starting != that.starting)
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_squadOrder = true && this.isSetSquadOrder();
    boolean that_present_squadOrder = true && that.isSetSquadOrder();
    if (this_present_squadOrder || that_present_squadOrder) {
      if (!(this_present_squadOrder && that_present_squadOrder))
        return false;
      if (this.squadOrder != that.squadOrder)
        return false;
    }

    boolean this_present_dnp = true && this.isSetDnp();
    boolean that_present_dnp = true && that.isSetDnp();
    if (this_present_dnp || that_present_dnp) {
      if (!(this_present_dnp && that_present_dnp))
        return false;
      if (this.dnp != that.dnp)
        return false;
    }

    boolean this_present_extendInfos = true && this.isSetExtendInfos();
    boolean that_present_extendInfos = true && that.isSetExtendInfos();
    if (this_present_extendInfos || that_present_extendInfos) {
      if (!(this_present_extendInfos && that_present_extendInfos))
        return false;
      if (!this.extendInfos.equals(that.extendInfos))
        return false;
    }

    boolean this_present_resultExtendInfos = true && this.isSetResultExtendInfos();
    boolean that_present_resultExtendInfos = true && that.isSetResultExtendInfos();
    if (this_present_resultExtendInfos || that_present_resultExtendInfos) {
      if (!(this_present_resultExtendInfos && that_present_resultExtendInfos))
        return false;
      if (!this.resultExtendInfos.equals(that.resultExtendInfos))
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_countryImgUrl = true && this.isSetCountryImgUrl();
    boolean that_present_countryImgUrl = true && that.isSetCountryImgUrl();
    if (this_present_countryImgUrl || that_present_countryImgUrl) {
      if (!(this_present_countryImgUrl && that_present_countryImgUrl))
        return false;
      if (!this.countryImgUrl.equals(that.countryImgUrl))
        return false;
    }

    boolean this_present_multiLangPosition = true && this.isSetMultiLangPosition();
    boolean that_present_multiLangPosition = true && that.isSetMultiLangPosition();
    if (this_present_multiLangPosition || that_present_multiLangPosition) {
      if (!(this_present_multiLangPosition && that_present_multiLangPosition))
        return false;
      if (!this.multiLangPosition.equals(that.multiLangPosition))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_starting = true && (isSetStarting());
    list.add(present_starting);
    if (present_starting)
      list.add(starting);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_squadOrder = true && (isSetSquadOrder());
    list.add(present_squadOrder);
    if (present_squadOrder)
      list.add(squadOrder);

    boolean present_dnp = true && (isSetDnp());
    list.add(present_dnp);
    if (present_dnp)
      list.add(dnp);

    boolean present_extendInfos = true && (isSetExtendInfos());
    list.add(present_extendInfos);
    if (present_extendInfos)
      list.add(extendInfos);

    boolean present_resultExtendInfos = true && (isSetResultExtendInfos());
    list.add(present_resultExtendInfos);
    if (present_resultExtendInfos)
      list.add(resultExtendInfos);

    boolean present_positionId = true && (isSetPositionId());
    list.add(present_positionId);
    if (present_positionId)
      list.add(positionId);

    boolean present_countryImgUrl = true && (isSetCountryImgUrl());
    list.add(present_countryImgUrl);
    if (present_countryImgUrl)
      list.add(countryImgUrl);

    boolean present_multiLangPosition = true && (isSetMultiLangPosition());
    list.add(present_multiLangPosition);
    if (present_multiLangPosition)
      list.add(multiLangPosition);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSimplePlayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarting()).compareTo(other.isSetStarting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starting, other.starting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquadOrder()).compareTo(other.isSetSquadOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquadOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squadOrder, other.squadOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDnp()).compareTo(other.isSetDnp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDnp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dnp, other.dnp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendInfos()).compareTo(other.isSetExtendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendInfos, other.extendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultExtendInfos()).compareTo(other.isSetResultExtendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultExtendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultExtendInfos, other.resultExtendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryImgUrl()).compareTo(other.isSetCountryImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryImgUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryImgUrl, other.countryImgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangPosition()).compareTo(other.isSetMultiLangPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangPosition, other.multiLangPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSimplePlayer(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetNumber()) {
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetStarting()) {
      if (!first) sb.append(", ");
      sb.append("starting:");
      sb.append(this.starting);
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetSquadOrder()) {
      if (!first) sb.append(", ");
      sb.append("squadOrder:");
      sb.append(this.squadOrder);
      first = false;
    }
    if (isSetDnp()) {
      if (!first) sb.append(", ");
      sb.append("dnp:");
      sb.append(this.dnp);
      first = false;
    }
    if (isSetExtendInfos()) {
      if (!first) sb.append(", ");
      sb.append("extendInfos:");
      if (this.extendInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extendInfos);
      }
      first = false;
    }
    if (isSetResultExtendInfos()) {
      if (!first) sb.append(", ");
      sb.append("resultExtendInfos:");
      if (this.resultExtendInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.resultExtendInfos);
      }
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetCountryImgUrl()) {
      if (!first) sb.append(", ");
      sb.append("countryImgUrl:");
      if (this.countryImgUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.countryImgUrl);
      }
      first = false;
    }
    if (isSetMultiLangPosition()) {
      if (!first) sb.append(", ");
      sb.append("multiLangPosition:");
      if (this.multiLangPosition == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangPosition);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSimplePlayerStandardSchemeFactory implements SchemeFactory {
    public TSimplePlayerStandardScheme getScheme() {
      return new TSimplePlayerStandardScheme();
    }
  }

  private static class TSimplePlayerStandardScheme extends StandardScheme<TSimplePlayer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSimplePlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STARTING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.starting = iprot.readBool();
              struct.setStartingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map96.size);
                String _key97;
                String _val98;
                for (int _i99 = 0; _i99 < _map96.size; ++_i99)
                {
                  _key97 = iprot.readString();
                  _val98 = iprot.readString();
                  struct.stats.put(_key97, _val98);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SQUAD_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.squadOrder = iprot.readI32();
              struct.setSquadOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DNP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dnp = iprot.readI32();
              struct.setDnpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                struct.extendInfos = new HashMap<String,String>(2*_map100.size);
                String _key101;
                String _val102;
                for (int _i103 = 0; _i103 < _map100.size; ++_i103)
                {
                  _key101 = iprot.readString();
                  _val102 = iprot.readString();
                  struct.extendInfos.put(_key101, _val102);
                }
                iprot.readMapEnd();
              }
              struct.setExtendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESULT_EXTEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin();
                struct.resultExtendInfos = new HashMap<String,String>(2*_map104.size);
                String _key105;
                String _val106;
                for (int _i107 = 0; _i107 < _map104.size; ++_i107)
                {
                  _key105 = iprot.readString();
                  _val106 = iprot.readString();
                  struct.resultExtendInfos.put(_key105, _val106);
                }
                iprot.readMapEnd();
              }
              struct.setResultExtendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionId = iprot.readI64();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COUNTRY_IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryImgUrl = iprot.readString();
              struct.setCountryImgUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MULTI_LANG_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list108 = iprot.readListBegin();
                struct.multiLangPosition = new ArrayList<com.lesports.api.common.LangString>(_list108.size);
                com.lesports.api.common.LangString _elem109;
                for (int _i110 = 0; _i110 < _list108.size; ++_i110)
                {
                  _elem109 = new com.lesports.api.common.LangString();
                  _elem109.read(iprot);
                  struct.multiLangPosition.add(_elem109);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list111 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list111.size);
                com.lesports.api.common.LangString _elem112;
                for (int _i113 = 0; _i113 < _list111.size; ++_i113)
                {
                  _elem112 = new com.lesports.api.common.LangString();
                  _elem112.read(iprot);
                  struct.multiLangNames.add(_elem112);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSimplePlayer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStarting()) {
        oprot.writeFieldBegin(STARTING_FIELD_DESC);
        oprot.writeBool(struct.starting);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter114 : struct.stats.entrySet())
            {
              oprot.writeString(_iter114.getKey());
              oprot.writeString(_iter114.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSquadOrder()) {
        oprot.writeFieldBegin(SQUAD_ORDER_FIELD_DESC);
        oprot.writeI32(struct.squadOrder);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDnp()) {
        oprot.writeFieldBegin(DNP_FIELD_DESC);
        oprot.writeI32(struct.dnp);
        oprot.writeFieldEnd();
      }
      if (struct.extendInfos != null) {
        if (struct.isSetExtendInfos()) {
          oprot.writeFieldBegin(EXTEND_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendInfos.size()));
            for (Map.Entry<String, String> _iter115 : struct.extendInfos.entrySet())
            {
              oprot.writeString(_iter115.getKey());
              oprot.writeString(_iter115.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultExtendInfos != null) {
        if (struct.isSetResultExtendInfos()) {
          oprot.writeFieldBegin(RESULT_EXTEND_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.resultExtendInfos.size()));
            for (Map.Entry<String, String> _iter116 : struct.resultExtendInfos.entrySet())
            {
              oprot.writeString(_iter116.getKey());
              oprot.writeString(_iter116.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI64(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.countryImgUrl != null) {
        if (struct.isSetCountryImgUrl()) {
          oprot.writeFieldBegin(COUNTRY_IMG_URL_FIELD_DESC);
          oprot.writeString(struct.countryImgUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangPosition != null) {
        if (struct.isSetMultiLangPosition()) {
          oprot.writeFieldBegin(MULTI_LANG_POSITION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangPosition.size()));
            for (com.lesports.api.common.LangString _iter117 : struct.multiLangPosition)
            {
              _iter117.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter118 : struct.multiLangNames)
            {
              _iter118.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSimplePlayerTupleSchemeFactory implements SchemeFactory {
    public TSimplePlayerTupleScheme getScheme() {
      return new TSimplePlayerTupleScheme();
    }
  }

  private static class TSimplePlayerTupleScheme extends TupleScheme<TSimplePlayer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSimplePlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetNumber()) {
        optionals.set(2);
      }
      if (struct.isSetPosition()) {
        optionals.set(3);
      }
      if (struct.isSetStarting()) {
        optionals.set(4);
      }
      if (struct.isSetStats()) {
        optionals.set(5);
      }
      if (struct.isSetSquadOrder()) {
        optionals.set(6);
      }
      if (struct.isSetDnp()) {
        optionals.set(7);
      }
      if (struct.isSetExtendInfos()) {
        optionals.set(8);
      }
      if (struct.isSetResultExtendInfos()) {
        optionals.set(9);
      }
      if (struct.isSetPositionId()) {
        optionals.set(10);
      }
      if (struct.isSetCountryImgUrl()) {
        optionals.set(11);
      }
      if (struct.isSetMultiLangPosition()) {
        optionals.set(12);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetStarting()) {
        oprot.writeBool(struct.starting);
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter119 : struct.stats.entrySet())
          {
            oprot.writeString(_iter119.getKey());
            oprot.writeString(_iter119.getValue());
          }
        }
      }
      if (struct.isSetSquadOrder()) {
        oprot.writeI32(struct.squadOrder);
      }
      if (struct.isSetDnp()) {
        oprot.writeI32(struct.dnp);
      }
      if (struct.isSetExtendInfos()) {
        {
          oprot.writeI32(struct.extendInfos.size());
          for (Map.Entry<String, String> _iter120 : struct.extendInfos.entrySet())
          {
            oprot.writeString(_iter120.getKey());
            oprot.writeString(_iter120.getValue());
          }
        }
      }
      if (struct.isSetResultExtendInfos()) {
        {
          oprot.writeI32(struct.resultExtendInfos.size());
          for (Map.Entry<String, String> _iter121 : struct.resultExtendInfos.entrySet())
          {
            oprot.writeString(_iter121.getKey());
            oprot.writeString(_iter121.getValue());
          }
        }
      }
      if (struct.isSetPositionId()) {
        oprot.writeI64(struct.positionId);
      }
      if (struct.isSetCountryImgUrl()) {
        oprot.writeString(struct.countryImgUrl);
      }
      if (struct.isSetMultiLangPosition()) {
        {
          oprot.writeI32(struct.multiLangPosition.size());
          for (com.lesports.api.common.LangString _iter122 : struct.multiLangPosition)
          {
            _iter122.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter123 : struct.multiLangNames)
          {
            _iter123.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSimplePlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.starting = iprot.readBool();
        struct.setStartingIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map124.size);
          String _key125;
          String _val126;
          for (int _i127 = 0; _i127 < _map124.size; ++_i127)
          {
            _key125 = iprot.readString();
            _val126 = iprot.readString();
            struct.stats.put(_key125, _val126);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.squadOrder = iprot.readI32();
        struct.setSquadOrderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dnp = iprot.readI32();
        struct.setDnpIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map128 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extendInfos = new HashMap<String,String>(2*_map128.size);
          String _key129;
          String _val130;
          for (int _i131 = 0; _i131 < _map128.size; ++_i131)
          {
            _key129 = iprot.readString();
            _val130 = iprot.readString();
            struct.extendInfos.put(_key129, _val130);
          }
        }
        struct.setExtendInfosIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map132 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.resultExtendInfos = new HashMap<String,String>(2*_map132.size);
          String _key133;
          String _val134;
          for (int _i135 = 0; _i135 < _map132.size; ++_i135)
          {
            _key133 = iprot.readString();
            _val134 = iprot.readString();
            struct.resultExtendInfos.put(_key133, _val134);
          }
        }
        struct.setResultExtendInfosIsSet(true);
      }
      if (incoming.get(10)) {
        struct.positionId = iprot.readI64();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.countryImgUrl = iprot.readString();
        struct.setCountryImgUrlIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list136 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangPosition = new ArrayList<com.lesports.api.common.LangString>(_list136.size);
          com.lesports.api.common.LangString _elem137;
          for (int _i138 = 0; _i138 < _list136.size; ++_i138)
          {
            _elem137 = new com.lesports.api.common.LangString();
            _elem137.read(iprot);
            struct.multiLangPosition.add(_elem137);
          }
        }
        struct.setMultiLangPositionIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list139.size);
          com.lesports.api.common.LangString _elem140;
          for (int _i141 = 0; _i141 < _list139.size; ++_i141)
          {
            _elem140 = new com.lesports.api.common.LangString();
            _elem140.read(iprot);
            struct.multiLangNames.add(_elem140);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
    }
  }

}

