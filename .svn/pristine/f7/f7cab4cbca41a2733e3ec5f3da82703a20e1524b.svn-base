/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.tlive.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-22")
public class TTextLiveService {

  public interface Iface {

    /**
     * 根据id查询图文直播信息
     * 
     * 
     * @param id
     */
    public com.lesports.qmt.tlive.api.dto.TTextLive getTextLiveById(long id) throws org.apache.thrift.TException;

    /**
     * 根据eid查询图文直播信息
     * 
     * 
     * @param eid
     */
    public com.lesports.qmt.tlive.api.dto.TTextLive getMainTTextLiveByEid(long eid) throws org.apache.thrift.TException;

    /**
     * 根据图文直播id获取直播消息id列表
     * 
     * 
     * @param textLiveId
     */
    public List<String> getLiveMessageIdsByTextLiveId(long textLiveId) throws org.apache.thrift.TException;

    /**
     * 批量id获取直播消息
     * 
     * 
     * @param ids
     */
    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getLiveMessageByIds(List<Long> ids) throws org.apache.thrift.TException;

    /**
     * 根据条件直播消息id
     * 
     * 
     * @param textLiveId
     * @param section
     * @param type
     */
    public List<String> getLiveMessagesIds(long textLiveId, long section, com.lesports.qmt.tlive.api.common.TextLiveMessageType type) throws org.apache.thrift.TException;

    /**
     * 获取最新消息index
     * 
     * 
     * @param textLiveId
     * @param section
     */
    public int getLiveMessageLatestIndex(long textLiveId, long section) throws org.apache.thrift.TException;

    /**
     * 按页获取消息数据
     * 
     * 
     * @param textLiveId
     * @param section
     * @param page
     */
    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getLiveMessageByPage(long textLiveId, long section, int page) throws org.apache.thrift.TException;

    /**
     * 增加投票
     * 
     * 
     * @param voteId
     * @param optionId
     */
    public com.lesports.qmt.tlive.api.dto.TVote addVote(long voteId, long optionId) throws org.apache.thrift.TException;

    /**
     * 查询投票结果
     * 
     * 
     * @param voteId
     */
    public com.lesports.qmt.tlive.api.dto.TVote getVote(long voteId) throws org.apache.thrift.TException;

    /**
     * 在线人数上报接口
     * 
     * 
     * @param eid
     */
    public long reportOnlineCount(long eid) throws org.apache.thrift.TException;

    /**
     * 在线人数查询接口
     * 
     * 
     * @param eid
     */
    public long getOnlineCount(long eid) throws org.apache.thrift.TException;

    /**
     * 直播员顶踩接口
     * 
     * 
     * @param textLiveId
     * @param anchorId
     * @param act
     */
    public com.lesports.qmt.tlive.api.dto.TAnchor upDownAnchor(long textLiveId, long anchorId, com.lesports.qmt.tlive.api.common.UpDownAct act) throws org.apache.thrift.TException;

    /**
     * 获取直播员顶踩结果
     * 
     * 
     * @param textLiveId
     * @param anchorId
     */
    public com.lesports.qmt.tlive.api.dto.TAnchor getAnchorUpDown(long textLiveId, long anchorId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTextLiveById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMainTTextLiveByEid(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLiveMessageIdsByTextLiveId(long textLiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLiveMessageByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLiveMessagesIds(long textLiveId, long section, com.lesports.qmt.tlive.api.common.TextLiveMessageType type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLiveMessageLatestIndex(long textLiveId, long section, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLiveMessageByPage(long textLiveId, long section, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addVote(long voteId, long optionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVote(long voteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reportOnlineCount(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOnlineCount(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void upDownAnchor(long textLiveId, long anchorId, com.lesports.qmt.tlive.api.common.UpDownAct act, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAnchorUpDown(long textLiveId, long anchorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.lesports.qmt.tlive.api.dto.TTextLive getTextLiveById(long id) throws org.apache.thrift.TException
    {
      send_getTextLiveById(id);
      return recv_getTextLiveById();
    }

    public void send_getTextLiveById(long id) throws org.apache.thrift.TException
    {
      getTextLiveById_args args = new getTextLiveById_args();
      args.setId(id);
      sendBase("getTextLiveById", args);
    }

    public com.lesports.qmt.tlive.api.dto.TTextLive recv_getTextLiveById() throws org.apache.thrift.TException
    {
      getTextLiveById_result result = new getTextLiveById_result();
      receiveBase(result, "getTextLiveById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTextLiveById failed: unknown result");
    }

    public com.lesports.qmt.tlive.api.dto.TTextLive getMainTTextLiveByEid(long eid) throws org.apache.thrift.TException
    {
      send_getMainTTextLiveByEid(eid);
      return recv_getMainTTextLiveByEid();
    }

    public void send_getMainTTextLiveByEid(long eid) throws org.apache.thrift.TException
    {
      getMainTTextLiveByEid_args args = new getMainTTextLiveByEid_args();
      args.setEid(eid);
      sendBase("getMainTTextLiveByEid", args);
    }

    public com.lesports.qmt.tlive.api.dto.TTextLive recv_getMainTTextLiveByEid() throws org.apache.thrift.TException
    {
      getMainTTextLiveByEid_result result = new getMainTTextLiveByEid_result();
      receiveBase(result, "getMainTTextLiveByEid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMainTTextLiveByEid failed: unknown result");
    }

    public List<String> getLiveMessageIdsByTextLiveId(long textLiveId) throws org.apache.thrift.TException
    {
      send_getLiveMessageIdsByTextLiveId(textLiveId);
      return recv_getLiveMessageIdsByTextLiveId();
    }

    public void send_getLiveMessageIdsByTextLiveId(long textLiveId) throws org.apache.thrift.TException
    {
      getLiveMessageIdsByTextLiveId_args args = new getLiveMessageIdsByTextLiveId_args();
      args.setTextLiveId(textLiveId);
      sendBase("getLiveMessageIdsByTextLiveId", args);
    }

    public List<String> recv_getLiveMessageIdsByTextLiveId() throws org.apache.thrift.TException
    {
      getLiveMessageIdsByTextLiveId_result result = new getLiveMessageIdsByTextLiveId_result();
      receiveBase(result, "getLiveMessageIdsByTextLiveId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveMessageIdsByTextLiveId failed: unknown result");
    }

    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getLiveMessageByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      send_getLiveMessageByIds(ids);
      return recv_getLiveMessageByIds();
    }

    public void send_getLiveMessageByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      getLiveMessageByIds_args args = new getLiveMessageByIds_args();
      args.setIds(ids);
      sendBase("getLiveMessageByIds", args);
    }

    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> recv_getLiveMessageByIds() throws org.apache.thrift.TException
    {
      getLiveMessageByIds_result result = new getLiveMessageByIds_result();
      receiveBase(result, "getLiveMessageByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveMessageByIds failed: unknown result");
    }

    public List<String> getLiveMessagesIds(long textLiveId, long section, com.lesports.qmt.tlive.api.common.TextLiveMessageType type) throws org.apache.thrift.TException
    {
      send_getLiveMessagesIds(textLiveId, section, type);
      return recv_getLiveMessagesIds();
    }

    public void send_getLiveMessagesIds(long textLiveId, long section, com.lesports.qmt.tlive.api.common.TextLiveMessageType type) throws org.apache.thrift.TException
    {
      getLiveMessagesIds_args args = new getLiveMessagesIds_args();
      args.setTextLiveId(textLiveId);
      args.setSection(section);
      args.setType(type);
      sendBase("getLiveMessagesIds", args);
    }

    public List<String> recv_getLiveMessagesIds() throws org.apache.thrift.TException
    {
      getLiveMessagesIds_result result = new getLiveMessagesIds_result();
      receiveBase(result, "getLiveMessagesIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveMessagesIds failed: unknown result");
    }

    public int getLiveMessageLatestIndex(long textLiveId, long section) throws org.apache.thrift.TException
    {
      send_getLiveMessageLatestIndex(textLiveId, section);
      return recv_getLiveMessageLatestIndex();
    }

    public void send_getLiveMessageLatestIndex(long textLiveId, long section) throws org.apache.thrift.TException
    {
      getLiveMessageLatestIndex_args args = new getLiveMessageLatestIndex_args();
      args.setTextLiveId(textLiveId);
      args.setSection(section);
      sendBase("getLiveMessageLatestIndex", args);
    }

    public int recv_getLiveMessageLatestIndex() throws org.apache.thrift.TException
    {
      getLiveMessageLatestIndex_result result = new getLiveMessageLatestIndex_result();
      receiveBase(result, "getLiveMessageLatestIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveMessageLatestIndex failed: unknown result");
    }

    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getLiveMessageByPage(long textLiveId, long section, int page) throws org.apache.thrift.TException
    {
      send_getLiveMessageByPage(textLiveId, section, page);
      return recv_getLiveMessageByPage();
    }

    public void send_getLiveMessageByPage(long textLiveId, long section, int page) throws org.apache.thrift.TException
    {
      getLiveMessageByPage_args args = new getLiveMessageByPage_args();
      args.setTextLiveId(textLiveId);
      args.setSection(section);
      args.setPage(page);
      sendBase("getLiveMessageByPage", args);
    }

    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> recv_getLiveMessageByPage() throws org.apache.thrift.TException
    {
      getLiveMessageByPage_result result = new getLiveMessageByPage_result();
      receiveBase(result, "getLiveMessageByPage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLiveMessageByPage failed: unknown result");
    }

    public com.lesports.qmt.tlive.api.dto.TVote addVote(long voteId, long optionId) throws org.apache.thrift.TException
    {
      send_addVote(voteId, optionId);
      return recv_addVote();
    }

    public void send_addVote(long voteId, long optionId) throws org.apache.thrift.TException
    {
      addVote_args args = new addVote_args();
      args.setVoteId(voteId);
      args.setOptionId(optionId);
      sendBase("addVote", args);
    }

    public com.lesports.qmt.tlive.api.dto.TVote recv_addVote() throws org.apache.thrift.TException
    {
      addVote_result result = new addVote_result();
      receiveBase(result, "addVote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addVote failed: unknown result");
    }

    public com.lesports.qmt.tlive.api.dto.TVote getVote(long voteId) throws org.apache.thrift.TException
    {
      send_getVote(voteId);
      return recv_getVote();
    }

    public void send_getVote(long voteId) throws org.apache.thrift.TException
    {
      getVote_args args = new getVote_args();
      args.setVoteId(voteId);
      sendBase("getVote", args);
    }

    public com.lesports.qmt.tlive.api.dto.TVote recv_getVote() throws org.apache.thrift.TException
    {
      getVote_result result = new getVote_result();
      receiveBase(result, "getVote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVote failed: unknown result");
    }

    public long reportOnlineCount(long eid) throws org.apache.thrift.TException
    {
      send_reportOnlineCount(eid);
      return recv_reportOnlineCount();
    }

    public void send_reportOnlineCount(long eid) throws org.apache.thrift.TException
    {
      reportOnlineCount_args args = new reportOnlineCount_args();
      args.setEid(eid);
      sendBase("reportOnlineCount", args);
    }

    public long recv_reportOnlineCount() throws org.apache.thrift.TException
    {
      reportOnlineCount_result result = new reportOnlineCount_result();
      receiveBase(result, "reportOnlineCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reportOnlineCount failed: unknown result");
    }

    public long getOnlineCount(long eid) throws org.apache.thrift.TException
    {
      send_getOnlineCount(eid);
      return recv_getOnlineCount();
    }

    public void send_getOnlineCount(long eid) throws org.apache.thrift.TException
    {
      getOnlineCount_args args = new getOnlineCount_args();
      args.setEid(eid);
      sendBase("getOnlineCount", args);
    }

    public long recv_getOnlineCount() throws org.apache.thrift.TException
    {
      getOnlineCount_result result = new getOnlineCount_result();
      receiveBase(result, "getOnlineCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOnlineCount failed: unknown result");
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor upDownAnchor(long textLiveId, long anchorId, com.lesports.qmt.tlive.api.common.UpDownAct act) throws org.apache.thrift.TException
    {
      send_upDownAnchor(textLiveId, anchorId, act);
      return recv_upDownAnchor();
    }

    public void send_upDownAnchor(long textLiveId, long anchorId, com.lesports.qmt.tlive.api.common.UpDownAct act) throws org.apache.thrift.TException
    {
      upDownAnchor_args args = new upDownAnchor_args();
      args.setTextLiveId(textLiveId);
      args.setAnchorId(anchorId);
      args.setAct(act);
      sendBase("upDownAnchor", args);
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor recv_upDownAnchor() throws org.apache.thrift.TException
    {
      upDownAnchor_result result = new upDownAnchor_result();
      receiveBase(result, "upDownAnchor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "upDownAnchor failed: unknown result");
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor getAnchorUpDown(long textLiveId, long anchorId) throws org.apache.thrift.TException
    {
      send_getAnchorUpDown(textLiveId, anchorId);
      return recv_getAnchorUpDown();
    }

    public void send_getAnchorUpDown(long textLiveId, long anchorId) throws org.apache.thrift.TException
    {
      getAnchorUpDown_args args = new getAnchorUpDown_args();
      args.setTextLiveId(textLiveId);
      args.setAnchorId(anchorId);
      sendBase("getAnchorUpDown", args);
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor recv_getAnchorUpDown() throws org.apache.thrift.TException
    {
      getAnchorUpDown_result result = new getAnchorUpDown_result();
      receiveBase(result, "getAnchorUpDown");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAnchorUpDown failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTextLiveById(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTextLiveById_call method_call = new getTextLiveById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTextLiveById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      public getTextLiveById_call(long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTextLiveById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTextLiveById_args args = new getTextLiveById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TTextLive getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTextLiveById();
      }
    }

    public void getMainTTextLiveByEid(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMainTTextLiveByEid_call method_call = new getMainTTextLiveByEid_call(eid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMainTTextLiveByEid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eid;
      public getMainTTextLiveByEid_call(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eid = eid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMainTTextLiveByEid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMainTTextLiveByEid_args args = new getMainTTextLiveByEid_args();
        args.setEid(eid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TTextLive getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMainTTextLiveByEid();
      }
    }

    public void getLiveMessageIdsByTextLiveId(long textLiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveMessageIdsByTextLiveId_call method_call = new getLiveMessageIdsByTextLiveId_call(textLiveId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveMessageIdsByTextLiveId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      public getLiveMessageIdsByTextLiveId_call(long textLiveId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveMessageIdsByTextLiveId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveMessageIdsByTextLiveId_args args = new getLiveMessageIdsByTextLiveId_args();
        args.setTextLiveId(textLiveId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveMessageIdsByTextLiveId();
      }
    }

    public void getLiveMessageByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveMessageByIds_call method_call = new getLiveMessageByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveMessageByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public getLiveMessageByIds_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveMessageByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveMessageByIds_args args = new getLiveMessageByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveMessageByIds();
      }
    }

    public void getLiveMessagesIds(long textLiveId, long section, com.lesports.qmt.tlive.api.common.TextLiveMessageType type, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveMessagesIds_call method_call = new getLiveMessagesIds_call(textLiveId, section, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveMessagesIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long section;
      private com.lesports.qmt.tlive.api.common.TextLiveMessageType type;
      public getLiveMessagesIds_call(long textLiveId, long section, com.lesports.qmt.tlive.api.common.TextLiveMessageType type, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.section = section;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveMessagesIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveMessagesIds_args args = new getLiveMessagesIds_args();
        args.setTextLiveId(textLiveId);
        args.setSection(section);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveMessagesIds();
      }
    }

    public void getLiveMessageLatestIndex(long textLiveId, long section, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveMessageLatestIndex_call method_call = new getLiveMessageLatestIndex_call(textLiveId, section, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveMessageLatestIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long section;
      public getLiveMessageLatestIndex_call(long textLiveId, long section, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.section = section;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveMessageLatestIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveMessageLatestIndex_args args = new getLiveMessageLatestIndex_args();
        args.setTextLiveId(textLiveId);
        args.setSection(section);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveMessageLatestIndex();
      }
    }

    public void getLiveMessageByPage(long textLiveId, long section, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLiveMessageByPage_call method_call = new getLiveMessageByPage_call(textLiveId, section, page, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLiveMessageByPage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long section;
      private int page;
      public getLiveMessageByPage_call(long textLiveId, long section, int page, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.section = section;
        this.page = page;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLiveMessageByPage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLiveMessageByPage_args args = new getLiveMessageByPage_args();
        args.setTextLiveId(textLiveId);
        args.setSection(section);
        args.setPage(page);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLiveMessageByPage();
      }
    }

    public void addVote(long voteId, long optionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addVote_call method_call = new addVote_call(voteId, optionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addVote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long voteId;
      private long optionId;
      public addVote_call(long voteId, long optionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.voteId = voteId;
        this.optionId = optionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addVote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addVote_args args = new addVote_args();
        args.setVoteId(voteId);
        args.setOptionId(optionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TVote getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addVote();
      }
    }

    public void getVote(long voteId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVote_call method_call = new getVote_call(voteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long voteId;
      public getVote_call(long voteId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.voteId = voteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVote_args args = new getVote_args();
        args.setVoteId(voteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TVote getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVote();
      }
    }

    public void reportOnlineCount(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reportOnlineCount_call method_call = new reportOnlineCount_call(eid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportOnlineCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eid;
      public reportOnlineCount_call(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eid = eid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportOnlineCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportOnlineCount_args args = new reportOnlineCount_args();
        args.setEid(eid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reportOnlineCount();
      }
    }

    public void getOnlineCount(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOnlineCount_call method_call = new getOnlineCount_call(eid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOnlineCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eid;
      public getOnlineCount_call(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eid = eid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOnlineCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOnlineCount_args args = new getOnlineCount_args();
        args.setEid(eid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnlineCount();
      }
    }

    public void upDownAnchor(long textLiveId, long anchorId, com.lesports.qmt.tlive.api.common.UpDownAct act, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      upDownAnchor_call method_call = new upDownAnchor_call(textLiveId, anchorId, act, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class upDownAnchor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long anchorId;
      private com.lesports.qmt.tlive.api.common.UpDownAct act;
      public upDownAnchor_call(long textLiveId, long anchorId, com.lesports.qmt.tlive.api.common.UpDownAct act, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.anchorId = anchorId;
        this.act = act;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upDownAnchor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        upDownAnchor_args args = new upDownAnchor_args();
        args.setTextLiveId(textLiveId);
        args.setAnchorId(anchorId);
        args.setAct(act);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TAnchor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_upDownAnchor();
      }
    }

    public void getAnchorUpDown(long textLiveId, long anchorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAnchorUpDown_call method_call = new getAnchorUpDown_call(textLiveId, anchorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAnchorUpDown_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long anchorId;
      public getAnchorUpDown_call(long textLiveId, long anchorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.anchorId = anchorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAnchorUpDown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAnchorUpDown_args args = new getAnchorUpDown_args();
        args.setTextLiveId(textLiveId);
        args.setAnchorId(anchorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TAnchor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAnchorUpDown();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTextLiveById", new getTextLiveById());
      processMap.put("getMainTTextLiveByEid", new getMainTTextLiveByEid());
      processMap.put("getLiveMessageIdsByTextLiveId", new getLiveMessageIdsByTextLiveId());
      processMap.put("getLiveMessageByIds", new getLiveMessageByIds());
      processMap.put("getLiveMessagesIds", new getLiveMessagesIds());
      processMap.put("getLiveMessageLatestIndex", new getLiveMessageLatestIndex());
      processMap.put("getLiveMessageByPage", new getLiveMessageByPage());
      processMap.put("addVote", new addVote());
      processMap.put("getVote", new getVote());
      processMap.put("reportOnlineCount", new reportOnlineCount());
      processMap.put("getOnlineCount", new getOnlineCount());
      processMap.put("upDownAnchor", new upDownAnchor());
      processMap.put("getAnchorUpDown", new getAnchorUpDown());
      return processMap;
    }

    public static class getTextLiveById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTextLiveById_args> {
      public getTextLiveById() {
        super("getTextLiveById");
      }

      public getTextLiveById_args getEmptyArgsInstance() {
        return new getTextLiveById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTextLiveById_result getResult(I iface, getTextLiveById_args args) throws org.apache.thrift.TException {
        getTextLiveById_result result = new getTextLiveById_result();
        result.success = iface.getTextLiveById(args.id);
        return result;
      }
    }

    public static class getMainTTextLiveByEid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMainTTextLiveByEid_args> {
      public getMainTTextLiveByEid() {
        super("getMainTTextLiveByEid");
      }

      public getMainTTextLiveByEid_args getEmptyArgsInstance() {
        return new getMainTTextLiveByEid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMainTTextLiveByEid_result getResult(I iface, getMainTTextLiveByEid_args args) throws org.apache.thrift.TException {
        getMainTTextLiveByEid_result result = new getMainTTextLiveByEid_result();
        result.success = iface.getMainTTextLiveByEid(args.eid);
        return result;
      }
    }

    public static class getLiveMessageIdsByTextLiveId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveMessageIdsByTextLiveId_args> {
      public getLiveMessageIdsByTextLiveId() {
        super("getLiveMessageIdsByTextLiveId");
      }

      public getLiveMessageIdsByTextLiveId_args getEmptyArgsInstance() {
        return new getLiveMessageIdsByTextLiveId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveMessageIdsByTextLiveId_result getResult(I iface, getLiveMessageIdsByTextLiveId_args args) throws org.apache.thrift.TException {
        getLiveMessageIdsByTextLiveId_result result = new getLiveMessageIdsByTextLiveId_result();
        result.success = iface.getLiveMessageIdsByTextLiveId(args.textLiveId);
        return result;
      }
    }

    public static class getLiveMessageByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveMessageByIds_args> {
      public getLiveMessageByIds() {
        super("getLiveMessageByIds");
      }

      public getLiveMessageByIds_args getEmptyArgsInstance() {
        return new getLiveMessageByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveMessageByIds_result getResult(I iface, getLiveMessageByIds_args args) throws org.apache.thrift.TException {
        getLiveMessageByIds_result result = new getLiveMessageByIds_result();
        result.success = iface.getLiveMessageByIds(args.ids);
        return result;
      }
    }

    public static class getLiveMessagesIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveMessagesIds_args> {
      public getLiveMessagesIds() {
        super("getLiveMessagesIds");
      }

      public getLiveMessagesIds_args getEmptyArgsInstance() {
        return new getLiveMessagesIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveMessagesIds_result getResult(I iface, getLiveMessagesIds_args args) throws org.apache.thrift.TException {
        getLiveMessagesIds_result result = new getLiveMessagesIds_result();
        result.success = iface.getLiveMessagesIds(args.textLiveId, args.section, args.type);
        return result;
      }
    }

    public static class getLiveMessageLatestIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveMessageLatestIndex_args> {
      public getLiveMessageLatestIndex() {
        super("getLiveMessageLatestIndex");
      }

      public getLiveMessageLatestIndex_args getEmptyArgsInstance() {
        return new getLiveMessageLatestIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveMessageLatestIndex_result getResult(I iface, getLiveMessageLatestIndex_args args) throws org.apache.thrift.TException {
        getLiveMessageLatestIndex_result result = new getLiveMessageLatestIndex_result();
        result.success = iface.getLiveMessageLatestIndex(args.textLiveId, args.section);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLiveMessageByPage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLiveMessageByPage_args> {
      public getLiveMessageByPage() {
        super("getLiveMessageByPage");
      }

      public getLiveMessageByPage_args getEmptyArgsInstance() {
        return new getLiveMessageByPage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLiveMessageByPage_result getResult(I iface, getLiveMessageByPage_args args) throws org.apache.thrift.TException {
        getLiveMessageByPage_result result = new getLiveMessageByPage_result();
        result.success = iface.getLiveMessageByPage(args.textLiveId, args.section, args.page);
        return result;
      }
    }

    public static class addVote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addVote_args> {
      public addVote() {
        super("addVote");
      }

      public addVote_args getEmptyArgsInstance() {
        return new addVote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addVote_result getResult(I iface, addVote_args args) throws org.apache.thrift.TException {
        addVote_result result = new addVote_result();
        result.success = iface.addVote(args.voteId, args.optionId);
        return result;
      }
    }

    public static class getVote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVote_args> {
      public getVote() {
        super("getVote");
      }

      public getVote_args getEmptyArgsInstance() {
        return new getVote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVote_result getResult(I iface, getVote_args args) throws org.apache.thrift.TException {
        getVote_result result = new getVote_result();
        result.success = iface.getVote(args.voteId);
        return result;
      }
    }

    public static class reportOnlineCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportOnlineCount_args> {
      public reportOnlineCount() {
        super("reportOnlineCount");
      }

      public reportOnlineCount_args getEmptyArgsInstance() {
        return new reportOnlineCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportOnlineCount_result getResult(I iface, reportOnlineCount_args args) throws org.apache.thrift.TException {
        reportOnlineCount_result result = new reportOnlineCount_result();
        result.success = iface.reportOnlineCount(args.eid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getOnlineCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOnlineCount_args> {
      public getOnlineCount() {
        super("getOnlineCount");
      }

      public getOnlineCount_args getEmptyArgsInstance() {
        return new getOnlineCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOnlineCount_result getResult(I iface, getOnlineCount_args args) throws org.apache.thrift.TException {
        getOnlineCount_result result = new getOnlineCount_result();
        result.success = iface.getOnlineCount(args.eid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class upDownAnchor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, upDownAnchor_args> {
      public upDownAnchor() {
        super("upDownAnchor");
      }

      public upDownAnchor_args getEmptyArgsInstance() {
        return new upDownAnchor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public upDownAnchor_result getResult(I iface, upDownAnchor_args args) throws org.apache.thrift.TException {
        upDownAnchor_result result = new upDownAnchor_result();
        result.success = iface.upDownAnchor(args.textLiveId, args.anchorId, args.act);
        return result;
      }
    }

    public static class getAnchorUpDown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAnchorUpDown_args> {
      public getAnchorUpDown() {
        super("getAnchorUpDown");
      }

      public getAnchorUpDown_args getEmptyArgsInstance() {
        return new getAnchorUpDown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAnchorUpDown_result getResult(I iface, getAnchorUpDown_args args) throws org.apache.thrift.TException {
        getAnchorUpDown_result result = new getAnchorUpDown_result();
        result.success = iface.getAnchorUpDown(args.textLiveId, args.anchorId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTextLiveById", new getTextLiveById());
      processMap.put("getMainTTextLiveByEid", new getMainTTextLiveByEid());
      processMap.put("getLiveMessageIdsByTextLiveId", new getLiveMessageIdsByTextLiveId());
      processMap.put("getLiveMessageByIds", new getLiveMessageByIds());
      processMap.put("getLiveMessagesIds", new getLiveMessagesIds());
      processMap.put("getLiveMessageLatestIndex", new getLiveMessageLatestIndex());
      processMap.put("getLiveMessageByPage", new getLiveMessageByPage());
      processMap.put("addVote", new addVote());
      processMap.put("getVote", new getVote());
      processMap.put("reportOnlineCount", new reportOnlineCount());
      processMap.put("getOnlineCount", new getOnlineCount());
      processMap.put("upDownAnchor", new upDownAnchor());
      processMap.put("getAnchorUpDown", new getAnchorUpDown());
      return processMap;
    }

    public static class getTextLiveById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTextLiveById_args, com.lesports.qmt.tlive.api.dto.TTextLive> {
      public getTextLiveById() {
        super("getTextLiveById");
      }

      public getTextLiveById_args getEmptyArgsInstance() {
        return new getTextLiveById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TTextLive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TTextLive>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TTextLive o) {
            getTextLiveById_result result = new getTextLiveById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTextLiveById_result result = new getTextLiveById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTextLiveById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TTextLive> resultHandler) throws TException {
        iface.getTextLiveById(args.id,resultHandler);
      }
    }

    public static class getMainTTextLiveByEid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMainTTextLiveByEid_args, com.lesports.qmt.tlive.api.dto.TTextLive> {
      public getMainTTextLiveByEid() {
        super("getMainTTextLiveByEid");
      }

      public getMainTTextLiveByEid_args getEmptyArgsInstance() {
        return new getMainTTextLiveByEid_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TTextLive> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TTextLive>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TTextLive o) {
            getMainTTextLiveByEid_result result = new getMainTTextLiveByEid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMainTTextLiveByEid_result result = new getMainTTextLiveByEid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMainTTextLiveByEid_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TTextLive> resultHandler) throws TException {
        iface.getMainTTextLiveByEid(args.eid,resultHandler);
      }
    }

    public static class getLiveMessageIdsByTextLiveId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveMessageIdsByTextLiveId_args, List<String>> {
      public getLiveMessageIdsByTextLiveId() {
        super("getLiveMessageIdsByTextLiveId");
      }

      public getLiveMessageIdsByTextLiveId_args getEmptyArgsInstance() {
        return new getLiveMessageIdsByTextLiveId_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getLiveMessageIdsByTextLiveId_result result = new getLiveMessageIdsByTextLiveId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveMessageIdsByTextLiveId_result result = new getLiveMessageIdsByTextLiveId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveMessageIdsByTextLiveId_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getLiveMessageIdsByTextLiveId(args.textLiveId,resultHandler);
      }
    }

    public static class getLiveMessageByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveMessageByIds_args, List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>> {
      public getLiveMessageByIds() {
        super("getLiveMessageByIds");
      }

      public getLiveMessageByIds_args getEmptyArgsInstance() {
        return new getLiveMessageByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>>() { 
          public void onComplete(List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> o) {
            getLiveMessageByIds_result result = new getLiveMessageByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveMessageByIds_result result = new getLiveMessageByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveMessageByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>> resultHandler) throws TException {
        iface.getLiveMessageByIds(args.ids,resultHandler);
      }
    }

    public static class getLiveMessagesIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveMessagesIds_args, List<String>> {
      public getLiveMessagesIds() {
        super("getLiveMessagesIds");
      }

      public getLiveMessagesIds_args getEmptyArgsInstance() {
        return new getLiveMessagesIds_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getLiveMessagesIds_result result = new getLiveMessagesIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveMessagesIds_result result = new getLiveMessagesIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveMessagesIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getLiveMessagesIds(args.textLiveId, args.section, args.type,resultHandler);
      }
    }

    public static class getLiveMessageLatestIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveMessageLatestIndex_args, Integer> {
      public getLiveMessageLatestIndex() {
        super("getLiveMessageLatestIndex");
      }

      public getLiveMessageLatestIndex_args getEmptyArgsInstance() {
        return new getLiveMessageLatestIndex_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getLiveMessageLatestIndex_result result = new getLiveMessageLatestIndex_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveMessageLatestIndex_result result = new getLiveMessageLatestIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveMessageLatestIndex_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getLiveMessageLatestIndex(args.textLiveId, args.section,resultHandler);
      }
    }

    public static class getLiveMessageByPage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLiveMessageByPage_args, List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>> {
      public getLiveMessageByPage() {
        super("getLiveMessageByPage");
      }

      public getLiveMessageByPage_args getEmptyArgsInstance() {
        return new getLiveMessageByPage_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>>() { 
          public void onComplete(List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> o) {
            getLiveMessageByPage_result result = new getLiveMessageByPage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLiveMessageByPage_result result = new getLiveMessageByPage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLiveMessageByPage_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>> resultHandler) throws TException {
        iface.getLiveMessageByPage(args.textLiveId, args.section, args.page,resultHandler);
      }
    }

    public static class addVote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addVote_args, com.lesports.qmt.tlive.api.dto.TVote> {
      public addVote() {
        super("addVote");
      }

      public addVote_args getEmptyArgsInstance() {
        return new addVote_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TVote> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TVote>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TVote o) {
            addVote_result result = new addVote_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addVote_result result = new addVote_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addVote_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TVote> resultHandler) throws TException {
        iface.addVote(args.voteId, args.optionId,resultHandler);
      }
    }

    public static class getVote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVote_args, com.lesports.qmt.tlive.api.dto.TVote> {
      public getVote() {
        super("getVote");
      }

      public getVote_args getEmptyArgsInstance() {
        return new getVote_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TVote> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TVote>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TVote o) {
            getVote_result result = new getVote_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVote_result result = new getVote_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVote_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TVote> resultHandler) throws TException {
        iface.getVote(args.voteId,resultHandler);
      }
    }

    public static class reportOnlineCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportOnlineCount_args, Long> {
      public reportOnlineCount() {
        super("reportOnlineCount");
      }

      public reportOnlineCount_args getEmptyArgsInstance() {
        return new reportOnlineCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            reportOnlineCount_result result = new reportOnlineCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reportOnlineCount_result result = new reportOnlineCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportOnlineCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.reportOnlineCount(args.eid,resultHandler);
      }
    }

    public static class getOnlineCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOnlineCount_args, Long> {
      public getOnlineCount() {
        super("getOnlineCount");
      }

      public getOnlineCount_args getEmptyArgsInstance() {
        return new getOnlineCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getOnlineCount_result result = new getOnlineCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOnlineCount_result result = new getOnlineCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOnlineCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getOnlineCount(args.eid,resultHandler);
      }
    }

    public static class upDownAnchor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, upDownAnchor_args, com.lesports.qmt.tlive.api.dto.TAnchor> {
      public upDownAnchor() {
        super("upDownAnchor");
      }

      public upDownAnchor_args getEmptyArgsInstance() {
        return new upDownAnchor_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TAnchor o) {
            upDownAnchor_result result = new upDownAnchor_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            upDownAnchor_result result = new upDownAnchor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, upDownAnchor_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor> resultHandler) throws TException {
        iface.upDownAnchor(args.textLiveId, args.anchorId, args.act,resultHandler);
      }
    }

    public static class getAnchorUpDown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAnchorUpDown_args, com.lesports.qmt.tlive.api.dto.TAnchor> {
      public getAnchorUpDown() {
        super("getAnchorUpDown");
      }

      public getAnchorUpDown_args getEmptyArgsInstance() {
        return new getAnchorUpDown_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TAnchor o) {
            getAnchorUpDown_result result = new getAnchorUpDown_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAnchorUpDown_result result = new getAnchorUpDown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAnchorUpDown_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor> resultHandler) throws TException {
        iface.getAnchorUpDown(args.textLiveId, args.anchorId,resultHandler);
      }
    }

  }

  public static class getTextLiveById_args implements org.apache.thrift.TBase<getTextLiveById_args, getTextLiveById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTextLiveById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTextLiveById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTextLiveById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTextLiveById_argsTupleSchemeFactory());
    }

    private long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTextLiveById_args.class, metaDataMap);
    }

    public getTextLiveById_args() {
    }

    public getTextLiveById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTextLiveById_args(getTextLiveById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public getTextLiveById_args deepCopy() {
      return new getTextLiveById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTextLiveById_args)
        return this.equals((getTextLiveById_args)that);
      return false;
    }

    public boolean equals(getTextLiveById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTextLiveById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTextLiveById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTextLiveById_argsStandardSchemeFactory implements SchemeFactory {
      public getTextLiveById_argsStandardScheme getScheme() {
        return new getTextLiveById_argsStandardScheme();
      }
    }

    private static class getTextLiveById_argsStandardScheme extends StandardScheme<getTextLiveById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTextLiveById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTextLiveById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTextLiveById_argsTupleSchemeFactory implements SchemeFactory {
      public getTextLiveById_argsTupleScheme getScheme() {
        return new getTextLiveById_argsTupleScheme();
      }
    }

    private static class getTextLiveById_argsTupleScheme extends TupleScheme<getTextLiveById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTextLiveById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTextLiveById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class getTextLiveById_result implements org.apache.thrift.TBase<getTextLiveById_result, getTextLiveById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTextLiveById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTextLiveById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTextLiveById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTextLiveById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TTextLive success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TTextLive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTextLiveById_result.class, metaDataMap);
    }

    public getTextLiveById_result() {
    }

    public getTextLiveById_result(
      com.lesports.qmt.tlive.api.dto.TTextLive success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTextLiveById_result(getTextLiveById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TTextLive(other.success);
      }
    }

    public getTextLiveById_result deepCopy() {
      return new getTextLiveById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TTextLive getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TTextLive success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TTextLive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTextLiveById_result)
        return this.equals((getTextLiveById_result)that);
      return false;
    }

    public boolean equals(getTextLiveById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTextLiveById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTextLiveById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTextLiveById_resultStandardSchemeFactory implements SchemeFactory {
      public getTextLiveById_resultStandardScheme getScheme() {
        return new getTextLiveById_resultStandardScheme();
      }
    }

    private static class getTextLiveById_resultStandardScheme extends StandardScheme<getTextLiveById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTextLiveById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TTextLive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTextLiveById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTextLiveById_resultTupleSchemeFactory implements SchemeFactory {
      public getTextLiveById_resultTupleScheme getScheme() {
        return new getTextLiveById_resultTupleScheme();
      }
    }

    private static class getTextLiveById_resultTupleScheme extends TupleScheme<getTextLiveById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTextLiveById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTextLiveById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TTextLive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMainTTextLiveByEid_args implements org.apache.thrift.TBase<getMainTTextLiveByEid_args, getMainTTextLiveByEid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMainTTextLiveByEid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMainTTextLiveByEid_args");

    private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMainTTextLiveByEid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMainTTextLiveByEid_argsTupleSchemeFactory());
    }

    private long eid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EID((short)1, "eid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EID
            return EID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTTextLiveByEid_args.class, metaDataMap);
    }

    public getMainTTextLiveByEid_args() {
    }

    public getMainTTextLiveByEid_args(
      long eid)
    {
      this();
      this.eid = eid;
      setEidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMainTTextLiveByEid_args(getMainTTextLiveByEid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eid = other.eid;
    }

    public getMainTTextLiveByEid_args deepCopy() {
      return new getMainTTextLiveByEid_args(this);
    }

    @Override
    public void clear() {
      setEidIsSet(false);
      this.eid = 0;
    }

    public long getEid() {
      return this.eid;
    }

    public void setEid(long eid) {
      this.eid = eid;
      setEidIsSet(true);
    }

    public void unsetEid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
    }

    /** Returns true if field eid is set (has been assigned a value) and false otherwise */
    public boolean isSetEid() {
      return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
    }

    public void setEidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EID:
        if (value == null) {
          unsetEid();
        } else {
          setEid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EID:
        return Long.valueOf(getEid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EID:
        return isSetEid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMainTTextLiveByEid_args)
        return this.equals((getMainTTextLiveByEid_args)that);
      return false;
    }

    public boolean equals(getMainTTextLiveByEid_args that) {
      if (that == null)
        return false;

      boolean this_present_eid = true;
      boolean that_present_eid = true;
      if (this_present_eid || that_present_eid) {
        if (!(this_present_eid && that_present_eid))
          return false;
        if (this.eid != that.eid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eid = true;
      list.add(present_eid);
      if (present_eid)
        list.add(eid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMainTTextLiveByEid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMainTTextLiveByEid_args(");
      boolean first = true;

      sb.append("eid:");
      sb.append(this.eid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMainTTextLiveByEid_argsStandardSchemeFactory implements SchemeFactory {
      public getMainTTextLiveByEid_argsStandardScheme getScheme() {
        return new getMainTTextLiveByEid_argsStandardScheme();
      }
    }

    private static class getMainTTextLiveByEid_argsStandardScheme extends StandardScheme<getMainTTextLiveByEid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTTextLiveByEid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eid = iprot.readI64();
                struct.setEidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTTextLiveByEid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMainTTextLiveByEid_argsTupleSchemeFactory implements SchemeFactory {
      public getMainTTextLiveByEid_argsTupleScheme getScheme() {
        return new getMainTTextLiveByEid_argsTupleScheme();
      }
    }

    private static class getMainTTextLiveByEid_argsTupleScheme extends TupleScheme<getMainTTextLiveByEid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMainTTextLiveByEid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEid()) {
          oprot.writeI64(struct.eid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMainTTextLiveByEid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eid = iprot.readI64();
          struct.setEidIsSet(true);
        }
      }
    }

  }

  public static class getMainTTextLiveByEid_result implements org.apache.thrift.TBase<getMainTTextLiveByEid_result, getMainTTextLiveByEid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMainTTextLiveByEid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMainTTextLiveByEid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMainTTextLiveByEid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMainTTextLiveByEid_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TTextLive success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TTextLive.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMainTTextLiveByEid_result.class, metaDataMap);
    }

    public getMainTTextLiveByEid_result() {
    }

    public getMainTTextLiveByEid_result(
      com.lesports.qmt.tlive.api.dto.TTextLive success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMainTTextLiveByEid_result(getMainTTextLiveByEid_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TTextLive(other.success);
      }
    }

    public getMainTTextLiveByEid_result deepCopy() {
      return new getMainTTextLiveByEid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TTextLive getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TTextLive success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TTextLive)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMainTTextLiveByEid_result)
        return this.equals((getMainTTextLiveByEid_result)that);
      return false;
    }

    public boolean equals(getMainTTextLiveByEid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMainTTextLiveByEid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMainTTextLiveByEid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMainTTextLiveByEid_resultStandardSchemeFactory implements SchemeFactory {
      public getMainTTextLiveByEid_resultStandardScheme getScheme() {
        return new getMainTTextLiveByEid_resultStandardScheme();
      }
    }

    private static class getMainTTextLiveByEid_resultStandardScheme extends StandardScheme<getMainTTextLiveByEid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMainTTextLiveByEid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TTextLive();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMainTTextLiveByEid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMainTTextLiveByEid_resultTupleSchemeFactory implements SchemeFactory {
      public getMainTTextLiveByEid_resultTupleScheme getScheme() {
        return new getMainTTextLiveByEid_resultTupleScheme();
      }
    }

    private static class getMainTTextLiveByEid_resultTupleScheme extends TupleScheme<getMainTTextLiveByEid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMainTTextLiveByEid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMainTTextLiveByEid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TTextLive();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageIdsByTextLiveId_args implements org.apache.thrift.TBase<getLiveMessageIdsByTextLiveId_args, getLiveMessageIdsByTextLiveId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageIdsByTextLiveId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageIdsByTextLiveId_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageIdsByTextLiveId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageIdsByTextLiveId_argsTupleSchemeFactory());
    }

    private long textLiveId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageIdsByTextLiveId_args.class, metaDataMap);
    }

    public getLiveMessageIdsByTextLiveId_args() {
    }

    public getLiveMessageIdsByTextLiveId_args(
      long textLiveId)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageIdsByTextLiveId_args(getLiveMessageIdsByTextLiveId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
    }

    public getLiveMessageIdsByTextLiveId_args deepCopy() {
      return new getLiveMessageIdsByTextLiveId_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageIdsByTextLiveId_args)
        return this.equals((getLiveMessageIdsByTextLiveId_args)that);
      return false;
    }

    public boolean equals(getLiveMessageIdsByTextLiveId_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageIdsByTextLiveId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageIdsByTextLiveId_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageIdsByTextLiveId_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageIdsByTextLiveId_argsStandardScheme getScheme() {
        return new getLiveMessageIdsByTextLiveId_argsStandardScheme();
      }
    }

    private static class getLiveMessageIdsByTextLiveId_argsStandardScheme extends StandardScheme<getLiveMessageIdsByTextLiveId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageIdsByTextLiveId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageIdsByTextLiveId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageIdsByTextLiveId_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageIdsByTextLiveId_argsTupleScheme getScheme() {
        return new getLiveMessageIdsByTextLiveId_argsTupleScheme();
      }
    }

    private static class getLiveMessageIdsByTextLiveId_argsTupleScheme extends TupleScheme<getLiveMessageIdsByTextLiveId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageIdsByTextLiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageIdsByTextLiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageIdsByTextLiveId_result implements org.apache.thrift.TBase<getLiveMessageIdsByTextLiveId_result, getLiveMessageIdsByTextLiveId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageIdsByTextLiveId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageIdsByTextLiveId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageIdsByTextLiveId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageIdsByTextLiveId_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageIdsByTextLiveId_result.class, metaDataMap);
    }

    public getLiveMessageIdsByTextLiveId_result() {
    }

    public getLiveMessageIdsByTextLiveId_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageIdsByTextLiveId_result(getLiveMessageIdsByTextLiveId_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getLiveMessageIdsByTextLiveId_result deepCopy() {
      return new getLiveMessageIdsByTextLiveId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageIdsByTextLiveId_result)
        return this.equals((getLiveMessageIdsByTextLiveId_result)that);
      return false;
    }

    public boolean equals(getLiveMessageIdsByTextLiveId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageIdsByTextLiveId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageIdsByTextLiveId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageIdsByTextLiveId_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageIdsByTextLiveId_resultStandardScheme getScheme() {
        return new getLiveMessageIdsByTextLiveId_resultStandardScheme();
      }
    }

    private static class getLiveMessageIdsByTextLiveId_resultStandardScheme extends StandardScheme<getLiveMessageIdsByTextLiveId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageIdsByTextLiveId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageIdsByTextLiveId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageIdsByTextLiveId_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageIdsByTextLiveId_resultTupleScheme getScheme() {
        return new getLiveMessageIdsByTextLiveId_resultTupleScheme();
      }
    }

    private static class getLiveMessageIdsByTextLiveId_resultTupleScheme extends TupleScheme<getLiveMessageIdsByTextLiveId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageIdsByTextLiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageIdsByTextLiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageByIds_args implements org.apache.thrift.TBase<getLiveMessageByIds_args, getLiveMessageByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageByIds_args.class, metaDataMap);
    }

    public getLiveMessageByIds_args() {
    }

    public getLiveMessageByIds_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageByIds_args(getLiveMessageByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public getLiveMessageByIds_args deepCopy() {
      return new getLiveMessageByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageByIds_args)
        return this.equals((getLiveMessageByIds_args)that);
      return false;
    }

    public boolean equals(getLiveMessageByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageByIds_argsStandardScheme getScheme() {
        return new getLiveMessageByIds_argsStandardScheme();
      }
    }

    private static class getLiveMessageByIds_argsStandardScheme extends StandardScheme<getLiveMessageByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list8.size);
                  long _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readI64();
                    struct.ids.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter11 : struct.ids)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageByIds_argsTupleScheme getScheme() {
        return new getLiveMessageByIds_argsTupleScheme();
      }
    }

    private static class getLiveMessageByIds_argsTupleScheme extends TupleScheme<getLiveMessageByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter12 : struct.ids)
            {
              oprot.writeI64(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list13.size);
            long _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readI64();
              struct.ids.add(_elem14);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageByIds_result implements org.apache.thrift.TBase<getLiveMessageByIds_result, getLiveMessageByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TTextLiveMessage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageByIds_result.class, metaDataMap);
    }

    public getLiveMessageByIds_result() {
    }

    public getLiveMessageByIds_result(
      List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageByIds_result(getLiveMessageByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> __this__success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>(other.success.size());
        for (com.lesports.qmt.tlive.api.dto.TTextLiveMessage other_element : other.success) {
          __this__success.add(new com.lesports.qmt.tlive.api.dto.TTextLiveMessage(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLiveMessageByIds_result deepCopy() {
      return new getLiveMessageByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.tlive.api.dto.TTextLiveMessage elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageByIds_result)
        return this.equals((getLiveMessageByIds_result)that);
      return false;
    }

    public boolean equals(getLiveMessageByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageByIds_resultStandardScheme getScheme() {
        return new getLiveMessageByIds_resultStandardScheme();
      }
    }

    private static class getLiveMessageByIds_resultStandardScheme extends StandardScheme<getLiveMessageByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>(_list16.size);
                  com.lesports.qmt.tlive.api.dto.TTextLiveMessage _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.lesports.qmt.tlive.api.dto.TTextLiveMessage();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.tlive.api.dto.TTextLiveMessage _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageByIds_resultTupleScheme getScheme() {
        return new getLiveMessageByIds_resultTupleScheme();
      }
    }

    private static class getLiveMessageByIds_resultTupleScheme extends TupleScheme<getLiveMessageByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.tlive.api.dto.TTextLiveMessage _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>(_list21.size);
            com.lesports.qmt.tlive.api.dto.TTextLiveMessage _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.lesports.qmt.tlive.api.dto.TTextLiveMessage();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessagesIds_args implements org.apache.thrift.TBase<getLiveMessagesIds_args, getLiveMessagesIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessagesIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessagesIds_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessagesIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessagesIds_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long section; // required
    private com.lesports.qmt.tlive.api.common.TextLiveMessageType type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      SECTION((short)2, "section"),
      /**
       * 
       * @see com.lesports.qmt.tlive.api.common.TextLiveMessageType
       */
      TYPE((short)3, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // SECTION
            return SECTION;
          case 3: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __SECTION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.tlive.api.common.TextLiveMessageType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessagesIds_args.class, metaDataMap);
    }

    public getLiveMessagesIds_args() {
    }

    public getLiveMessagesIds_args(
      long textLiveId,
      long section,
      com.lesports.qmt.tlive.api.common.TextLiveMessageType type)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.section = section;
      setSectionIsSet(true);
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessagesIds_args(getLiveMessagesIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.section = other.section;
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public getLiveMessagesIds_args deepCopy() {
      return new getLiveMessagesIds_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setSectionIsSet(false);
      this.section = 0;
      this.type = null;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getSection() {
      return this.section;
    }

    public void setSection(long section) {
      this.section = section;
      setSectionIsSet(true);
    }

    public void unsetSection() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECTION_ISSET_ID);
    }

    /** Returns true if field section is set (has been assigned a value) and false otherwise */
    public boolean isSetSection() {
      return EncodingUtils.testBit(__isset_bitfield, __SECTION_ISSET_ID);
    }

    public void setSectionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECTION_ISSET_ID, value);
    }

    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.TextLiveMessageType
     */
    public com.lesports.qmt.tlive.api.common.TextLiveMessageType getType() {
      return this.type;
    }

    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.TextLiveMessageType
     */
    public void setType(com.lesports.qmt.tlive.api.common.TextLiveMessageType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case SECTION:
        if (value == null) {
          unsetSection();
        } else {
          setSection((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((com.lesports.qmt.tlive.api.common.TextLiveMessageType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case SECTION:
        return Long.valueOf(getSection());

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case SECTION:
        return isSetSection();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessagesIds_args)
        return this.equals((getLiveMessagesIds_args)that);
      return false;
    }

    public boolean equals(getLiveMessagesIds_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_section = true;
      boolean that_present_section = true;
      if (this_present_section || that_present_section) {
        if (!(this_present_section && that_present_section))
          return false;
        if (this.section != that.section)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_section = true;
      list.add(present_section);
      if (present_section)
        list.add(section);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessagesIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessagesIds_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("section:");
      sb.append(this.section);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessagesIds_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveMessagesIds_argsStandardScheme getScheme() {
        return new getLiveMessagesIds_argsStandardScheme();
      }
    }

    private static class getLiveMessagesIds_argsStandardScheme extends StandardScheme<getLiveMessagesIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessagesIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.section = iprot.readI64();
                struct.setSectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.lesports.qmt.tlive.api.common.TextLiveMessageType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessagesIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECTION_FIELD_DESC);
        oprot.writeI64(struct.section);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessagesIds_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveMessagesIds_argsTupleScheme getScheme() {
        return new getLiveMessagesIds_argsTupleScheme();
      }
    }

    private static class getLiveMessagesIds_argsTupleScheme extends TupleScheme<getLiveMessagesIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessagesIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetSection()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetSection()) {
          oprot.writeI64(struct.section);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessagesIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.section = iprot.readI64();
          struct.setSectionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = com.lesports.qmt.tlive.api.common.TextLiveMessageType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessagesIds_result implements org.apache.thrift.TBase<getLiveMessagesIds_result, getLiveMessagesIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessagesIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessagesIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessagesIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessagesIds_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessagesIds_result.class, metaDataMap);
    }

    public getLiveMessagesIds_result() {
    }

    public getLiveMessagesIds_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessagesIds_result(getLiveMessagesIds_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getLiveMessagesIds_result deepCopy() {
      return new getLiveMessagesIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessagesIds_result)
        return this.equals((getLiveMessagesIds_result)that);
      return false;
    }

    public boolean equals(getLiveMessagesIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessagesIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessagesIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessagesIds_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveMessagesIds_resultStandardScheme getScheme() {
        return new getLiveMessagesIds_resultStandardScheme();
      }
    }

    private static class getLiveMessagesIds_resultStandardScheme extends StandardScheme<getLiveMessagesIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessagesIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list24.size);
                  String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessagesIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessagesIds_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveMessagesIds_resultTupleScheme getScheme() {
        return new getLiveMessagesIds_resultTupleScheme();
      }
    }

    private static class getLiveMessagesIds_resultTupleScheme extends TupleScheme<getLiveMessagesIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessagesIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessagesIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list29.size);
            String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageLatestIndex_args implements org.apache.thrift.TBase<getLiveMessageLatestIndex_args, getLiveMessageLatestIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageLatestIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageLatestIndex_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageLatestIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageLatestIndex_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long section; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      SECTION((short)2, "section");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // SECTION
            return SECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __SECTION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageLatestIndex_args.class, metaDataMap);
    }

    public getLiveMessageLatestIndex_args() {
    }

    public getLiveMessageLatestIndex_args(
      long textLiveId,
      long section)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.section = section;
      setSectionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageLatestIndex_args(getLiveMessageLatestIndex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.section = other.section;
    }

    public getLiveMessageLatestIndex_args deepCopy() {
      return new getLiveMessageLatestIndex_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setSectionIsSet(false);
      this.section = 0;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getSection() {
      return this.section;
    }

    public void setSection(long section) {
      this.section = section;
      setSectionIsSet(true);
    }

    public void unsetSection() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECTION_ISSET_ID);
    }

    /** Returns true if field section is set (has been assigned a value) and false otherwise */
    public boolean isSetSection() {
      return EncodingUtils.testBit(__isset_bitfield, __SECTION_ISSET_ID);
    }

    public void setSectionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECTION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case SECTION:
        if (value == null) {
          unsetSection();
        } else {
          setSection((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case SECTION:
        return Long.valueOf(getSection());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case SECTION:
        return isSetSection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageLatestIndex_args)
        return this.equals((getLiveMessageLatestIndex_args)that);
      return false;
    }

    public boolean equals(getLiveMessageLatestIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_section = true;
      boolean that_present_section = true;
      if (this_present_section || that_present_section) {
        if (!(this_present_section && that_present_section))
          return false;
        if (this.section != that.section)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_section = true;
      list.add(present_section);
      if (present_section)
        list.add(section);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageLatestIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageLatestIndex_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("section:");
      sb.append(this.section);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageLatestIndex_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageLatestIndex_argsStandardScheme getScheme() {
        return new getLiveMessageLatestIndex_argsStandardScheme();
      }
    }

    private static class getLiveMessageLatestIndex_argsStandardScheme extends StandardScheme<getLiveMessageLatestIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageLatestIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.section = iprot.readI64();
                struct.setSectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageLatestIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECTION_FIELD_DESC);
        oprot.writeI64(struct.section);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageLatestIndex_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageLatestIndex_argsTupleScheme getScheme() {
        return new getLiveMessageLatestIndex_argsTupleScheme();
      }
    }

    private static class getLiveMessageLatestIndex_argsTupleScheme extends TupleScheme<getLiveMessageLatestIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageLatestIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetSection()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetSection()) {
          oprot.writeI64(struct.section);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageLatestIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.section = iprot.readI64();
          struct.setSectionIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageLatestIndex_result implements org.apache.thrift.TBase<getLiveMessageLatestIndex_result, getLiveMessageLatestIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageLatestIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageLatestIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageLatestIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageLatestIndex_resultTupleSchemeFactory());
    }

    private int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageLatestIndex_result.class, metaDataMap);
    }

    public getLiveMessageLatestIndex_result() {
    }

    public getLiveMessageLatestIndex_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageLatestIndex_result(getLiveMessageLatestIndex_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getLiveMessageLatestIndex_result deepCopy() {
      return new getLiveMessageLatestIndex_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageLatestIndex_result)
        return this.equals((getLiveMessageLatestIndex_result)that);
      return false;
    }

    public boolean equals(getLiveMessageLatestIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageLatestIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageLatestIndex_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageLatestIndex_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageLatestIndex_resultStandardScheme getScheme() {
        return new getLiveMessageLatestIndex_resultStandardScheme();
      }
    }

    private static class getLiveMessageLatestIndex_resultStandardScheme extends StandardScheme<getLiveMessageLatestIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageLatestIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageLatestIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageLatestIndex_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageLatestIndex_resultTupleScheme getScheme() {
        return new getLiveMessageLatestIndex_resultTupleScheme();
      }
    }

    private static class getLiveMessageLatestIndex_resultTupleScheme extends TupleScheme<getLiveMessageLatestIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageLatestIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageLatestIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageByPage_args implements org.apache.thrift.TBase<getLiveMessageByPage_args, getLiveMessageByPage_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageByPage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageByPage_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageByPage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageByPage_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long section; // required
    private int page; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      SECTION((short)2, "section"),
      PAGE((short)3, "page");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // SECTION
            return SECTION;
          case 3: // PAGE
            return PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __SECTION_ISSET_ID = 1;
    private static final int __PAGE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageByPage_args.class, metaDataMap);
    }

    public getLiveMessageByPage_args() {
    }

    public getLiveMessageByPage_args(
      long textLiveId,
      long section,
      int page)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.section = section;
      setSectionIsSet(true);
      this.page = page;
      setPageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageByPage_args(getLiveMessageByPage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.section = other.section;
      this.page = other.page;
    }

    public getLiveMessageByPage_args deepCopy() {
      return new getLiveMessageByPage_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setSectionIsSet(false);
      this.section = 0;
      setPageIsSet(false);
      this.page = 0;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getSection() {
      return this.section;
    }

    public void setSection(long section) {
      this.section = section;
      setSectionIsSet(true);
    }

    public void unsetSection() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECTION_ISSET_ID);
    }

    /** Returns true if field section is set (has been assigned a value) and false otherwise */
    public boolean isSetSection() {
      return EncodingUtils.testBit(__isset_bitfield, __SECTION_ISSET_ID);
    }

    public void setSectionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECTION_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public void setPage(int page) {
      this.page = page;
      setPageIsSet(true);
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case SECTION:
        if (value == null) {
          unsetSection();
        } else {
          setSection((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case SECTION:
        return Long.valueOf(getSection());

      case PAGE:
        return Integer.valueOf(getPage());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case SECTION:
        return isSetSection();
      case PAGE:
        return isSetPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageByPage_args)
        return this.equals((getLiveMessageByPage_args)that);
      return false;
    }

    public boolean equals(getLiveMessageByPage_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_section = true;
      boolean that_present_section = true;
      if (this_present_section || that_present_section) {
        if (!(this_present_section && that_present_section))
          return false;
        if (this.section != that.section)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_section = true;
      list.add(present_section);
      if (present_section)
        list.add(section);

      boolean present_page = true;
      list.add(present_page);
      if (present_page)
        list.add(page);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageByPage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageByPage_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("section:");
      sb.append(this.section);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageByPage_argsStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageByPage_argsStandardScheme getScheme() {
        return new getLiveMessageByPage_argsStandardScheme();
      }
    }

    private static class getLiveMessageByPage_argsStandardScheme extends StandardScheme<getLiveMessageByPage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageByPage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.section = iprot.readI64();
                struct.setSectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageByPage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECTION_FIELD_DESC);
        oprot.writeI64(struct.section);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageByPage_argsTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageByPage_argsTupleScheme getScheme() {
        return new getLiveMessageByPage_argsTupleScheme();
      }
    }

    private static class getLiveMessageByPage_argsTupleScheme extends TupleScheme<getLiveMessageByPage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetSection()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetSection()) {
          oprot.writeI64(struct.section);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByPage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.section = iprot.readI64();
          struct.setSectionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
      }
    }

  }

  public static class getLiveMessageByPage_result implements org.apache.thrift.TBase<getLiveMessageByPage_result, getLiveMessageByPage_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLiveMessageByPage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLiveMessageByPage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLiveMessageByPage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLiveMessageByPage_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TTextLiveMessage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLiveMessageByPage_result.class, metaDataMap);
    }

    public getLiveMessageByPage_result() {
    }

    public getLiveMessageByPage_result(
      List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLiveMessageByPage_result(getLiveMessageByPage_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> __this__success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>(other.success.size());
        for (com.lesports.qmt.tlive.api.dto.TTextLiveMessage other_element : other.success) {
          __this__success.add(new com.lesports.qmt.tlive.api.dto.TTextLiveMessage(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLiveMessageByPage_result deepCopy() {
      return new getLiveMessageByPage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.tlive.api.dto.TTextLiveMessage elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLiveMessageByPage_result)
        return this.equals((getLiveMessageByPage_result)that);
      return false;
    }

    public boolean equals(getLiveMessageByPage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLiveMessageByPage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLiveMessageByPage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLiveMessageByPage_resultStandardSchemeFactory implements SchemeFactory {
      public getLiveMessageByPage_resultStandardScheme getScheme() {
        return new getLiveMessageByPage_resultStandardScheme();
      }
    }

    private static class getLiveMessageByPage_resultStandardScheme extends StandardScheme<getLiveMessageByPage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLiveMessageByPage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>(_list32.size);
                  com.lesports.qmt.tlive.api.dto.TTextLiveMessage _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.lesports.qmt.tlive.api.dto.TTextLiveMessage();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLiveMessageByPage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.tlive.api.dto.TTextLiveMessage _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLiveMessageByPage_resultTupleSchemeFactory implements SchemeFactory {
      public getLiveMessageByPage_resultTupleScheme getScheme() {
        return new getLiveMessageByPage_resultTupleScheme();
      }
    }

    private static class getLiveMessageByPage_resultTupleScheme extends TupleScheme<getLiveMessageByPage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.tlive.api.dto.TTextLiveMessage _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLiveMessageByPage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.tlive.api.dto.TTextLiveMessage>(_list37.size);
            com.lesports.qmt.tlive.api.dto.TTextLiveMessage _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.lesports.qmt.tlive.api.dto.TTextLiveMessage();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addVote_args implements org.apache.thrift.TBase<addVote_args, addVote_args._Fields>, java.io.Serializable, Cloneable, Comparable<addVote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVote_args");

    private static final org.apache.thrift.protocol.TField VOTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("voteId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("optionId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVote_argsTupleSchemeFactory());
    }

    private long voteId; // required
    private long optionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VOTE_ID((short)1, "voteId"),
      OPTION_ID((short)2, "optionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VOTE_ID
            return VOTE_ID;
          case 2: // OPTION_ID
            return OPTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VOTEID_ISSET_ID = 0;
    private static final int __OPTIONID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VOTE_ID, new org.apache.thrift.meta_data.FieldMetaData("voteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("optionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVote_args.class, metaDataMap);
    }

    public addVote_args() {
    }

    public addVote_args(
      long voteId,
      long optionId)
    {
      this();
      this.voteId = voteId;
      setVoteIdIsSet(true);
      this.optionId = optionId;
      setOptionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVote_args(addVote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.voteId = other.voteId;
      this.optionId = other.optionId;
    }

    public addVote_args deepCopy() {
      return new addVote_args(this);
    }

    @Override
    public void clear() {
      setVoteIdIsSet(false);
      this.voteId = 0;
      setOptionIdIsSet(false);
      this.optionId = 0;
    }

    public long getVoteId() {
      return this.voteId;
    }

    public void setVoteId(long voteId) {
      this.voteId = voteId;
      setVoteIdIsSet(true);
    }

    public void unsetVoteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTEID_ISSET_ID);
    }

    /** Returns true if field voteId is set (has been assigned a value) and false otherwise */
    public boolean isSetVoteId() {
      return EncodingUtils.testBit(__isset_bitfield, __VOTEID_ISSET_ID);
    }

    public void setVoteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTEID_ISSET_ID, value);
    }

    public long getOptionId() {
      return this.optionId;
    }

    public void setOptionId(long optionId) {
      this.optionId = optionId;
      setOptionIdIsSet(true);
    }

    public void unsetOptionId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPTIONID_ISSET_ID);
    }

    /** Returns true if field optionId is set (has been assigned a value) and false otherwise */
    public boolean isSetOptionId() {
      return EncodingUtils.testBit(__isset_bitfield, __OPTIONID_ISSET_ID);
    }

    public void setOptionIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPTIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VOTE_ID:
        if (value == null) {
          unsetVoteId();
        } else {
          setVoteId((Long)value);
        }
        break;

      case OPTION_ID:
        if (value == null) {
          unsetOptionId();
        } else {
          setOptionId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VOTE_ID:
        return Long.valueOf(getVoteId());

      case OPTION_ID:
        return Long.valueOf(getOptionId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VOTE_ID:
        return isSetVoteId();
      case OPTION_ID:
        return isSetOptionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVote_args)
        return this.equals((addVote_args)that);
      return false;
    }

    public boolean equals(addVote_args that) {
      if (that == null)
        return false;

      boolean this_present_voteId = true;
      boolean that_present_voteId = true;
      if (this_present_voteId || that_present_voteId) {
        if (!(this_present_voteId && that_present_voteId))
          return false;
        if (this.voteId != that.voteId)
          return false;
      }

      boolean this_present_optionId = true;
      boolean that_present_optionId = true;
      if (this_present_optionId || that_present_optionId) {
        if (!(this_present_optionId && that_present_optionId))
          return false;
        if (this.optionId != that.optionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_voteId = true;
      list.add(present_voteId);
      if (present_voteId)
        list.add(voteId);

      boolean present_optionId = true;
      list.add(present_optionId);
      if (present_optionId)
        list.add(optionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVoteId()).compareTo(other.isSetVoteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVoteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voteId, other.voteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOptionId()).compareTo(other.isSetOptionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionId, other.optionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVote_args(");
      boolean first = true;

      sb.append("voteId:");
      sb.append(this.voteId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("optionId:");
      sb.append(this.optionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVote_argsStandardSchemeFactory implements SchemeFactory {
      public addVote_argsStandardScheme getScheme() {
        return new addVote_argsStandardScheme();
      }
    }

    private static class addVote_argsStandardScheme extends StandardScheme<addVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VOTE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.voteId = iprot.readI64();
                struct.setVoteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.optionId = iprot.readI64();
                struct.setOptionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VOTE_ID_FIELD_DESC);
        oprot.writeI64(struct.voteId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OPTION_ID_FIELD_DESC);
        oprot.writeI64(struct.optionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVote_argsTupleSchemeFactory implements SchemeFactory {
      public addVote_argsTupleScheme getScheme() {
        return new addVote_argsTupleScheme();
      }
    }

    private static class addVote_argsTupleScheme extends TupleScheme<addVote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVoteId()) {
          optionals.set(0);
        }
        if (struct.isSetOptionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVoteId()) {
          oprot.writeI64(struct.voteId);
        }
        if (struct.isSetOptionId()) {
          oprot.writeI64(struct.optionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.voteId = iprot.readI64();
          struct.setVoteIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.optionId = iprot.readI64();
          struct.setOptionIdIsSet(true);
        }
      }
    }

  }

  public static class addVote_result implements org.apache.thrift.TBase<addVote_result, addVote_result._Fields>, java.io.Serializable, Cloneable, Comparable<addVote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addVote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addVote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addVote_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TVote success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TVote.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addVote_result.class, metaDataMap);
    }

    public addVote_result() {
    }

    public addVote_result(
      com.lesports.qmt.tlive.api.dto.TVote success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addVote_result(addVote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TVote(other.success);
      }
    }

    public addVote_result deepCopy() {
      return new addVote_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TVote getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TVote success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TVote)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addVote_result)
        return this.equals((addVote_result)that);
      return false;
    }

    public boolean equals(addVote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addVote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addVote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addVote_resultStandardSchemeFactory implements SchemeFactory {
      public addVote_resultStandardScheme getScheme() {
        return new addVote_resultStandardScheme();
      }
    }

    private static class addVote_resultStandardScheme extends StandardScheme<addVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TVote();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addVote_resultTupleSchemeFactory implements SchemeFactory {
      public addVote_resultTupleScheme getScheme() {
        return new addVote_resultTupleScheme();
      }
    }

    private static class addVote_resultTupleScheme extends TupleScheme<addVote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TVote();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVote_args implements org.apache.thrift.TBase<getVote_args, getVote_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVote_args");

    private static final org.apache.thrift.protocol.TField VOTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("voteId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVote_argsTupleSchemeFactory());
    }

    private long voteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VOTE_ID((short)1, "voteId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VOTE_ID
            return VOTE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VOTEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VOTE_ID, new org.apache.thrift.meta_data.FieldMetaData("voteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVote_args.class, metaDataMap);
    }

    public getVote_args() {
    }

    public getVote_args(
      long voteId)
    {
      this();
      this.voteId = voteId;
      setVoteIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVote_args(getVote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.voteId = other.voteId;
    }

    public getVote_args deepCopy() {
      return new getVote_args(this);
    }

    @Override
    public void clear() {
      setVoteIdIsSet(false);
      this.voteId = 0;
    }

    public long getVoteId() {
      return this.voteId;
    }

    public void setVoteId(long voteId) {
      this.voteId = voteId;
      setVoteIdIsSet(true);
    }

    public void unsetVoteId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOTEID_ISSET_ID);
    }

    /** Returns true if field voteId is set (has been assigned a value) and false otherwise */
    public boolean isSetVoteId() {
      return EncodingUtils.testBit(__isset_bitfield, __VOTEID_ISSET_ID);
    }

    public void setVoteIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOTEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VOTE_ID:
        if (value == null) {
          unsetVoteId();
        } else {
          setVoteId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VOTE_ID:
        return Long.valueOf(getVoteId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VOTE_ID:
        return isSetVoteId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVote_args)
        return this.equals((getVote_args)that);
      return false;
    }

    public boolean equals(getVote_args that) {
      if (that == null)
        return false;

      boolean this_present_voteId = true;
      boolean that_present_voteId = true;
      if (this_present_voteId || that_present_voteId) {
        if (!(this_present_voteId && that_present_voteId))
          return false;
        if (this.voteId != that.voteId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_voteId = true;
      list.add(present_voteId);
      if (present_voteId)
        list.add(voteId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVoteId()).compareTo(other.isSetVoteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVoteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voteId, other.voteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVote_args(");
      boolean first = true;

      sb.append("voteId:");
      sb.append(this.voteId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVote_argsStandardSchemeFactory implements SchemeFactory {
      public getVote_argsStandardScheme getScheme() {
        return new getVote_argsStandardScheme();
      }
    }

    private static class getVote_argsStandardScheme extends StandardScheme<getVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VOTE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.voteId = iprot.readI64();
                struct.setVoteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VOTE_ID_FIELD_DESC);
        oprot.writeI64(struct.voteId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVote_argsTupleSchemeFactory implements SchemeFactory {
      public getVote_argsTupleScheme getScheme() {
        return new getVote_argsTupleScheme();
      }
    }

    private static class getVote_argsTupleScheme extends TupleScheme<getVote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVoteId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVoteId()) {
          oprot.writeI64(struct.voteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.voteId = iprot.readI64();
          struct.setVoteIdIsSet(true);
        }
      }
    }

  }

  public static class getVote_result implements org.apache.thrift.TBase<getVote_result, getVote_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVote_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TVote success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TVote.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVote_result.class, metaDataMap);
    }

    public getVote_result() {
    }

    public getVote_result(
      com.lesports.qmt.tlive.api.dto.TVote success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVote_result(getVote_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TVote(other.success);
      }
    }

    public getVote_result deepCopy() {
      return new getVote_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TVote getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TVote success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TVote)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVote_result)
        return this.equals((getVote_result)that);
      return false;
    }

    public boolean equals(getVote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVote_resultStandardSchemeFactory implements SchemeFactory {
      public getVote_resultStandardScheme getScheme() {
        return new getVote_resultStandardScheme();
      }
    }

    private static class getVote_resultStandardScheme extends StandardScheme<getVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TVote();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVote_resultTupleSchemeFactory implements SchemeFactory {
      public getVote_resultTupleScheme getScheme() {
        return new getVote_resultTupleScheme();
      }
    }

    private static class getVote_resultTupleScheme extends TupleScheme<getVote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TVote();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reportOnlineCount_args implements org.apache.thrift.TBase<reportOnlineCount_args, reportOnlineCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportOnlineCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportOnlineCount_args");

    private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportOnlineCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportOnlineCount_argsTupleSchemeFactory());
    }

    private long eid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EID((short)1, "eid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EID
            return EID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportOnlineCount_args.class, metaDataMap);
    }

    public reportOnlineCount_args() {
    }

    public reportOnlineCount_args(
      long eid)
    {
      this();
      this.eid = eid;
      setEidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportOnlineCount_args(reportOnlineCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eid = other.eid;
    }

    public reportOnlineCount_args deepCopy() {
      return new reportOnlineCount_args(this);
    }

    @Override
    public void clear() {
      setEidIsSet(false);
      this.eid = 0;
    }

    public long getEid() {
      return this.eid;
    }

    public void setEid(long eid) {
      this.eid = eid;
      setEidIsSet(true);
    }

    public void unsetEid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
    }

    /** Returns true if field eid is set (has been assigned a value) and false otherwise */
    public boolean isSetEid() {
      return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
    }

    public void setEidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EID:
        if (value == null) {
          unsetEid();
        } else {
          setEid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EID:
        return Long.valueOf(getEid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EID:
        return isSetEid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportOnlineCount_args)
        return this.equals((reportOnlineCount_args)that);
      return false;
    }

    public boolean equals(reportOnlineCount_args that) {
      if (that == null)
        return false;

      boolean this_present_eid = true;
      boolean that_present_eid = true;
      if (this_present_eid || that_present_eid) {
        if (!(this_present_eid && that_present_eid))
          return false;
        if (this.eid != that.eid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eid = true;
      list.add(present_eid);
      if (present_eid)
        list.add(eid);

      return list.hashCode();
    }

    @Override
    public int compareTo(reportOnlineCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportOnlineCount_args(");
      boolean first = true;

      sb.append("eid:");
      sb.append(this.eid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportOnlineCount_argsStandardSchemeFactory implements SchemeFactory {
      public reportOnlineCount_argsStandardScheme getScheme() {
        return new reportOnlineCount_argsStandardScheme();
      }
    }

    private static class reportOnlineCount_argsStandardScheme extends StandardScheme<reportOnlineCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportOnlineCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eid = iprot.readI64();
                struct.setEidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportOnlineCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportOnlineCount_argsTupleSchemeFactory implements SchemeFactory {
      public reportOnlineCount_argsTupleScheme getScheme() {
        return new reportOnlineCount_argsTupleScheme();
      }
    }

    private static class reportOnlineCount_argsTupleScheme extends TupleScheme<reportOnlineCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEid()) {
          oprot.writeI64(struct.eid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eid = iprot.readI64();
          struct.setEidIsSet(true);
        }
      }
    }

  }

  public static class reportOnlineCount_result implements org.apache.thrift.TBase<reportOnlineCount_result, reportOnlineCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportOnlineCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportOnlineCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportOnlineCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportOnlineCount_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportOnlineCount_result.class, metaDataMap);
    }

    public reportOnlineCount_result() {
    }

    public reportOnlineCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportOnlineCount_result(reportOnlineCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public reportOnlineCount_result deepCopy() {
      return new reportOnlineCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportOnlineCount_result)
        return this.equals((reportOnlineCount_result)that);
      return false;
    }

    public boolean equals(reportOnlineCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(reportOnlineCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportOnlineCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportOnlineCount_resultStandardSchemeFactory implements SchemeFactory {
      public reportOnlineCount_resultStandardScheme getScheme() {
        return new reportOnlineCount_resultStandardScheme();
      }
    }

    private static class reportOnlineCount_resultStandardScheme extends StandardScheme<reportOnlineCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportOnlineCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportOnlineCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportOnlineCount_resultTupleSchemeFactory implements SchemeFactory {
      public reportOnlineCount_resultTupleScheme getScheme() {
        return new reportOnlineCount_resultTupleScheme();
      }
    }

    private static class reportOnlineCount_resultTupleScheme extends TupleScheme<reportOnlineCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOnlineCount_args implements org.apache.thrift.TBase<getOnlineCount_args, getOnlineCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineCount_args");

    private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineCount_argsTupleSchemeFactory());
    }

    private long eid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EID((short)1, "eid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EID
            return EID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineCount_args.class, metaDataMap);
    }

    public getOnlineCount_args() {
    }

    public getOnlineCount_args(
      long eid)
    {
      this();
      this.eid = eid;
      setEidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineCount_args(getOnlineCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eid = other.eid;
    }

    public getOnlineCount_args deepCopy() {
      return new getOnlineCount_args(this);
    }

    @Override
    public void clear() {
      setEidIsSet(false);
      this.eid = 0;
    }

    public long getEid() {
      return this.eid;
    }

    public void setEid(long eid) {
      this.eid = eid;
      setEidIsSet(true);
    }

    public void unsetEid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
    }

    /** Returns true if field eid is set (has been assigned a value) and false otherwise */
    public boolean isSetEid() {
      return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
    }

    public void setEidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EID:
        if (value == null) {
          unsetEid();
        } else {
          setEid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EID:
        return Long.valueOf(getEid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EID:
        return isSetEid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineCount_args)
        return this.equals((getOnlineCount_args)that);
      return false;
    }

    public boolean equals(getOnlineCount_args that) {
      if (that == null)
        return false;

      boolean this_present_eid = true;
      boolean that_present_eid = true;
      if (this_present_eid || that_present_eid) {
        if (!(this_present_eid && that_present_eid))
          return false;
        if (this.eid != that.eid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eid = true;
      list.add(present_eid);
      if (present_eid)
        list.add(eid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineCount_args(");
      boolean first = true;

      sb.append("eid:");
      sb.append(this.eid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineCount_argsStandardSchemeFactory implements SchemeFactory {
      public getOnlineCount_argsStandardScheme getScheme() {
        return new getOnlineCount_argsStandardScheme();
      }
    }

    private static class getOnlineCount_argsStandardScheme extends StandardScheme<getOnlineCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eid = iprot.readI64();
                struct.setEidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineCount_argsTupleSchemeFactory implements SchemeFactory {
      public getOnlineCount_argsTupleScheme getScheme() {
        return new getOnlineCount_argsTupleScheme();
      }
    }

    private static class getOnlineCount_argsTupleScheme extends TupleScheme<getOnlineCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEid()) {
          oprot.writeI64(struct.eid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eid = iprot.readI64();
          struct.setEidIsSet(true);
        }
      }
    }

  }

  public static class getOnlineCount_result implements org.apache.thrift.TBase<getOnlineCount_result, getOnlineCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineCount_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineCount_result.class, metaDataMap);
    }

    public getOnlineCount_result() {
    }

    public getOnlineCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineCount_result(getOnlineCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getOnlineCount_result deepCopy() {
      return new getOnlineCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineCount_result)
        return this.equals((getOnlineCount_result)that);
      return false;
    }

    public boolean equals(getOnlineCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineCount_resultStandardSchemeFactory implements SchemeFactory {
      public getOnlineCount_resultStandardScheme getScheme() {
        return new getOnlineCount_resultStandardScheme();
      }
    }

    private static class getOnlineCount_resultStandardScheme extends StandardScheme<getOnlineCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineCount_resultTupleSchemeFactory implements SchemeFactory {
      public getOnlineCount_resultTupleScheme getScheme() {
        return new getOnlineCount_resultTupleScheme();
      }
    }

    private static class getOnlineCount_resultTupleScheme extends TupleScheme<getOnlineCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class upDownAnchor_args implements org.apache.thrift.TBase<upDownAnchor_args, upDownAnchor_args._Fields>, java.io.Serializable, Cloneable, Comparable<upDownAnchor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upDownAnchor_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ANCHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("anchorId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ACT_FIELD_DESC = new org.apache.thrift.protocol.TField("act", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upDownAnchor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upDownAnchor_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long anchorId; // required
    private com.lesports.qmt.tlive.api.common.UpDownAct act; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      ANCHOR_ID((short)2, "anchorId"),
      /**
       * 
       * @see com.lesports.qmt.tlive.api.common.UpDownAct
       */
      ACT((short)3, "act");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // ANCHOR_ID
            return ANCHOR_ID;
          case 3: // ACT
            return ACT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __ANCHORID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ANCHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("anchorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ACT, new org.apache.thrift.meta_data.FieldMetaData("act", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.tlive.api.common.UpDownAct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upDownAnchor_args.class, metaDataMap);
    }

    public upDownAnchor_args() {
    }

    public upDownAnchor_args(
      long textLiveId,
      long anchorId,
      com.lesports.qmt.tlive.api.common.UpDownAct act)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
      this.act = act;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upDownAnchor_args(upDownAnchor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.anchorId = other.anchorId;
      if (other.isSetAct()) {
        this.act = other.act;
      }
    }

    public upDownAnchor_args deepCopy() {
      return new upDownAnchor_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setAnchorIdIsSet(false);
      this.anchorId = 0;
      this.act = null;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getAnchorId() {
      return this.anchorId;
    }

    public void setAnchorId(long anchorId) {
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
    }

    public void unsetAnchorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    /** Returns true if field anchorId is set (has been assigned a value) and false otherwise */
    public boolean isSetAnchorId() {
      return EncodingUtils.testBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    public void setAnchorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANCHORID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.UpDownAct
     */
    public com.lesports.qmt.tlive.api.common.UpDownAct getAct() {
      return this.act;
    }

    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.UpDownAct
     */
    public void setAct(com.lesports.qmt.tlive.api.common.UpDownAct act) {
      this.act = act;
    }

    public void unsetAct() {
      this.act = null;
    }

    /** Returns true if field act is set (has been assigned a value) and false otherwise */
    public boolean isSetAct() {
      return this.act != null;
    }

    public void setActIsSet(boolean value) {
      if (!value) {
        this.act = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case ANCHOR_ID:
        if (value == null) {
          unsetAnchorId();
        } else {
          setAnchorId((Long)value);
        }
        break;

      case ACT:
        if (value == null) {
          unsetAct();
        } else {
          setAct((com.lesports.qmt.tlive.api.common.UpDownAct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case ANCHOR_ID:
        return Long.valueOf(getAnchorId());

      case ACT:
        return getAct();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case ANCHOR_ID:
        return isSetAnchorId();
      case ACT:
        return isSetAct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upDownAnchor_args)
        return this.equals((upDownAnchor_args)that);
      return false;
    }

    public boolean equals(upDownAnchor_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_anchorId = true;
      boolean that_present_anchorId = true;
      if (this_present_anchorId || that_present_anchorId) {
        if (!(this_present_anchorId && that_present_anchorId))
          return false;
        if (this.anchorId != that.anchorId)
          return false;
      }

      boolean this_present_act = true && this.isSetAct();
      boolean that_present_act = true && that.isSetAct();
      if (this_present_act || that_present_act) {
        if (!(this_present_act && that_present_act))
          return false;
        if (!this.act.equals(that.act))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_anchorId = true;
      list.add(present_anchorId);
      if (present_anchorId)
        list.add(anchorId);

      boolean present_act = true && (isSetAct());
      list.add(present_act);
      if (present_act)
        list.add(act.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(upDownAnchor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnchorId()).compareTo(other.isSetAnchorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnchorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchorId, other.anchorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAct()).compareTo(other.isSetAct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.act, other.act);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upDownAnchor_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("anchorId:");
      sb.append(this.anchorId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("act:");
      if (this.act == null) {
        sb.append("null");
      } else {
        sb.append(this.act);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upDownAnchor_argsStandardSchemeFactory implements SchemeFactory {
      public upDownAnchor_argsStandardScheme getScheme() {
        return new upDownAnchor_argsStandardScheme();
      }
    }

    private static class upDownAnchor_argsStandardScheme extends StandardScheme<upDownAnchor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upDownAnchor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ANCHOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.anchorId = iprot.readI64();
                struct.setAnchorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.act = com.lesports.qmt.tlive.api.common.UpDownAct.findByValue(iprot.readI32());
                struct.setActIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upDownAnchor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ANCHOR_ID_FIELD_DESC);
        oprot.writeI64(struct.anchorId);
        oprot.writeFieldEnd();
        if (struct.act != null) {
          oprot.writeFieldBegin(ACT_FIELD_DESC);
          oprot.writeI32(struct.act.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upDownAnchor_argsTupleSchemeFactory implements SchemeFactory {
      public upDownAnchor_argsTupleScheme getScheme() {
        return new upDownAnchor_argsTupleScheme();
      }
    }

    private static class upDownAnchor_argsTupleScheme extends TupleScheme<upDownAnchor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upDownAnchor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetAnchorId()) {
          optionals.set(1);
        }
        if (struct.isSetAct()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetAnchorId()) {
          oprot.writeI64(struct.anchorId);
        }
        if (struct.isSetAct()) {
          oprot.writeI32(struct.act.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upDownAnchor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.anchorId = iprot.readI64();
          struct.setAnchorIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.act = com.lesports.qmt.tlive.api.common.UpDownAct.findByValue(iprot.readI32());
          struct.setActIsSet(true);
        }
      }
    }

  }

  public static class upDownAnchor_result implements org.apache.thrift.TBase<upDownAnchor_result, upDownAnchor_result._Fields>, java.io.Serializable, Cloneable, Comparable<upDownAnchor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("upDownAnchor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new upDownAnchor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new upDownAnchor_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TAnchor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TAnchor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upDownAnchor_result.class, metaDataMap);
    }

    public upDownAnchor_result() {
    }

    public upDownAnchor_result(
      com.lesports.qmt.tlive.api.dto.TAnchor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public upDownAnchor_result(upDownAnchor_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TAnchor(other.success);
      }
    }

    public upDownAnchor_result deepCopy() {
      return new upDownAnchor_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TAnchor success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TAnchor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof upDownAnchor_result)
        return this.equals((upDownAnchor_result)that);
      return false;
    }

    public boolean equals(upDownAnchor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(upDownAnchor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("upDownAnchor_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class upDownAnchor_resultStandardSchemeFactory implements SchemeFactory {
      public upDownAnchor_resultStandardScheme getScheme() {
        return new upDownAnchor_resultStandardScheme();
      }
    }

    private static class upDownAnchor_resultStandardScheme extends StandardScheme<upDownAnchor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, upDownAnchor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TAnchor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, upDownAnchor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class upDownAnchor_resultTupleSchemeFactory implements SchemeFactory {
      public upDownAnchor_resultTupleScheme getScheme() {
        return new upDownAnchor_resultTupleScheme();
      }
    }

    private static class upDownAnchor_resultTupleScheme extends TupleScheme<upDownAnchor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, upDownAnchor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, upDownAnchor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TAnchor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAnchorUpDown_args implements org.apache.thrift.TBase<getAnchorUpDown_args, getAnchorUpDown_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAnchorUpDown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAnchorUpDown_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ANCHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("anchorId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAnchorUpDown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAnchorUpDown_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long anchorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      ANCHOR_ID((short)2, "anchorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // ANCHOR_ID
            return ANCHOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __ANCHORID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ANCHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("anchorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAnchorUpDown_args.class, metaDataMap);
    }

    public getAnchorUpDown_args() {
    }

    public getAnchorUpDown_args(
      long textLiveId,
      long anchorId)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnchorUpDown_args(getAnchorUpDown_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.anchorId = other.anchorId;
    }

    public getAnchorUpDown_args deepCopy() {
      return new getAnchorUpDown_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setAnchorIdIsSet(false);
      this.anchorId = 0;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getAnchorId() {
      return this.anchorId;
    }

    public void setAnchorId(long anchorId) {
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
    }

    public void unsetAnchorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    /** Returns true if field anchorId is set (has been assigned a value) and false otherwise */
    public boolean isSetAnchorId() {
      return EncodingUtils.testBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    public void setAnchorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANCHORID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case ANCHOR_ID:
        if (value == null) {
          unsetAnchorId();
        } else {
          setAnchorId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case ANCHOR_ID:
        return Long.valueOf(getAnchorId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case ANCHOR_ID:
        return isSetAnchorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnchorUpDown_args)
        return this.equals((getAnchorUpDown_args)that);
      return false;
    }

    public boolean equals(getAnchorUpDown_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_anchorId = true;
      boolean that_present_anchorId = true;
      if (this_present_anchorId || that_present_anchorId) {
        if (!(this_present_anchorId && that_present_anchorId))
          return false;
        if (this.anchorId != that.anchorId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_anchorId = true;
      list.add(present_anchorId);
      if (present_anchorId)
        list.add(anchorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAnchorUpDown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnchorId()).compareTo(other.isSetAnchorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnchorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchorId, other.anchorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAnchorUpDown_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("anchorId:");
      sb.append(this.anchorId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAnchorUpDown_argsStandardSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_argsStandardScheme getScheme() {
        return new getAnchorUpDown_argsStandardScheme();
      }
    }

    private static class getAnchorUpDown_argsStandardScheme extends StandardScheme<getAnchorUpDown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ANCHOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.anchorId = iprot.readI64();
                struct.setAnchorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ANCHOR_ID_FIELD_DESC);
        oprot.writeI64(struct.anchorId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAnchorUpDown_argsTupleSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_argsTupleScheme getScheme() {
        return new getAnchorUpDown_argsTupleScheme();
      }
    }

    private static class getAnchorUpDown_argsTupleScheme extends TupleScheme<getAnchorUpDown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetAnchorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetAnchorId()) {
          oprot.writeI64(struct.anchorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.anchorId = iprot.readI64();
          struct.setAnchorIdIsSet(true);
        }
      }
    }

  }

  public static class getAnchorUpDown_result implements org.apache.thrift.TBase<getAnchorUpDown_result, getAnchorUpDown_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAnchorUpDown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAnchorUpDown_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAnchorUpDown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAnchorUpDown_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TAnchor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TAnchor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAnchorUpDown_result.class, metaDataMap);
    }

    public getAnchorUpDown_result() {
    }

    public getAnchorUpDown_result(
      com.lesports.qmt.tlive.api.dto.TAnchor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnchorUpDown_result(getAnchorUpDown_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TAnchor(other.success);
      }
    }

    public getAnchorUpDown_result deepCopy() {
      return new getAnchorUpDown_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TAnchor success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TAnchor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnchorUpDown_result)
        return this.equals((getAnchorUpDown_result)that);
      return false;
    }

    public boolean equals(getAnchorUpDown_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAnchorUpDown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAnchorUpDown_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAnchorUpDown_resultStandardSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_resultStandardScheme getScheme() {
        return new getAnchorUpDown_resultStandardScheme();
      }
    }

    private static class getAnchorUpDown_resultStandardScheme extends StandardScheme<getAnchorUpDown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TAnchor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAnchorUpDown_resultTupleSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_resultTupleScheme getScheme() {
        return new getAnchorUpDown_resultTupleScheme();
      }
    }

    private static class getAnchorUpDown_resultTupleScheme extends TupleScheme<getAnchorUpDown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TAnchor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
