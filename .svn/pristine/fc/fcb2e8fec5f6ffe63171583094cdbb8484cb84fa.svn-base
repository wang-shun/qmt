/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取赛程or赛事的请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-9")
public class GetMatchsEpisodesParam implements org.apache.thrift.TBase<GetMatchsEpisodesParam, GetMatchsEpisodesParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetMatchsEpisodesParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetMatchsEpisodesParam");

  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MEDAL_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("medalTypeParam", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DISCPILINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("discpilineId", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetMatchsEpisodesParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetMatchsEpisodesParamTupleSchemeFactory());
  }

  private long gameFType; // optional
  private long gameSType; // optional
  private MedalTypeParam medalTypeParam; // optional
  private String startTime; // optional
  private String endTime; // optional
  private long countryId; // optional
  private String date; // optional
  private long cid; // optional
  private long discpilineId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_FTYPE((short)1, "gameFType"),
    GAME_STYPE((short)2, "gameSType"),
    /**
     * 
     * @see MedalTypeParam
     */
    MEDAL_TYPE_PARAM((short)3, "medalTypeParam"),
    START_TIME((short)4, "startTime"),
    END_TIME((short)5, "endTime"),
    COUNTRY_ID((short)6, "countryId"),
    DATE((short)7, "date"),
    CID((short)8, "cid"),
    DISCPILINE_ID((short)9, "discpilineId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GAME_FTYPE
          return GAME_FTYPE;
        case 2: // GAME_STYPE
          return GAME_STYPE;
        case 3: // MEDAL_TYPE_PARAM
          return MEDAL_TYPE_PARAM;
        case 4: // START_TIME
          return START_TIME;
        case 5: // END_TIME
          return END_TIME;
        case 6: // COUNTRY_ID
          return COUNTRY_ID;
        case 7: // DATE
          return DATE;
        case 8: // CID
          return CID;
        case 9: // DISCPILINE_ID
          return DISCPILINE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMEFTYPE_ISSET_ID = 0;
  private static final int __GAMESTYPE_ISSET_ID = 1;
  private static final int __COUNTRYID_ISSET_ID = 2;
  private static final int __CID_ISSET_ID = 3;
  private static final int __DISCPILINEID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GAME_FTYPE,_Fields.GAME_STYPE,_Fields.MEDAL_TYPE_PARAM,_Fields.START_TIME,_Fields.END_TIME,_Fields.COUNTRY_ID,_Fields.DATE,_Fields.CID,_Fields.DISCPILINE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDAL_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("medalTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MedalTypeParam.class)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISCPILINE_ID, new org.apache.thrift.meta_data.FieldMetaData("discpilineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetMatchsEpisodesParam.class, metaDataMap);
  }

  public GetMatchsEpisodesParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetMatchsEpisodesParam(GetMatchsEpisodesParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gameFType = other.gameFType;
    this.gameSType = other.gameSType;
    if (other.isSetMedalTypeParam()) {
      this.medalTypeParam = other.medalTypeParam;
    }
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    this.countryId = other.countryId;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    this.cid = other.cid;
    this.discpilineId = other.discpilineId;
  }

  public GetMatchsEpisodesParam deepCopy() {
    return new GetMatchsEpisodesParam(this);
  }

  @Override
  public void clear() {
    setGameFTypeIsSet(false);
    this.gameFType = 0;
    setGameSTypeIsSet(false);
    this.gameSType = 0;
    this.medalTypeParam = null;
    this.startTime = null;
    this.endTime = null;
    setCountryIdIsSet(false);
    this.countryId = 0;
    this.date = null;
    setCidIsSet(false);
    this.cid = 0;
    setDiscpilineIdIsSet(false);
    this.discpilineId = 0;
  }

  public long getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(long gameFType) {
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
  }

  public void unsetGameFType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  public void setGameFTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID, value);
  }

  public long getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(long gameSType) {
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  public void unsetGameSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  public void setGameSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPE_ISSET_ID, value);
  }

  /**
   * 
   * @see MedalTypeParam
   */
  public MedalTypeParam getMedalTypeParam() {
    return this.medalTypeParam;
  }

  /**
   * 
   * @see MedalTypeParam
   */
  public void setMedalTypeParam(MedalTypeParam medalTypeParam) {
    this.medalTypeParam = medalTypeParam;
  }

  public void unsetMedalTypeParam() {
    this.medalTypeParam = null;
  }

  /** Returns true if field medalTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalTypeParam() {
    return this.medalTypeParam != null;
  }

  public void setMedalTypeParamIsSet(boolean value) {
    if (!value) {
      this.medalTypeParam = null;
    }
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public long getCountryId() {
    return this.countryId;
  }

  public void setCountryId(long countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
  }

  public void unsetCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public String getDate() {
    return this.date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getDiscpilineId() {
    return this.discpilineId;
  }

  public void setDiscpilineId(long discpilineId) {
    this.discpilineId = discpilineId;
    setDiscpilineIdIsSet(true);
  }

  public void unsetDiscpilineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCPILINEID_ISSET_ID);
  }

  /** Returns true if field discpilineId is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscpilineId() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCPILINEID_ISSET_ID);
  }

  public void setDiscpilineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCPILINEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((Long)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((Long)value);
      }
      break;

    case MEDAL_TYPE_PARAM:
      if (value == null) {
        unsetMedalTypeParam();
      } else {
        setMedalTypeParam((MedalTypeParam)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((Long)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case DISCPILINE_ID:
      if (value == null) {
        unsetDiscpilineId();
      } else {
        setDiscpilineId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_FTYPE:
      return Long.valueOf(getGameFType());

    case GAME_STYPE:
      return Long.valueOf(getGameSType());

    case MEDAL_TYPE_PARAM:
      return getMedalTypeParam();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case COUNTRY_ID:
      return Long.valueOf(getCountryId());

    case DATE:
      return getDate();

    case CID:
      return Long.valueOf(getCid());

    case DISCPILINE_ID:
      return Long.valueOf(getDiscpilineId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_FTYPE:
      return isSetGameFType();
    case GAME_STYPE:
      return isSetGameSType();
    case MEDAL_TYPE_PARAM:
      return isSetMedalTypeParam();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case COUNTRY_ID:
      return isSetCountryId();
    case DATE:
      return isSetDate();
    case CID:
      return isSetCid();
    case DISCPILINE_ID:
      return isSetDiscpilineId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetMatchsEpisodesParam)
      return this.equals((GetMatchsEpisodesParam)that);
    return false;
  }

  public boolean equals(GetMatchsEpisodesParam that) {
    if (that == null)
      return false;

    boolean this_present_gameFType = true && this.isSetGameFType();
    boolean that_present_gameFType = true && that.isSetGameFType();
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (this.gameFType != that.gameFType)
        return false;
    }

    boolean this_present_gameSType = true && this.isSetGameSType();
    boolean that_present_gameSType = true && that.isSetGameSType();
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (this.gameSType != that.gameSType)
        return false;
    }

    boolean this_present_medalTypeParam = true && this.isSetMedalTypeParam();
    boolean that_present_medalTypeParam = true && that.isSetMedalTypeParam();
    if (this_present_medalTypeParam || that_present_medalTypeParam) {
      if (!(this_present_medalTypeParam && that_present_medalTypeParam))
        return false;
      if (!this.medalTypeParam.equals(that.medalTypeParam))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_discpilineId = true && this.isSetDiscpilineId();
    boolean that_present_discpilineId = true && that.isSetDiscpilineId();
    if (this_present_discpilineId || that_present_discpilineId) {
      if (!(this_present_discpilineId && that_present_discpilineId))
        return false;
      if (this.discpilineId != that.discpilineId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameFType = true && (isSetGameFType());
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_gameSType = true && (isSetGameSType());
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_medalTypeParam = true && (isSetMedalTypeParam());
    list.add(present_medalTypeParam);
    if (present_medalTypeParam)
      list.add(medalTypeParam.getValue());

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_countryId = true && (isSetCountryId());
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_discpilineId = true && (isSetDiscpilineId());
    list.add(present_discpilineId);
    if (present_discpilineId)
      list.add(discpilineId);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetMatchsEpisodesParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalTypeParam()).compareTo(other.isSetMedalTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalTypeParam, other.medalTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscpilineId()).compareTo(other.isSetDiscpilineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscpilineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discpilineId, other.discpilineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetMatchsEpisodesParam(");
    boolean first = true;

    if (isSetGameFType()) {
      sb.append("gameFType:");
      sb.append(this.gameFType);
      first = false;
    }
    if (isSetGameSType()) {
      if (!first) sb.append(", ");
      sb.append("gameSType:");
      sb.append(this.gameSType);
      first = false;
    }
    if (isSetMedalTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("medalTypeParam:");
      if (this.medalTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.medalTypeParam);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetCountryId()) {
      if (!first) sb.append(", ");
      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
    }
    if (isSetDate()) {
      if (!first) sb.append(", ");
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetDiscpilineId()) {
      if (!first) sb.append(", ");
      sb.append("discpilineId:");
      sb.append(this.discpilineId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetMatchsEpisodesParamStandardSchemeFactory implements SchemeFactory {
    public GetMatchsEpisodesParamStandardScheme getScheme() {
      return new GetMatchsEpisodesParamStandardScheme();
    }
  }

  private static class GetMatchsEpisodesParamStandardScheme extends StandardScheme<GetMatchsEpisodesParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetMatchsEpisodesParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFType = iprot.readI64();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSType = iprot.readI64();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEDAL_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.medalTypeParam = com.lesports.qmt.sbd.api.service.MedalTypeParam.findByValue(iprot.readI32());
              struct.setMedalTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.countryId = iprot.readI64();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DISCPILINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.discpilineId = iprot.readI64();
              struct.setDiscpilineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetMatchsEpisodesParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetGameFType()) {
        oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
        oprot.writeI64(struct.gameFType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameSType()) {
        oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
        oprot.writeI64(struct.gameSType);
        oprot.writeFieldEnd();
      }
      if (struct.medalTypeParam != null) {
        if (struct.isSetMedalTypeParam()) {
          oprot.writeFieldBegin(MEDAL_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.medalTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCountryId()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.countryId);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiscpilineId()) {
        oprot.writeFieldBegin(DISCPILINE_ID_FIELD_DESC);
        oprot.writeI64(struct.discpilineId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetMatchsEpisodesParamTupleSchemeFactory implements SchemeFactory {
    public GetMatchsEpisodesParamTupleScheme getScheme() {
      return new GetMatchsEpisodesParamTupleScheme();
    }
  }

  private static class GetMatchsEpisodesParamTupleScheme extends TupleScheme<GetMatchsEpisodesParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetMatchsEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameFType()) {
        optionals.set(0);
      }
      if (struct.isSetGameSType()) {
        optionals.set(1);
      }
      if (struct.isSetMedalTypeParam()) {
        optionals.set(2);
      }
      if (struct.isSetStartTime()) {
        optionals.set(3);
      }
      if (struct.isSetEndTime()) {
        optionals.set(4);
      }
      if (struct.isSetCountryId()) {
        optionals.set(5);
      }
      if (struct.isSetDate()) {
        optionals.set(6);
      }
      if (struct.isSetCid()) {
        optionals.set(7);
      }
      if (struct.isSetDiscpilineId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetGameFType()) {
        oprot.writeI64(struct.gameFType);
      }
      if (struct.isSetGameSType()) {
        oprot.writeI64(struct.gameSType);
      }
      if (struct.isSetMedalTypeParam()) {
        oprot.writeI32(struct.medalTypeParam.getValue());
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI64(struct.countryId);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetDiscpilineId()) {
        oprot.writeI64(struct.discpilineId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetMatchsEpisodesParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.gameFType = iprot.readI64();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameSType = iprot.readI64();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.medalTypeParam = com.lesports.qmt.sbd.api.service.MedalTypeParam.findByValue(iprot.readI32());
        struct.setMedalTypeParamIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.countryId = iprot.readI64();
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.discpilineId = iprot.readI64();
        struct.setDiscpilineIdIsSet(true);
      }
    }
  }

}

