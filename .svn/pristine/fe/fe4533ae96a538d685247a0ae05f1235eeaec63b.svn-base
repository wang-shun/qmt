/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TVideo implements org.apache.thrift.TBase<TVideo, TVideo._Fields>, java.io.Serializable, Cloneable, Comparable<TVideo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVideo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mids", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField TIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tids", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField CLONE_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("cloneVideo", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField HAS_BIG_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasBigImage", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField EIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("eids", org.apache.thrift.protocol.TType.SET, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createAt", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.MAP, (short)18);
  private static final org.apache.thrift.protocol.TField ALBUM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("albumId", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField PLAY_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("playLink", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDesc", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField ALLOW_COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowCountries", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField VALID_LICENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("validLicences", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField DRM_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("drmFlag", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField IS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPay", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField LEECO_VID_FIELD_DESC = new org.apache.thrift.protocol.TField("leecoVid", org.apache.thrift.protocol.TType.I64, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TVideoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TVideoTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private Set<Long> mids; // optional
  private Set<Long> tids; // optional
  private Set<Long> pids; // optional
  private long gameFType; // optional
  private long gameSType; // optional
  private long cid; // optional
  private com.lesports.qmt.sbc.api.common.VideoContentType contentType; // optional
  private Set<com.lesports.api.common.Platform> platforms; // optional
  private String desc; // optional
  private String imageUrl; // optional
  private boolean cloneVideo; // optional
  private boolean hasBigImage; // optional
  private long duration; // optional
  private Set<Long> eids; // optional
  private String createAt; // optional
  private Map<String,String> images; // optional
  private long albumId; // optional
  private long aid; // optional
  private List<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private String playLink; // optional
  private String commentId; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangDesc; // optional
  private List<com.lesports.api.common.CountryCode> allowCountries; // optional
  private List<com.lesports.qmt.sbc.api.common.TvLicence> validLicences; // optional
  private int drmFlag; // optional
  private int isPay; // optional
  private long leecoVid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MIDS((short)3, "mids"),
    TIDS((short)4, "tids"),
    PIDS((short)5, "pids"),
    GAME_FTYPE((short)6, "gameFType"),
    GAME_STYPE((short)7, "gameSType"),
    CID((short)8, "cid"),
    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.VideoContentType
     */
    CONTENT_TYPE((short)9, "contentType"),
    PLATFORMS((short)10, "platforms"),
    DESC((short)11, "desc"),
    IMAGE_URL((short)12, "imageUrl"),
    CLONE_VIDEO((short)13, "cloneVideo"),
    HAS_BIG_IMAGE((short)14, "hasBigImage"),
    DURATION((short)15, "duration"),
    EIDS((short)16, "eids"),
    CREATE_AT((short)17, "createAt"),
    IMAGES((short)18, "images"),
    ALBUM_ID((short)19, "albumId"),
    AID((short)20, "aid"),
    TAGS((short)21, "tags"),
    PLAY_LINK((short)22, "playLink"),
    COMMENT_ID((short)23, "commentId"),
    MULTI_LANG_NAMES((short)24, "multiLangNames"),
    MULTI_LANG_DESC((short)25, "multiLangDesc"),
    ALLOW_COUNTRIES((short)26, "allowCountries"),
    VALID_LICENCES((short)27, "validLicences"),
    DRM_FLAG((short)28, "drmFlag"),
    IS_PAY((short)29, "isPay"),
    LEECO_VID((short)30, "leecoVid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MIDS
          return MIDS;
        case 4: // TIDS
          return TIDS;
        case 5: // PIDS
          return PIDS;
        case 6: // GAME_FTYPE
          return GAME_FTYPE;
        case 7: // GAME_STYPE
          return GAME_STYPE;
        case 8: // CID
          return CID;
        case 9: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 10: // PLATFORMS
          return PLATFORMS;
        case 11: // DESC
          return DESC;
        case 12: // IMAGE_URL
          return IMAGE_URL;
        case 13: // CLONE_VIDEO
          return CLONE_VIDEO;
        case 14: // HAS_BIG_IMAGE
          return HAS_BIG_IMAGE;
        case 15: // DURATION
          return DURATION;
        case 16: // EIDS
          return EIDS;
        case 17: // CREATE_AT
          return CREATE_AT;
        case 18: // IMAGES
          return IMAGES;
        case 19: // ALBUM_ID
          return ALBUM_ID;
        case 20: // AID
          return AID;
        case 21: // TAGS
          return TAGS;
        case 22: // PLAY_LINK
          return PLAY_LINK;
        case 23: // COMMENT_ID
          return COMMENT_ID;
        case 24: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 25: // MULTI_LANG_DESC
          return MULTI_LANG_DESC;
        case 26: // ALLOW_COUNTRIES
          return ALLOW_COUNTRIES;
        case 27: // VALID_LICENCES
          return VALID_LICENCES;
        case 28: // DRM_FLAG
          return DRM_FLAG;
        case 29: // IS_PAY
          return IS_PAY;
        case 30: // LEECO_VID
          return LEECO_VID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GAMEFTYPE_ISSET_ID = 1;
  private static final int __GAMESTYPE_ISSET_ID = 2;
  private static final int __CID_ISSET_ID = 3;
  private static final int __CLONEVIDEO_ISSET_ID = 4;
  private static final int __HASBIGIMAGE_ISSET_ID = 5;
  private static final int __DURATION_ISSET_ID = 6;
  private static final int __ALBUMID_ISSET_ID = 7;
  private static final int __AID_ISSET_ID = 8;
  private static final int __DRMFLAG_ISSET_ID = 9;
  private static final int __ISPAY_ISSET_ID = 10;
  private static final int __LEECOVID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.MIDS,_Fields.TIDS,_Fields.PIDS,_Fields.GAME_FTYPE,_Fields.GAME_STYPE,_Fields.CID,_Fields.CONTENT_TYPE,_Fields.PLATFORMS,_Fields.DESC,_Fields.IMAGE_URL,_Fields.CLONE_VIDEO,_Fields.HAS_BIG_IMAGE,_Fields.DURATION,_Fields.EIDS,_Fields.CREATE_AT,_Fields.IMAGES,_Fields.ALBUM_ID,_Fields.AID,_Fields.TAGS,_Fields.PLAY_LINK,_Fields.COMMENT_ID,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_DESC,_Fields.ALLOW_COUNTRIES,_Fields.VALID_LICENCES,_Fields.DRM_FLAG,_Fields.IS_PAY,_Fields.LEECO_VID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MIDS, new org.apache.thrift.meta_data.FieldMetaData("mids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TIDS, new org.apache.thrift.meta_data.FieldMetaData("tids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contentType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.VideoContentType.class)));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLONE_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("cloneVideo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_BIG_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("hasBigImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EIDS, new org.apache.thrift.meta_data.FieldMetaData("eids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CREATE_AT, new org.apache.thrift.meta_data.FieldMetaData("createAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALBUM_ID, new org.apache.thrift.meta_data.FieldMetaData("albumId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.PLAY_LINK, new org.apache.thrift.meta_data.FieldMetaData("playLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_DESC, new org.apache.thrift.meta_data.FieldMetaData("multiLangDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.ALLOW_COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("allowCountries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.CountryCode.class))));
    tmpMap.put(_Fields.VALID_LICENCES, new org.apache.thrift.meta_data.FieldMetaData("validLicences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.TvLicence.class))));
    tmpMap.put(_Fields.DRM_FLAG, new org.apache.thrift.meta_data.FieldMetaData("drmFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEECO_VID, new org.apache.thrift.meta_data.FieldMetaData("leecoVid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVideo.class, metaDataMap);
  }

  public TVideo() {
  }

  public TVideo(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVideo(TVideo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMids()) {
      Set<Long> __this__mids = new HashSet<Long>(other.mids);
      this.mids = __this__mids;
    }
    if (other.isSetTids()) {
      Set<Long> __this__tids = new HashSet<Long>(other.tids);
      this.tids = __this__tids;
    }
    if (other.isSetPids()) {
      Set<Long> __this__pids = new HashSet<Long>(other.pids);
      this.pids = __this__pids;
    }
    this.gameFType = other.gameFType;
    this.gameSType = other.gameSType;
    this.cid = other.cid;
    if (other.isSetContentType()) {
      this.contentType = other.contentType;
    }
    if (other.isSetPlatforms()) {
      Set<com.lesports.api.common.Platform> __this__platforms = new HashSet<com.lesports.api.common.Platform>(other.platforms.size());
      for (com.lesports.api.common.Platform other_element : other.platforms) {
        __this__platforms.add(other_element);
      }
      this.platforms = __this__platforms;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.cloneVideo = other.cloneVideo;
    this.hasBigImage = other.hasBigImage;
    this.duration = other.duration;
    if (other.isSetEids()) {
      Set<Long> __this__eids = new HashSet<Long>(other.eids);
      this.eids = __this__eids;
    }
    if (other.isSetCreateAt()) {
      this.createAt = other.createAt;
    }
    if (other.isSetImages()) {
      Map<String,String> __this__images = new HashMap<String,String>(other.images);
      this.images = __this__images;
    }
    this.albumId = other.albumId;
    this.aid = other.aid;
    if (other.isSetTags()) {
      List<com.lesports.qmt.config.api.dto.TTag> __this__tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetPlayLink()) {
      this.playLink = other.playLink;
    }
    if (other.isSetCommentId()) {
      this.commentId = other.commentId;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangDesc()) {
      List<com.lesports.api.common.LangString> __this__multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDesc.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDesc) {
        __this__multiLangDesc.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDesc = __this__multiLangDesc;
    }
    if (other.isSetAllowCountries()) {
      List<com.lesports.api.common.CountryCode> __this__allowCountries = new ArrayList<com.lesports.api.common.CountryCode>(other.allowCountries.size());
      for (com.lesports.api.common.CountryCode other_element : other.allowCountries) {
        __this__allowCountries.add(other_element);
      }
      this.allowCountries = __this__allowCountries;
    }
    if (other.isSetValidLicences()) {
      List<com.lesports.qmt.sbc.api.common.TvLicence> __this__validLicences = new ArrayList<com.lesports.qmt.sbc.api.common.TvLicence>(other.validLicences.size());
      for (com.lesports.qmt.sbc.api.common.TvLicence other_element : other.validLicences) {
        __this__validLicences.add(other_element);
      }
      this.validLicences = __this__validLicences;
    }
    this.drmFlag = other.drmFlag;
    this.isPay = other.isPay;
    this.leecoVid = other.leecoVid;
  }

  public TVideo deepCopy() {
    return new TVideo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.mids = null;
    this.tids = null;
    this.pids = null;
    setGameFTypeIsSet(false);
    this.gameFType = 0;
    setGameSTypeIsSet(false);
    this.gameSType = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.contentType = null;
    this.platforms = null;
    this.desc = null;
    this.imageUrl = null;
    setCloneVideoIsSet(false);
    this.cloneVideo = false;
    setHasBigImageIsSet(false);
    this.hasBigImage = false;
    setDurationIsSet(false);
    this.duration = 0;
    this.eids = null;
    this.createAt = null;
    this.images = null;
    setAlbumIdIsSet(false);
    this.albumId = 0;
    setAidIsSet(false);
    this.aid = 0;
    this.tags = null;
    this.playLink = null;
    this.commentId = null;
    this.multiLangNames = null;
    this.multiLangDesc = null;
    this.allowCountries = null;
    this.validLicences = null;
    setDrmFlagIsSet(false);
    this.drmFlag = 0;
    setIsPayIsSet(false);
    this.isPay = 0;
    setLeecoVidIsSet(false);
    this.leecoVid = 0;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMidsSize() {
    return (this.mids == null) ? 0 : this.mids.size();
  }

  public java.util.Iterator<Long> getMidsIterator() {
    return (this.mids == null) ? null : this.mids.iterator();
  }

  public void addToMids(long elem) {
    if (this.mids == null) {
      this.mids = new HashSet<Long>();
    }
    this.mids.add(elem);
  }

  public Set<Long> getMids() {
    return this.mids;
  }

  public void setMids(Set<Long> mids) {
    this.mids = mids;
  }

  public void unsetMids() {
    this.mids = null;
  }

  /** Returns true if field mids is set (has been assigned a value) and false otherwise */
  public boolean isSetMids() {
    return this.mids != null;
  }

  public void setMidsIsSet(boolean value) {
    if (!value) {
      this.mids = null;
    }
  }

  public int getTidsSize() {
    return (this.tids == null) ? 0 : this.tids.size();
  }

  public java.util.Iterator<Long> getTidsIterator() {
    return (this.tids == null) ? null : this.tids.iterator();
  }

  public void addToTids(long elem) {
    if (this.tids == null) {
      this.tids = new HashSet<Long>();
    }
    this.tids.add(elem);
  }

  public Set<Long> getTids() {
    return this.tids;
  }

  public void setTids(Set<Long> tids) {
    this.tids = tids;
  }

  public void unsetTids() {
    this.tids = null;
  }

  /** Returns true if field tids is set (has been assigned a value) and false otherwise */
  public boolean isSetTids() {
    return this.tids != null;
  }

  public void setTidsIsSet(boolean value) {
    if (!value) {
      this.tids = null;
    }
  }

  public int getPidsSize() {
    return (this.pids == null) ? 0 : this.pids.size();
  }

  public java.util.Iterator<Long> getPidsIterator() {
    return (this.pids == null) ? null : this.pids.iterator();
  }

  public void addToPids(long elem) {
    if (this.pids == null) {
      this.pids = new HashSet<Long>();
    }
    this.pids.add(elem);
  }

  public Set<Long> getPids() {
    return this.pids;
  }

  public void setPids(Set<Long> pids) {
    this.pids = pids;
  }

  public void unsetPids() {
    this.pids = null;
  }

  /** Returns true if field pids is set (has been assigned a value) and false otherwise */
  public boolean isSetPids() {
    return this.pids != null;
  }

  public void setPidsIsSet(boolean value) {
    if (!value) {
      this.pids = null;
    }
  }

  public long getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(long gameFType) {
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
  }

  public void unsetGameFType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  public void setGameFTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID, value);
  }

  public long getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(long gameSType) {
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  public void unsetGameSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  public void setGameSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPE_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.VideoContentType
   */
  public com.lesports.qmt.sbc.api.common.VideoContentType getContentType() {
    return this.contentType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.VideoContentType
   */
  public void setContentType(com.lesports.qmt.sbc.api.common.VideoContentType contentType) {
    this.contentType = contentType;
  }

  public void unsetContentType() {
    this.contentType = null;
  }

  /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.contentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.contentType = null;
    }
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(com.lesports.api.common.Platform elem) {
    if (this.platforms == null) {
      this.platforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.platforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getPlatforms() {
    return this.platforms;
  }

  public void setPlatforms(Set<com.lesports.api.common.Platform> platforms) {
    this.platforms = platforms;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public boolean isCloneVideo() {
    return this.cloneVideo;
  }

  public void setCloneVideo(boolean cloneVideo) {
    this.cloneVideo = cloneVideo;
    setCloneVideoIsSet(true);
  }

  public void unsetCloneVideo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLONEVIDEO_ISSET_ID);
  }

  /** Returns true if field cloneVideo is set (has been assigned a value) and false otherwise */
  public boolean isSetCloneVideo() {
    return EncodingUtils.testBit(__isset_bitfield, __CLONEVIDEO_ISSET_ID);
  }

  public void setCloneVideoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLONEVIDEO_ISSET_ID, value);
  }

  public boolean isHasBigImage() {
    return this.hasBigImage;
  }

  public void setHasBigImage(boolean hasBigImage) {
    this.hasBigImage = hasBigImage;
    setHasBigImageIsSet(true);
  }

  public void unsetHasBigImage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASBIGIMAGE_ISSET_ID);
  }

  /** Returns true if field hasBigImage is set (has been assigned a value) and false otherwise */
  public boolean isSetHasBigImage() {
    return EncodingUtils.testBit(__isset_bitfield, __HASBIGIMAGE_ISSET_ID);
  }

  public void setHasBigImageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASBIGIMAGE_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public void setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getEidsSize() {
    return (this.eids == null) ? 0 : this.eids.size();
  }

  public java.util.Iterator<Long> getEidsIterator() {
    return (this.eids == null) ? null : this.eids.iterator();
  }

  public void addToEids(long elem) {
    if (this.eids == null) {
      this.eids = new HashSet<Long>();
    }
    this.eids.add(elem);
  }

  public Set<Long> getEids() {
    return this.eids;
  }

  public void setEids(Set<Long> eids) {
    this.eids = eids;
  }

  public void unsetEids() {
    this.eids = null;
  }

  /** Returns true if field eids is set (has been assigned a value) and false otherwise */
  public boolean isSetEids() {
    return this.eids != null;
  }

  public void setEidsIsSet(boolean value) {
    if (!value) {
      this.eids = null;
    }
  }

  public String getCreateAt() {
    return this.createAt;
  }

  public void setCreateAt(String createAt) {
    this.createAt = createAt;
  }

  public void unsetCreateAt() {
    this.createAt = null;
  }

  /** Returns true if field createAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateAt() {
    return this.createAt != null;
  }

  public void setCreateAtIsSet(boolean value) {
    if (!value) {
      this.createAt = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public void putToImages(String key, String val) {
    if (this.images == null) {
      this.images = new HashMap<String,String>();
    }
    this.images.put(key, val);
  }

  public Map<String,String> getImages() {
    return this.images;
  }

  public void setImages(Map<String,String> images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public long getAlbumId() {
    return this.albumId;
  }

  public void setAlbumId(long albumId) {
    this.albumId = albumId;
    setAlbumIdIsSet(true);
  }

  public void unsetAlbumId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALBUMID_ISSET_ID);
  }

  /** Returns true if field albumId is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbumId() {
    return EncodingUtils.testBit(__isset_bitfield, __ALBUMID_ISSET_ID);
  }

  public void setAlbumIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALBUMID_ISSET_ID, value);
  }

  public long getAid() {
    return this.aid;
  }

  public void setAid(long aid) {
    this.aid = aid;
    setAidIsSet(true);
  }

  public void unsetAid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
  }

  /** Returns true if field aid is set (has been assigned a value) and false otherwise */
  public boolean isSetAid() {
    return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
  }

  public void setAidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public List<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getPlayLink() {
    return this.playLink;
  }

  public void setPlayLink(String playLink) {
    this.playLink = playLink;
  }

  public void unsetPlayLink() {
    this.playLink = null;
  }

  /** Returns true if field playLink is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayLink() {
    return this.playLink != null;
  }

  public void setPlayLinkIsSet(boolean value) {
    if (!value) {
      this.playLink = null;
    }
  }

  public String getCommentId() {
    return this.commentId;
  }

  public void setCommentId(String commentId) {
    this.commentId = commentId;
  }

  public void unsetCommentId() {
    this.commentId = null;
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return this.commentId != null;
  }

  public void setCommentIdIsSet(boolean value) {
    if (!value) {
      this.commentId = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangDescSize() {
    return (this.multiLangDesc == null) ? 0 : this.multiLangDesc.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDescIterator() {
    return (this.multiLangDesc == null) ? null : this.multiLangDesc.iterator();
  }

  public void addToMultiLangDesc(com.lesports.api.common.LangString elem) {
    if (this.multiLangDesc == null) {
      this.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDesc.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDesc() {
    return this.multiLangDesc;
  }

  public void setMultiLangDesc(List<com.lesports.api.common.LangString> multiLangDesc) {
    this.multiLangDesc = multiLangDesc;
  }

  public void unsetMultiLangDesc() {
    this.multiLangDesc = null;
  }

  /** Returns true if field multiLangDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDesc() {
    return this.multiLangDesc != null;
  }

  public void setMultiLangDescIsSet(boolean value) {
    if (!value) {
      this.multiLangDesc = null;
    }
  }

  public int getAllowCountriesSize() {
    return (this.allowCountries == null) ? 0 : this.allowCountries.size();
  }

  public java.util.Iterator<com.lesports.api.common.CountryCode> getAllowCountriesIterator() {
    return (this.allowCountries == null) ? null : this.allowCountries.iterator();
  }

  public void addToAllowCountries(com.lesports.api.common.CountryCode elem) {
    if (this.allowCountries == null) {
      this.allowCountries = new ArrayList<com.lesports.api.common.CountryCode>();
    }
    this.allowCountries.add(elem);
  }

  public List<com.lesports.api.common.CountryCode> getAllowCountries() {
    return this.allowCountries;
  }

  public void setAllowCountries(List<com.lesports.api.common.CountryCode> allowCountries) {
    this.allowCountries = allowCountries;
  }

  public void unsetAllowCountries() {
    this.allowCountries = null;
  }

  /** Returns true if field allowCountries is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowCountries() {
    return this.allowCountries != null;
  }

  public void setAllowCountriesIsSet(boolean value) {
    if (!value) {
      this.allowCountries = null;
    }
  }

  public int getValidLicencesSize() {
    return (this.validLicences == null) ? 0 : this.validLicences.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbc.api.common.TvLicence> getValidLicencesIterator() {
    return (this.validLicences == null) ? null : this.validLicences.iterator();
  }

  public void addToValidLicences(com.lesports.qmt.sbc.api.common.TvLicence elem) {
    if (this.validLicences == null) {
      this.validLicences = new ArrayList<com.lesports.qmt.sbc.api.common.TvLicence>();
    }
    this.validLicences.add(elem);
  }

  public List<com.lesports.qmt.sbc.api.common.TvLicence> getValidLicences() {
    return this.validLicences;
  }

  public void setValidLicences(List<com.lesports.qmt.sbc.api.common.TvLicence> validLicences) {
    this.validLicences = validLicences;
  }

  public void unsetValidLicences() {
    this.validLicences = null;
  }

  /** Returns true if field validLicences is set (has been assigned a value) and false otherwise */
  public boolean isSetValidLicences() {
    return this.validLicences != null;
  }

  public void setValidLicencesIsSet(boolean value) {
    if (!value) {
      this.validLicences = null;
    }
  }

  public int getDrmFlag() {
    return this.drmFlag;
  }

  public void setDrmFlag(int drmFlag) {
    this.drmFlag = drmFlag;
    setDrmFlagIsSet(true);
  }

  public void unsetDrmFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRMFLAG_ISSET_ID);
  }

  /** Returns true if field drmFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDrmFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __DRMFLAG_ISSET_ID);
  }

  public void setDrmFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRMFLAG_ISSET_ID, value);
  }

  public int getIsPay() {
    return this.isPay;
  }

  public void setIsPay(int isPay) {
    this.isPay = isPay;
    setIsPayIsSet(true);
  }

  public void unsetIsPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  /** Returns true if field isPay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  public void setIsPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAY_ISSET_ID, value);
  }

  public long getLeecoVid() {
    return this.leecoVid;
  }

  public void setLeecoVid(long leecoVid) {
    this.leecoVid = leecoVid;
    setLeecoVidIsSet(true);
  }

  public void unsetLeecoVid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEECOVID_ISSET_ID);
  }

  /** Returns true if field leecoVid is set (has been assigned a value) and false otherwise */
  public boolean isSetLeecoVid() {
    return EncodingUtils.testBit(__isset_bitfield, __LEECOVID_ISSET_ID);
  }

  public void setLeecoVidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEECOVID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MIDS:
      if (value == null) {
        unsetMids();
      } else {
        setMids((Set<Long>)value);
      }
      break;

    case TIDS:
      if (value == null) {
        unsetTids();
      } else {
        setTids((Set<Long>)value);
      }
      break;

    case PIDS:
      if (value == null) {
        unsetPids();
      } else {
        setPids((Set<Long>)value);
      }
      break;

    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((Long)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((com.lesports.qmt.sbc.api.common.VideoContentType)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case CLONE_VIDEO:
      if (value == null) {
        unsetCloneVideo();
      } else {
        setCloneVideo((Boolean)value);
      }
      break;

    case HAS_BIG_IMAGE:
      if (value == null) {
        unsetHasBigImage();
      } else {
        setHasBigImage((Boolean)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case EIDS:
      if (value == null) {
        unsetEids();
      } else {
        setEids((Set<Long>)value);
      }
      break;

    case CREATE_AT:
      if (value == null) {
        unsetCreateAt();
      } else {
        setCreateAt((String)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((Map<String,String>)value);
      }
      break;

    case ALBUM_ID:
      if (value == null) {
        unsetAlbumId();
      } else {
        setAlbumId((Long)value);
      }
      break;

    case AID:
      if (value == null) {
        unsetAid();
      } else {
        setAid((Long)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case PLAY_LINK:
      if (value == null) {
        unsetPlayLink();
      } else {
        setPlayLink((String)value);
      }
      break;

    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_DESC:
      if (value == null) {
        unsetMultiLangDesc();
      } else {
        setMultiLangDesc((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case ALLOW_COUNTRIES:
      if (value == null) {
        unsetAllowCountries();
      } else {
        setAllowCountries((List<com.lesports.api.common.CountryCode>)value);
      }
      break;

    case VALID_LICENCES:
      if (value == null) {
        unsetValidLicences();
      } else {
        setValidLicences((List<com.lesports.qmt.sbc.api.common.TvLicence>)value);
      }
      break;

    case DRM_FLAG:
      if (value == null) {
        unsetDrmFlag();
      } else {
        setDrmFlag((Integer)value);
      }
      break;

    case IS_PAY:
      if (value == null) {
        unsetIsPay();
      } else {
        setIsPay((Integer)value);
      }
      break;

    case LEECO_VID:
      if (value == null) {
        unsetLeecoVid();
      } else {
        setLeecoVid((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case MIDS:
      return getMids();

    case TIDS:
      return getTids();

    case PIDS:
      return getPids();

    case GAME_FTYPE:
      return Long.valueOf(getGameFType());

    case GAME_STYPE:
      return Long.valueOf(getGameSType());

    case CID:
      return Long.valueOf(getCid());

    case CONTENT_TYPE:
      return getContentType();

    case PLATFORMS:
      return getPlatforms();

    case DESC:
      return getDesc();

    case IMAGE_URL:
      return getImageUrl();

    case CLONE_VIDEO:
      return Boolean.valueOf(isCloneVideo());

    case HAS_BIG_IMAGE:
      return Boolean.valueOf(isHasBigImage());

    case DURATION:
      return Long.valueOf(getDuration());

    case EIDS:
      return getEids();

    case CREATE_AT:
      return getCreateAt();

    case IMAGES:
      return getImages();

    case ALBUM_ID:
      return Long.valueOf(getAlbumId());

    case AID:
      return Long.valueOf(getAid());

    case TAGS:
      return getTags();

    case PLAY_LINK:
      return getPlayLink();

    case COMMENT_ID:
      return getCommentId();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_DESC:
      return getMultiLangDesc();

    case ALLOW_COUNTRIES:
      return getAllowCountries();

    case VALID_LICENCES:
      return getValidLicences();

    case DRM_FLAG:
      return Integer.valueOf(getDrmFlag());

    case IS_PAY:
      return Integer.valueOf(getIsPay());

    case LEECO_VID:
      return Long.valueOf(getLeecoVid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MIDS:
      return isSetMids();
    case TIDS:
      return isSetTids();
    case PIDS:
      return isSetPids();
    case GAME_FTYPE:
      return isSetGameFType();
    case GAME_STYPE:
      return isSetGameSType();
    case CID:
      return isSetCid();
    case CONTENT_TYPE:
      return isSetContentType();
    case PLATFORMS:
      return isSetPlatforms();
    case DESC:
      return isSetDesc();
    case IMAGE_URL:
      return isSetImageUrl();
    case CLONE_VIDEO:
      return isSetCloneVideo();
    case HAS_BIG_IMAGE:
      return isSetHasBigImage();
    case DURATION:
      return isSetDuration();
    case EIDS:
      return isSetEids();
    case CREATE_AT:
      return isSetCreateAt();
    case IMAGES:
      return isSetImages();
    case ALBUM_ID:
      return isSetAlbumId();
    case AID:
      return isSetAid();
    case TAGS:
      return isSetTags();
    case PLAY_LINK:
      return isSetPlayLink();
    case COMMENT_ID:
      return isSetCommentId();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_DESC:
      return isSetMultiLangDesc();
    case ALLOW_COUNTRIES:
      return isSetAllowCountries();
    case VALID_LICENCES:
      return isSetValidLicences();
    case DRM_FLAG:
      return isSetDrmFlag();
    case IS_PAY:
      return isSetIsPay();
    case LEECO_VID:
      return isSetLeecoVid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TVideo)
      return this.equals((TVideo)that);
    return false;
  }

  public boolean equals(TVideo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mids = true && this.isSetMids();
    boolean that_present_mids = true && that.isSetMids();
    if (this_present_mids || that_present_mids) {
      if (!(this_present_mids && that_present_mids))
        return false;
      if (!this.mids.equals(that.mids))
        return false;
    }

    boolean this_present_tids = true && this.isSetTids();
    boolean that_present_tids = true && that.isSetTids();
    if (this_present_tids || that_present_tids) {
      if (!(this_present_tids && that_present_tids))
        return false;
      if (!this.tids.equals(that.tids))
        return false;
    }

    boolean this_present_pids = true && this.isSetPids();
    boolean that_present_pids = true && that.isSetPids();
    if (this_present_pids || that_present_pids) {
      if (!(this_present_pids && that_present_pids))
        return false;
      if (!this.pids.equals(that.pids))
        return false;
    }

    boolean this_present_gameFType = true && this.isSetGameFType();
    boolean that_present_gameFType = true && that.isSetGameFType();
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (this.gameFType != that.gameFType)
        return false;
    }

    boolean this_present_gameSType = true && this.isSetGameSType();
    boolean that_present_gameSType = true && that.isSetGameSType();
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (this.gameSType != that.gameSType)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_contentType = true && this.isSetContentType();
    boolean that_present_contentType = true && that.isSetContentType();
    if (this_present_contentType || that_present_contentType) {
      if (!(this_present_contentType && that_present_contentType))
        return false;
      if (!this.contentType.equals(that.contentType))
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_cloneVideo = true && this.isSetCloneVideo();
    boolean that_present_cloneVideo = true && that.isSetCloneVideo();
    if (this_present_cloneVideo || that_present_cloneVideo) {
      if (!(this_present_cloneVideo && that_present_cloneVideo))
        return false;
      if (this.cloneVideo != that.cloneVideo)
        return false;
    }

    boolean this_present_hasBigImage = true && this.isSetHasBigImage();
    boolean that_present_hasBigImage = true && that.isSetHasBigImage();
    if (this_present_hasBigImage || that_present_hasBigImage) {
      if (!(this_present_hasBigImage && that_present_hasBigImage))
        return false;
      if (this.hasBigImage != that.hasBigImage)
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_eids = true && this.isSetEids();
    boolean that_present_eids = true && that.isSetEids();
    if (this_present_eids || that_present_eids) {
      if (!(this_present_eids && that_present_eids))
        return false;
      if (!this.eids.equals(that.eids))
        return false;
    }

    boolean this_present_createAt = true && this.isSetCreateAt();
    boolean that_present_createAt = true && that.isSetCreateAt();
    if (this_present_createAt || that_present_createAt) {
      if (!(this_present_createAt && that_present_createAt))
        return false;
      if (!this.createAt.equals(that.createAt))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_albumId = true && this.isSetAlbumId();
    boolean that_present_albumId = true && that.isSetAlbumId();
    if (this_present_albumId || that_present_albumId) {
      if (!(this_present_albumId && that_present_albumId))
        return false;
      if (this.albumId != that.albumId)
        return false;
    }

    boolean this_present_aid = true && this.isSetAid();
    boolean that_present_aid = true && that.isSetAid();
    if (this_present_aid || that_present_aid) {
      if (!(this_present_aid && that_present_aid))
        return false;
      if (this.aid != that.aid)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_playLink = true && this.isSetPlayLink();
    boolean that_present_playLink = true && that.isSetPlayLink();
    if (this_present_playLink || that_present_playLink) {
      if (!(this_present_playLink && that_present_playLink))
        return false;
      if (!this.playLink.equals(that.playLink))
        return false;
    }

    boolean this_present_commentId = true && this.isSetCommentId();
    boolean that_present_commentId = true && that.isSetCommentId();
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (!this.commentId.equals(that.commentId))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangDesc = true && this.isSetMultiLangDesc();
    boolean that_present_multiLangDesc = true && that.isSetMultiLangDesc();
    if (this_present_multiLangDesc || that_present_multiLangDesc) {
      if (!(this_present_multiLangDesc && that_present_multiLangDesc))
        return false;
      if (!this.multiLangDesc.equals(that.multiLangDesc))
        return false;
    }

    boolean this_present_allowCountries = true && this.isSetAllowCountries();
    boolean that_present_allowCountries = true && that.isSetAllowCountries();
    if (this_present_allowCountries || that_present_allowCountries) {
      if (!(this_present_allowCountries && that_present_allowCountries))
        return false;
      if (!this.allowCountries.equals(that.allowCountries))
        return false;
    }

    boolean this_present_validLicences = true && this.isSetValidLicences();
    boolean that_present_validLicences = true && that.isSetValidLicences();
    if (this_present_validLicences || that_present_validLicences) {
      if (!(this_present_validLicences && that_present_validLicences))
        return false;
      if (!this.validLicences.equals(that.validLicences))
        return false;
    }

    boolean this_present_drmFlag = true && this.isSetDrmFlag();
    boolean that_present_drmFlag = true && that.isSetDrmFlag();
    if (this_present_drmFlag || that_present_drmFlag) {
      if (!(this_present_drmFlag && that_present_drmFlag))
        return false;
      if (this.drmFlag != that.drmFlag)
        return false;
    }

    boolean this_present_isPay = true && this.isSetIsPay();
    boolean that_present_isPay = true && that.isSetIsPay();
    if (this_present_isPay || that_present_isPay) {
      if (!(this_present_isPay && that_present_isPay))
        return false;
      if (this.isPay != that.isPay)
        return false;
    }

    boolean this_present_leecoVid = true && this.isSetLeecoVid();
    boolean that_present_leecoVid = true && that.isSetLeecoVid();
    if (this_present_leecoVid || that_present_leecoVid) {
      if (!(this_present_leecoVid && that_present_leecoVid))
        return false;
      if (this.leecoVid != that.leecoVid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_mids = true && (isSetMids());
    list.add(present_mids);
    if (present_mids)
      list.add(mids);

    boolean present_tids = true && (isSetTids());
    list.add(present_tids);
    if (present_tids)
      list.add(tids);

    boolean present_pids = true && (isSetPids());
    list.add(present_pids);
    if (present_pids)
      list.add(pids);

    boolean present_gameFType = true && (isSetGameFType());
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_gameSType = true && (isSetGameSType());
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_contentType = true && (isSetContentType());
    list.add(present_contentType);
    if (present_contentType)
      list.add(contentType.getValue());

    boolean present_platforms = true && (isSetPlatforms());
    list.add(present_platforms);
    if (present_platforms)
      list.add(platforms);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_cloneVideo = true && (isSetCloneVideo());
    list.add(present_cloneVideo);
    if (present_cloneVideo)
      list.add(cloneVideo);

    boolean present_hasBigImage = true && (isSetHasBigImage());
    list.add(present_hasBigImage);
    if (present_hasBigImage)
      list.add(hasBigImage);

    boolean present_duration = true && (isSetDuration());
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_eids = true && (isSetEids());
    list.add(present_eids);
    if (present_eids)
      list.add(eids);

    boolean present_createAt = true && (isSetCreateAt());
    list.add(present_createAt);
    if (present_createAt)
      list.add(createAt);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    boolean present_albumId = true && (isSetAlbumId());
    list.add(present_albumId);
    if (present_albumId)
      list.add(albumId);

    boolean present_aid = true && (isSetAid());
    list.add(present_aid);
    if (present_aid)
      list.add(aid);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_playLink = true && (isSetPlayLink());
    list.add(present_playLink);
    if (present_playLink)
      list.add(playLink);

    boolean present_commentId = true && (isSetCommentId());
    list.add(present_commentId);
    if (present_commentId)
      list.add(commentId);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangDesc = true && (isSetMultiLangDesc());
    list.add(present_multiLangDesc);
    if (present_multiLangDesc)
      list.add(multiLangDesc);

    boolean present_allowCountries = true && (isSetAllowCountries());
    list.add(present_allowCountries);
    if (present_allowCountries)
      list.add(allowCountries);

    boolean present_validLicences = true && (isSetValidLicences());
    list.add(present_validLicences);
    if (present_validLicences)
      list.add(validLicences);

    boolean present_drmFlag = true && (isSetDrmFlag());
    list.add(present_drmFlag);
    if (present_drmFlag)
      list.add(drmFlag);

    boolean present_isPay = true && (isSetIsPay());
    list.add(present_isPay);
    if (present_isPay)
      list.add(isPay);

    boolean present_leecoVid = true && (isSetLeecoVid());
    list.add(present_leecoVid);
    if (present_leecoVid)
      list.add(leecoVid);

    return list.hashCode();
  }

  @Override
  public int compareTo(TVideo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMids()).compareTo(other.isSetMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mids, other.mids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTids()).compareTo(other.isSetTids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tids, other.tids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentType, other.contentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloneVideo()).compareTo(other.isSetCloneVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloneVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloneVideo, other.cloneVideo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasBigImage()).compareTo(other.isSetHasBigImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasBigImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasBigImage, other.hasBigImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEids()).compareTo(other.isSetEids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eids, other.eids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateAt()).compareTo(other.isSetCreateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createAt, other.createAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbumId()).compareTo(other.isSetAlbumId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbumId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albumId, other.albumId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayLink()).compareTo(other.isSetPlayLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playLink, other.playLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDesc()).compareTo(other.isSetMultiLangDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDesc, other.multiLangDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowCountries()).compareTo(other.isSetAllowCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowCountries, other.allowCountries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidLicences()).compareTo(other.isSetValidLicences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidLicences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validLicences, other.validLicences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrmFlag()).compareTo(other.isSetDrmFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrmFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drmFlag, other.drmFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPay()).compareTo(other.isSetIsPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPay, other.isPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeecoVid()).compareTo(other.isSetLeecoVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeecoVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leecoVid, other.leecoVid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TVideo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMids()) {
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
    }
    if (isSetTids()) {
      if (!first) sb.append(", ");
      sb.append("tids:");
      if (this.tids == null) {
        sb.append("null");
      } else {
        sb.append(this.tids);
      }
      first = false;
    }
    if (isSetPids()) {
      if (!first) sb.append(", ");
      sb.append("pids:");
      if (this.pids == null) {
        sb.append("null");
      } else {
        sb.append(this.pids);
      }
      first = false;
    }
    if (isSetGameFType()) {
      if (!first) sb.append(", ");
      sb.append("gameFType:");
      sb.append(this.gameFType);
      first = false;
    }
    if (isSetGameSType()) {
      if (!first) sb.append(", ");
      sb.append("gameSType:");
      sb.append(this.gameSType);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetContentType()) {
      if (!first) sb.append(", ");
      sb.append("contentType:");
      if (this.contentType == null) {
        sb.append("null");
      } else {
        sb.append(this.contentType);
      }
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetCloneVideo()) {
      if (!first) sb.append(", ");
      sb.append("cloneVideo:");
      sb.append(this.cloneVideo);
      first = false;
    }
    if (isSetHasBigImage()) {
      if (!first) sb.append(", ");
      sb.append("hasBigImage:");
      sb.append(this.hasBigImage);
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
    }
    if (isSetEids()) {
      if (!first) sb.append(", ");
      sb.append("eids:");
      if (this.eids == null) {
        sb.append("null");
      } else {
        sb.append(this.eids);
      }
      first = false;
    }
    if (isSetCreateAt()) {
      if (!first) sb.append(", ");
      sb.append("createAt:");
      if (this.createAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createAt);
      }
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetAlbumId()) {
      if (!first) sb.append(", ");
      sb.append("albumId:");
      sb.append(this.albumId);
      first = false;
    }
    if (isSetAid()) {
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetPlayLink()) {
      if (!first) sb.append(", ");
      sb.append("playLink:");
      if (this.playLink == null) {
        sb.append("null");
      } else {
        sb.append(this.playLink);
      }
      first = false;
    }
    if (isSetCommentId()) {
      if (!first) sb.append(", ");
      sb.append("commentId:");
      if (this.commentId == null) {
        sb.append("null");
      } else {
        sb.append(this.commentId);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangDesc()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDesc:");
      if (this.multiLangDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDesc);
      }
      first = false;
    }
    if (isSetAllowCountries()) {
      if (!first) sb.append(", ");
      sb.append("allowCountries:");
      if (this.allowCountries == null) {
        sb.append("null");
      } else {
        sb.append(this.allowCountries);
      }
      first = false;
    }
    if (isSetValidLicences()) {
      if (!first) sb.append(", ");
      sb.append("validLicences:");
      if (this.validLicences == null) {
        sb.append("null");
      } else {
        sb.append(this.validLicences);
      }
      first = false;
    }
    if (isSetDrmFlag()) {
      if (!first) sb.append(", ");
      sb.append("drmFlag:");
      sb.append(this.drmFlag);
      first = false;
    }
    if (isSetIsPay()) {
      if (!first) sb.append(", ");
      sb.append("isPay:");
      sb.append(this.isPay);
      first = false;
    }
    if (isSetLeecoVid()) {
      if (!first) sb.append(", ");
      sb.append("leecoVid:");
      sb.append(this.leecoVid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVideoStandardSchemeFactory implements SchemeFactory {
    public TVideoStandardScheme getScheme() {
      return new TVideoStandardScheme();
    }
  }

  private static class TVideoStandardScheme extends StandardScheme<TVideo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TVideo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.mids = new HashSet<Long>(2*_set0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.mids.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setMidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.tids = new HashSet<Long>(2*_set3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.tids.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setTidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.pids = new HashSet<Long>(2*_set6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _set6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.pids.add(_elem7);
                }
                iprot.readSetEnd();
              }
              struct.setPidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFType = iprot.readI64();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSType = iprot.readI64();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contentType = com.lesports.qmt.sbc.api.common.VideoContentType.findByValue(iprot.readI32());
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set9.size);
                com.lesports.api.common.Platform _elem10;
                for (int _i11 = 0; _i11 < _set9.size; ++_i11)
                {
                  _elem10 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.platforms.add(_elem10);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLONE_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.cloneVideo = iprot.readBool();
              struct.setCloneVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HAS_BIG_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasBigImage = iprot.readBool();
              struct.setHasBigImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.eids = new HashSet<Long>(2*_set12.size);
                long _elem13;
                for (int _i14 = 0; _i14 < _set12.size; ++_i14)
                {
                  _elem13 = iprot.readI64();
                  struct.eids.add(_elem13);
                }
                iprot.readSetEnd();
              }
              struct.setEidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createAt = iprot.readString();
              struct.setCreateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
                struct.images = new HashMap<String,String>(2*_map15.size);
                String _key16;
                String _val17;
                for (int _i18 = 0; _i18 < _map15.size; ++_i18)
                {
                  _key16 = iprot.readString();
                  _val17 = iprot.readString();
                  struct.images.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ALBUM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.albumId = iprot.readI64();
              struct.setAlbumIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // AID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aid = iprot.readI64();
              struct.setAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list19.size);
                com.lesports.qmt.config.api.dto.TTag _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem20.read(iprot);
                  struct.tags.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PLAY_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playLink = iprot.readString();
              struct.setPlayLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentId = iprot.readString();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list22.size);
                com.lesports.api.common.LangString _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new com.lesports.api.common.LangString();
                  _elem23.read(iprot);
                  struct.multiLangNames.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MULTI_LANG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list25.size);
                com.lesports.api.common.LangString _elem26;
                for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                {
                  _elem26 = new com.lesports.api.common.LangString();
                  _elem26.read(iprot);
                  struct.multiLangDesc.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ALLOW_COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.allowCountries = new ArrayList<com.lesports.api.common.CountryCode>(_list28.size);
                com.lesports.api.common.CountryCode _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
                  struct.allowCountries.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setAllowCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // VALID_LICENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.validLicences = new ArrayList<com.lesports.qmt.sbc.api.common.TvLicence>(_list31.size);
                com.lesports.qmt.sbc.api.common.TvLicence _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = com.lesports.qmt.sbc.api.common.TvLicence.findByValue(iprot.readI32());
                  struct.validLicences.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setValidLicencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DRM_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.drmFlag = iprot.readI32();
              struct.setDrmFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IS_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPay = iprot.readI32();
              struct.setIsPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // LEECO_VID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leecoVid = iprot.readI64();
              struct.setLeecoVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TVideo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mids != null) {
        if (struct.isSetMids()) {
          oprot.writeFieldBegin(MIDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.mids.size()));
            for (long _iter34 : struct.mids)
            {
              oprot.writeI64(_iter34);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tids != null) {
        if (struct.isSetTids()) {
          oprot.writeFieldBegin(TIDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.tids.size()));
            for (long _iter35 : struct.tids)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pids != null) {
        if (struct.isSetPids()) {
          oprot.writeFieldBegin(PIDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.pids.size()));
            for (long _iter36 : struct.pids)
            {
              oprot.writeI64(_iter36);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGameFType()) {
        oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
        oprot.writeI64(struct.gameFType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameSType()) {
        oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
        oprot.writeI64(struct.gameSType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.contentType != null) {
        if (struct.isSetContentType()) {
          oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.contentType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.platforms.size()));
            for (com.lesports.api.common.Platform _iter37 : struct.platforms)
            {
              oprot.writeI32(_iter37.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCloneVideo()) {
        oprot.writeFieldBegin(CLONE_VIDEO_FIELD_DESC);
        oprot.writeBool(struct.cloneVideo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHasBigImage()) {
        oprot.writeFieldBegin(HAS_BIG_IMAGE_FIELD_DESC);
        oprot.writeBool(struct.hasBigImage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDuration()) {
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI64(struct.duration);
        oprot.writeFieldEnd();
      }
      if (struct.eids != null) {
        if (struct.isSetEids()) {
          oprot.writeFieldBegin(EIDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.eids.size()));
            for (long _iter38 : struct.eids)
            {
              oprot.writeI64(_iter38);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.createAt != null) {
        if (struct.isSetCreateAt()) {
          oprot.writeFieldBegin(CREATE_AT_FIELD_DESC);
          oprot.writeString(struct.createAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (Map.Entry<String, String> _iter39 : struct.images.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              oprot.writeString(_iter39.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAlbumId()) {
        oprot.writeFieldBegin(ALBUM_ID_FIELD_DESC);
        oprot.writeI64(struct.albumId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAid()) {
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter40 : struct.tags)
            {
              _iter40.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playLink != null) {
        if (struct.isSetPlayLink()) {
          oprot.writeFieldBegin(PLAY_LINK_FIELD_DESC);
          oprot.writeString(struct.playLink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentId != null) {
        if (struct.isSetCommentId()) {
          oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
          oprot.writeString(struct.commentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter41 : struct.multiLangNames)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangDesc != null) {
        if (struct.isSetMultiLangDesc()) {
          oprot.writeFieldBegin(MULTI_LANG_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDesc.size()));
            for (com.lesports.api.common.LangString _iter42 : struct.multiLangDesc)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.allowCountries != null) {
        if (struct.isSetAllowCountries()) {
          oprot.writeFieldBegin(ALLOW_COUNTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.allowCountries.size()));
            for (com.lesports.api.common.CountryCode _iter43 : struct.allowCountries)
            {
              oprot.writeI32(_iter43.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.validLicences != null) {
        if (struct.isSetValidLicences()) {
          oprot.writeFieldBegin(VALID_LICENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.validLicences.size()));
            for (com.lesports.qmt.sbc.api.common.TvLicence _iter44 : struct.validLicences)
            {
              oprot.writeI32(_iter44.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDrmFlag()) {
        oprot.writeFieldBegin(DRM_FLAG_FIELD_DESC);
        oprot.writeI32(struct.drmFlag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsPay()) {
        oprot.writeFieldBegin(IS_PAY_FIELD_DESC);
        oprot.writeI32(struct.isPay);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeecoVid()) {
        oprot.writeFieldBegin(LEECO_VID_FIELD_DESC);
        oprot.writeI64(struct.leecoVid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVideoTupleSchemeFactory implements SchemeFactory {
    public TVideoTupleScheme getScheme() {
      return new TVideoTupleScheme();
    }
  }

  private static class TVideoTupleScheme extends TupleScheme<TVideo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVideo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMids()) {
        optionals.set(2);
      }
      if (struct.isSetTids()) {
        optionals.set(3);
      }
      if (struct.isSetPids()) {
        optionals.set(4);
      }
      if (struct.isSetGameFType()) {
        optionals.set(5);
      }
      if (struct.isSetGameSType()) {
        optionals.set(6);
      }
      if (struct.isSetCid()) {
        optionals.set(7);
      }
      if (struct.isSetContentType()) {
        optionals.set(8);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(9);
      }
      if (struct.isSetDesc()) {
        optionals.set(10);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(11);
      }
      if (struct.isSetCloneVideo()) {
        optionals.set(12);
      }
      if (struct.isSetHasBigImage()) {
        optionals.set(13);
      }
      if (struct.isSetDuration()) {
        optionals.set(14);
      }
      if (struct.isSetEids()) {
        optionals.set(15);
      }
      if (struct.isSetCreateAt()) {
        optionals.set(16);
      }
      if (struct.isSetImages()) {
        optionals.set(17);
      }
      if (struct.isSetAlbumId()) {
        optionals.set(18);
      }
      if (struct.isSetAid()) {
        optionals.set(19);
      }
      if (struct.isSetTags()) {
        optionals.set(20);
      }
      if (struct.isSetPlayLink()) {
        optionals.set(21);
      }
      if (struct.isSetCommentId()) {
        optionals.set(22);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(23);
      }
      if (struct.isSetMultiLangDesc()) {
        optionals.set(24);
      }
      if (struct.isSetAllowCountries()) {
        optionals.set(25);
      }
      if (struct.isSetValidLicences()) {
        optionals.set(26);
      }
      if (struct.isSetDrmFlag()) {
        optionals.set(27);
      }
      if (struct.isSetIsPay()) {
        optionals.set(28);
      }
      if (struct.isSetLeecoVid()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMids()) {
        {
          oprot.writeI32(struct.mids.size());
          for (long _iter45 : struct.mids)
          {
            oprot.writeI64(_iter45);
          }
        }
      }
      if (struct.isSetTids()) {
        {
          oprot.writeI32(struct.tids.size());
          for (long _iter46 : struct.tids)
          {
            oprot.writeI64(_iter46);
          }
        }
      }
      if (struct.isSetPids()) {
        {
          oprot.writeI32(struct.pids.size());
          for (long _iter47 : struct.pids)
          {
            oprot.writeI64(_iter47);
          }
        }
      }
      if (struct.isSetGameFType()) {
        oprot.writeI64(struct.gameFType);
      }
      if (struct.isSetGameSType()) {
        oprot.writeI64(struct.gameSType);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetContentType()) {
        oprot.writeI32(struct.contentType.getValue());
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (com.lesports.api.common.Platform _iter48 : struct.platforms)
          {
            oprot.writeI32(_iter48.getValue());
          }
        }
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetCloneVideo()) {
        oprot.writeBool(struct.cloneVideo);
      }
      if (struct.isSetHasBigImage()) {
        oprot.writeBool(struct.hasBigImage);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetEids()) {
        {
          oprot.writeI32(struct.eids.size());
          for (long _iter49 : struct.eids)
          {
            oprot.writeI64(_iter49);
          }
        }
      }
      if (struct.isSetCreateAt()) {
        oprot.writeString(struct.createAt);
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (Map.Entry<String, String> _iter50 : struct.images.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            oprot.writeString(_iter50.getValue());
          }
        }
      }
      if (struct.isSetAlbumId()) {
        oprot.writeI64(struct.albumId);
      }
      if (struct.isSetAid()) {
        oprot.writeI64(struct.aid);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter51 : struct.tags)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetPlayLink()) {
        oprot.writeString(struct.playLink);
      }
      if (struct.isSetCommentId()) {
        oprot.writeString(struct.commentId);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter52 : struct.multiLangNames)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangDesc()) {
        {
          oprot.writeI32(struct.multiLangDesc.size());
          for (com.lesports.api.common.LangString _iter53 : struct.multiLangDesc)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetAllowCountries()) {
        {
          oprot.writeI32(struct.allowCountries.size());
          for (com.lesports.api.common.CountryCode _iter54 : struct.allowCountries)
          {
            oprot.writeI32(_iter54.getValue());
          }
        }
      }
      if (struct.isSetValidLicences()) {
        {
          oprot.writeI32(struct.validLicences.size());
          for (com.lesports.qmt.sbc.api.common.TvLicence _iter55 : struct.validLicences)
          {
            oprot.writeI32(_iter55.getValue());
          }
        }
      }
      if (struct.isSetDrmFlag()) {
        oprot.writeI32(struct.drmFlag);
      }
      if (struct.isSetIsPay()) {
        oprot.writeI32(struct.isPay);
      }
      if (struct.isSetLeecoVid()) {
        oprot.writeI64(struct.leecoVid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVideo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set56 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.mids = new HashSet<Long>(2*_set56.size);
          long _elem57;
          for (int _i58 = 0; _i58 < _set56.size; ++_i58)
          {
            _elem57 = iprot.readI64();
            struct.mids.add(_elem57);
          }
        }
        struct.setMidsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set59 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tids = new HashSet<Long>(2*_set59.size);
          long _elem60;
          for (int _i61 = 0; _i61 < _set59.size; ++_i61)
          {
            _elem60 = iprot.readI64();
            struct.tids.add(_elem60);
          }
        }
        struct.setTidsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set62 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.pids = new HashSet<Long>(2*_set62.size);
          long _elem63;
          for (int _i64 = 0; _i64 < _set62.size; ++_i64)
          {
            _elem63 = iprot.readI64();
            struct.pids.add(_elem63);
          }
        }
        struct.setPidsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gameFType = iprot.readI64();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.gameSType = iprot.readI64();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.contentType = com.lesports.qmt.sbc.api.common.VideoContentType.findByValue(iprot.readI32());
        struct.setContentTypeIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set65 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set65.size);
          com.lesports.api.common.Platform _elem66;
          for (int _i67 = 0; _i67 < _set65.size; ++_i67)
          {
            _elem66 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.platforms.add(_elem66);
          }
        }
        struct.setPlatformsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(11)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.cloneVideo = iprot.readBool();
        struct.setCloneVideoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.hasBigImage = iprot.readBool();
        struct.setHasBigImageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TSet _set68 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.eids = new HashSet<Long>(2*_set68.size);
          long _elem69;
          for (int _i70 = 0; _i70 < _set68.size; ++_i70)
          {
            _elem69 = iprot.readI64();
            struct.eids.add(_elem69);
          }
        }
        struct.setEidsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createAt = iprot.readString();
        struct.setCreateAtIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map71 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new HashMap<String,String>(2*_map71.size);
          String _key72;
          String _val73;
          for (int _i74 = 0; _i74 < _map71.size; ++_i74)
          {
            _key72 = iprot.readString();
            _val73 = iprot.readString();
            struct.images.put(_key72, _val73);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(18)) {
        struct.albumId = iprot.readI64();
        struct.setAlbumIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.aid = iprot.readI64();
        struct.setAidIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list75.size);
          com.lesports.qmt.config.api.dto.TTag _elem76;
          for (int _i77 = 0; _i77 < _list75.size; ++_i77)
          {
            _elem76 = new com.lesports.qmt.config.api.dto.TTag();
            _elem76.read(iprot);
            struct.tags.add(_elem76);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.playLink = iprot.readString();
        struct.setPlayLinkIsSet(true);
      }
      if (incoming.get(22)) {
        struct.commentId = iprot.readString();
        struct.setCommentIdIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list78.size);
          com.lesports.api.common.LangString _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            _elem79 = new com.lesports.api.common.LangString();
            _elem79.read(iprot);
            struct.multiLangNames.add(_elem79);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list81.size);
          com.lesports.api.common.LangString _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new com.lesports.api.common.LangString();
            _elem82.read(iprot);
            struct.multiLangDesc.add(_elem82);
          }
        }
        struct.setMultiLangDescIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.allowCountries = new ArrayList<com.lesports.api.common.CountryCode>(_list84.size);
          com.lesports.api.common.CountryCode _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
            struct.allowCountries.add(_elem85);
          }
        }
        struct.setAllowCountriesIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.validLicences = new ArrayList<com.lesports.qmt.sbc.api.common.TvLicence>(_list87.size);
          com.lesports.qmt.sbc.api.common.TvLicence _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = com.lesports.qmt.sbc.api.common.TvLicence.findByValue(iprot.readI32());
            struct.validLicences.add(_elem88);
          }
        }
        struct.setValidLicencesIsSet(true);
      }
      if (incoming.get(27)) {
        struct.drmFlag = iprot.readI32();
        struct.setDrmFlagIsSet(true);
      }
      if (incoming.get(28)) {
        struct.isPay = iprot.readI32();
        struct.setIsPayIsSet(true);
      }
      if (incoming.get(29)) {
        struct.leecoVid = iprot.readI64();
        struct.setLeecoVidIsSet(true);
      }
    }
  }

}

