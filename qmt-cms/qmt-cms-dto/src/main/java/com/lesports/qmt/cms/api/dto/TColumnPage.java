/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.cms.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-6")
public class TColumnPage implements org.apache.thrift.TBase<TColumnPage, TColumnPage._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnPage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAYOUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("layoutId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("columnId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VM_FIELD_DESC = new org.apache.thrift.protocol.TField("vm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField W_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("wPaths", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField M_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mData", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TColumnPageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TColumnPageTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private long layoutId; // optional
  private long columnId; // optional
  private String data; // optional
  private com.lesports.qmt.cms.api.common.PageType type; // optional
  private String vm; // optional
  private List<String> wPaths; // optional
  private String mData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    LAYOUT_ID((short)3, "layoutId"),
    COLUMN_ID((short)4, "columnId"),
    DATA((short)5, "data"),
    /**
     * 
     * @see com.lesports.qmt.cms.api.common.PageType
     */
    TYPE((short)7, "type"),
    VM((short)8, "vm"),
    W_PATHS((short)9, "wPaths"),
    M_DATA((short)10, "mData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // LAYOUT_ID
          return LAYOUT_ID;
        case 4: // COLUMN_ID
          return COLUMN_ID;
        case 5: // DATA
          return DATA;
        case 7: // TYPE
          return TYPE;
        case 8: // VM
          return VM;
        case 9: // W_PATHS
          return W_PATHS;
        case 10: // M_DATA
          return M_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __LAYOUTID_ISSET_ID = 1;
  private static final int __COLUMNID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.LAYOUT_ID,_Fields.COLUMN_ID,_Fields.DATA,_Fields.TYPE,_Fields.VM,_Fields.W_PATHS,_Fields.M_DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAYOUT_ID, new org.apache.thrift.meta_data.FieldMetaData("layoutId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLUMN_ID, new org.apache.thrift.meta_data.FieldMetaData("columnId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.cms.api.common.PageType.class)));
    tmpMap.put(_Fields.VM, new org.apache.thrift.meta_data.FieldMetaData("vm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.W_PATHS, new org.apache.thrift.meta_data.FieldMetaData("wPaths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.M_DATA, new org.apache.thrift.meta_data.FieldMetaData("mData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnPage.class, metaDataMap);
  }

  public TColumnPage() {
  }

  public TColumnPage(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnPage(TColumnPage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.layoutId = other.layoutId;
    this.columnId = other.columnId;
    if (other.isSetData()) {
      this.data = other.data;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetVm()) {
      this.vm = other.vm;
    }
    if (other.isSetWPaths()) {
      List<String> __this__wPaths = new ArrayList<String>(other.wPaths);
      this.wPaths = __this__wPaths;
    }
    if (other.isSetMData()) {
      this.mData = other.mData;
    }
  }

  public TColumnPage deepCopy() {
    return new TColumnPage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setLayoutIdIsSet(false);
    this.layoutId = 0;
    setColumnIdIsSet(false);
    this.columnId = 0;
    this.data = null;
    this.type = null;
    this.vm = null;
    this.wPaths = null;
    this.mData = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getLayoutId() {
    return this.layoutId;
  }

  public void setLayoutId(long layoutId) {
    this.layoutId = layoutId;
    setLayoutIdIsSet(true);
  }

  public void unsetLayoutId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAYOUTID_ISSET_ID);
  }

  /** Returns true if field layoutId is set (has been assigned a value) and false otherwise */
  public boolean isSetLayoutId() {
    return EncodingUtils.testBit(__isset_bitfield, __LAYOUTID_ISSET_ID);
  }

  public void setLayoutIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAYOUTID_ISSET_ID, value);
  }

  public long getColumnId() {
    return this.columnId;
  }

  public void setColumnId(long columnId) {
    this.columnId = columnId;
    setColumnIdIsSet(true);
  }

  public void unsetColumnId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNID_ISSET_ID);
  }

  /** Returns true if field columnId is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnId() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNID_ISSET_ID);
  }

  public void setColumnIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNID_ISSET_ID, value);
  }

  public String getData() {
    return this.data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.cms.api.common.PageType
   */
  public com.lesports.qmt.cms.api.common.PageType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.lesports.qmt.cms.api.common.PageType
   */
  public void setType(com.lesports.qmt.cms.api.common.PageType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getVm() {
    return this.vm;
  }

  public void setVm(String vm) {
    this.vm = vm;
  }

  public void unsetVm() {
    this.vm = null;
  }

  /** Returns true if field vm is set (has been assigned a value) and false otherwise */
  public boolean isSetVm() {
    return this.vm != null;
  }

  public void setVmIsSet(boolean value) {
    if (!value) {
      this.vm = null;
    }
  }

  public int getWPathsSize() {
    return (this.wPaths == null) ? 0 : this.wPaths.size();
  }

  public java.util.Iterator<String> getWPathsIterator() {
    return (this.wPaths == null) ? null : this.wPaths.iterator();
  }

  public void addToWPaths(String elem) {
    if (this.wPaths == null) {
      this.wPaths = new ArrayList<String>();
    }
    this.wPaths.add(elem);
  }

  public List<String> getWPaths() {
    return this.wPaths;
  }

  public void setWPaths(List<String> wPaths) {
    this.wPaths = wPaths;
  }

  public void unsetWPaths() {
    this.wPaths = null;
  }

  /** Returns true if field wPaths is set (has been assigned a value) and false otherwise */
  public boolean isSetWPaths() {
    return this.wPaths != null;
  }

  public void setWPathsIsSet(boolean value) {
    if (!value) {
      this.wPaths = null;
    }
  }

  public String getMData() {
    return this.mData;
  }

  public void setMData(String mData) {
    this.mData = mData;
  }

  public void unsetMData() {
    this.mData = null;
  }

  /** Returns true if field mData is set (has been assigned a value) and false otherwise */
  public boolean isSetMData() {
    return this.mData != null;
  }

  public void setMDataIsSet(boolean value) {
    if (!value) {
      this.mData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case LAYOUT_ID:
      if (value == null) {
        unsetLayoutId();
      } else {
        setLayoutId((Long)value);
      }
      break;

    case COLUMN_ID:
      if (value == null) {
        unsetColumnId();
      } else {
        setColumnId((Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.lesports.qmt.cms.api.common.PageType)value);
      }
      break;

    case VM:
      if (value == null) {
        unsetVm();
      } else {
        setVm((String)value);
      }
      break;

    case W_PATHS:
      if (value == null) {
        unsetWPaths();
      } else {
        setWPaths((List<String>)value);
      }
      break;

    case M_DATA:
      if (value == null) {
        unsetMData();
      } else {
        setMData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case LAYOUT_ID:
      return Long.valueOf(getLayoutId());

    case COLUMN_ID:
      return Long.valueOf(getColumnId());

    case DATA:
      return getData();

    case TYPE:
      return getType();

    case VM:
      return getVm();

    case W_PATHS:
      return getWPaths();

    case M_DATA:
      return getMData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case LAYOUT_ID:
      return isSetLayoutId();
    case COLUMN_ID:
      return isSetColumnId();
    case DATA:
      return isSetData();
    case TYPE:
      return isSetType();
    case VM:
      return isSetVm();
    case W_PATHS:
      return isSetWPaths();
    case M_DATA:
      return isSetMData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TColumnPage)
      return this.equals((TColumnPage)that);
    return false;
  }

  public boolean equals(TColumnPage that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_layoutId = true && this.isSetLayoutId();
    boolean that_present_layoutId = true && that.isSetLayoutId();
    if (this_present_layoutId || that_present_layoutId) {
      if (!(this_present_layoutId && that_present_layoutId))
        return false;
      if (this.layoutId != that.layoutId)
        return false;
    }

    boolean this_present_columnId = true && this.isSetColumnId();
    boolean that_present_columnId = true && that.isSetColumnId();
    if (this_present_columnId || that_present_columnId) {
      if (!(this_present_columnId && that_present_columnId))
        return false;
      if (this.columnId != that.columnId)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_vm = true && this.isSetVm();
    boolean that_present_vm = true && that.isSetVm();
    if (this_present_vm || that_present_vm) {
      if (!(this_present_vm && that_present_vm))
        return false;
      if (!this.vm.equals(that.vm))
        return false;
    }

    boolean this_present_wPaths = true && this.isSetWPaths();
    boolean that_present_wPaths = true && that.isSetWPaths();
    if (this_present_wPaths || that_present_wPaths) {
      if (!(this_present_wPaths && that_present_wPaths))
        return false;
      if (!this.wPaths.equals(that.wPaths))
        return false;
    }

    boolean this_present_mData = true && this.isSetMData();
    boolean that_present_mData = true && that.isSetMData();
    if (this_present_mData || that_present_mData) {
      if (!(this_present_mData && that_present_mData))
        return false;
      if (!this.mData.equals(that.mData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_layoutId = true && (isSetLayoutId());
    list.add(present_layoutId);
    if (present_layoutId)
      list.add(layoutId);

    boolean present_columnId = true && (isSetColumnId());
    list.add(present_columnId);
    if (present_columnId)
      list.add(columnId);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_vm = true && (isSetVm());
    list.add(present_vm);
    if (present_vm)
      list.add(vm);

    boolean present_wPaths = true && (isSetWPaths());
    list.add(present_wPaths);
    if (present_wPaths)
      list.add(wPaths);

    boolean present_mData = true && (isSetMData());
    list.add(present_mData);
    if (present_mData)
      list.add(mData);

    return list.hashCode();
  }

  @Override
  public int compareTo(TColumnPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLayoutId()).compareTo(other.isSetLayoutId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayoutId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layoutId, other.layoutId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnId()).compareTo(other.isSetColumnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnId, other.columnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVm()).compareTo(other.isSetVm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vm, other.vm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWPaths()).compareTo(other.isSetWPaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWPaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wPaths, other.wPaths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMData()).compareTo(other.isSetMData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mData, other.mData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TColumnPage(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetLayoutId()) {
      if (!first) sb.append(", ");
      sb.append("layoutId:");
      sb.append(this.layoutId);
      first = false;
    }
    if (isSetColumnId()) {
      if (!first) sb.append(", ");
      sb.append("columnId:");
      sb.append(this.columnId);
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetVm()) {
      if (!first) sb.append(", ");
      sb.append("vm:");
      if (this.vm == null) {
        sb.append("null");
      } else {
        sb.append(this.vm);
      }
      first = false;
    }
    if (isSetWPaths()) {
      if (!first) sb.append(", ");
      sb.append("wPaths:");
      if (this.wPaths == null) {
        sb.append("null");
      } else {
        sb.append(this.wPaths);
      }
      first = false;
    }
    if (isSetMData()) {
      if (!first) sb.append(", ");
      sb.append("mData:");
      if (this.mData == null) {
        sb.append("null");
      } else {
        sb.append(this.mData);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnPageStandardSchemeFactory implements SchemeFactory {
    public TColumnPageStandardScheme getScheme() {
      return new TColumnPageStandardScheme();
    }
  }

  private static class TColumnPageStandardScheme extends StandardScheme<TColumnPage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAYOUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.layoutId = iprot.readI64();
              struct.setLayoutIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.columnId = iprot.readI64();
              struct.setColumnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.cms.api.common.PageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vm = iprot.readString();
              struct.setVmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // W_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.wPaths = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.wPaths.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setWPathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // M_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mData = iprot.readString();
              struct.setMDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLayoutId()) {
        oprot.writeFieldBegin(LAYOUT_ID_FIELD_DESC);
        oprot.writeI64(struct.layoutId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetColumnId()) {
        oprot.writeFieldBegin(COLUMN_ID_FIELD_DESC);
        oprot.writeI64(struct.columnId);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.vm != null) {
        if (struct.isSetVm()) {
          oprot.writeFieldBegin(VM_FIELD_DESC);
          oprot.writeString(struct.vm);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wPaths != null) {
        if (struct.isSetWPaths()) {
          oprot.writeFieldBegin(W_PATHS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.wPaths.size()));
            for (String _iter3 : struct.wPaths)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mData != null) {
        if (struct.isSetMData()) {
          oprot.writeFieldBegin(M_DATA_FIELD_DESC);
          oprot.writeString(struct.mData);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnPageTupleSchemeFactory implements SchemeFactory {
    public TColumnPageTupleScheme getScheme() {
      return new TColumnPageTupleScheme();
    }
  }

  private static class TColumnPageTupleScheme extends TupleScheme<TColumnPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnPage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetLayoutId()) {
        optionals.set(2);
      }
      if (struct.isSetColumnId()) {
        optionals.set(3);
      }
      if (struct.isSetData()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetVm()) {
        optionals.set(6);
      }
      if (struct.isSetWPaths()) {
        optionals.set(7);
      }
      if (struct.isSetMData()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetLayoutId()) {
        oprot.writeI64(struct.layoutId);
      }
      if (struct.isSetColumnId()) {
        oprot.writeI64(struct.columnId);
      }
      if (struct.isSetData()) {
        oprot.writeString(struct.data);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetVm()) {
        oprot.writeString(struct.vm);
      }
      if (struct.isSetWPaths()) {
        {
          oprot.writeI32(struct.wPaths.size());
          for (String _iter4 : struct.wPaths)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetMData()) {
        oprot.writeString(struct.mData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnPage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.layoutId = iprot.readI64();
        struct.setLayoutIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columnId = iprot.readI64();
        struct.setColumnIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.data = iprot.readString();
        struct.setDataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = com.lesports.qmt.cms.api.common.PageType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.vm = iprot.readString();
        struct.setVmIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.wPaths = new ArrayList<String>(_list5.size);
          String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.wPaths.add(_elem6);
          }
        }
        struct.setWPathsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mData = iprot.readString();
        struct.setMDataIsSet(true);
      }
    }
  }

}

