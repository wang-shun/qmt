/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.config.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 菜单项
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-3")
public class TMenuItem implements org.apache.thrift.TBase<TMenuItem, TMenuItem._Fields>, java.io.Serializable, Cloneable, Comparable<TMenuItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMenuItem");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NEWS_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsResourceId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("subItems", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_NEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isNew", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField IS_HOT_FIELD_DESC = new org.apache.thrift.protocol.TField("isHot", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField IS_RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isRecommend", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField TOPLIST_CID_FIELD_DESC = new org.apache.thrift.protocol.TField("toplistCid", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField MATCH_CID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCid", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField RECOMMEND_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendOrder", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CAMP_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campCategoryId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CAMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campId", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField IS_FORCE_RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isForceRecommend", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField FORCE_RECOMMEND_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("forceRecommendOrder", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField SCHEDULE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleType", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PUB_CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("pubChannels", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField MATCH_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("matchResourceId", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField CAROUSEL_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("carouselResourceId", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField IS_TEAM_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("isTeamData", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField IS_PLAYER_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("isPlayerData", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField NEWS_AUTO_RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsAutoResourceId", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField M_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mUrl", org.apache.thrift.protocol.TType.STRING, (short)29);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMenuItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMenuItemTupleSchemeFactory());
  }

  private long index; // required
  private MenuResourceType resourceType; // optional
  private long resourceId; // optional
  private long newsResourceId; // optional
  private int level; // optional
  private List<TMenuItem> subItems; // optional
  private String name; // optional
  private boolean isNew; // optional
  private boolean isHot; // optional
  private int order; // optional
  private Map<String,String> imageUrl; // optional
  private boolean isRecommend; // optional
  private long toplistCid; // optional
  private long matchCid; // optional
  private String url; // optional
  private int recommendOrder; // optional
  private String campCategoryId; // optional
  private String campId; // optional
  private boolean isForceRecommend; // optional
  private int forceRecommendOrder; // optional
  private ScheduleType scheduleType; // optional
  private List<com.lesports.api.common.PubChannel> pubChannels; // optional
  private long matchResourceId; // optional
  private long carouselResourceId; // optional
  private boolean isTeamData; // optional
  private boolean isPlayerData; // optional
  private long teamId; // optional
  private long newsAutoResourceId; // optional
  private String mUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "index"),
    /**
     * 
     * @see MenuResourceType
     */
    RESOURCE_TYPE((short)2, "resourceType"),
    RESOURCE_ID((short)3, "resourceId"),
    NEWS_RESOURCE_ID((short)4, "newsResourceId"),
    LEVEL((short)5, "level"),
    SUB_ITEMS((short)6, "subItems"),
    NAME((short)7, "name"),
    IS_NEW((short)8, "isNew"),
    IS_HOT((short)9, "isHot"),
    ORDER((short)10, "order"),
    IMAGE_URL((short)11, "imageUrl"),
    IS_RECOMMEND((short)12, "isRecommend"),
    TOPLIST_CID((short)13, "toplistCid"),
    MATCH_CID((short)14, "matchCid"),
    URL((short)15, "url"),
    RECOMMEND_ORDER((short)16, "recommendOrder"),
    CAMP_CATEGORY_ID((short)17, "campCategoryId"),
    CAMP_ID((short)18, "campId"),
    IS_FORCE_RECOMMEND((short)19, "isForceRecommend"),
    FORCE_RECOMMEND_ORDER((short)20, "forceRecommendOrder"),
    /**
     * 
     * @see ScheduleType
     */
    SCHEDULE_TYPE((short)21, "scheduleType"),
    PUB_CHANNELS((short)22, "pubChannels"),
    MATCH_RESOURCE_ID((short)23, "matchResourceId"),
    CAROUSEL_RESOURCE_ID((short)24, "carouselResourceId"),
    IS_TEAM_DATA((short)25, "isTeamData"),
    IS_PLAYER_DATA((short)26, "isPlayerData"),
    TEAM_ID((short)27, "teamId"),
    NEWS_AUTO_RESOURCE_ID((short)28, "newsAutoResourceId"),
    M_URL((short)29, "mUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 3: // RESOURCE_ID
          return RESOURCE_ID;
        case 4: // NEWS_RESOURCE_ID
          return NEWS_RESOURCE_ID;
        case 5: // LEVEL
          return LEVEL;
        case 6: // SUB_ITEMS
          return SUB_ITEMS;
        case 7: // NAME
          return NAME;
        case 8: // IS_NEW
          return IS_NEW;
        case 9: // IS_HOT
          return IS_HOT;
        case 10: // ORDER
          return ORDER;
        case 11: // IMAGE_URL
          return IMAGE_URL;
        case 12: // IS_RECOMMEND
          return IS_RECOMMEND;
        case 13: // TOPLIST_CID
          return TOPLIST_CID;
        case 14: // MATCH_CID
          return MATCH_CID;
        case 15: // URL
          return URL;
        case 16: // RECOMMEND_ORDER
          return RECOMMEND_ORDER;
        case 17: // CAMP_CATEGORY_ID
          return CAMP_CATEGORY_ID;
        case 18: // CAMP_ID
          return CAMP_ID;
        case 19: // IS_FORCE_RECOMMEND
          return IS_FORCE_RECOMMEND;
        case 20: // FORCE_RECOMMEND_ORDER
          return FORCE_RECOMMEND_ORDER;
        case 21: // SCHEDULE_TYPE
          return SCHEDULE_TYPE;
        case 22: // PUB_CHANNELS
          return PUB_CHANNELS;
        case 23: // MATCH_RESOURCE_ID
          return MATCH_RESOURCE_ID;
        case 24: // CAROUSEL_RESOURCE_ID
          return CAROUSEL_RESOURCE_ID;
        case 25: // IS_TEAM_DATA
          return IS_TEAM_DATA;
        case 26: // IS_PLAYER_DATA
          return IS_PLAYER_DATA;
        case 27: // TEAM_ID
          return TEAM_ID;
        case 28: // NEWS_AUTO_RESOURCE_ID
          return NEWS_AUTO_RESOURCE_ID;
        case 29: // M_URL
          return M_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __RESOURCEID_ISSET_ID = 1;
  private static final int __NEWSRESOURCEID_ISSET_ID = 2;
  private static final int __LEVEL_ISSET_ID = 3;
  private static final int __ISNEW_ISSET_ID = 4;
  private static final int __ISHOT_ISSET_ID = 5;
  private static final int __ORDER_ISSET_ID = 6;
  private static final int __ISRECOMMEND_ISSET_ID = 7;
  private static final int __TOPLISTCID_ISSET_ID = 8;
  private static final int __MATCHCID_ISSET_ID = 9;
  private static final int __RECOMMENDORDER_ISSET_ID = 10;
  private static final int __ISFORCERECOMMEND_ISSET_ID = 11;
  private static final int __FORCERECOMMENDORDER_ISSET_ID = 12;
  private static final int __MATCHRESOURCEID_ISSET_ID = 13;
  private static final int __CAROUSELRESOURCEID_ISSET_ID = 14;
  private static final int __ISTEAMDATA_ISSET_ID = 15;
  private static final int __ISPLAYERDATA_ISSET_ID = 16;
  private static final int __TEAMID_ISSET_ID = 17;
  private static final int __NEWSAUTORESOURCEID_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESOURCE_TYPE,_Fields.RESOURCE_ID,_Fields.NEWS_RESOURCE_ID,_Fields.LEVEL,_Fields.SUB_ITEMS,_Fields.NAME,_Fields.IS_NEW,_Fields.IS_HOT,_Fields.ORDER,_Fields.IMAGE_URL,_Fields.IS_RECOMMEND,_Fields.TOPLIST_CID,_Fields.MATCH_CID,_Fields.URL,_Fields.RECOMMEND_ORDER,_Fields.CAMP_CATEGORY_ID,_Fields.CAMP_ID,_Fields.IS_FORCE_RECOMMEND,_Fields.FORCE_RECOMMEND_ORDER,_Fields.SCHEDULE_TYPE,_Fields.PUB_CHANNELS,_Fields.MATCH_RESOURCE_ID,_Fields.CAROUSEL_RESOURCE_ID,_Fields.IS_TEAM_DATA,_Fields.IS_PLAYER_DATA,_Fields.TEAM_ID,_Fields.NEWS_AUTO_RESOURCE_ID,_Fields.M_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MenuResourceType.class)));
    tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEWS_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("newsResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("subItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TMenuItem"))));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEW, new org.apache.thrift.meta_data.FieldMetaData("isNew", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_HOT, new org.apache.thrift.meta_data.FieldMetaData("isHot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.IS_RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("isRecommend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOPLIST_CID, new org.apache.thrift.meta_data.FieldMetaData("toplistCid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MATCH_CID, new org.apache.thrift.meta_data.FieldMetaData("matchCid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECOMMEND_ORDER, new org.apache.thrift.meta_data.FieldMetaData("recommendOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMP_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("campCategoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMP_ID, new org.apache.thrift.meta_data.FieldMetaData("campId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FORCE_RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("isForceRecommend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FORCE_RECOMMEND_ORDER, new org.apache.thrift.meta_data.FieldMetaData("forceRecommendOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEDULE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scheduleType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ScheduleType.class)));
    tmpMap.put(_Fields.PUB_CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("pubChannels", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.PubChannel.class))));
    tmpMap.put(_Fields.MATCH_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("matchResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAROUSEL_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("carouselResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_TEAM_DATA, new org.apache.thrift.meta_data.FieldMetaData("isTeamData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PLAYER_DATA, new org.apache.thrift.meta_data.FieldMetaData("isPlayerData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEWS_AUTO_RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("newsAutoResourceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.M_URL, new org.apache.thrift.meta_data.FieldMetaData("mUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMenuItem.class, metaDataMap);
  }

  public TMenuItem() {
  }

  public TMenuItem(
    long index)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMenuItem(TMenuItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.index = other.index;
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    this.resourceId = other.resourceId;
    this.newsResourceId = other.newsResourceId;
    this.level = other.level;
    if (other.isSetSubItems()) {
      List<TMenuItem> __this__subItems = new ArrayList<TMenuItem>(other.subItems.size());
      for (TMenuItem other_element : other.subItems) {
        __this__subItems.add(other_element);
      }
      this.subItems = __this__subItems;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.isNew = other.isNew;
    this.isHot = other.isHot;
    this.order = other.order;
    if (other.isSetImageUrl()) {
      Map<String,String> __this__imageUrl = new HashMap<String,String>(other.imageUrl);
      this.imageUrl = __this__imageUrl;
    }
    this.isRecommend = other.isRecommend;
    this.toplistCid = other.toplistCid;
    this.matchCid = other.matchCid;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.recommendOrder = other.recommendOrder;
    if (other.isSetCampCategoryId()) {
      this.campCategoryId = other.campCategoryId;
    }
    if (other.isSetCampId()) {
      this.campId = other.campId;
    }
    this.isForceRecommend = other.isForceRecommend;
    this.forceRecommendOrder = other.forceRecommendOrder;
    if (other.isSetScheduleType()) {
      this.scheduleType = other.scheduleType;
    }
    if (other.isSetPubChannels()) {
      List<com.lesports.api.common.PubChannel> __this__pubChannels = new ArrayList<com.lesports.api.common.PubChannel>(other.pubChannels.size());
      for (com.lesports.api.common.PubChannel other_element : other.pubChannels) {
        __this__pubChannels.add(other_element);
      }
      this.pubChannels = __this__pubChannels;
    }
    this.matchResourceId = other.matchResourceId;
    this.carouselResourceId = other.carouselResourceId;
    this.isTeamData = other.isTeamData;
    this.isPlayerData = other.isPlayerData;
    this.teamId = other.teamId;
    this.newsAutoResourceId = other.newsAutoResourceId;
    if (other.isSetMUrl()) {
      this.mUrl = other.mUrl;
    }
  }

  public TMenuItem deepCopy() {
    return new TMenuItem(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    this.resourceType = null;
    setResourceIdIsSet(false);
    this.resourceId = 0;
    setNewsResourceIdIsSet(false);
    this.newsResourceId = 0;
    setLevelIsSet(false);
    this.level = 0;
    this.subItems = null;
    this.name = null;
    setIsNewIsSet(false);
    this.isNew = false;
    setIsHotIsSet(false);
    this.isHot = false;
    setOrderIsSet(false);
    this.order = 0;
    this.imageUrl = null;
    setIsRecommendIsSet(false);
    this.isRecommend = false;
    setToplistCidIsSet(false);
    this.toplistCid = 0;
    setMatchCidIsSet(false);
    this.matchCid = 0;
    this.url = null;
    setRecommendOrderIsSet(false);
    this.recommendOrder = 0;
    this.campCategoryId = null;
    this.campId = null;
    setIsForceRecommendIsSet(false);
    this.isForceRecommend = false;
    setForceRecommendOrderIsSet(false);
    this.forceRecommendOrder = 0;
    this.scheduleType = null;
    this.pubChannels = null;
    setMatchResourceIdIsSet(false);
    this.matchResourceId = 0;
    setCarouselResourceIdIsSet(false);
    this.carouselResourceId = 0;
    setIsTeamDataIsSet(false);
    this.isTeamData = false;
    setIsPlayerDataIsSet(false);
    this.isPlayerData = false;
    setTeamIdIsSet(false);
    this.teamId = 0;
    setNewsAutoResourceIdIsSet(false);
    this.newsAutoResourceId = 0;
    this.mUrl = null;
  }

  public long getIndex() {
    return this.index;
  }

  public void setIndex(long index) {
    this.index = index;
    setIndexIsSet(true);
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  /**
   * 
   * @see MenuResourceType
   */
  public MenuResourceType getResourceType() {
    return this.resourceType;
  }

  /**
   * 
   * @see MenuResourceType
   */
  public void setResourceType(MenuResourceType resourceType) {
    this.resourceType = resourceType;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  public long getResourceId() {
    return this.resourceId;
  }

  public void setResourceId(long resourceId) {
    this.resourceId = resourceId;
    setResourceIdIsSet(true);
  }

  public void unsetResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
  }

  /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
  }

  public void setResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
  }

  public long getNewsResourceId() {
    return this.newsResourceId;
  }

  public void setNewsResourceId(long newsResourceId) {
    this.newsResourceId = newsResourceId;
    setNewsResourceIdIsSet(true);
  }

  public void unsetNewsResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSRESOURCEID_ISSET_ID);
  }

  /** Returns true if field newsResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewsResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWSRESOURCEID_ISSET_ID);
  }

  public void setNewsResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSRESOURCEID_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public void setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getSubItemsSize() {
    return (this.subItems == null) ? 0 : this.subItems.size();
  }

  public java.util.Iterator<TMenuItem> getSubItemsIterator() {
    return (this.subItems == null) ? null : this.subItems.iterator();
  }

  public void addToSubItems(TMenuItem elem) {
    if (this.subItems == null) {
      this.subItems = new ArrayList<TMenuItem>();
    }
    this.subItems.add(elem);
  }

  public List<TMenuItem> getSubItems() {
    return this.subItems;
  }

  public void setSubItems(List<TMenuItem> subItems) {
    this.subItems = subItems;
  }

  public void unsetSubItems() {
    this.subItems = null;
  }

  /** Returns true if field subItems is set (has been assigned a value) and false otherwise */
  public boolean isSetSubItems() {
    return this.subItems != null;
  }

  public void setSubItemsIsSet(boolean value) {
    if (!value) {
      this.subItems = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isIsNew() {
    return this.isNew;
  }

  public void setIsNew(boolean isNew) {
    this.isNew = isNew;
    setIsNewIsSet(true);
  }

  public void unsetIsNew() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEW_ISSET_ID);
  }

  /** Returns true if field isNew is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNew() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEW_ISSET_ID);
  }

  public void setIsNewIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEW_ISSET_ID, value);
  }

  public boolean isIsHot() {
    return this.isHot;
  }

  public void setIsHot(boolean isHot) {
    this.isHot = isHot;
    setIsHotIsSet(true);
  }

  public void unsetIsHot() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHOT_ISSET_ID);
  }

  /** Returns true if field isHot is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHot() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHOT_ISSET_ID);
  }

  public void setIsHotIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHOT_ISSET_ID, value);
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public int getImageUrlSize() {
    return (this.imageUrl == null) ? 0 : this.imageUrl.size();
  }

  public void putToImageUrl(String key, String val) {
    if (this.imageUrl == null) {
      this.imageUrl = new HashMap<String,String>();
    }
    this.imageUrl.put(key, val);
  }

  public Map<String,String> getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(Map<String,String> imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public boolean isIsRecommend() {
    return this.isRecommend;
  }

  public void setIsRecommend(boolean isRecommend) {
    this.isRecommend = isRecommend;
    setIsRecommendIsSet(true);
  }

  public void unsetIsRecommend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECOMMEND_ISSET_ID);
  }

  /** Returns true if field isRecommend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRecommend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECOMMEND_ISSET_ID);
  }

  public void setIsRecommendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECOMMEND_ISSET_ID, value);
  }

  public long getToplistCid() {
    return this.toplistCid;
  }

  public void setToplistCid(long toplistCid) {
    this.toplistCid = toplistCid;
    setToplistCidIsSet(true);
  }

  public void unsetToplistCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPLISTCID_ISSET_ID);
  }

  /** Returns true if field toplistCid is set (has been assigned a value) and false otherwise */
  public boolean isSetToplistCid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPLISTCID_ISSET_ID);
  }

  public void setToplistCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPLISTCID_ISSET_ID, value);
  }

  public long getMatchCid() {
    return this.matchCid;
  }

  public void setMatchCid(long matchCid) {
    this.matchCid = matchCid;
    setMatchCidIsSet(true);
  }

  public void unsetMatchCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHCID_ISSET_ID);
  }

  /** Returns true if field matchCid is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchCid() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHCID_ISSET_ID);
  }

  public void setMatchCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHCID_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getRecommendOrder() {
    return this.recommendOrder;
  }

  public void setRecommendOrder(int recommendOrder) {
    this.recommendOrder = recommendOrder;
    setRecommendOrderIsSet(true);
  }

  public void unsetRecommendOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECOMMENDORDER_ISSET_ID);
  }

  /** Returns true if field recommendOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __RECOMMENDORDER_ISSET_ID);
  }

  public void setRecommendOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECOMMENDORDER_ISSET_ID, value);
  }

  public String getCampCategoryId() {
    return this.campCategoryId;
  }

  public void setCampCategoryId(String campCategoryId) {
    this.campCategoryId = campCategoryId;
  }

  public void unsetCampCategoryId() {
    this.campCategoryId = null;
  }

  /** Returns true if field campCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCampCategoryId() {
    return this.campCategoryId != null;
  }

  public void setCampCategoryIdIsSet(boolean value) {
    if (!value) {
      this.campCategoryId = null;
    }
  }

  public String getCampId() {
    return this.campId;
  }

  public void setCampId(String campId) {
    this.campId = campId;
  }

  public void unsetCampId() {
    this.campId = null;
  }

  /** Returns true if field campId is set (has been assigned a value) and false otherwise */
  public boolean isSetCampId() {
    return this.campId != null;
  }

  public void setCampIdIsSet(boolean value) {
    if (!value) {
      this.campId = null;
    }
  }

  public boolean isIsForceRecommend() {
    return this.isForceRecommend;
  }

  public void setIsForceRecommend(boolean isForceRecommend) {
    this.isForceRecommend = isForceRecommend;
    setIsForceRecommendIsSet(true);
  }

  public void unsetIsForceRecommend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFORCERECOMMEND_ISSET_ID);
  }

  /** Returns true if field isForceRecommend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsForceRecommend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFORCERECOMMEND_ISSET_ID);
  }

  public void setIsForceRecommendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFORCERECOMMEND_ISSET_ID, value);
  }

  public int getForceRecommendOrder() {
    return this.forceRecommendOrder;
  }

  public void setForceRecommendOrder(int forceRecommendOrder) {
    this.forceRecommendOrder = forceRecommendOrder;
    setForceRecommendOrderIsSet(true);
  }

  public void unsetForceRecommendOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORCERECOMMENDORDER_ISSET_ID);
  }

  /** Returns true if field forceRecommendOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetForceRecommendOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __FORCERECOMMENDORDER_ISSET_ID);
  }

  public void setForceRecommendOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORCERECOMMENDORDER_ISSET_ID, value);
  }

  /**
   * 
   * @see ScheduleType
   */
  public ScheduleType getScheduleType() {
    return this.scheduleType;
  }

  /**
   * 
   * @see ScheduleType
   */
  public void setScheduleType(ScheduleType scheduleType) {
    this.scheduleType = scheduleType;
  }

  public void unsetScheduleType() {
    this.scheduleType = null;
  }

  /** Returns true if field scheduleType is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduleType() {
    return this.scheduleType != null;
  }

  public void setScheduleTypeIsSet(boolean value) {
    if (!value) {
      this.scheduleType = null;
    }
  }

  public int getPubChannelsSize() {
    return (this.pubChannels == null) ? 0 : this.pubChannels.size();
  }

  public java.util.Iterator<com.lesports.api.common.PubChannel> getPubChannelsIterator() {
    return (this.pubChannels == null) ? null : this.pubChannels.iterator();
  }

  public void addToPubChannels(com.lesports.api.common.PubChannel elem) {
    if (this.pubChannels == null) {
      this.pubChannels = new ArrayList<com.lesports.api.common.PubChannel>();
    }
    this.pubChannels.add(elem);
  }

  public List<com.lesports.api.common.PubChannel> getPubChannels() {
    return this.pubChannels;
  }

  public void setPubChannels(List<com.lesports.api.common.PubChannel> pubChannels) {
    this.pubChannels = pubChannels;
  }

  public void unsetPubChannels() {
    this.pubChannels = null;
  }

  /** Returns true if field pubChannels is set (has been assigned a value) and false otherwise */
  public boolean isSetPubChannels() {
    return this.pubChannels != null;
  }

  public void setPubChannelsIsSet(boolean value) {
    if (!value) {
      this.pubChannels = null;
    }
  }

  public long getMatchResourceId() {
    return this.matchResourceId;
  }

  public void setMatchResourceId(long matchResourceId) {
    this.matchResourceId = matchResourceId;
    setMatchResourceIdIsSet(true);
  }

  public void unsetMatchResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MATCHRESOURCEID_ISSET_ID);
  }

  /** Returns true if field matchResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __MATCHRESOURCEID_ISSET_ID);
  }

  public void setMatchResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MATCHRESOURCEID_ISSET_ID, value);
  }

  public long getCarouselResourceId() {
    return this.carouselResourceId;
  }

  public void setCarouselResourceId(long carouselResourceId) {
    this.carouselResourceId = carouselResourceId;
    setCarouselResourceIdIsSet(true);
  }

  public void unsetCarouselResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAROUSELRESOURCEID_ISSET_ID);
  }

  /** Returns true if field carouselResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetCarouselResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __CAROUSELRESOURCEID_ISSET_ID);
  }

  public void setCarouselResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAROUSELRESOURCEID_ISSET_ID, value);
  }

  public boolean isIsTeamData() {
    return this.isTeamData;
  }

  public void setIsTeamData(boolean isTeamData) {
    this.isTeamData = isTeamData;
    setIsTeamDataIsSet(true);
  }

  public void unsetIsTeamData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTEAMDATA_ISSET_ID);
  }

  /** Returns true if field isTeamData is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTeamData() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTEAMDATA_ISSET_ID);
  }

  public void setIsTeamDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTEAMDATA_ISSET_ID, value);
  }

  public boolean isIsPlayerData() {
    return this.isPlayerData;
  }

  public void setIsPlayerData(boolean isPlayerData) {
    this.isPlayerData = isPlayerData;
    setIsPlayerDataIsSet(true);
  }

  public void unsetIsPlayerData() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPLAYERDATA_ISSET_ID);
  }

  /** Returns true if field isPlayerData is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPlayerData() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPLAYERDATA_ISSET_ID);
  }

  public void setIsPlayerDataIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPLAYERDATA_ISSET_ID, value);
  }

  public long getTeamId() {
    return this.teamId;
  }

  public void setTeamId(long teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
  }

  public void unsetTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public long getNewsAutoResourceId() {
    return this.newsAutoResourceId;
  }

  public void setNewsAutoResourceId(long newsAutoResourceId) {
    this.newsAutoResourceId = newsAutoResourceId;
    setNewsAutoResourceIdIsSet(true);
  }

  public void unsetNewsAutoResourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSAUTORESOURCEID_ISSET_ID);
  }

  /** Returns true if field newsAutoResourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewsAutoResourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWSAUTORESOURCEID_ISSET_ID);
  }

  public void setNewsAutoResourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSAUTORESOURCEID_ISSET_ID, value);
  }

  public String getMUrl() {
    return this.mUrl;
  }

  public void setMUrl(String mUrl) {
    this.mUrl = mUrl;
  }

  public void unsetMUrl() {
    this.mUrl = null;
  }

  /** Returns true if field mUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMUrl() {
    return this.mUrl != null;
  }

  public void setMUrlIsSet(boolean value) {
    if (!value) {
      this.mUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Long)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((MenuResourceType)value);
      }
      break;

    case RESOURCE_ID:
      if (value == null) {
        unsetResourceId();
      } else {
        setResourceId((Long)value);
      }
      break;

    case NEWS_RESOURCE_ID:
      if (value == null) {
        unsetNewsResourceId();
      } else {
        setNewsResourceId((Long)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case SUB_ITEMS:
      if (value == null) {
        unsetSubItems();
      } else {
        setSubItems((List<TMenuItem>)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IS_NEW:
      if (value == null) {
        unsetIsNew();
      } else {
        setIsNew((Boolean)value);
      }
      break;

    case IS_HOT:
      if (value == null) {
        unsetIsHot();
      } else {
        setIsHot((Boolean)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((Map<String,String>)value);
      }
      break;

    case IS_RECOMMEND:
      if (value == null) {
        unsetIsRecommend();
      } else {
        setIsRecommend((Boolean)value);
      }
      break;

    case TOPLIST_CID:
      if (value == null) {
        unsetToplistCid();
      } else {
        setToplistCid((Long)value);
      }
      break;

    case MATCH_CID:
      if (value == null) {
        unsetMatchCid();
      } else {
        setMatchCid((Long)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case RECOMMEND_ORDER:
      if (value == null) {
        unsetRecommendOrder();
      } else {
        setRecommendOrder((Integer)value);
      }
      break;

    case CAMP_CATEGORY_ID:
      if (value == null) {
        unsetCampCategoryId();
      } else {
        setCampCategoryId((String)value);
      }
      break;

    case CAMP_ID:
      if (value == null) {
        unsetCampId();
      } else {
        setCampId((String)value);
      }
      break;

    case IS_FORCE_RECOMMEND:
      if (value == null) {
        unsetIsForceRecommend();
      } else {
        setIsForceRecommend((Boolean)value);
      }
      break;

    case FORCE_RECOMMEND_ORDER:
      if (value == null) {
        unsetForceRecommendOrder();
      } else {
        setForceRecommendOrder((Integer)value);
      }
      break;

    case SCHEDULE_TYPE:
      if (value == null) {
        unsetScheduleType();
      } else {
        setScheduleType((ScheduleType)value);
      }
      break;

    case PUB_CHANNELS:
      if (value == null) {
        unsetPubChannels();
      } else {
        setPubChannels((List<com.lesports.api.common.PubChannel>)value);
      }
      break;

    case MATCH_RESOURCE_ID:
      if (value == null) {
        unsetMatchResourceId();
      } else {
        setMatchResourceId((Long)value);
      }
      break;

    case CAROUSEL_RESOURCE_ID:
      if (value == null) {
        unsetCarouselResourceId();
      } else {
        setCarouselResourceId((Long)value);
      }
      break;

    case IS_TEAM_DATA:
      if (value == null) {
        unsetIsTeamData();
      } else {
        setIsTeamData((Boolean)value);
      }
      break;

    case IS_PLAYER_DATA:
      if (value == null) {
        unsetIsPlayerData();
      } else {
        setIsPlayerData((Boolean)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Long)value);
      }
      break;

    case NEWS_AUTO_RESOURCE_ID:
      if (value == null) {
        unsetNewsAutoResourceId();
      } else {
        setNewsAutoResourceId((Long)value);
      }
      break;

    case M_URL:
      if (value == null) {
        unsetMUrl();
      } else {
        setMUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return Long.valueOf(getIndex());

    case RESOURCE_TYPE:
      return getResourceType();

    case RESOURCE_ID:
      return Long.valueOf(getResourceId());

    case NEWS_RESOURCE_ID:
      return Long.valueOf(getNewsResourceId());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case SUB_ITEMS:
      return getSubItems();

    case NAME:
      return getName();

    case IS_NEW:
      return Boolean.valueOf(isIsNew());

    case IS_HOT:
      return Boolean.valueOf(isIsHot());

    case ORDER:
      return Integer.valueOf(getOrder());

    case IMAGE_URL:
      return getImageUrl();

    case IS_RECOMMEND:
      return Boolean.valueOf(isIsRecommend());

    case TOPLIST_CID:
      return Long.valueOf(getToplistCid());

    case MATCH_CID:
      return Long.valueOf(getMatchCid());

    case URL:
      return getUrl();

    case RECOMMEND_ORDER:
      return Integer.valueOf(getRecommendOrder());

    case CAMP_CATEGORY_ID:
      return getCampCategoryId();

    case CAMP_ID:
      return getCampId();

    case IS_FORCE_RECOMMEND:
      return Boolean.valueOf(isIsForceRecommend());

    case FORCE_RECOMMEND_ORDER:
      return Integer.valueOf(getForceRecommendOrder());

    case SCHEDULE_TYPE:
      return getScheduleType();

    case PUB_CHANNELS:
      return getPubChannels();

    case MATCH_RESOURCE_ID:
      return Long.valueOf(getMatchResourceId());

    case CAROUSEL_RESOURCE_ID:
      return Long.valueOf(getCarouselResourceId());

    case IS_TEAM_DATA:
      return Boolean.valueOf(isIsTeamData());

    case IS_PLAYER_DATA:
      return Boolean.valueOf(isIsPlayerData());

    case TEAM_ID:
      return Long.valueOf(getTeamId());

    case NEWS_AUTO_RESOURCE_ID:
      return Long.valueOf(getNewsAutoResourceId());

    case M_URL:
      return getMUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case RESOURCE_ID:
      return isSetResourceId();
    case NEWS_RESOURCE_ID:
      return isSetNewsResourceId();
    case LEVEL:
      return isSetLevel();
    case SUB_ITEMS:
      return isSetSubItems();
    case NAME:
      return isSetName();
    case IS_NEW:
      return isSetIsNew();
    case IS_HOT:
      return isSetIsHot();
    case ORDER:
      return isSetOrder();
    case IMAGE_URL:
      return isSetImageUrl();
    case IS_RECOMMEND:
      return isSetIsRecommend();
    case TOPLIST_CID:
      return isSetToplistCid();
    case MATCH_CID:
      return isSetMatchCid();
    case URL:
      return isSetUrl();
    case RECOMMEND_ORDER:
      return isSetRecommendOrder();
    case CAMP_CATEGORY_ID:
      return isSetCampCategoryId();
    case CAMP_ID:
      return isSetCampId();
    case IS_FORCE_RECOMMEND:
      return isSetIsForceRecommend();
    case FORCE_RECOMMEND_ORDER:
      return isSetForceRecommendOrder();
    case SCHEDULE_TYPE:
      return isSetScheduleType();
    case PUB_CHANNELS:
      return isSetPubChannels();
    case MATCH_RESOURCE_ID:
      return isSetMatchResourceId();
    case CAROUSEL_RESOURCE_ID:
      return isSetCarouselResourceId();
    case IS_TEAM_DATA:
      return isSetIsTeamData();
    case IS_PLAYER_DATA:
      return isSetIsPlayerData();
    case TEAM_ID:
      return isSetTeamId();
    case NEWS_AUTO_RESOURCE_ID:
      return isSetNewsAutoResourceId();
    case M_URL:
      return isSetMUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMenuItem)
      return this.equals((TMenuItem)that);
    return false;
  }

  public boolean equals(TMenuItem that) {
    if (that == null)
      return false;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_resourceId = true && this.isSetResourceId();
    boolean that_present_resourceId = true && that.isSetResourceId();
    if (this_present_resourceId || that_present_resourceId) {
      if (!(this_present_resourceId && that_present_resourceId))
        return false;
      if (this.resourceId != that.resourceId)
        return false;
    }

    boolean this_present_newsResourceId = true && this.isSetNewsResourceId();
    boolean that_present_newsResourceId = true && that.isSetNewsResourceId();
    if (this_present_newsResourceId || that_present_newsResourceId) {
      if (!(this_present_newsResourceId && that_present_newsResourceId))
        return false;
      if (this.newsResourceId != that.newsResourceId)
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_subItems = true && this.isSetSubItems();
    boolean that_present_subItems = true && that.isSetSubItems();
    if (this_present_subItems || that_present_subItems) {
      if (!(this_present_subItems && that_present_subItems))
        return false;
      if (!this.subItems.equals(that.subItems))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_isNew = true && this.isSetIsNew();
    boolean that_present_isNew = true && that.isSetIsNew();
    if (this_present_isNew || that_present_isNew) {
      if (!(this_present_isNew && that_present_isNew))
        return false;
      if (this.isNew != that.isNew)
        return false;
    }

    boolean this_present_isHot = true && this.isSetIsHot();
    boolean that_present_isHot = true && that.isSetIsHot();
    if (this_present_isHot || that_present_isHot) {
      if (!(this_present_isHot && that_present_isHot))
        return false;
      if (this.isHot != that.isHot)
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_isRecommend = true && this.isSetIsRecommend();
    boolean that_present_isRecommend = true && that.isSetIsRecommend();
    if (this_present_isRecommend || that_present_isRecommend) {
      if (!(this_present_isRecommend && that_present_isRecommend))
        return false;
      if (this.isRecommend != that.isRecommend)
        return false;
    }

    boolean this_present_toplistCid = true && this.isSetToplistCid();
    boolean that_present_toplistCid = true && that.isSetToplistCid();
    if (this_present_toplistCid || that_present_toplistCid) {
      if (!(this_present_toplistCid && that_present_toplistCid))
        return false;
      if (this.toplistCid != that.toplistCid)
        return false;
    }

    boolean this_present_matchCid = true && this.isSetMatchCid();
    boolean that_present_matchCid = true && that.isSetMatchCid();
    if (this_present_matchCid || that_present_matchCid) {
      if (!(this_present_matchCid && that_present_matchCid))
        return false;
      if (this.matchCid != that.matchCid)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_recommendOrder = true && this.isSetRecommendOrder();
    boolean that_present_recommendOrder = true && that.isSetRecommendOrder();
    if (this_present_recommendOrder || that_present_recommendOrder) {
      if (!(this_present_recommendOrder && that_present_recommendOrder))
        return false;
      if (this.recommendOrder != that.recommendOrder)
        return false;
    }

    boolean this_present_campCategoryId = true && this.isSetCampCategoryId();
    boolean that_present_campCategoryId = true && that.isSetCampCategoryId();
    if (this_present_campCategoryId || that_present_campCategoryId) {
      if (!(this_present_campCategoryId && that_present_campCategoryId))
        return false;
      if (!this.campCategoryId.equals(that.campCategoryId))
        return false;
    }

    boolean this_present_campId = true && this.isSetCampId();
    boolean that_present_campId = true && that.isSetCampId();
    if (this_present_campId || that_present_campId) {
      if (!(this_present_campId && that_present_campId))
        return false;
      if (!this.campId.equals(that.campId))
        return false;
    }

    boolean this_present_isForceRecommend = true && this.isSetIsForceRecommend();
    boolean that_present_isForceRecommend = true && that.isSetIsForceRecommend();
    if (this_present_isForceRecommend || that_present_isForceRecommend) {
      if (!(this_present_isForceRecommend && that_present_isForceRecommend))
        return false;
      if (this.isForceRecommend != that.isForceRecommend)
        return false;
    }

    boolean this_present_forceRecommendOrder = true && this.isSetForceRecommendOrder();
    boolean that_present_forceRecommendOrder = true && that.isSetForceRecommendOrder();
    if (this_present_forceRecommendOrder || that_present_forceRecommendOrder) {
      if (!(this_present_forceRecommendOrder && that_present_forceRecommendOrder))
        return false;
      if (this.forceRecommendOrder != that.forceRecommendOrder)
        return false;
    }

    boolean this_present_scheduleType = true && this.isSetScheduleType();
    boolean that_present_scheduleType = true && that.isSetScheduleType();
    if (this_present_scheduleType || that_present_scheduleType) {
      if (!(this_present_scheduleType && that_present_scheduleType))
        return false;
      if (!this.scheduleType.equals(that.scheduleType))
        return false;
    }

    boolean this_present_pubChannels = true && this.isSetPubChannels();
    boolean that_present_pubChannels = true && that.isSetPubChannels();
    if (this_present_pubChannels || that_present_pubChannels) {
      if (!(this_present_pubChannels && that_present_pubChannels))
        return false;
      if (!this.pubChannels.equals(that.pubChannels))
        return false;
    }

    boolean this_present_matchResourceId = true && this.isSetMatchResourceId();
    boolean that_present_matchResourceId = true && that.isSetMatchResourceId();
    if (this_present_matchResourceId || that_present_matchResourceId) {
      if (!(this_present_matchResourceId && that_present_matchResourceId))
        return false;
      if (this.matchResourceId != that.matchResourceId)
        return false;
    }

    boolean this_present_carouselResourceId = true && this.isSetCarouselResourceId();
    boolean that_present_carouselResourceId = true && that.isSetCarouselResourceId();
    if (this_present_carouselResourceId || that_present_carouselResourceId) {
      if (!(this_present_carouselResourceId && that_present_carouselResourceId))
        return false;
      if (this.carouselResourceId != that.carouselResourceId)
        return false;
    }

    boolean this_present_isTeamData = true && this.isSetIsTeamData();
    boolean that_present_isTeamData = true && that.isSetIsTeamData();
    if (this_present_isTeamData || that_present_isTeamData) {
      if (!(this_present_isTeamData && that_present_isTeamData))
        return false;
      if (this.isTeamData != that.isTeamData)
        return false;
    }

    boolean this_present_isPlayerData = true && this.isSetIsPlayerData();
    boolean that_present_isPlayerData = true && that.isSetIsPlayerData();
    if (this_present_isPlayerData || that_present_isPlayerData) {
      if (!(this_present_isPlayerData && that_present_isPlayerData))
        return false;
      if (this.isPlayerData != that.isPlayerData)
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    boolean this_present_newsAutoResourceId = true && this.isSetNewsAutoResourceId();
    boolean that_present_newsAutoResourceId = true && that.isSetNewsAutoResourceId();
    if (this_present_newsAutoResourceId || that_present_newsAutoResourceId) {
      if (!(this_present_newsAutoResourceId && that_present_newsAutoResourceId))
        return false;
      if (this.newsAutoResourceId != that.newsAutoResourceId)
        return false;
    }

    boolean this_present_mUrl = true && this.isSetMUrl();
    boolean that_present_mUrl = true && that.isSetMUrl();
    if (this_present_mUrl || that_present_mUrl) {
      if (!(this_present_mUrl && that_present_mUrl))
        return false;
      if (!this.mUrl.equals(that.mUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_index = true;
    list.add(present_index);
    if (present_index)
      list.add(index);

    boolean present_resourceType = true && (isSetResourceType());
    list.add(present_resourceType);
    if (present_resourceType)
      list.add(resourceType.getValue());

    boolean present_resourceId = true && (isSetResourceId());
    list.add(present_resourceId);
    if (present_resourceId)
      list.add(resourceId);

    boolean present_newsResourceId = true && (isSetNewsResourceId());
    list.add(present_newsResourceId);
    if (present_newsResourceId)
      list.add(newsResourceId);

    boolean present_level = true && (isSetLevel());
    list.add(present_level);
    if (present_level)
      list.add(level);

    boolean present_subItems = true && (isSetSubItems());
    list.add(present_subItems);
    if (present_subItems)
      list.add(subItems);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_isNew = true && (isSetIsNew());
    list.add(present_isNew);
    if (present_isNew)
      list.add(isNew);

    boolean present_isHot = true && (isSetIsHot());
    list.add(present_isHot);
    if (present_isHot)
      list.add(isHot);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_isRecommend = true && (isSetIsRecommend());
    list.add(present_isRecommend);
    if (present_isRecommend)
      list.add(isRecommend);

    boolean present_toplistCid = true && (isSetToplistCid());
    list.add(present_toplistCid);
    if (present_toplistCid)
      list.add(toplistCid);

    boolean present_matchCid = true && (isSetMatchCid());
    list.add(present_matchCid);
    if (present_matchCid)
      list.add(matchCid);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_recommendOrder = true && (isSetRecommendOrder());
    list.add(present_recommendOrder);
    if (present_recommendOrder)
      list.add(recommendOrder);

    boolean present_campCategoryId = true && (isSetCampCategoryId());
    list.add(present_campCategoryId);
    if (present_campCategoryId)
      list.add(campCategoryId);

    boolean present_campId = true && (isSetCampId());
    list.add(present_campId);
    if (present_campId)
      list.add(campId);

    boolean present_isForceRecommend = true && (isSetIsForceRecommend());
    list.add(present_isForceRecommend);
    if (present_isForceRecommend)
      list.add(isForceRecommend);

    boolean present_forceRecommendOrder = true && (isSetForceRecommendOrder());
    list.add(present_forceRecommendOrder);
    if (present_forceRecommendOrder)
      list.add(forceRecommendOrder);

    boolean present_scheduleType = true && (isSetScheduleType());
    list.add(present_scheduleType);
    if (present_scheduleType)
      list.add(scheduleType.getValue());

    boolean present_pubChannels = true && (isSetPubChannels());
    list.add(present_pubChannels);
    if (present_pubChannels)
      list.add(pubChannels);

    boolean present_matchResourceId = true && (isSetMatchResourceId());
    list.add(present_matchResourceId);
    if (present_matchResourceId)
      list.add(matchResourceId);

    boolean present_carouselResourceId = true && (isSetCarouselResourceId());
    list.add(present_carouselResourceId);
    if (present_carouselResourceId)
      list.add(carouselResourceId);

    boolean present_isTeamData = true && (isSetIsTeamData());
    list.add(present_isTeamData);
    if (present_isTeamData)
      list.add(isTeamData);

    boolean present_isPlayerData = true && (isSetIsPlayerData());
    list.add(present_isPlayerData);
    if (present_isPlayerData)
      list.add(isPlayerData);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_newsAutoResourceId = true && (isSetNewsAutoResourceId());
    list.add(present_newsAutoResourceId);
    if (present_newsAutoResourceId)
      list.add(newsAutoResourceId);

    boolean present_mUrl = true && (isSetMUrl());
    list.add(present_mUrl);
    if (present_mUrl)
      list.add(mUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMenuItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewsResourceId()).compareTo(other.isSetNewsResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewsResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsResourceId, other.newsResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubItems()).compareTo(other.isSetSubItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subItems, other.subItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNew()).compareTo(other.isSetIsNew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNew, other.isNew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHot()).compareTo(other.isSetIsHot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHot, other.isHot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRecommend()).compareTo(other.isSetIsRecommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRecommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRecommend, other.isRecommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToplistCid()).compareTo(other.isSetToplistCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToplistCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toplistCid, other.toplistCid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchCid()).compareTo(other.isSetMatchCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCid, other.matchCid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecommendOrder()).compareTo(other.isSetRecommendOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendOrder, other.recommendOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampCategoryId()).compareTo(other.isSetCampCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campCategoryId, other.campCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampId()).compareTo(other.isSetCampId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campId, other.campId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsForceRecommend()).compareTo(other.isSetIsForceRecommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsForceRecommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForceRecommend, other.isForceRecommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForceRecommendOrder()).compareTo(other.isSetForceRecommendOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceRecommendOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forceRecommendOrder, other.forceRecommendOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduleType()).compareTo(other.isSetScheduleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleType, other.scheduleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubChannels()).compareTo(other.isSetPubChannels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubChannels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubChannels, other.pubChannels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchResourceId()).compareTo(other.isSetMatchResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchResourceId, other.matchResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarouselResourceId()).compareTo(other.isSetCarouselResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarouselResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carouselResourceId, other.carouselResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTeamData()).compareTo(other.isSetIsTeamData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTeamData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTeamData, other.isTeamData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPlayerData()).compareTo(other.isSetIsPlayerData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPlayerData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPlayerData, other.isPlayerData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewsAutoResourceId()).compareTo(other.isSetNewsAutoResourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewsAutoResourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsAutoResourceId, other.newsAutoResourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMUrl()).compareTo(other.isSetMUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mUrl, other.mUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMenuItem(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (isSetResourceType()) {
      if (!first) sb.append(", ");
      sb.append("resourceType:");
      if (this.resourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceType);
      }
      first = false;
    }
    if (isSetResourceId()) {
      if (!first) sb.append(", ");
      sb.append("resourceId:");
      sb.append(this.resourceId);
      first = false;
    }
    if (isSetNewsResourceId()) {
      if (!first) sb.append(", ");
      sb.append("newsResourceId:");
      sb.append(this.newsResourceId);
      first = false;
    }
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
    }
    if (isSetSubItems()) {
      if (!first) sb.append(", ");
      sb.append("subItems:");
      if (this.subItems == null) {
        sb.append("null");
      } else {
        sb.append(this.subItems);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetIsNew()) {
      if (!first) sb.append(", ");
      sb.append("isNew:");
      sb.append(this.isNew);
      first = false;
    }
    if (isSetIsHot()) {
      if (!first) sb.append(", ");
      sb.append("isHot:");
      sb.append(this.isHot);
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetIsRecommend()) {
      if (!first) sb.append(", ");
      sb.append("isRecommend:");
      sb.append(this.isRecommend);
      first = false;
    }
    if (isSetToplistCid()) {
      if (!first) sb.append(", ");
      sb.append("toplistCid:");
      sb.append(this.toplistCid);
      first = false;
    }
    if (isSetMatchCid()) {
      if (!first) sb.append(", ");
      sb.append("matchCid:");
      sb.append(this.matchCid);
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetRecommendOrder()) {
      if (!first) sb.append(", ");
      sb.append("recommendOrder:");
      sb.append(this.recommendOrder);
      first = false;
    }
    if (isSetCampCategoryId()) {
      if (!first) sb.append(", ");
      sb.append("campCategoryId:");
      if (this.campCategoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.campCategoryId);
      }
      first = false;
    }
    if (isSetCampId()) {
      if (!first) sb.append(", ");
      sb.append("campId:");
      if (this.campId == null) {
        sb.append("null");
      } else {
        sb.append(this.campId);
      }
      first = false;
    }
    if (isSetIsForceRecommend()) {
      if (!first) sb.append(", ");
      sb.append("isForceRecommend:");
      sb.append(this.isForceRecommend);
      first = false;
    }
    if (isSetForceRecommendOrder()) {
      if (!first) sb.append(", ");
      sb.append("forceRecommendOrder:");
      sb.append(this.forceRecommendOrder);
      first = false;
    }
    if (isSetScheduleType()) {
      if (!first) sb.append(", ");
      sb.append("scheduleType:");
      if (this.scheduleType == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduleType);
      }
      first = false;
    }
    if (isSetPubChannels()) {
      if (!first) sb.append(", ");
      sb.append("pubChannels:");
      if (this.pubChannels == null) {
        sb.append("null");
      } else {
        sb.append(this.pubChannels);
      }
      first = false;
    }
    if (isSetMatchResourceId()) {
      if (!first) sb.append(", ");
      sb.append("matchResourceId:");
      sb.append(this.matchResourceId);
      first = false;
    }
    if (isSetCarouselResourceId()) {
      if (!first) sb.append(", ");
      sb.append("carouselResourceId:");
      sb.append(this.carouselResourceId);
      first = false;
    }
    if (isSetIsTeamData()) {
      if (!first) sb.append(", ");
      sb.append("isTeamData:");
      sb.append(this.isTeamData);
      first = false;
    }
    if (isSetIsPlayerData()) {
      if (!first) sb.append(", ");
      sb.append("isPlayerData:");
      sb.append(this.isPlayerData);
      first = false;
    }
    if (isSetTeamId()) {
      if (!first) sb.append(", ");
      sb.append("teamId:");
      sb.append(this.teamId);
      first = false;
    }
    if (isSetNewsAutoResourceId()) {
      if (!first) sb.append(", ");
      sb.append("newsAutoResourceId:");
      sb.append(this.newsAutoResourceId);
      first = false;
    }
    if (isSetMUrl()) {
      if (!first) sb.append(", ");
      sb.append("mUrl:");
      if (this.mUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.mUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMenuItemStandardSchemeFactory implements SchemeFactory {
    public TMenuItemStandardScheme getScheme() {
      return new TMenuItemStandardScheme();
    }
  }

  private static class TMenuItemStandardScheme extends StandardScheme<TMenuItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMenuItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index = iprot.readI64();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resourceType = com.lesports.qmt.config.api.dto.MenuResourceType.findByValue(iprot.readI32());
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.resourceId = iprot.readI64();
              struct.setResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEWS_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.newsResourceId = iprot.readI64();
              struct.setNewsResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.subItems = new ArrayList<TMenuItem>(_list8.size);
                TMenuItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TMenuItem();
                  _elem9.read(iprot);
                  struct.subItems.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setSubItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_NEW
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isNew = iprot.readBool();
              struct.setIsNewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_HOT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHot = iprot.readBool();
              struct.setIsHotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.imageUrl = new HashMap<String,String>(2*_map11.size);
                String _key12;
                String _val13;
                for (int _i14 = 0; _i14 < _map11.size; ++_i14)
                {
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.imageUrl.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_RECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRecommend = iprot.readBool();
              struct.setIsRecommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOPLIST_CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toplistCid = iprot.readI64();
              struct.setToplistCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MATCH_CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.matchCid = iprot.readI64();
              struct.setMatchCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RECOMMEND_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recommendOrder = iprot.readI32();
              struct.setRecommendOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CAMP_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.campCategoryId = iprot.readString();
              struct.setCampCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CAMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.campId = iprot.readString();
              struct.setCampIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_FORCE_RECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isForceRecommend = iprot.readBool();
              struct.setIsForceRecommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FORCE_RECOMMEND_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.forceRecommendOrder = iprot.readI32();
              struct.setForceRecommendOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SCHEDULE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scheduleType = com.lesports.qmt.config.api.dto.ScheduleType.findByValue(iprot.readI32());
              struct.setScheduleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PUB_CHANNELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.pubChannels = new ArrayList<com.lesports.api.common.PubChannel>(_list15.size);
                com.lesports.api.common.PubChannel _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = com.lesports.api.common.PubChannel.findByValue(iprot.readI32());
                  struct.pubChannels.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setPubChannelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MATCH_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.matchResourceId = iprot.readI64();
              struct.setMatchResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CAROUSEL_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.carouselResourceId = iprot.readI64();
              struct.setCarouselResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_TEAM_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTeamData = iprot.readBool();
              struct.setIsTeamDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IS_PLAYER_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPlayerData = iprot.readBool();
              struct.setIsPlayerDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.teamId = iprot.readI64();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // NEWS_AUTO_RESOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.newsAutoResourceId = iprot.readI64();
              struct.setNewsAutoResourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // M_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mUrl = iprot.readString();
              struct.setMUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMenuItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI64(struct.index);
      oprot.writeFieldEnd();
      if (struct.resourceType != null) {
        if (struct.isSetResourceType()) {
          oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.resourceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResourceId()) {
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resourceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewsResourceId()) {
        oprot.writeFieldBegin(NEWS_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.newsResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLevel()) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
      }
      if (struct.subItems != null) {
        if (struct.isSetSubItems()) {
          oprot.writeFieldBegin(SUB_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.subItems.size()));
            for (TMenuItem _iter18 : struct.subItems)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNew()) {
        oprot.writeFieldBegin(IS_NEW_FIELD_DESC);
        oprot.writeBool(struct.isNew);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsHot()) {
        oprot.writeFieldBegin(IS_HOT_FIELD_DESC);
        oprot.writeBool(struct.isHot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.imageUrl.size()));
            for (Map.Entry<String, String> _iter19 : struct.imageUrl.entrySet())
            {
              oprot.writeString(_iter19.getKey());
              oprot.writeString(_iter19.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsRecommend()) {
        oprot.writeFieldBegin(IS_RECOMMEND_FIELD_DESC);
        oprot.writeBool(struct.isRecommend);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToplistCid()) {
        oprot.writeFieldBegin(TOPLIST_CID_FIELD_DESC);
        oprot.writeI64(struct.toplistCid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMatchCid()) {
        oprot.writeFieldBegin(MATCH_CID_FIELD_DESC);
        oprot.writeI64(struct.matchCid);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecommendOrder()) {
        oprot.writeFieldBegin(RECOMMEND_ORDER_FIELD_DESC);
        oprot.writeI32(struct.recommendOrder);
        oprot.writeFieldEnd();
      }
      if (struct.campCategoryId != null) {
        if (struct.isSetCampCategoryId()) {
          oprot.writeFieldBegin(CAMP_CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.campCategoryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.campId != null) {
        if (struct.isSetCampId()) {
          oprot.writeFieldBegin(CAMP_ID_FIELD_DESC);
          oprot.writeString(struct.campId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsForceRecommend()) {
        oprot.writeFieldBegin(IS_FORCE_RECOMMEND_FIELD_DESC);
        oprot.writeBool(struct.isForceRecommend);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForceRecommendOrder()) {
        oprot.writeFieldBegin(FORCE_RECOMMEND_ORDER_FIELD_DESC);
        oprot.writeI32(struct.forceRecommendOrder);
        oprot.writeFieldEnd();
      }
      if (struct.scheduleType != null) {
        if (struct.isSetScheduleType()) {
          oprot.writeFieldBegin(SCHEDULE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.scheduleType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.pubChannels != null) {
        if (struct.isSetPubChannels()) {
          oprot.writeFieldBegin(PUB_CHANNELS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pubChannels.size()));
            for (com.lesports.api.common.PubChannel _iter20 : struct.pubChannels)
            {
              oprot.writeI32(_iter20.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMatchResourceId()) {
        oprot.writeFieldBegin(MATCH_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.matchResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCarouselResourceId()) {
        oprot.writeFieldBegin(CAROUSEL_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.carouselResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsTeamData()) {
        oprot.writeFieldBegin(IS_TEAM_DATA_FIELD_DESC);
        oprot.writeBool(struct.isTeamData);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsPlayerData()) {
        oprot.writeFieldBegin(IS_PLAYER_DATA_FIELD_DESC);
        oprot.writeBool(struct.isPlayerData);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTeamId()) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeI64(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewsAutoResourceId()) {
        oprot.writeFieldBegin(NEWS_AUTO_RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.newsAutoResourceId);
        oprot.writeFieldEnd();
      }
      if (struct.mUrl != null) {
        if (struct.isSetMUrl()) {
          oprot.writeFieldBegin(M_URL_FIELD_DESC);
          oprot.writeString(struct.mUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMenuItemTupleSchemeFactory implements SchemeFactory {
    public TMenuItemTupleScheme getScheme() {
      return new TMenuItemTupleScheme();
    }
  }

  private static class TMenuItemTupleScheme extends TupleScheme<TMenuItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMenuItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndex()) {
        optionals.set(0);
      }
      if (struct.isSetResourceType()) {
        optionals.set(1);
      }
      if (struct.isSetResourceId()) {
        optionals.set(2);
      }
      if (struct.isSetNewsResourceId()) {
        optionals.set(3);
      }
      if (struct.isSetLevel()) {
        optionals.set(4);
      }
      if (struct.isSetSubItems()) {
        optionals.set(5);
      }
      if (struct.isSetName()) {
        optionals.set(6);
      }
      if (struct.isSetIsNew()) {
        optionals.set(7);
      }
      if (struct.isSetIsHot()) {
        optionals.set(8);
      }
      if (struct.isSetOrder()) {
        optionals.set(9);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(10);
      }
      if (struct.isSetIsRecommend()) {
        optionals.set(11);
      }
      if (struct.isSetToplistCid()) {
        optionals.set(12);
      }
      if (struct.isSetMatchCid()) {
        optionals.set(13);
      }
      if (struct.isSetUrl()) {
        optionals.set(14);
      }
      if (struct.isSetRecommendOrder()) {
        optionals.set(15);
      }
      if (struct.isSetCampCategoryId()) {
        optionals.set(16);
      }
      if (struct.isSetCampId()) {
        optionals.set(17);
      }
      if (struct.isSetIsForceRecommend()) {
        optionals.set(18);
      }
      if (struct.isSetForceRecommendOrder()) {
        optionals.set(19);
      }
      if (struct.isSetScheduleType()) {
        optionals.set(20);
      }
      if (struct.isSetPubChannels()) {
        optionals.set(21);
      }
      if (struct.isSetMatchResourceId()) {
        optionals.set(22);
      }
      if (struct.isSetCarouselResourceId()) {
        optionals.set(23);
      }
      if (struct.isSetIsTeamData()) {
        optionals.set(24);
      }
      if (struct.isSetIsPlayerData()) {
        optionals.set(25);
      }
      if (struct.isSetTeamId()) {
        optionals.set(26);
      }
      if (struct.isSetNewsAutoResourceId()) {
        optionals.set(27);
      }
      if (struct.isSetMUrl()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetIndex()) {
        oprot.writeI64(struct.index);
      }
      if (struct.isSetResourceType()) {
        oprot.writeI32(struct.resourceType.getValue());
      }
      if (struct.isSetResourceId()) {
        oprot.writeI64(struct.resourceId);
      }
      if (struct.isSetNewsResourceId()) {
        oprot.writeI64(struct.newsResourceId);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetSubItems()) {
        {
          oprot.writeI32(struct.subItems.size());
          for (TMenuItem _iter21 : struct.subItems)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIsNew()) {
        oprot.writeBool(struct.isNew);
      }
      if (struct.isSetIsHot()) {
        oprot.writeBool(struct.isHot);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetImageUrl()) {
        {
          oprot.writeI32(struct.imageUrl.size());
          for (Map.Entry<String, String> _iter22 : struct.imageUrl.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            oprot.writeString(_iter22.getValue());
          }
        }
      }
      if (struct.isSetIsRecommend()) {
        oprot.writeBool(struct.isRecommend);
      }
      if (struct.isSetToplistCid()) {
        oprot.writeI64(struct.toplistCid);
      }
      if (struct.isSetMatchCid()) {
        oprot.writeI64(struct.matchCid);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetRecommendOrder()) {
        oprot.writeI32(struct.recommendOrder);
      }
      if (struct.isSetCampCategoryId()) {
        oprot.writeString(struct.campCategoryId);
      }
      if (struct.isSetCampId()) {
        oprot.writeString(struct.campId);
      }
      if (struct.isSetIsForceRecommend()) {
        oprot.writeBool(struct.isForceRecommend);
      }
      if (struct.isSetForceRecommendOrder()) {
        oprot.writeI32(struct.forceRecommendOrder);
      }
      if (struct.isSetScheduleType()) {
        oprot.writeI32(struct.scheduleType.getValue());
      }
      if (struct.isSetPubChannels()) {
        {
          oprot.writeI32(struct.pubChannels.size());
          for (com.lesports.api.common.PubChannel _iter23 : struct.pubChannels)
          {
            oprot.writeI32(_iter23.getValue());
          }
        }
      }
      if (struct.isSetMatchResourceId()) {
        oprot.writeI64(struct.matchResourceId);
      }
      if (struct.isSetCarouselResourceId()) {
        oprot.writeI64(struct.carouselResourceId);
      }
      if (struct.isSetIsTeamData()) {
        oprot.writeBool(struct.isTeamData);
      }
      if (struct.isSetIsPlayerData()) {
        oprot.writeBool(struct.isPlayerData);
      }
      if (struct.isSetTeamId()) {
        oprot.writeI64(struct.teamId);
      }
      if (struct.isSetNewsAutoResourceId()) {
        oprot.writeI64(struct.newsAutoResourceId);
      }
      if (struct.isSetMUrl()) {
        oprot.writeString(struct.mUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMenuItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.index = iprot.readI64();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceType = com.lesports.qmt.config.api.dto.MenuResourceType.findByValue(iprot.readI32());
        struct.setResourceTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resourceId = iprot.readI64();
        struct.setResourceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.newsResourceId = iprot.readI64();
        struct.setNewsResourceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subItems = new ArrayList<TMenuItem>(_list24.size);
          TMenuItem _elem25;
          for (int _i26 = 0; _i26 < _list24.size; ++_i26)
          {
            _elem25 = new TMenuItem();
            _elem25.read(iprot);
            struct.subItems.add(_elem25);
          }
        }
        struct.setSubItemsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isNew = iprot.readBool();
        struct.setIsNewIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isHot = iprot.readBool();
        struct.setIsHotIsSet(true);
      }
      if (incoming.get(9)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.imageUrl = new HashMap<String,String>(2*_map27.size);
          String _key28;
          String _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.imageUrl.put(_key28, _val29);
          }
        }
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isRecommend = iprot.readBool();
        struct.setIsRecommendIsSet(true);
      }
      if (incoming.get(12)) {
        struct.toplistCid = iprot.readI64();
        struct.setToplistCidIsSet(true);
      }
      if (incoming.get(13)) {
        struct.matchCid = iprot.readI64();
        struct.setMatchCidIsSet(true);
      }
      if (incoming.get(14)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.recommendOrder = iprot.readI32();
        struct.setRecommendOrderIsSet(true);
      }
      if (incoming.get(16)) {
        struct.campCategoryId = iprot.readString();
        struct.setCampCategoryIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.campId = iprot.readString();
        struct.setCampIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.isForceRecommend = iprot.readBool();
        struct.setIsForceRecommendIsSet(true);
      }
      if (incoming.get(19)) {
        struct.forceRecommendOrder = iprot.readI32();
        struct.setForceRecommendOrderIsSet(true);
      }
      if (incoming.get(20)) {
        struct.scheduleType = com.lesports.qmt.config.api.dto.ScheduleType.findByValue(iprot.readI32());
        struct.setScheduleTypeIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.pubChannels = new ArrayList<com.lesports.api.common.PubChannel>(_list31.size);
          com.lesports.api.common.PubChannel _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = com.lesports.api.common.PubChannel.findByValue(iprot.readI32());
            struct.pubChannels.add(_elem32);
          }
        }
        struct.setPubChannelsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.matchResourceId = iprot.readI64();
        struct.setMatchResourceIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.carouselResourceId = iprot.readI64();
        struct.setCarouselResourceIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isTeamData = iprot.readBool();
        struct.setIsTeamDataIsSet(true);
      }
      if (incoming.get(25)) {
        struct.isPlayerData = iprot.readBool();
        struct.setIsPlayerDataIsSet(true);
      }
      if (incoming.get(26)) {
        struct.teamId = iprot.readI64();
        struct.setTeamIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.newsAutoResourceId = iprot.readI64();
        struct.setNewsAutoResourceIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.mUrl = iprot.readString();
        struct.setMUrlIsSet(true);
      }
    }
  }

}

