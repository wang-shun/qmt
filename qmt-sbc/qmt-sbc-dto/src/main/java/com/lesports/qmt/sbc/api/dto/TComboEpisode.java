/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-27")
public class TComboEpisode implements org.apache.thrift.TBase<TComboEpisode, TComboEpisode._Fields>, java.io.Serializable, Cloneable, Comparable<TComboEpisode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TComboEpisode");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LEECO_AID_FIELD_DESC = new org.apache.thrift.protocol.TField("leecoAid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MATCH_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("streams", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField VIDEOS_FIELD_DESC = new org.apache.thrift.protocol.TField("videos", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("round", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SUBSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("substation", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COMPETITORS_FIELD_DESC = new org.apache.thrift.protocol.TField("competitors", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VS_FIELD_DESC = new org.apache.thrift.protocol.TField("vs", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LIVE_UNIQUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveUniqueId", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField PERIODS_FIELD_DESC = new org.apache.thrift.protocol.TField("periods", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField MATCH_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("matchSystem", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField ROUND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roundId", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField MOMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("moment", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField XINYING_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("xinyingPay", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField XINYING_MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("xinyingMatchId", org.apache.thrift.protocol.TType.I64, (short)29);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)78);
  private static final org.apache.thrift.protocol.TField PLAY_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("playLink", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.MAP, (short)31);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("abbreviation", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField COMPETITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("competitionName", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField ALBUM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("albumName", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField TEXTLIVES_FIELD_DESC = new org.apache.thrift.protocol.TField("textlives", org.apache.thrift.protocol.TType.LIST, (short)39);
  private static final org.apache.thrift.protocol.TField CURRENT_MOMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMoment", org.apache.thrift.protocol.TType.STRUCT, (short)40);
  private static final org.apache.thrift.protocol.TField T_LIVE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("tLiveLink", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField CHAT_ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatRoomId", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField IS_OCTOPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("isOctopus", org.apache.thrift.protocol.TType.BOOL, (short)43);
  private static final org.apache.thrift.protocol.TField OCTOPUS_MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("octopusMatchId", org.apache.thrift.protocol.TType.I64, (short)44);
  private static final org.apache.thrift.protocol.TField TEXT_LIVE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveStatus", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField APP_ACTIVITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("appActivities", org.apache.thrift.protocol.TType.LIST, (short)46);
  private static final org.apache.thrift.protocol.TField LIVE_PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("livePlatforms", org.apache.thrift.protocol.TType.SET, (short)47);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)50);
  private static final org.apache.thrift.protocol.TField RELATED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedItems", org.apache.thrift.protocol.TType.LIST, (short)53);
  private static final org.apache.thrift.protocol.TField STADIUM_FIELD_DESC = new org.apache.thrift.protocol.TField("stadium", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField WEATHER_FIELD_DESC = new org.apache.thrift.protocol.TField("weather", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField JUDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("judge", org.apache.thrift.protocol.TType.STRING, (short)56);
  private static final org.apache.thrift.protocol.TField IS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPay", org.apache.thrift.protocol.TType.BOOL, (short)57);
  private static final org.apache.thrift.protocol.TField SHARE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shareName", org.apache.thrift.protocol.TType.STRING, (short)58);
  private static final org.apache.thrift.protocol.TField IS_SYNC_TO_CLOUD_FIELD_DESC = new org.apache.thrift.protocol.TField("isSyncToCloud", org.apache.thrift.protocol.TType.BOOL, (short)59);
  private static final org.apache.thrift.protocol.TField IS_URL_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isUrlRedirect", org.apache.thrift.protocol.TType.BOOL, (short)60);
  private static final org.apache.thrift.protocol.TField PC_REDIRECT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pcRedirectUrl", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField M_REDIRECT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mRedirectUrl", org.apache.thrift.protocol.TType.STRING, (short)62);
  private static final org.apache.thrift.protocol.TField THE_ROAD_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("theRoadOrder", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangStage", org.apache.thrift.protocol.TType.LIST, (short)64);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangRound", org.apache.thrift.protocol.TType.LIST, (short)65);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGroup", org.apache.thrift.protocol.TType.LIST, (short)66);
  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.I32, (short)67);
  private static final org.apache.thrift.protocol.TField PLAYER_PAGE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("playerPageLink", org.apache.thrift.protocol.TType.STRING, (short)68);
  private static final org.apache.thrift.protocol.TField SCORE_PAGE_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("scorePageLink", org.apache.thrift.protocol.TType.STRING, (short)69);
  private static final org.apache.thrift.protocol.TField DISCIPLINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("disciplineId", org.apache.thrift.protocol.TType.I64, (short)70);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)71);
  private static final org.apache.thrift.protocol.TField PARTNER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerType", org.apache.thrift.protocol.TType.I32, (short)72);
  private static final org.apache.thrift.protocol.TField ITEM_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("itemUrl", org.apache.thrift.protocol.TType.STRING, (short)73);
  private static final org.apache.thrift.protocol.TField MEDAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("medalType", org.apache.thrift.protocol.TType.I32, (short)74);
  private static final org.apache.thrift.protocol.TField DISCIPLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("discipline", org.apache.thrift.protocol.TType.STRING, (short)75);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DISCIPLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDiscipline", org.apache.thrift.protocol.TType.LIST, (short)76);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_SUBSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangSubstation", org.apache.thrift.protocol.TType.LIST, (short)77);
  private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)79);
  private static final org.apache.thrift.protocol.TField TOPIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("topicUrl", org.apache.thrift.protocol.TType.STRING, (short)80);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TComboEpisodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TComboEpisodeTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private long mid; // optional
  private long leecoAid; // optional
  private String startTime; // optional
  private com.lesports.api.common.MatchStatus matchStatus; // optional
  private com.lesports.api.common.LiveShowStatus status; // optional
  private List<TLiveStream> streams; // optional
  private List<TSimpleVideo> videos; // optional
  private String stage; // optional
  private String round; // optional
  private String group; // optional
  private String substation; // optional
  private List<com.lesports.qmt.sbd.api.dto.TCompetitor> competitors; // optional
  private com.lesports.qmt.sbc.api.common.EpisodeType type; // optional
  private boolean vs; // optional
  private long cid; // optional
  private long gameFType; // optional
  private long gameSType; // optional
  private String liveUniqueId; // optional
  private String periods; // optional
  private com.lesports.qmt.sbd.api.common.MatchSystem matchSystem; // optional
  private long roundId; // optional
  private String logo; // optional
  private String moment; // optional
  private List<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private boolean xinyingPay; // optional
  private long xinyingMatchId; // optional
  private double price; // optional
  private String playLink; // optional
  private Map<String,String> images; // optional
  private String desc; // optional
  private long duration; // optional
  private String commentId; // optional
  private String abbreviation; // optional
  private String competitionName; // optional
  private String albumName; // optional
  private List<TSimpleTextLive> textlives; // optional
  private com.lesports.qmt.sbd.api.dto.TCurrentMoment currentMoment; // optional
  private String tLiveLink; // optional
  private String chatRoomId; // optional
  private boolean isOctopus; // optional
  private long octopusMatchId; // optional
  private com.lesports.api.common.LiveShowStatus textLiveStatus; // optional
  private List<TSimpleActivity> appActivities; // optional
  private Set<com.lesports.api.common.Platform> livePlatforms; // optional
  private String imageUrl; // optional
  private boolean deleted; // optional
  private List<com.lesports.qmt.sbc.api.common.TRelatedItem> relatedItems; // optional
  private String stadium; // optional
  private String weather; // optional
  private String judge; // optional
  private boolean isPay; // optional
  private String shareName; // optional
  private boolean isSyncToCloud; // optional
  private boolean isUrlRedirect; // optional
  private String pcRedirectUrl; // optional
  private String mRedirectUrl; // optional
  private int theRoadOrder; // optional
  private List<com.lesports.api.common.LangString> multiLangStage; // optional
  private List<com.lesports.api.common.LangString> multiLangRound; // optional
  private List<com.lesports.api.common.LangString> multiLangGroup; // optional
  private com.lesports.api.common.CountryCode countryCode; // optional
  private String playerPageLink; // optional
  private String scorePageLink; // optional
  private long disciplineId; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private int partnerType; // optional
  private String itemUrl; // optional
  private com.lesports.qmt.sbd.api.common.MedalType medalType; // optional
  private String discipline; // optional
  private List<com.lesports.api.common.LangString> multiLangDiscipline; // optional
  private List<com.lesports.api.common.LangString> multiLangSubstation; // optional
  private long aid; // optional
  private String topicUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MID((short)3, "mid"),
    LEECO_AID((short)4, "leecoAid"),
    START_TIME((short)5, "startTime"),
    /**
     * 
     * @see com.lesports.api.common.MatchStatus
     */
    MATCH_STATUS((short)6, "matchStatus"),
    /**
     * 
     * @see com.lesports.api.common.LiveShowStatus
     */
    STATUS((short)7, "status"),
    STREAMS((short)8, "streams"),
    VIDEOS((short)9, "videos"),
    STAGE((short)10, "stage"),
    ROUND((short)11, "round"),
    GROUP((short)12, "group"),
    SUBSTATION((short)13, "substation"),
    COMPETITORS((short)15, "competitors"),
    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.EpisodeType
     */
    TYPE((short)16, "type"),
    VS((short)17, "vs"),
    CID((short)18, "cid"),
    GAME_FTYPE((short)19, "gameFType"),
    GAME_STYPE((short)20, "gameSType"),
    LIVE_UNIQUE_ID((short)21, "liveUniqueId"),
    PERIODS((short)22, "periods"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.MatchSystem
     */
    MATCH_SYSTEM((short)23, "matchSystem"),
    ROUND_ID((short)24, "roundId"),
    LOGO((short)25, "logo"),
    MOMENT((short)26, "moment"),
    TAGS((short)27, "tags"),
    XINYING_PAY((short)28, "xinyingPay"),
    XINYING_MATCH_ID((short)29, "xinyingMatchId"),
    PRICE((short)78, "price"),
    PLAY_LINK((short)30, "playLink"),
    IMAGES((short)31, "images"),
    DESC((short)32, "desc"),
    DURATION((short)33, "duration"),
    COMMENT_ID((short)34, "commentId"),
    ABBREVIATION((short)35, "abbreviation"),
    COMPETITION_NAME((short)36, "competitionName"),
    ALBUM_NAME((short)38, "albumName"),
    TEXTLIVES((short)39, "textlives"),
    CURRENT_MOMENT((short)40, "currentMoment"),
    T_LIVE_LINK((short)41, "tLiveLink"),
    CHAT_ROOM_ID((short)42, "chatRoomId"),
    IS_OCTOPUS((short)43, "isOctopus"),
    OCTOPUS_MATCH_ID((short)44, "octopusMatchId"),
    /**
     * 
     * @see com.lesports.api.common.LiveShowStatus
     */
    TEXT_LIVE_STATUS((short)45, "textLiveStatus"),
    APP_ACTIVITIES((short)46, "appActivities"),
    LIVE_PLATFORMS((short)47, "livePlatforms"),
    IMAGE_URL((short)48, "imageUrl"),
    DELETED((short)50, "deleted"),
    RELATED_ITEMS((short)53, "relatedItems"),
    STADIUM((short)54, "stadium"),
    WEATHER((short)55, "weather"),
    JUDGE((short)56, "judge"),
    IS_PAY((short)57, "isPay"),
    SHARE_NAME((short)58, "shareName"),
    IS_SYNC_TO_CLOUD((short)59, "isSyncToCloud"),
    IS_URL_REDIRECT((short)60, "isUrlRedirect"),
    PC_REDIRECT_URL((short)61, "pcRedirectUrl"),
    M_REDIRECT_URL((short)62, "mRedirectUrl"),
    THE_ROAD_ORDER((short)63, "theRoadOrder"),
    MULTI_LANG_STAGE((short)64, "multiLangStage"),
    MULTI_LANG_ROUND((short)65, "multiLangRound"),
    MULTI_LANG_GROUP((short)66, "multiLangGroup"),
    /**
     * 
     * @see com.lesports.api.common.CountryCode
     */
    COUNTRY_CODE((short)67, "countryCode"),
    PLAYER_PAGE_LINK((short)68, "playerPageLink"),
    SCORE_PAGE_LINK((short)69, "scorePageLink"),
    DISCIPLINE_ID((short)70, "disciplineId"),
    MULTI_LANG_NAMES((short)71, "multiLangNames"),
    PARTNER_TYPE((short)72, "partnerType"),
    ITEM_URL((short)73, "itemUrl"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.MedalType
     */
    MEDAL_TYPE((short)74, "medalType"),
    DISCIPLINE((short)75, "discipline"),
    MULTI_LANG_DISCIPLINE((short)76, "multiLangDiscipline"),
    MULTI_LANG_SUBSTATION((short)77, "multiLangSubstation"),
    AID((short)79, "aid"),
    TOPIC_URL((short)80, "topicUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MID
          return MID;
        case 4: // LEECO_AID
          return LEECO_AID;
        case 5: // START_TIME
          return START_TIME;
        case 6: // MATCH_STATUS
          return MATCH_STATUS;
        case 7: // STATUS
          return STATUS;
        case 8: // STREAMS
          return STREAMS;
        case 9: // VIDEOS
          return VIDEOS;
        case 10: // STAGE
          return STAGE;
        case 11: // ROUND
          return ROUND;
        case 12: // GROUP
          return GROUP;
        case 13: // SUBSTATION
          return SUBSTATION;
        case 15: // COMPETITORS
          return COMPETITORS;
        case 16: // TYPE
          return TYPE;
        case 17: // VS
          return VS;
        case 18: // CID
          return CID;
        case 19: // GAME_FTYPE
          return GAME_FTYPE;
        case 20: // GAME_STYPE
          return GAME_STYPE;
        case 21: // LIVE_UNIQUE_ID
          return LIVE_UNIQUE_ID;
        case 22: // PERIODS
          return PERIODS;
        case 23: // MATCH_SYSTEM
          return MATCH_SYSTEM;
        case 24: // ROUND_ID
          return ROUND_ID;
        case 25: // LOGO
          return LOGO;
        case 26: // MOMENT
          return MOMENT;
        case 27: // TAGS
          return TAGS;
        case 28: // XINYING_PAY
          return XINYING_PAY;
        case 29: // XINYING_MATCH_ID
          return XINYING_MATCH_ID;
        case 78: // PRICE
          return PRICE;
        case 30: // PLAY_LINK
          return PLAY_LINK;
        case 31: // IMAGES
          return IMAGES;
        case 32: // DESC
          return DESC;
        case 33: // DURATION
          return DURATION;
        case 34: // COMMENT_ID
          return COMMENT_ID;
        case 35: // ABBREVIATION
          return ABBREVIATION;
        case 36: // COMPETITION_NAME
          return COMPETITION_NAME;
        case 38: // ALBUM_NAME
          return ALBUM_NAME;
        case 39: // TEXTLIVES
          return TEXTLIVES;
        case 40: // CURRENT_MOMENT
          return CURRENT_MOMENT;
        case 41: // T_LIVE_LINK
          return T_LIVE_LINK;
        case 42: // CHAT_ROOM_ID
          return CHAT_ROOM_ID;
        case 43: // IS_OCTOPUS
          return IS_OCTOPUS;
        case 44: // OCTOPUS_MATCH_ID
          return OCTOPUS_MATCH_ID;
        case 45: // TEXT_LIVE_STATUS
          return TEXT_LIVE_STATUS;
        case 46: // APP_ACTIVITIES
          return APP_ACTIVITIES;
        case 47: // LIVE_PLATFORMS
          return LIVE_PLATFORMS;
        case 48: // IMAGE_URL
          return IMAGE_URL;
        case 50: // DELETED
          return DELETED;
        case 53: // RELATED_ITEMS
          return RELATED_ITEMS;
        case 54: // STADIUM
          return STADIUM;
        case 55: // WEATHER
          return WEATHER;
        case 56: // JUDGE
          return JUDGE;
        case 57: // IS_PAY
          return IS_PAY;
        case 58: // SHARE_NAME
          return SHARE_NAME;
        case 59: // IS_SYNC_TO_CLOUD
          return IS_SYNC_TO_CLOUD;
        case 60: // IS_URL_REDIRECT
          return IS_URL_REDIRECT;
        case 61: // PC_REDIRECT_URL
          return PC_REDIRECT_URL;
        case 62: // M_REDIRECT_URL
          return M_REDIRECT_URL;
        case 63: // THE_ROAD_ORDER
          return THE_ROAD_ORDER;
        case 64: // MULTI_LANG_STAGE
          return MULTI_LANG_STAGE;
        case 65: // MULTI_LANG_ROUND
          return MULTI_LANG_ROUND;
        case 66: // MULTI_LANG_GROUP
          return MULTI_LANG_GROUP;
        case 67: // COUNTRY_CODE
          return COUNTRY_CODE;
        case 68: // PLAYER_PAGE_LINK
          return PLAYER_PAGE_LINK;
        case 69: // SCORE_PAGE_LINK
          return SCORE_PAGE_LINK;
        case 70: // DISCIPLINE_ID
          return DISCIPLINE_ID;
        case 71: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 72: // PARTNER_TYPE
          return PARTNER_TYPE;
        case 73: // ITEM_URL
          return ITEM_URL;
        case 74: // MEDAL_TYPE
          return MEDAL_TYPE;
        case 75: // DISCIPLINE
          return DISCIPLINE;
        case 76: // MULTI_LANG_DISCIPLINE
          return MULTI_LANG_DISCIPLINE;
        case 77: // MULTI_LANG_SUBSTATION
          return MULTI_LANG_SUBSTATION;
        case 79: // AID
          return AID;
        case 80: // TOPIC_URL
          return TOPIC_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MID_ISSET_ID = 1;
  private static final int __LEECOAID_ISSET_ID = 2;
  private static final int __VS_ISSET_ID = 3;
  private static final int __CID_ISSET_ID = 4;
  private static final int __GAMEFTYPE_ISSET_ID = 5;
  private static final int __GAMESTYPE_ISSET_ID = 6;
  private static final int __ROUNDID_ISSET_ID = 7;
  private static final int __XINYINGPAY_ISSET_ID = 8;
  private static final int __XINYINGMATCHID_ISSET_ID = 9;
  private static final int __PRICE_ISSET_ID = 10;
  private static final int __DURATION_ISSET_ID = 11;
  private static final int __ISOCTOPUS_ISSET_ID = 12;
  private static final int __OCTOPUSMATCHID_ISSET_ID = 13;
  private static final int __DELETED_ISSET_ID = 14;
  private static final int __ISPAY_ISSET_ID = 15;
  private static final int __ISSYNCTOCLOUD_ISSET_ID = 16;
  private static final int __ISURLREDIRECT_ISSET_ID = 17;
  private static final int __THEROADORDER_ISSET_ID = 18;
  private static final int __DISCIPLINEID_ISSET_ID = 19;
  private static final int __PARTNERTYPE_ISSET_ID = 20;
  private static final int __AID_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.MID,_Fields.LEECO_AID,_Fields.START_TIME,_Fields.MATCH_STATUS,_Fields.STATUS,_Fields.STREAMS,_Fields.VIDEOS,_Fields.STAGE,_Fields.ROUND,_Fields.GROUP,_Fields.SUBSTATION,_Fields.COMPETITORS,_Fields.TYPE,_Fields.VS,_Fields.CID,_Fields.GAME_FTYPE,_Fields.GAME_STYPE,_Fields.LIVE_UNIQUE_ID,_Fields.PERIODS,_Fields.MATCH_SYSTEM,_Fields.ROUND_ID,_Fields.LOGO,_Fields.MOMENT,_Fields.TAGS,_Fields.XINYING_PAY,_Fields.XINYING_MATCH_ID,_Fields.PRICE,_Fields.PLAY_LINK,_Fields.IMAGES,_Fields.DESC,_Fields.DURATION,_Fields.COMMENT_ID,_Fields.ABBREVIATION,_Fields.COMPETITION_NAME,_Fields.ALBUM_NAME,_Fields.TEXTLIVES,_Fields.CURRENT_MOMENT,_Fields.T_LIVE_LINK,_Fields.CHAT_ROOM_ID,_Fields.IS_OCTOPUS,_Fields.OCTOPUS_MATCH_ID,_Fields.TEXT_LIVE_STATUS,_Fields.APP_ACTIVITIES,_Fields.LIVE_PLATFORMS,_Fields.IMAGE_URL,_Fields.DELETED,_Fields.RELATED_ITEMS,_Fields.STADIUM,_Fields.WEATHER,_Fields.JUDGE,_Fields.IS_PAY,_Fields.SHARE_NAME,_Fields.IS_SYNC_TO_CLOUD,_Fields.IS_URL_REDIRECT,_Fields.PC_REDIRECT_URL,_Fields.M_REDIRECT_URL,_Fields.THE_ROAD_ORDER,_Fields.MULTI_LANG_STAGE,_Fields.MULTI_LANG_ROUND,_Fields.MULTI_LANG_GROUP,_Fields.COUNTRY_CODE,_Fields.PLAYER_PAGE_LINK,_Fields.SCORE_PAGE_LINK,_Fields.DISCIPLINE_ID,_Fields.MULTI_LANG_NAMES,_Fields.PARTNER_TYPE,_Fields.ITEM_URL,_Fields.MEDAL_TYPE,_Fields.DISCIPLINE,_Fields.MULTI_LANG_DISCIPLINE,_Fields.MULTI_LANG_SUBSTATION,_Fields.AID,_Fields.TOPIC_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEECO_AID, new org.apache.thrift.meta_data.FieldMetaData("leecoAid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_STATUS, new org.apache.thrift.meta_data.FieldMetaData("matchStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.MatchStatus.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.LiveShowStatus.class)));
    tmpMap.put(_Fields.STREAMS, new org.apache.thrift.meta_data.FieldMetaData("streams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLiveStream.class))));
    tmpMap.put(_Fields.VIDEOS, new org.apache.thrift.meta_data.FieldMetaData("videos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSimpleVideo.class))));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUND, new org.apache.thrift.meta_data.FieldMetaData("round", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSTATION, new org.apache.thrift.meta_data.FieldMetaData("substation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITORS, new org.apache.thrift.meta_data.FieldMetaData("competitors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitor.class))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.EpisodeType.class)));
    tmpMap.put(_Fields.VS, new org.apache.thrift.meta_data.FieldMetaData("vs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIVE_UNIQUE_ID, new org.apache.thrift.meta_data.FieldMetaData("liveUniqueId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERIODS, new org.apache.thrift.meta_data.FieldMetaData("periods", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("matchSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.MatchSystem.class)));
    tmpMap.put(_Fields.ROUND_ID, new org.apache.thrift.meta_data.FieldMetaData("roundId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOMENT, new org.apache.thrift.meta_data.FieldMetaData("moment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.XINYING_PAY, new org.apache.thrift.meta_data.FieldMetaData("xinyingPay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.XINYING_MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("xinyingMatchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PLAY_LINK, new org.apache.thrift.meta_data.FieldMetaData("playLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("abbreviation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("competitionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM_NAME, new org.apache.thrift.meta_data.FieldMetaData("albumName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXTLIVES, new org.apache.thrift.meta_data.FieldMetaData("textlives", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSimpleTextLive.class))));
    tmpMap.put(_Fields.CURRENT_MOMENT, new org.apache.thrift.meta_data.FieldMetaData("currentMoment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCurrentMoment.class)));
    tmpMap.put(_Fields.T_LIVE_LINK, new org.apache.thrift.meta_data.FieldMetaData("tLiveLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAT_ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("chatRoomId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_OCTOPUS, new org.apache.thrift.meta_data.FieldMetaData("isOctopus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OCTOPUS_MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("octopusMatchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEXT_LIVE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("textLiveStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.LiveShowStatus.class)));
    tmpMap.put(_Fields.APP_ACTIVITIES, new org.apache.thrift.meta_data.FieldMetaData("appActivities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSimpleActivity.class))));
    tmpMap.put(_Fields.LIVE_PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("livePlatforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RELATED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("relatedItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.common.TRelatedItem.class))));
    tmpMap.put(_Fields.STADIUM, new org.apache.thrift.meta_data.FieldMetaData("stadium", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEATHER, new org.apache.thrift.meta_data.FieldMetaData("weather", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JUDGE, new org.apache.thrift.meta_data.FieldMetaData("judge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHARE_NAME, new org.apache.thrift.meta_data.FieldMetaData("shareName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SYNC_TO_CLOUD, new org.apache.thrift.meta_data.FieldMetaData("isSyncToCloud", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_URL_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("isUrlRedirect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PC_REDIRECT_URL, new org.apache.thrift.meta_data.FieldMetaData("pcRedirectUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_REDIRECT_URL, new org.apache.thrift.meta_data.FieldMetaData("mRedirectUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THE_ROAD_ORDER, new org.apache.thrift.meta_data.FieldMetaData("theRoadOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTI_LANG_STAGE, new org.apache.thrift.meta_data.FieldMetaData("multiLangStage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_ROUND, new org.apache.thrift.meta_data.FieldMetaData("multiLangRound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_GROUP, new org.apache.thrift.meta_data.FieldMetaData("multiLangGroup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.CountryCode.class)));
    tmpMap.put(_Fields.PLAYER_PAGE_LINK, new org.apache.thrift.meta_data.FieldMetaData("playerPageLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE_PAGE_LINK, new org.apache.thrift.meta_data.FieldMetaData("scorePageLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISCIPLINE_ID, new org.apache.thrift.meta_data.FieldMetaData("disciplineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.PARTNER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partnerType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_URL, new org.apache.thrift.meta_data.FieldMetaData("itemUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("medalType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.MedalType.class)));
    tmpMap.put(_Fields.DISCIPLINE, new org.apache.thrift.meta_data.FieldMetaData("discipline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_DISCIPLINE, new org.apache.thrift.meta_data.FieldMetaData("multiLangDiscipline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_SUBSTATION, new org.apache.thrift.meta_data.FieldMetaData("multiLangSubstation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOPIC_URL, new org.apache.thrift.meta_data.FieldMetaData("topicUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TComboEpisode.class, metaDataMap);
  }

  public TComboEpisode() {
  }

  public TComboEpisode(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TComboEpisode(TComboEpisode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.mid = other.mid;
    this.leecoAid = other.leecoAid;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetMatchStatus()) {
      this.matchStatus = other.matchStatus;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStreams()) {
      List<TLiveStream> __this__streams = new ArrayList<TLiveStream>(other.streams.size());
      for (TLiveStream other_element : other.streams) {
        __this__streams.add(new TLiveStream(other_element));
      }
      this.streams = __this__streams;
    }
    if (other.isSetVideos()) {
      List<TSimpleVideo> __this__videos = new ArrayList<TSimpleVideo>(other.videos.size());
      for (TSimpleVideo other_element : other.videos) {
        __this__videos.add(new TSimpleVideo(other_element));
      }
      this.videos = __this__videos;
    }
    if (other.isSetStage()) {
      this.stage = other.stage;
    }
    if (other.isSetRound()) {
      this.round = other.round;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetSubstation()) {
      this.substation = other.substation;
    }
    if (other.isSetCompetitors()) {
      List<com.lesports.qmt.sbd.api.dto.TCompetitor> __this__competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>(other.competitors.size());
      for (com.lesports.qmt.sbd.api.dto.TCompetitor other_element : other.competitors) {
        __this__competitors.add(new com.lesports.qmt.sbd.api.dto.TCompetitor(other_element));
      }
      this.competitors = __this__competitors;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.vs = other.vs;
    this.cid = other.cid;
    this.gameFType = other.gameFType;
    this.gameSType = other.gameSType;
    if (other.isSetLiveUniqueId()) {
      this.liveUniqueId = other.liveUniqueId;
    }
    if (other.isSetPeriods()) {
      this.periods = other.periods;
    }
    if (other.isSetMatchSystem()) {
      this.matchSystem = other.matchSystem;
    }
    this.roundId = other.roundId;
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    if (other.isSetMoment()) {
      this.moment = other.moment;
    }
    if (other.isSetTags()) {
      List<com.lesports.qmt.config.api.dto.TTag> __this__tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    this.xinyingPay = other.xinyingPay;
    this.xinyingMatchId = other.xinyingMatchId;
    this.price = other.price;
    if (other.isSetPlayLink()) {
      this.playLink = other.playLink;
    }
    if (other.isSetImages()) {
      Map<String,String> __this__images = new HashMap<String,String>(other.images);
      this.images = __this__images;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.duration = other.duration;
    if (other.isSetCommentId()) {
      this.commentId = other.commentId;
    }
    if (other.isSetAbbreviation()) {
      this.abbreviation = other.abbreviation;
    }
    if (other.isSetCompetitionName()) {
      this.competitionName = other.competitionName;
    }
    if (other.isSetAlbumName()) {
      this.albumName = other.albumName;
    }
    if (other.isSetTextlives()) {
      List<TSimpleTextLive> __this__textlives = new ArrayList<TSimpleTextLive>(other.textlives.size());
      for (TSimpleTextLive other_element : other.textlives) {
        __this__textlives.add(new TSimpleTextLive(other_element));
      }
      this.textlives = __this__textlives;
    }
    if (other.isSetCurrentMoment()) {
      this.currentMoment = new com.lesports.qmt.sbd.api.dto.TCurrentMoment(other.currentMoment);
    }
    if (other.isSetTLiveLink()) {
      this.tLiveLink = other.tLiveLink;
    }
    if (other.isSetChatRoomId()) {
      this.chatRoomId = other.chatRoomId;
    }
    this.isOctopus = other.isOctopus;
    this.octopusMatchId = other.octopusMatchId;
    if (other.isSetTextLiveStatus()) {
      this.textLiveStatus = other.textLiveStatus;
    }
    if (other.isSetAppActivities()) {
      List<TSimpleActivity> __this__appActivities = new ArrayList<TSimpleActivity>(other.appActivities.size());
      for (TSimpleActivity other_element : other.appActivities) {
        __this__appActivities.add(new TSimpleActivity(other_element));
      }
      this.appActivities = __this__appActivities;
    }
    if (other.isSetLivePlatforms()) {
      Set<com.lesports.api.common.Platform> __this__livePlatforms = new HashSet<com.lesports.api.common.Platform>(other.livePlatforms.size());
      for (com.lesports.api.common.Platform other_element : other.livePlatforms) {
        __this__livePlatforms.add(other_element);
      }
      this.livePlatforms = __this__livePlatforms;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.deleted = other.deleted;
    if (other.isSetRelatedItems()) {
      List<com.lesports.qmt.sbc.api.common.TRelatedItem> __this__relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>(other.relatedItems.size());
      for (com.lesports.qmt.sbc.api.common.TRelatedItem other_element : other.relatedItems) {
        __this__relatedItems.add(new com.lesports.qmt.sbc.api.common.TRelatedItem(other_element));
      }
      this.relatedItems = __this__relatedItems;
    }
    if (other.isSetStadium()) {
      this.stadium = other.stadium;
    }
    if (other.isSetWeather()) {
      this.weather = other.weather;
    }
    if (other.isSetJudge()) {
      this.judge = other.judge;
    }
    this.isPay = other.isPay;
    if (other.isSetShareName()) {
      this.shareName = other.shareName;
    }
    this.isSyncToCloud = other.isSyncToCloud;
    this.isUrlRedirect = other.isUrlRedirect;
    if (other.isSetPcRedirectUrl()) {
      this.pcRedirectUrl = other.pcRedirectUrl;
    }
    if (other.isSetMRedirectUrl()) {
      this.mRedirectUrl = other.mRedirectUrl;
    }
    this.theRoadOrder = other.theRoadOrder;
    if (other.isSetMultiLangStage()) {
      List<com.lesports.api.common.LangString> __this__multiLangStage = new ArrayList<com.lesports.api.common.LangString>(other.multiLangStage.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangStage) {
        __this__multiLangStage.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangStage = __this__multiLangStage;
    }
    if (other.isSetMultiLangRound()) {
      List<com.lesports.api.common.LangString> __this__multiLangRound = new ArrayList<com.lesports.api.common.LangString>(other.multiLangRound.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangRound) {
        __this__multiLangRound.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangRound = __this__multiLangRound;
    }
    if (other.isSetMultiLangGroup()) {
      List<com.lesports.api.common.LangString> __this__multiLangGroup = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGroup.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGroup) {
        __this__multiLangGroup.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGroup = __this__multiLangGroup;
    }
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    if (other.isSetPlayerPageLink()) {
      this.playerPageLink = other.playerPageLink;
    }
    if (other.isSetScorePageLink()) {
      this.scorePageLink = other.scorePageLink;
    }
    this.disciplineId = other.disciplineId;
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    this.partnerType = other.partnerType;
    if (other.isSetItemUrl()) {
      this.itemUrl = other.itemUrl;
    }
    if (other.isSetMedalType()) {
      this.medalType = other.medalType;
    }
    if (other.isSetDiscipline()) {
      this.discipline = other.discipline;
    }
    if (other.isSetMultiLangDiscipline()) {
      List<com.lesports.api.common.LangString> __this__multiLangDiscipline = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDiscipline.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDiscipline) {
        __this__multiLangDiscipline.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDiscipline = __this__multiLangDiscipline;
    }
    if (other.isSetMultiLangSubstation()) {
      List<com.lesports.api.common.LangString> __this__multiLangSubstation = new ArrayList<com.lesports.api.common.LangString>(other.multiLangSubstation.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangSubstation) {
        __this__multiLangSubstation.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangSubstation = __this__multiLangSubstation;
    }
    this.aid = other.aid;
    if (other.isSetTopicUrl()) {
      this.topicUrl = other.topicUrl;
    }
  }

  public TComboEpisode deepCopy() {
    return new TComboEpisode(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setMidIsSet(false);
    this.mid = 0;
    setLeecoAidIsSet(false);
    this.leecoAid = 0;
    this.startTime = null;
    this.matchStatus = null;
    this.status = null;
    this.streams = null;
    this.videos = null;
    this.stage = null;
    this.round = null;
    this.group = null;
    this.substation = null;
    this.competitors = null;
    this.type = null;
    setVsIsSet(false);
    this.vs = false;
    setCidIsSet(false);
    this.cid = 0;
    setGameFTypeIsSet(false);
    this.gameFType = 0;
    setGameSTypeIsSet(false);
    this.gameSType = 0;
    this.liveUniqueId = null;
    this.periods = null;
    this.matchSystem = null;
    setRoundIdIsSet(false);
    this.roundId = 0;
    this.logo = null;
    this.moment = null;
    this.tags = null;
    setXinyingPayIsSet(false);
    this.xinyingPay = false;
    setXinyingMatchIdIsSet(false);
    this.xinyingMatchId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    this.playLink = null;
    this.images = null;
    this.desc = null;
    setDurationIsSet(false);
    this.duration = 0;
    this.commentId = null;
    this.abbreviation = null;
    this.competitionName = null;
    this.albumName = null;
    this.textlives = null;
    this.currentMoment = null;
    this.tLiveLink = null;
    this.chatRoomId = null;
    setIsOctopusIsSet(false);
    this.isOctopus = false;
    setOctopusMatchIdIsSet(false);
    this.octopusMatchId = 0;
    this.textLiveStatus = null;
    this.appActivities = null;
    this.livePlatforms = null;
    this.imageUrl = null;
    setDeletedIsSet(false);
    this.deleted = false;
    this.relatedItems = null;
    this.stadium = null;
    this.weather = null;
    this.judge = null;
    setIsPayIsSet(false);
    this.isPay = false;
    this.shareName = null;
    setIsSyncToCloudIsSet(false);
    this.isSyncToCloud = false;
    setIsUrlRedirectIsSet(false);
    this.isUrlRedirect = false;
    this.pcRedirectUrl = null;
    this.mRedirectUrl = null;
    setTheRoadOrderIsSet(false);
    this.theRoadOrder = 0;
    this.multiLangStage = null;
    this.multiLangRound = null;
    this.multiLangGroup = null;
    this.countryCode = null;
    this.playerPageLink = null;
    this.scorePageLink = null;
    setDisciplineIdIsSet(false);
    this.disciplineId = 0;
    this.multiLangNames = null;
    setPartnerTypeIsSet(false);
    this.partnerType = 0;
    this.itemUrl = null;
    this.medalType = null;
    this.discipline = null;
    this.multiLangDiscipline = null;
    this.multiLangSubstation = null;
    setAidIsSet(false);
    this.aid = 0;
    this.topicUrl = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getMid() {
    return this.mid;
  }

  public void setMid(long mid) {
    this.mid = mid;
    setMidIsSet(true);
  }

  public void unsetMid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public long getLeecoAid() {
    return this.leecoAid;
  }

  public void setLeecoAid(long leecoAid) {
    this.leecoAid = leecoAid;
    setLeecoAidIsSet(true);
  }

  public void unsetLeecoAid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEECOAID_ISSET_ID);
  }

  /** Returns true if field leecoAid is set (has been assigned a value) and false otherwise */
  public boolean isSetLeecoAid() {
    return EncodingUtils.testBit(__isset_bitfield, __LEECOAID_ISSET_ID);
  }

  public void setLeecoAidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEECOAID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.MatchStatus
   */
  public com.lesports.api.common.MatchStatus getMatchStatus() {
    return this.matchStatus;
  }

  /**
   * 
   * @see com.lesports.api.common.MatchStatus
   */
  public void setMatchStatus(com.lesports.api.common.MatchStatus matchStatus) {
    this.matchStatus = matchStatus;
  }

  public void unsetMatchStatus() {
    this.matchStatus = null;
  }

  /** Returns true if field matchStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchStatus() {
    return this.matchStatus != null;
  }

  public void setMatchStatusIsSet(boolean value) {
    if (!value) {
      this.matchStatus = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.LiveShowStatus
   */
  public com.lesports.api.common.LiveShowStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.lesports.api.common.LiveShowStatus
   */
  public void setStatus(com.lesports.api.common.LiveShowStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getStreamsSize() {
    return (this.streams == null) ? 0 : this.streams.size();
  }

  public java.util.Iterator<TLiveStream> getStreamsIterator() {
    return (this.streams == null) ? null : this.streams.iterator();
  }

  public void addToStreams(TLiveStream elem) {
    if (this.streams == null) {
      this.streams = new ArrayList<TLiveStream>();
    }
    this.streams.add(elem);
  }

  public List<TLiveStream> getStreams() {
    return this.streams;
  }

  public void setStreams(List<TLiveStream> streams) {
    this.streams = streams;
  }

  public void unsetStreams() {
    this.streams = null;
  }

  /** Returns true if field streams is set (has been assigned a value) and false otherwise */
  public boolean isSetStreams() {
    return this.streams != null;
  }

  public void setStreamsIsSet(boolean value) {
    if (!value) {
      this.streams = null;
    }
  }

  public int getVideosSize() {
    return (this.videos == null) ? 0 : this.videos.size();
  }

  public java.util.Iterator<TSimpleVideo> getVideosIterator() {
    return (this.videos == null) ? null : this.videos.iterator();
  }

  public void addToVideos(TSimpleVideo elem) {
    if (this.videos == null) {
      this.videos = new ArrayList<TSimpleVideo>();
    }
    this.videos.add(elem);
  }

  public List<TSimpleVideo> getVideos() {
    return this.videos;
  }

  public void setVideos(List<TSimpleVideo> videos) {
    this.videos = videos;
  }

  public void unsetVideos() {
    this.videos = null;
  }

  /** Returns true if field videos is set (has been assigned a value) and false otherwise */
  public boolean isSetVideos() {
    return this.videos != null;
  }

  public void setVideosIsSet(boolean value) {
    if (!value) {
      this.videos = null;
    }
  }

  public String getStage() {
    return this.stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }

  public void unsetStage() {
    this.stage = null;
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return this.stage != null;
  }

  public void setStageIsSet(boolean value) {
    if (!value) {
      this.stage = null;
    }
  }

  public String getRound() {
    return this.round;
  }

  public void setRound(String round) {
    this.round = round;
  }

  public void unsetRound() {
    this.round = null;
  }

  /** Returns true if field round is set (has been assigned a value) and false otherwise */
  public boolean isSetRound() {
    return this.round != null;
  }

  public void setRoundIsSet(boolean value) {
    if (!value) {
      this.round = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getSubstation() {
    return this.substation;
  }

  public void setSubstation(String substation) {
    this.substation = substation;
  }

  public void unsetSubstation() {
    this.substation = null;
  }

  /** Returns true if field substation is set (has been assigned a value) and false otherwise */
  public boolean isSetSubstation() {
    return this.substation != null;
  }

  public void setSubstationIsSet(boolean value) {
    if (!value) {
      this.substation = null;
    }
  }

  public int getCompetitorsSize() {
    return (this.competitors == null) ? 0 : this.competitors.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TCompetitor> getCompetitorsIterator() {
    return (this.competitors == null) ? null : this.competitors.iterator();
  }

  public void addToCompetitors(com.lesports.qmt.sbd.api.dto.TCompetitor elem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>();
    }
    this.competitors.add(elem);
  }

  public List<com.lesports.qmt.sbd.api.dto.TCompetitor> getCompetitors() {
    return this.competitors;
  }

  public void setCompetitors(List<com.lesports.qmt.sbd.api.dto.TCompetitor> competitors) {
    this.competitors = competitors;
  }

  public void unsetCompetitors() {
    this.competitors = null;
  }

  /** Returns true if field competitors is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitors() {
    return this.competitors != null;
  }

  public void setCompetitorsIsSet(boolean value) {
    if (!value) {
      this.competitors = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.EpisodeType
   */
  public com.lesports.qmt.sbc.api.common.EpisodeType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.EpisodeType
   */
  public void setType(com.lesports.qmt.sbc.api.common.EpisodeType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public boolean isVs() {
    return this.vs;
  }

  public void setVs(boolean vs) {
    this.vs = vs;
    setVsIsSet(true);
  }

  public void unsetVs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VS_ISSET_ID);
  }

  /** Returns true if field vs is set (has been assigned a value) and false otherwise */
  public boolean isSetVs() {
    return EncodingUtils.testBit(__isset_bitfield, __VS_ISSET_ID);
  }

  public void setVsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VS_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(long gameFType) {
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
  }

  public void unsetGameFType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  public void setGameFTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID, value);
  }

  public long getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(long gameSType) {
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  public void unsetGameSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  public void setGameSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPE_ISSET_ID, value);
  }

  public String getLiveUniqueId() {
    return this.liveUniqueId;
  }

  public void setLiveUniqueId(String liveUniqueId) {
    this.liveUniqueId = liveUniqueId;
  }

  public void unsetLiveUniqueId() {
    this.liveUniqueId = null;
  }

  /** Returns true if field liveUniqueId is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveUniqueId() {
    return this.liveUniqueId != null;
  }

  public void setLiveUniqueIdIsSet(boolean value) {
    if (!value) {
      this.liveUniqueId = null;
    }
  }

  public String getPeriods() {
    return this.periods;
  }

  public void setPeriods(String periods) {
    this.periods = periods;
  }

  public void unsetPeriods() {
    this.periods = null;
  }

  /** Returns true if field periods is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriods() {
    return this.periods != null;
  }

  public void setPeriodsIsSet(boolean value) {
    if (!value) {
      this.periods = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchSystem
   */
  public com.lesports.qmt.sbd.api.common.MatchSystem getMatchSystem() {
    return this.matchSystem;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchSystem
   */
  public void setMatchSystem(com.lesports.qmt.sbd.api.common.MatchSystem matchSystem) {
    this.matchSystem = matchSystem;
  }

  public void unsetMatchSystem() {
    this.matchSystem = null;
  }

  /** Returns true if field matchSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchSystem() {
    return this.matchSystem != null;
  }

  public void setMatchSystemIsSet(boolean value) {
    if (!value) {
      this.matchSystem = null;
    }
  }

  public long getRoundId() {
    return this.roundId;
  }

  public void setRoundId(long roundId) {
    this.roundId = roundId;
    setRoundIdIsSet(true);
  }

  public void unsetRoundId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  /** Returns true if field roundId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoundId() {
    return EncodingUtils.testBit(__isset_bitfield, __ROUNDID_ISSET_ID);
  }

  public void setRoundIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROUNDID_ISSET_ID, value);
  }

  public String getLogo() {
    return this.logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  public String getMoment() {
    return this.moment;
  }

  public void setMoment(String moment) {
    this.moment = moment;
  }

  public void unsetMoment() {
    this.moment = null;
  }

  /** Returns true if field moment is set (has been assigned a value) and false otherwise */
  public boolean isSetMoment() {
    return this.moment != null;
  }

  public void setMomentIsSet(boolean value) {
    if (!value) {
      this.moment = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public List<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public boolean isXinyingPay() {
    return this.xinyingPay;
  }

  public void setXinyingPay(boolean xinyingPay) {
    this.xinyingPay = xinyingPay;
    setXinyingPayIsSet(true);
  }

  public void unsetXinyingPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XINYINGPAY_ISSET_ID);
  }

  /** Returns true if field xinyingPay is set (has been assigned a value) and false otherwise */
  public boolean isSetXinyingPay() {
    return EncodingUtils.testBit(__isset_bitfield, __XINYINGPAY_ISSET_ID);
  }

  public void setXinyingPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XINYINGPAY_ISSET_ID, value);
  }

  public long getXinyingMatchId() {
    return this.xinyingMatchId;
  }

  public void setXinyingMatchId(long xinyingMatchId) {
    this.xinyingMatchId = xinyingMatchId;
    setXinyingMatchIdIsSet(true);
  }

  public void unsetXinyingMatchId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __XINYINGMATCHID_ISSET_ID);
  }

  /** Returns true if field xinyingMatchId is set (has been assigned a value) and false otherwise */
  public boolean isSetXinyingMatchId() {
    return EncodingUtils.testBit(__isset_bitfield, __XINYINGMATCHID_ISSET_ID);
  }

  public void setXinyingMatchIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __XINYINGMATCHID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public void setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public String getPlayLink() {
    return this.playLink;
  }

  public void setPlayLink(String playLink) {
    this.playLink = playLink;
  }

  public void unsetPlayLink() {
    this.playLink = null;
  }

  /** Returns true if field playLink is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayLink() {
    return this.playLink != null;
  }

  public void setPlayLinkIsSet(boolean value) {
    if (!value) {
      this.playLink = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public void putToImages(String key, String val) {
    if (this.images == null) {
      this.images = new HashMap<String,String>();
    }
    this.images.put(key, val);
  }

  public Map<String,String> getImages() {
    return this.images;
  }

  public void setImages(Map<String,String> images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public long getDuration() {
    return this.duration;
  }

  public void setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public String getCommentId() {
    return this.commentId;
  }

  public void setCommentId(String commentId) {
    this.commentId = commentId;
  }

  public void unsetCommentId() {
    this.commentId = null;
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return this.commentId != null;
  }

  public void setCommentIdIsSet(boolean value) {
    if (!value) {
      this.commentId = null;
    }
  }

  public String getAbbreviation() {
    return this.abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }

  public void unsetAbbreviation() {
    this.abbreviation = null;
  }

  /** Returns true if field abbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetAbbreviation() {
    return this.abbreviation != null;
  }

  public void setAbbreviationIsSet(boolean value) {
    if (!value) {
      this.abbreviation = null;
    }
  }

  public String getCompetitionName() {
    return this.competitionName;
  }

  public void setCompetitionName(String competitionName) {
    this.competitionName = competitionName;
  }

  public void unsetCompetitionName() {
    this.competitionName = null;
  }

  /** Returns true if field competitionName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitionName() {
    return this.competitionName != null;
  }

  public void setCompetitionNameIsSet(boolean value) {
    if (!value) {
      this.competitionName = null;
    }
  }

  public String getAlbumName() {
    return this.albumName;
  }

  public void setAlbumName(String albumName) {
    this.albumName = albumName;
  }

  public void unsetAlbumName() {
    this.albumName = null;
  }

  /** Returns true if field albumName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbumName() {
    return this.albumName != null;
  }

  public void setAlbumNameIsSet(boolean value) {
    if (!value) {
      this.albumName = null;
    }
  }

  public int getTextlivesSize() {
    return (this.textlives == null) ? 0 : this.textlives.size();
  }

  public java.util.Iterator<TSimpleTextLive> getTextlivesIterator() {
    return (this.textlives == null) ? null : this.textlives.iterator();
  }

  public void addToTextlives(TSimpleTextLive elem) {
    if (this.textlives == null) {
      this.textlives = new ArrayList<TSimpleTextLive>();
    }
    this.textlives.add(elem);
  }

  public List<TSimpleTextLive> getTextlives() {
    return this.textlives;
  }

  public void setTextlives(List<TSimpleTextLive> textlives) {
    this.textlives = textlives;
  }

  public void unsetTextlives() {
    this.textlives = null;
  }

  /** Returns true if field textlives is set (has been assigned a value) and false otherwise */
  public boolean isSetTextlives() {
    return this.textlives != null;
  }

  public void setTextlivesIsSet(boolean value) {
    if (!value) {
      this.textlives = null;
    }
  }

  public com.lesports.qmt.sbd.api.dto.TCurrentMoment getCurrentMoment() {
    return this.currentMoment;
  }

  public void setCurrentMoment(com.lesports.qmt.sbd.api.dto.TCurrentMoment currentMoment) {
    this.currentMoment = currentMoment;
  }

  public void unsetCurrentMoment() {
    this.currentMoment = null;
  }

  /** Returns true if field currentMoment is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMoment() {
    return this.currentMoment != null;
  }

  public void setCurrentMomentIsSet(boolean value) {
    if (!value) {
      this.currentMoment = null;
    }
  }

  public String getTLiveLink() {
    return this.tLiveLink;
  }

  public void setTLiveLink(String tLiveLink) {
    this.tLiveLink = tLiveLink;
  }

  public void unsetTLiveLink() {
    this.tLiveLink = null;
  }

  /** Returns true if field tLiveLink is set (has been assigned a value) and false otherwise */
  public boolean isSetTLiveLink() {
    return this.tLiveLink != null;
  }

  public void setTLiveLinkIsSet(boolean value) {
    if (!value) {
      this.tLiveLink = null;
    }
  }

  public String getChatRoomId() {
    return this.chatRoomId;
  }

  public void setChatRoomId(String chatRoomId) {
    this.chatRoomId = chatRoomId;
  }

  public void unsetChatRoomId() {
    this.chatRoomId = null;
  }

  /** Returns true if field chatRoomId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatRoomId() {
    return this.chatRoomId != null;
  }

  public void setChatRoomIdIsSet(boolean value) {
    if (!value) {
      this.chatRoomId = null;
    }
  }

  public boolean isIsOctopus() {
    return this.isOctopus;
  }

  public void setIsOctopus(boolean isOctopus) {
    this.isOctopus = isOctopus;
    setIsOctopusIsSet(true);
  }

  public void unsetIsOctopus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOCTOPUS_ISSET_ID);
  }

  /** Returns true if field isOctopus is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOctopus() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOCTOPUS_ISSET_ID);
  }

  public void setIsOctopusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOCTOPUS_ISSET_ID, value);
  }

  public long getOctopusMatchId() {
    return this.octopusMatchId;
  }

  public void setOctopusMatchId(long octopusMatchId) {
    this.octopusMatchId = octopusMatchId;
    setOctopusMatchIdIsSet(true);
  }

  public void unsetOctopusMatchId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCTOPUSMATCHID_ISSET_ID);
  }

  /** Returns true if field octopusMatchId is set (has been assigned a value) and false otherwise */
  public boolean isSetOctopusMatchId() {
    return EncodingUtils.testBit(__isset_bitfield, __OCTOPUSMATCHID_ISSET_ID);
  }

  public void setOctopusMatchIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCTOPUSMATCHID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.api.common.LiveShowStatus
   */
  public com.lesports.api.common.LiveShowStatus getTextLiveStatus() {
    return this.textLiveStatus;
  }

  /**
   * 
   * @see com.lesports.api.common.LiveShowStatus
   */
  public void setTextLiveStatus(com.lesports.api.common.LiveShowStatus textLiveStatus) {
    this.textLiveStatus = textLiveStatus;
  }

  public void unsetTextLiveStatus() {
    this.textLiveStatus = null;
  }

  /** Returns true if field textLiveStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTextLiveStatus() {
    return this.textLiveStatus != null;
  }

  public void setTextLiveStatusIsSet(boolean value) {
    if (!value) {
      this.textLiveStatus = null;
    }
  }

  public int getAppActivitiesSize() {
    return (this.appActivities == null) ? 0 : this.appActivities.size();
  }

  public java.util.Iterator<TSimpleActivity> getAppActivitiesIterator() {
    return (this.appActivities == null) ? null : this.appActivities.iterator();
  }

  public void addToAppActivities(TSimpleActivity elem) {
    if (this.appActivities == null) {
      this.appActivities = new ArrayList<TSimpleActivity>();
    }
    this.appActivities.add(elem);
  }

  public List<TSimpleActivity> getAppActivities() {
    return this.appActivities;
  }

  public void setAppActivities(List<TSimpleActivity> appActivities) {
    this.appActivities = appActivities;
  }

  public void unsetAppActivities() {
    this.appActivities = null;
  }

  /** Returns true if field appActivities is set (has been assigned a value) and false otherwise */
  public boolean isSetAppActivities() {
    return this.appActivities != null;
  }

  public void setAppActivitiesIsSet(boolean value) {
    if (!value) {
      this.appActivities = null;
    }
  }

  public int getLivePlatformsSize() {
    return (this.livePlatforms == null) ? 0 : this.livePlatforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getLivePlatformsIterator() {
    return (this.livePlatforms == null) ? null : this.livePlatforms.iterator();
  }

  public void addToLivePlatforms(com.lesports.api.common.Platform elem) {
    if (this.livePlatforms == null) {
      this.livePlatforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.livePlatforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getLivePlatforms() {
    return this.livePlatforms;
  }

  public void setLivePlatforms(Set<com.lesports.api.common.Platform> livePlatforms) {
    this.livePlatforms = livePlatforms;
  }

  public void unsetLivePlatforms() {
    this.livePlatforms = null;
  }

  /** Returns true if field livePlatforms is set (has been assigned a value) and false otherwise */
  public boolean isSetLivePlatforms() {
    return this.livePlatforms != null;
  }

  public void setLivePlatformsIsSet(boolean value) {
    if (!value) {
      this.livePlatforms = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public void setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public int getRelatedItemsSize() {
    return (this.relatedItems == null) ? 0 : this.relatedItems.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbc.api.common.TRelatedItem> getRelatedItemsIterator() {
    return (this.relatedItems == null) ? null : this.relatedItems.iterator();
  }

  public void addToRelatedItems(com.lesports.qmt.sbc.api.common.TRelatedItem elem) {
    if (this.relatedItems == null) {
      this.relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>();
    }
    this.relatedItems.add(elem);
  }

  public List<com.lesports.qmt.sbc.api.common.TRelatedItem> getRelatedItems() {
    return this.relatedItems;
  }

  public void setRelatedItems(List<com.lesports.qmt.sbc.api.common.TRelatedItem> relatedItems) {
    this.relatedItems = relatedItems;
  }

  public void unsetRelatedItems() {
    this.relatedItems = null;
  }

  /** Returns true if field relatedItems is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedItems() {
    return this.relatedItems != null;
  }

  public void setRelatedItemsIsSet(boolean value) {
    if (!value) {
      this.relatedItems = null;
    }
  }

  public String getStadium() {
    return this.stadium;
  }

  public void setStadium(String stadium) {
    this.stadium = stadium;
  }

  public void unsetStadium() {
    this.stadium = null;
  }

  /** Returns true if field stadium is set (has been assigned a value) and false otherwise */
  public boolean isSetStadium() {
    return this.stadium != null;
  }

  public void setStadiumIsSet(boolean value) {
    if (!value) {
      this.stadium = null;
    }
  }

  public String getWeather() {
    return this.weather;
  }

  public void setWeather(String weather) {
    this.weather = weather;
  }

  public void unsetWeather() {
    this.weather = null;
  }

  /** Returns true if field weather is set (has been assigned a value) and false otherwise */
  public boolean isSetWeather() {
    return this.weather != null;
  }

  public void setWeatherIsSet(boolean value) {
    if (!value) {
      this.weather = null;
    }
  }

  public String getJudge() {
    return this.judge;
  }

  public void setJudge(String judge) {
    this.judge = judge;
  }

  public void unsetJudge() {
    this.judge = null;
  }

  /** Returns true if field judge is set (has been assigned a value) and false otherwise */
  public boolean isSetJudge() {
    return this.judge != null;
  }

  public void setJudgeIsSet(boolean value) {
    if (!value) {
      this.judge = null;
    }
  }

  public boolean isIsPay() {
    return this.isPay;
  }

  public void setIsPay(boolean isPay) {
    this.isPay = isPay;
    setIsPayIsSet(true);
  }

  public void unsetIsPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  /** Returns true if field isPay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  public void setIsPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAY_ISSET_ID, value);
  }

  public String getShareName() {
    return this.shareName;
  }

  public void setShareName(String shareName) {
    this.shareName = shareName;
  }

  public void unsetShareName() {
    this.shareName = null;
  }

  /** Returns true if field shareName is set (has been assigned a value) and false otherwise */
  public boolean isSetShareName() {
    return this.shareName != null;
  }

  public void setShareNameIsSet(boolean value) {
    if (!value) {
      this.shareName = null;
    }
  }

  public boolean isIsSyncToCloud() {
    return this.isSyncToCloud;
  }

  public void setIsSyncToCloud(boolean isSyncToCloud) {
    this.isSyncToCloud = isSyncToCloud;
    setIsSyncToCloudIsSet(true);
  }

  public void unsetIsSyncToCloud() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSYNCTOCLOUD_ISSET_ID);
  }

  /** Returns true if field isSyncToCloud is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSyncToCloud() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSYNCTOCLOUD_ISSET_ID);
  }

  public void setIsSyncToCloudIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSYNCTOCLOUD_ISSET_ID, value);
  }

  public boolean isIsUrlRedirect() {
    return this.isUrlRedirect;
  }

  public void setIsUrlRedirect(boolean isUrlRedirect) {
    this.isUrlRedirect = isUrlRedirect;
    setIsUrlRedirectIsSet(true);
  }

  public void unsetIsUrlRedirect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISURLREDIRECT_ISSET_ID);
  }

  /** Returns true if field isUrlRedirect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUrlRedirect() {
    return EncodingUtils.testBit(__isset_bitfield, __ISURLREDIRECT_ISSET_ID);
  }

  public void setIsUrlRedirectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISURLREDIRECT_ISSET_ID, value);
  }

  public String getPcRedirectUrl() {
    return this.pcRedirectUrl;
  }

  public void setPcRedirectUrl(String pcRedirectUrl) {
    this.pcRedirectUrl = pcRedirectUrl;
  }

  public void unsetPcRedirectUrl() {
    this.pcRedirectUrl = null;
  }

  /** Returns true if field pcRedirectUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPcRedirectUrl() {
    return this.pcRedirectUrl != null;
  }

  public void setPcRedirectUrlIsSet(boolean value) {
    if (!value) {
      this.pcRedirectUrl = null;
    }
  }

  public String getMRedirectUrl() {
    return this.mRedirectUrl;
  }

  public void setMRedirectUrl(String mRedirectUrl) {
    this.mRedirectUrl = mRedirectUrl;
  }

  public void unsetMRedirectUrl() {
    this.mRedirectUrl = null;
  }

  /** Returns true if field mRedirectUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMRedirectUrl() {
    return this.mRedirectUrl != null;
  }

  public void setMRedirectUrlIsSet(boolean value) {
    if (!value) {
      this.mRedirectUrl = null;
    }
  }

  public int getTheRoadOrder() {
    return this.theRoadOrder;
  }

  public void setTheRoadOrder(int theRoadOrder) {
    this.theRoadOrder = theRoadOrder;
    setTheRoadOrderIsSet(true);
  }

  public void unsetTheRoadOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THEROADORDER_ISSET_ID);
  }

  /** Returns true if field theRoadOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetTheRoadOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __THEROADORDER_ISSET_ID);
  }

  public void setTheRoadOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THEROADORDER_ISSET_ID, value);
  }

  public int getMultiLangStageSize() {
    return (this.multiLangStage == null) ? 0 : this.multiLangStage.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangStageIterator() {
    return (this.multiLangStage == null) ? null : this.multiLangStage.iterator();
  }

  public void addToMultiLangStage(com.lesports.api.common.LangString elem) {
    if (this.multiLangStage == null) {
      this.multiLangStage = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangStage.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangStage() {
    return this.multiLangStage;
  }

  public void setMultiLangStage(List<com.lesports.api.common.LangString> multiLangStage) {
    this.multiLangStage = multiLangStage;
  }

  public void unsetMultiLangStage() {
    this.multiLangStage = null;
  }

  /** Returns true if field multiLangStage is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangStage() {
    return this.multiLangStage != null;
  }

  public void setMultiLangStageIsSet(boolean value) {
    if (!value) {
      this.multiLangStage = null;
    }
  }

  public int getMultiLangRoundSize() {
    return (this.multiLangRound == null) ? 0 : this.multiLangRound.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangRoundIterator() {
    return (this.multiLangRound == null) ? null : this.multiLangRound.iterator();
  }

  public void addToMultiLangRound(com.lesports.api.common.LangString elem) {
    if (this.multiLangRound == null) {
      this.multiLangRound = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangRound.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangRound() {
    return this.multiLangRound;
  }

  public void setMultiLangRound(List<com.lesports.api.common.LangString> multiLangRound) {
    this.multiLangRound = multiLangRound;
  }

  public void unsetMultiLangRound() {
    this.multiLangRound = null;
  }

  /** Returns true if field multiLangRound is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangRound() {
    return this.multiLangRound != null;
  }

  public void setMultiLangRoundIsSet(boolean value) {
    if (!value) {
      this.multiLangRound = null;
    }
  }

  public int getMultiLangGroupSize() {
    return (this.multiLangGroup == null) ? 0 : this.multiLangGroup.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGroupIterator() {
    return (this.multiLangGroup == null) ? null : this.multiLangGroup.iterator();
  }

  public void addToMultiLangGroup(com.lesports.api.common.LangString elem) {
    if (this.multiLangGroup == null) {
      this.multiLangGroup = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGroup.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGroup() {
    return this.multiLangGroup;
  }

  public void setMultiLangGroup(List<com.lesports.api.common.LangString> multiLangGroup) {
    this.multiLangGroup = multiLangGroup;
  }

  public void unsetMultiLangGroup() {
    this.multiLangGroup = null;
  }

  /** Returns true if field multiLangGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGroup() {
    return this.multiLangGroup != null;
  }

  public void setMultiLangGroupIsSet(boolean value) {
    if (!value) {
      this.multiLangGroup = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.CountryCode
   */
  public com.lesports.api.common.CountryCode getCountryCode() {
    return this.countryCode;
  }

  /**
   * 
   * @see com.lesports.api.common.CountryCode
   */
  public void setCountryCode(com.lesports.api.common.CountryCode countryCode) {
    this.countryCode = countryCode;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public String getPlayerPageLink() {
    return this.playerPageLink;
  }

  public void setPlayerPageLink(String playerPageLink) {
    this.playerPageLink = playerPageLink;
  }

  public void unsetPlayerPageLink() {
    this.playerPageLink = null;
  }

  /** Returns true if field playerPageLink is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerPageLink() {
    return this.playerPageLink != null;
  }

  public void setPlayerPageLinkIsSet(boolean value) {
    if (!value) {
      this.playerPageLink = null;
    }
  }

  public String getScorePageLink() {
    return this.scorePageLink;
  }

  public void setScorePageLink(String scorePageLink) {
    this.scorePageLink = scorePageLink;
  }

  public void unsetScorePageLink() {
    this.scorePageLink = null;
  }

  /** Returns true if field scorePageLink is set (has been assigned a value) and false otherwise */
  public boolean isSetScorePageLink() {
    return this.scorePageLink != null;
  }

  public void setScorePageLinkIsSet(boolean value) {
    if (!value) {
      this.scorePageLink = null;
    }
  }

  public long getDisciplineId() {
    return this.disciplineId;
  }

  public void setDisciplineId(long disciplineId) {
    this.disciplineId = disciplineId;
    setDisciplineIdIsSet(true);
  }

  public void unsetDisciplineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  /** Returns true if field disciplineId is set (has been assigned a value) and false otherwise */
  public boolean isSetDisciplineId() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID);
  }

  public void setDisciplineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCIPLINEID_ISSET_ID, value);
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getPartnerType() {
    return this.partnerType;
  }

  public void setPartnerType(int partnerType) {
    this.partnerType = partnerType;
    setPartnerTypeIsSet(true);
  }

  public void unsetPartnerType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID);
  }

  /** Returns true if field partnerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerType() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID);
  }

  public void setPartnerTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERTYPE_ISSET_ID, value);
  }

  public String getItemUrl() {
    return this.itemUrl;
  }

  public void setItemUrl(String itemUrl) {
    this.itemUrl = itemUrl;
  }

  public void unsetItemUrl() {
    this.itemUrl = null;
  }

  /** Returns true if field itemUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetItemUrl() {
    return this.itemUrl != null;
  }

  public void setItemUrlIsSet(boolean value) {
    if (!value) {
      this.itemUrl = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MedalType
   */
  public com.lesports.qmt.sbd.api.common.MedalType getMedalType() {
    return this.medalType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MedalType
   */
  public void setMedalType(com.lesports.qmt.sbd.api.common.MedalType medalType) {
    this.medalType = medalType;
  }

  public void unsetMedalType() {
    this.medalType = null;
  }

  /** Returns true if field medalType is set (has been assigned a value) and false otherwise */
  public boolean isSetMedalType() {
    return this.medalType != null;
  }

  public void setMedalTypeIsSet(boolean value) {
    if (!value) {
      this.medalType = null;
    }
  }

  public String getDiscipline() {
    return this.discipline;
  }

  public void setDiscipline(String discipline) {
    this.discipline = discipline;
  }

  public void unsetDiscipline() {
    this.discipline = null;
  }

  /** Returns true if field discipline is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscipline() {
    return this.discipline != null;
  }

  public void setDisciplineIsSet(boolean value) {
    if (!value) {
      this.discipline = null;
    }
  }

  public int getMultiLangDisciplineSize() {
    return (this.multiLangDiscipline == null) ? 0 : this.multiLangDiscipline.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDisciplineIterator() {
    return (this.multiLangDiscipline == null) ? null : this.multiLangDiscipline.iterator();
  }

  public void addToMultiLangDiscipline(com.lesports.api.common.LangString elem) {
    if (this.multiLangDiscipline == null) {
      this.multiLangDiscipline = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDiscipline.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDiscipline() {
    return this.multiLangDiscipline;
  }

  public void setMultiLangDiscipline(List<com.lesports.api.common.LangString> multiLangDiscipline) {
    this.multiLangDiscipline = multiLangDiscipline;
  }

  public void unsetMultiLangDiscipline() {
    this.multiLangDiscipline = null;
  }

  /** Returns true if field multiLangDiscipline is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDiscipline() {
    return this.multiLangDiscipline != null;
  }

  public void setMultiLangDisciplineIsSet(boolean value) {
    if (!value) {
      this.multiLangDiscipline = null;
    }
  }

  public int getMultiLangSubstationSize() {
    return (this.multiLangSubstation == null) ? 0 : this.multiLangSubstation.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangSubstationIterator() {
    return (this.multiLangSubstation == null) ? null : this.multiLangSubstation.iterator();
  }

  public void addToMultiLangSubstation(com.lesports.api.common.LangString elem) {
    if (this.multiLangSubstation == null) {
      this.multiLangSubstation = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangSubstation.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangSubstation() {
    return this.multiLangSubstation;
  }

  public void setMultiLangSubstation(List<com.lesports.api.common.LangString> multiLangSubstation) {
    this.multiLangSubstation = multiLangSubstation;
  }

  public void unsetMultiLangSubstation() {
    this.multiLangSubstation = null;
  }

  /** Returns true if field multiLangSubstation is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangSubstation() {
    return this.multiLangSubstation != null;
  }

  public void setMultiLangSubstationIsSet(boolean value) {
    if (!value) {
      this.multiLangSubstation = null;
    }
  }

  public long getAid() {
    return this.aid;
  }

  public void setAid(long aid) {
    this.aid = aid;
    setAidIsSet(true);
  }

  public void unsetAid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
  }

  /** Returns true if field aid is set (has been assigned a value) and false otherwise */
  public boolean isSetAid() {
    return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
  }

  public void setAidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
  }

  public String getTopicUrl() {
    return this.topicUrl;
  }

  public void setTopicUrl(String topicUrl) {
    this.topicUrl = topicUrl;
  }

  public void unsetTopicUrl() {
    this.topicUrl = null;
  }

  /** Returns true if field topicUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicUrl() {
    return this.topicUrl != null;
  }

  public void setTopicUrlIsSet(boolean value) {
    if (!value) {
      this.topicUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((Long)value);
      }
      break;

    case LEECO_AID:
      if (value == null) {
        unsetLeecoAid();
      } else {
        setLeecoAid((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case MATCH_STATUS:
      if (value == null) {
        unsetMatchStatus();
      } else {
        setMatchStatus((com.lesports.api.common.MatchStatus)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.lesports.api.common.LiveShowStatus)value);
      }
      break;

    case STREAMS:
      if (value == null) {
        unsetStreams();
      } else {
        setStreams((List<TLiveStream>)value);
      }
      break;

    case VIDEOS:
      if (value == null) {
        unsetVideos();
      } else {
        setVideos((List<TSimpleVideo>)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((String)value);
      }
      break;

    case ROUND:
      if (value == null) {
        unsetRound();
      } else {
        setRound((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case SUBSTATION:
      if (value == null) {
        unsetSubstation();
      } else {
        setSubstation((String)value);
      }
      break;

    case COMPETITORS:
      if (value == null) {
        unsetCompetitors();
      } else {
        setCompetitors((List<com.lesports.qmt.sbd.api.dto.TCompetitor>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.lesports.qmt.sbc.api.common.EpisodeType)value);
      }
      break;

    case VS:
      if (value == null) {
        unsetVs();
      } else {
        setVs((Boolean)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((Long)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((Long)value);
      }
      break;

    case LIVE_UNIQUE_ID:
      if (value == null) {
        unsetLiveUniqueId();
      } else {
        setLiveUniqueId((String)value);
      }
      break;

    case PERIODS:
      if (value == null) {
        unsetPeriods();
      } else {
        setPeriods((String)value);
      }
      break;

    case MATCH_SYSTEM:
      if (value == null) {
        unsetMatchSystem();
      } else {
        setMatchSystem((com.lesports.qmt.sbd.api.common.MatchSystem)value);
      }
      break;

    case ROUND_ID:
      if (value == null) {
        unsetRoundId();
      } else {
        setRoundId((Long)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    case MOMENT:
      if (value == null) {
        unsetMoment();
      } else {
        setMoment((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case XINYING_PAY:
      if (value == null) {
        unsetXinyingPay();
      } else {
        setXinyingPay((Boolean)value);
      }
      break;

    case XINYING_MATCH_ID:
      if (value == null) {
        unsetXinyingMatchId();
      } else {
        setXinyingMatchId((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case PLAY_LINK:
      if (value == null) {
        unsetPlayLink();
      } else {
        setPlayLink((String)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((Map<String,String>)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((String)value);
      }
      break;

    case ABBREVIATION:
      if (value == null) {
        unsetAbbreviation();
      } else {
        setAbbreviation((String)value);
      }
      break;

    case COMPETITION_NAME:
      if (value == null) {
        unsetCompetitionName();
      } else {
        setCompetitionName((String)value);
      }
      break;

    case ALBUM_NAME:
      if (value == null) {
        unsetAlbumName();
      } else {
        setAlbumName((String)value);
      }
      break;

    case TEXTLIVES:
      if (value == null) {
        unsetTextlives();
      } else {
        setTextlives((List<TSimpleTextLive>)value);
      }
      break;

    case CURRENT_MOMENT:
      if (value == null) {
        unsetCurrentMoment();
      } else {
        setCurrentMoment((com.lesports.qmt.sbd.api.dto.TCurrentMoment)value);
      }
      break;

    case T_LIVE_LINK:
      if (value == null) {
        unsetTLiveLink();
      } else {
        setTLiveLink((String)value);
      }
      break;

    case CHAT_ROOM_ID:
      if (value == null) {
        unsetChatRoomId();
      } else {
        setChatRoomId((String)value);
      }
      break;

    case IS_OCTOPUS:
      if (value == null) {
        unsetIsOctopus();
      } else {
        setIsOctopus((Boolean)value);
      }
      break;

    case OCTOPUS_MATCH_ID:
      if (value == null) {
        unsetOctopusMatchId();
      } else {
        setOctopusMatchId((Long)value);
      }
      break;

    case TEXT_LIVE_STATUS:
      if (value == null) {
        unsetTextLiveStatus();
      } else {
        setTextLiveStatus((com.lesports.api.common.LiveShowStatus)value);
      }
      break;

    case APP_ACTIVITIES:
      if (value == null) {
        unsetAppActivities();
      } else {
        setAppActivities((List<TSimpleActivity>)value);
      }
      break;

    case LIVE_PLATFORMS:
      if (value == null) {
        unsetLivePlatforms();
      } else {
        setLivePlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case RELATED_ITEMS:
      if (value == null) {
        unsetRelatedItems();
      } else {
        setRelatedItems((List<com.lesports.qmt.sbc.api.common.TRelatedItem>)value);
      }
      break;

    case STADIUM:
      if (value == null) {
        unsetStadium();
      } else {
        setStadium((String)value);
      }
      break;

    case WEATHER:
      if (value == null) {
        unsetWeather();
      } else {
        setWeather((String)value);
      }
      break;

    case JUDGE:
      if (value == null) {
        unsetJudge();
      } else {
        setJudge((String)value);
      }
      break;

    case IS_PAY:
      if (value == null) {
        unsetIsPay();
      } else {
        setIsPay((Boolean)value);
      }
      break;

    case SHARE_NAME:
      if (value == null) {
        unsetShareName();
      } else {
        setShareName((String)value);
      }
      break;

    case IS_SYNC_TO_CLOUD:
      if (value == null) {
        unsetIsSyncToCloud();
      } else {
        setIsSyncToCloud((Boolean)value);
      }
      break;

    case IS_URL_REDIRECT:
      if (value == null) {
        unsetIsUrlRedirect();
      } else {
        setIsUrlRedirect((Boolean)value);
      }
      break;

    case PC_REDIRECT_URL:
      if (value == null) {
        unsetPcRedirectUrl();
      } else {
        setPcRedirectUrl((String)value);
      }
      break;

    case M_REDIRECT_URL:
      if (value == null) {
        unsetMRedirectUrl();
      } else {
        setMRedirectUrl((String)value);
      }
      break;

    case THE_ROAD_ORDER:
      if (value == null) {
        unsetTheRoadOrder();
      } else {
        setTheRoadOrder((Integer)value);
      }
      break;

    case MULTI_LANG_STAGE:
      if (value == null) {
        unsetMultiLangStage();
      } else {
        setMultiLangStage((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_ROUND:
      if (value == null) {
        unsetMultiLangRound();
      } else {
        setMultiLangRound((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_GROUP:
      if (value == null) {
        unsetMultiLangGroup();
      } else {
        setMultiLangGroup((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((com.lesports.api.common.CountryCode)value);
      }
      break;

    case PLAYER_PAGE_LINK:
      if (value == null) {
        unsetPlayerPageLink();
      } else {
        setPlayerPageLink((String)value);
      }
      break;

    case SCORE_PAGE_LINK:
      if (value == null) {
        unsetScorePageLink();
      } else {
        setScorePageLink((String)value);
      }
      break;

    case DISCIPLINE_ID:
      if (value == null) {
        unsetDisciplineId();
      } else {
        setDisciplineId((Long)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case PARTNER_TYPE:
      if (value == null) {
        unsetPartnerType();
      } else {
        setPartnerType((Integer)value);
      }
      break;

    case ITEM_URL:
      if (value == null) {
        unsetItemUrl();
      } else {
        setItemUrl((String)value);
      }
      break;

    case MEDAL_TYPE:
      if (value == null) {
        unsetMedalType();
      } else {
        setMedalType((com.lesports.qmt.sbd.api.common.MedalType)value);
      }
      break;

    case DISCIPLINE:
      if (value == null) {
        unsetDiscipline();
      } else {
        setDiscipline((String)value);
      }
      break;

    case MULTI_LANG_DISCIPLINE:
      if (value == null) {
        unsetMultiLangDiscipline();
      } else {
        setMultiLangDiscipline((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_SUBSTATION:
      if (value == null) {
        unsetMultiLangSubstation();
      } else {
        setMultiLangSubstation((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case AID:
      if (value == null) {
        unsetAid();
      } else {
        setAid((Long)value);
      }
      break;

    case TOPIC_URL:
      if (value == null) {
        unsetTopicUrl();
      } else {
        setTopicUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case MID:
      return Long.valueOf(getMid());

    case LEECO_AID:
      return Long.valueOf(getLeecoAid());

    case START_TIME:
      return getStartTime();

    case MATCH_STATUS:
      return getMatchStatus();

    case STATUS:
      return getStatus();

    case STREAMS:
      return getStreams();

    case VIDEOS:
      return getVideos();

    case STAGE:
      return getStage();

    case ROUND:
      return getRound();

    case GROUP:
      return getGroup();

    case SUBSTATION:
      return getSubstation();

    case COMPETITORS:
      return getCompetitors();

    case TYPE:
      return getType();

    case VS:
      return Boolean.valueOf(isVs());

    case CID:
      return Long.valueOf(getCid());

    case GAME_FTYPE:
      return Long.valueOf(getGameFType());

    case GAME_STYPE:
      return Long.valueOf(getGameSType());

    case LIVE_UNIQUE_ID:
      return getLiveUniqueId();

    case PERIODS:
      return getPeriods();

    case MATCH_SYSTEM:
      return getMatchSystem();

    case ROUND_ID:
      return Long.valueOf(getRoundId());

    case LOGO:
      return getLogo();

    case MOMENT:
      return getMoment();

    case TAGS:
      return getTags();

    case XINYING_PAY:
      return Boolean.valueOf(isXinyingPay());

    case XINYING_MATCH_ID:
      return Long.valueOf(getXinyingMatchId());

    case PRICE:
      return Double.valueOf(getPrice());

    case PLAY_LINK:
      return getPlayLink();

    case IMAGES:
      return getImages();

    case DESC:
      return getDesc();

    case DURATION:
      return Long.valueOf(getDuration());

    case COMMENT_ID:
      return getCommentId();

    case ABBREVIATION:
      return getAbbreviation();

    case COMPETITION_NAME:
      return getCompetitionName();

    case ALBUM_NAME:
      return getAlbumName();

    case TEXTLIVES:
      return getTextlives();

    case CURRENT_MOMENT:
      return getCurrentMoment();

    case T_LIVE_LINK:
      return getTLiveLink();

    case CHAT_ROOM_ID:
      return getChatRoomId();

    case IS_OCTOPUS:
      return Boolean.valueOf(isIsOctopus());

    case OCTOPUS_MATCH_ID:
      return Long.valueOf(getOctopusMatchId());

    case TEXT_LIVE_STATUS:
      return getTextLiveStatus();

    case APP_ACTIVITIES:
      return getAppActivities();

    case LIVE_PLATFORMS:
      return getLivePlatforms();

    case IMAGE_URL:
      return getImageUrl();

    case DELETED:
      return Boolean.valueOf(isDeleted());

    case RELATED_ITEMS:
      return getRelatedItems();

    case STADIUM:
      return getStadium();

    case WEATHER:
      return getWeather();

    case JUDGE:
      return getJudge();

    case IS_PAY:
      return Boolean.valueOf(isIsPay());

    case SHARE_NAME:
      return getShareName();

    case IS_SYNC_TO_CLOUD:
      return Boolean.valueOf(isIsSyncToCloud());

    case IS_URL_REDIRECT:
      return Boolean.valueOf(isIsUrlRedirect());

    case PC_REDIRECT_URL:
      return getPcRedirectUrl();

    case M_REDIRECT_URL:
      return getMRedirectUrl();

    case THE_ROAD_ORDER:
      return Integer.valueOf(getTheRoadOrder());

    case MULTI_LANG_STAGE:
      return getMultiLangStage();

    case MULTI_LANG_ROUND:
      return getMultiLangRound();

    case MULTI_LANG_GROUP:
      return getMultiLangGroup();

    case COUNTRY_CODE:
      return getCountryCode();

    case PLAYER_PAGE_LINK:
      return getPlayerPageLink();

    case SCORE_PAGE_LINK:
      return getScorePageLink();

    case DISCIPLINE_ID:
      return Long.valueOf(getDisciplineId());

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case PARTNER_TYPE:
      return Integer.valueOf(getPartnerType());

    case ITEM_URL:
      return getItemUrl();

    case MEDAL_TYPE:
      return getMedalType();

    case DISCIPLINE:
      return getDiscipline();

    case MULTI_LANG_DISCIPLINE:
      return getMultiLangDiscipline();

    case MULTI_LANG_SUBSTATION:
      return getMultiLangSubstation();

    case AID:
      return Long.valueOf(getAid());

    case TOPIC_URL:
      return getTopicUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MID:
      return isSetMid();
    case LEECO_AID:
      return isSetLeecoAid();
    case START_TIME:
      return isSetStartTime();
    case MATCH_STATUS:
      return isSetMatchStatus();
    case STATUS:
      return isSetStatus();
    case STREAMS:
      return isSetStreams();
    case VIDEOS:
      return isSetVideos();
    case STAGE:
      return isSetStage();
    case ROUND:
      return isSetRound();
    case GROUP:
      return isSetGroup();
    case SUBSTATION:
      return isSetSubstation();
    case COMPETITORS:
      return isSetCompetitors();
    case TYPE:
      return isSetType();
    case VS:
      return isSetVs();
    case CID:
      return isSetCid();
    case GAME_FTYPE:
      return isSetGameFType();
    case GAME_STYPE:
      return isSetGameSType();
    case LIVE_UNIQUE_ID:
      return isSetLiveUniqueId();
    case PERIODS:
      return isSetPeriods();
    case MATCH_SYSTEM:
      return isSetMatchSystem();
    case ROUND_ID:
      return isSetRoundId();
    case LOGO:
      return isSetLogo();
    case MOMENT:
      return isSetMoment();
    case TAGS:
      return isSetTags();
    case XINYING_PAY:
      return isSetXinyingPay();
    case XINYING_MATCH_ID:
      return isSetXinyingMatchId();
    case PRICE:
      return isSetPrice();
    case PLAY_LINK:
      return isSetPlayLink();
    case IMAGES:
      return isSetImages();
    case DESC:
      return isSetDesc();
    case DURATION:
      return isSetDuration();
    case COMMENT_ID:
      return isSetCommentId();
    case ABBREVIATION:
      return isSetAbbreviation();
    case COMPETITION_NAME:
      return isSetCompetitionName();
    case ALBUM_NAME:
      return isSetAlbumName();
    case TEXTLIVES:
      return isSetTextlives();
    case CURRENT_MOMENT:
      return isSetCurrentMoment();
    case T_LIVE_LINK:
      return isSetTLiveLink();
    case CHAT_ROOM_ID:
      return isSetChatRoomId();
    case IS_OCTOPUS:
      return isSetIsOctopus();
    case OCTOPUS_MATCH_ID:
      return isSetOctopusMatchId();
    case TEXT_LIVE_STATUS:
      return isSetTextLiveStatus();
    case APP_ACTIVITIES:
      return isSetAppActivities();
    case LIVE_PLATFORMS:
      return isSetLivePlatforms();
    case IMAGE_URL:
      return isSetImageUrl();
    case DELETED:
      return isSetDeleted();
    case RELATED_ITEMS:
      return isSetRelatedItems();
    case STADIUM:
      return isSetStadium();
    case WEATHER:
      return isSetWeather();
    case JUDGE:
      return isSetJudge();
    case IS_PAY:
      return isSetIsPay();
    case SHARE_NAME:
      return isSetShareName();
    case IS_SYNC_TO_CLOUD:
      return isSetIsSyncToCloud();
    case IS_URL_REDIRECT:
      return isSetIsUrlRedirect();
    case PC_REDIRECT_URL:
      return isSetPcRedirectUrl();
    case M_REDIRECT_URL:
      return isSetMRedirectUrl();
    case THE_ROAD_ORDER:
      return isSetTheRoadOrder();
    case MULTI_LANG_STAGE:
      return isSetMultiLangStage();
    case MULTI_LANG_ROUND:
      return isSetMultiLangRound();
    case MULTI_LANG_GROUP:
      return isSetMultiLangGroup();
    case COUNTRY_CODE:
      return isSetCountryCode();
    case PLAYER_PAGE_LINK:
      return isSetPlayerPageLink();
    case SCORE_PAGE_LINK:
      return isSetScorePageLink();
    case DISCIPLINE_ID:
      return isSetDisciplineId();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case PARTNER_TYPE:
      return isSetPartnerType();
    case ITEM_URL:
      return isSetItemUrl();
    case MEDAL_TYPE:
      return isSetMedalType();
    case DISCIPLINE:
      return isSetDiscipline();
    case MULTI_LANG_DISCIPLINE:
      return isSetMultiLangDiscipline();
    case MULTI_LANG_SUBSTATION:
      return isSetMultiLangSubstation();
    case AID:
      return isSetAid();
    case TOPIC_URL:
      return isSetTopicUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TComboEpisode)
      return this.equals((TComboEpisode)that);
    return false;
  }

  public boolean equals(TComboEpisode that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_leecoAid = true && this.isSetLeecoAid();
    boolean that_present_leecoAid = true && that.isSetLeecoAid();
    if (this_present_leecoAid || that_present_leecoAid) {
      if (!(this_present_leecoAid && that_present_leecoAid))
        return false;
      if (this.leecoAid != that.leecoAid)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_matchStatus = true && this.isSetMatchStatus();
    boolean that_present_matchStatus = true && that.isSetMatchStatus();
    if (this_present_matchStatus || that_present_matchStatus) {
      if (!(this_present_matchStatus && that_present_matchStatus))
        return false;
      if (!this.matchStatus.equals(that.matchStatus))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_streams = true && this.isSetStreams();
    boolean that_present_streams = true && that.isSetStreams();
    if (this_present_streams || that_present_streams) {
      if (!(this_present_streams && that_present_streams))
        return false;
      if (!this.streams.equals(that.streams))
        return false;
    }

    boolean this_present_videos = true && this.isSetVideos();
    boolean that_present_videos = true && that.isSetVideos();
    if (this_present_videos || that_present_videos) {
      if (!(this_present_videos && that_present_videos))
        return false;
      if (!this.videos.equals(that.videos))
        return false;
    }

    boolean this_present_stage = true && this.isSetStage();
    boolean that_present_stage = true && that.isSetStage();
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (!this.stage.equals(that.stage))
        return false;
    }

    boolean this_present_round = true && this.isSetRound();
    boolean that_present_round = true && that.isSetRound();
    if (this_present_round || that_present_round) {
      if (!(this_present_round && that_present_round))
        return false;
      if (!this.round.equals(that.round))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_substation = true && this.isSetSubstation();
    boolean that_present_substation = true && that.isSetSubstation();
    if (this_present_substation || that_present_substation) {
      if (!(this_present_substation && that_present_substation))
        return false;
      if (!this.substation.equals(that.substation))
        return false;
    }

    boolean this_present_competitors = true && this.isSetCompetitors();
    boolean that_present_competitors = true && that.isSetCompetitors();
    if (this_present_competitors || that_present_competitors) {
      if (!(this_present_competitors && that_present_competitors))
        return false;
      if (!this.competitors.equals(that.competitors))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_vs = true && this.isSetVs();
    boolean that_present_vs = true && that.isSetVs();
    if (this_present_vs || that_present_vs) {
      if (!(this_present_vs && that_present_vs))
        return false;
      if (this.vs != that.vs)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_gameFType = true && this.isSetGameFType();
    boolean that_present_gameFType = true && that.isSetGameFType();
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (this.gameFType != that.gameFType)
        return false;
    }

    boolean this_present_gameSType = true && this.isSetGameSType();
    boolean that_present_gameSType = true && that.isSetGameSType();
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (this.gameSType != that.gameSType)
        return false;
    }

    boolean this_present_liveUniqueId = true && this.isSetLiveUniqueId();
    boolean that_present_liveUniqueId = true && that.isSetLiveUniqueId();
    if (this_present_liveUniqueId || that_present_liveUniqueId) {
      if (!(this_present_liveUniqueId && that_present_liveUniqueId))
        return false;
      if (!this.liveUniqueId.equals(that.liveUniqueId))
        return false;
    }

    boolean this_present_periods = true && this.isSetPeriods();
    boolean that_present_periods = true && that.isSetPeriods();
    if (this_present_periods || that_present_periods) {
      if (!(this_present_periods && that_present_periods))
        return false;
      if (!this.periods.equals(that.periods))
        return false;
    }

    boolean this_present_matchSystem = true && this.isSetMatchSystem();
    boolean that_present_matchSystem = true && that.isSetMatchSystem();
    if (this_present_matchSystem || that_present_matchSystem) {
      if (!(this_present_matchSystem && that_present_matchSystem))
        return false;
      if (!this.matchSystem.equals(that.matchSystem))
        return false;
    }

    boolean this_present_roundId = true && this.isSetRoundId();
    boolean that_present_roundId = true && that.isSetRoundId();
    if (this_present_roundId || that_present_roundId) {
      if (!(this_present_roundId && that_present_roundId))
        return false;
      if (this.roundId != that.roundId)
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_moment = true && this.isSetMoment();
    boolean that_present_moment = true && that.isSetMoment();
    if (this_present_moment || that_present_moment) {
      if (!(this_present_moment && that_present_moment))
        return false;
      if (!this.moment.equals(that.moment))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_xinyingPay = true && this.isSetXinyingPay();
    boolean that_present_xinyingPay = true && that.isSetXinyingPay();
    if (this_present_xinyingPay || that_present_xinyingPay) {
      if (!(this_present_xinyingPay && that_present_xinyingPay))
        return false;
      if (this.xinyingPay != that.xinyingPay)
        return false;
    }

    boolean this_present_xinyingMatchId = true && this.isSetXinyingMatchId();
    boolean that_present_xinyingMatchId = true && that.isSetXinyingMatchId();
    if (this_present_xinyingMatchId || that_present_xinyingMatchId) {
      if (!(this_present_xinyingMatchId && that_present_xinyingMatchId))
        return false;
      if (this.xinyingMatchId != that.xinyingMatchId)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_playLink = true && this.isSetPlayLink();
    boolean that_present_playLink = true && that.isSetPlayLink();
    if (this_present_playLink || that_present_playLink) {
      if (!(this_present_playLink && that_present_playLink))
        return false;
      if (!this.playLink.equals(that.playLink))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_commentId = true && this.isSetCommentId();
    boolean that_present_commentId = true && that.isSetCommentId();
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (!this.commentId.equals(that.commentId))
        return false;
    }

    boolean this_present_abbreviation = true && this.isSetAbbreviation();
    boolean that_present_abbreviation = true && that.isSetAbbreviation();
    if (this_present_abbreviation || that_present_abbreviation) {
      if (!(this_present_abbreviation && that_present_abbreviation))
        return false;
      if (!this.abbreviation.equals(that.abbreviation))
        return false;
    }

    boolean this_present_competitionName = true && this.isSetCompetitionName();
    boolean that_present_competitionName = true && that.isSetCompetitionName();
    if (this_present_competitionName || that_present_competitionName) {
      if (!(this_present_competitionName && that_present_competitionName))
        return false;
      if (!this.competitionName.equals(that.competitionName))
        return false;
    }

    boolean this_present_albumName = true && this.isSetAlbumName();
    boolean that_present_albumName = true && that.isSetAlbumName();
    if (this_present_albumName || that_present_albumName) {
      if (!(this_present_albumName && that_present_albumName))
        return false;
      if (!this.albumName.equals(that.albumName))
        return false;
    }

    boolean this_present_textlives = true && this.isSetTextlives();
    boolean that_present_textlives = true && that.isSetTextlives();
    if (this_present_textlives || that_present_textlives) {
      if (!(this_present_textlives && that_present_textlives))
        return false;
      if (!this.textlives.equals(that.textlives))
        return false;
    }

    boolean this_present_currentMoment = true && this.isSetCurrentMoment();
    boolean that_present_currentMoment = true && that.isSetCurrentMoment();
    if (this_present_currentMoment || that_present_currentMoment) {
      if (!(this_present_currentMoment && that_present_currentMoment))
        return false;
      if (!this.currentMoment.equals(that.currentMoment))
        return false;
    }

    boolean this_present_tLiveLink = true && this.isSetTLiveLink();
    boolean that_present_tLiveLink = true && that.isSetTLiveLink();
    if (this_present_tLiveLink || that_present_tLiveLink) {
      if (!(this_present_tLiveLink && that_present_tLiveLink))
        return false;
      if (!this.tLiveLink.equals(that.tLiveLink))
        return false;
    }

    boolean this_present_chatRoomId = true && this.isSetChatRoomId();
    boolean that_present_chatRoomId = true && that.isSetChatRoomId();
    if (this_present_chatRoomId || that_present_chatRoomId) {
      if (!(this_present_chatRoomId && that_present_chatRoomId))
        return false;
      if (!this.chatRoomId.equals(that.chatRoomId))
        return false;
    }

    boolean this_present_isOctopus = true && this.isSetIsOctopus();
    boolean that_present_isOctopus = true && that.isSetIsOctopus();
    if (this_present_isOctopus || that_present_isOctopus) {
      if (!(this_present_isOctopus && that_present_isOctopus))
        return false;
      if (this.isOctopus != that.isOctopus)
        return false;
    }

    boolean this_present_octopusMatchId = true && this.isSetOctopusMatchId();
    boolean that_present_octopusMatchId = true && that.isSetOctopusMatchId();
    if (this_present_octopusMatchId || that_present_octopusMatchId) {
      if (!(this_present_octopusMatchId && that_present_octopusMatchId))
        return false;
      if (this.octopusMatchId != that.octopusMatchId)
        return false;
    }

    boolean this_present_textLiveStatus = true && this.isSetTextLiveStatus();
    boolean that_present_textLiveStatus = true && that.isSetTextLiveStatus();
    if (this_present_textLiveStatus || that_present_textLiveStatus) {
      if (!(this_present_textLiveStatus && that_present_textLiveStatus))
        return false;
      if (!this.textLiveStatus.equals(that.textLiveStatus))
        return false;
    }

    boolean this_present_appActivities = true && this.isSetAppActivities();
    boolean that_present_appActivities = true && that.isSetAppActivities();
    if (this_present_appActivities || that_present_appActivities) {
      if (!(this_present_appActivities && that_present_appActivities))
        return false;
      if (!this.appActivities.equals(that.appActivities))
        return false;
    }

    boolean this_present_livePlatforms = true && this.isSetLivePlatforms();
    boolean that_present_livePlatforms = true && that.isSetLivePlatforms();
    if (this_present_livePlatforms || that_present_livePlatforms) {
      if (!(this_present_livePlatforms && that_present_livePlatforms))
        return false;
      if (!this.livePlatforms.equals(that.livePlatforms))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_relatedItems = true && this.isSetRelatedItems();
    boolean that_present_relatedItems = true && that.isSetRelatedItems();
    if (this_present_relatedItems || that_present_relatedItems) {
      if (!(this_present_relatedItems && that_present_relatedItems))
        return false;
      if (!this.relatedItems.equals(that.relatedItems))
        return false;
    }

    boolean this_present_stadium = true && this.isSetStadium();
    boolean that_present_stadium = true && that.isSetStadium();
    if (this_present_stadium || that_present_stadium) {
      if (!(this_present_stadium && that_present_stadium))
        return false;
      if (!this.stadium.equals(that.stadium))
        return false;
    }

    boolean this_present_weather = true && this.isSetWeather();
    boolean that_present_weather = true && that.isSetWeather();
    if (this_present_weather || that_present_weather) {
      if (!(this_present_weather && that_present_weather))
        return false;
      if (!this.weather.equals(that.weather))
        return false;
    }

    boolean this_present_judge = true && this.isSetJudge();
    boolean that_present_judge = true && that.isSetJudge();
    if (this_present_judge || that_present_judge) {
      if (!(this_present_judge && that_present_judge))
        return false;
      if (!this.judge.equals(that.judge))
        return false;
    }

    boolean this_present_isPay = true && this.isSetIsPay();
    boolean that_present_isPay = true && that.isSetIsPay();
    if (this_present_isPay || that_present_isPay) {
      if (!(this_present_isPay && that_present_isPay))
        return false;
      if (this.isPay != that.isPay)
        return false;
    }

    boolean this_present_shareName = true && this.isSetShareName();
    boolean that_present_shareName = true && that.isSetShareName();
    if (this_present_shareName || that_present_shareName) {
      if (!(this_present_shareName && that_present_shareName))
        return false;
      if (!this.shareName.equals(that.shareName))
        return false;
    }

    boolean this_present_isSyncToCloud = true && this.isSetIsSyncToCloud();
    boolean that_present_isSyncToCloud = true && that.isSetIsSyncToCloud();
    if (this_present_isSyncToCloud || that_present_isSyncToCloud) {
      if (!(this_present_isSyncToCloud && that_present_isSyncToCloud))
        return false;
      if (this.isSyncToCloud != that.isSyncToCloud)
        return false;
    }

    boolean this_present_isUrlRedirect = true && this.isSetIsUrlRedirect();
    boolean that_present_isUrlRedirect = true && that.isSetIsUrlRedirect();
    if (this_present_isUrlRedirect || that_present_isUrlRedirect) {
      if (!(this_present_isUrlRedirect && that_present_isUrlRedirect))
        return false;
      if (this.isUrlRedirect != that.isUrlRedirect)
        return false;
    }

    boolean this_present_pcRedirectUrl = true && this.isSetPcRedirectUrl();
    boolean that_present_pcRedirectUrl = true && that.isSetPcRedirectUrl();
    if (this_present_pcRedirectUrl || that_present_pcRedirectUrl) {
      if (!(this_present_pcRedirectUrl && that_present_pcRedirectUrl))
        return false;
      if (!this.pcRedirectUrl.equals(that.pcRedirectUrl))
        return false;
    }

    boolean this_present_mRedirectUrl = true && this.isSetMRedirectUrl();
    boolean that_present_mRedirectUrl = true && that.isSetMRedirectUrl();
    if (this_present_mRedirectUrl || that_present_mRedirectUrl) {
      if (!(this_present_mRedirectUrl && that_present_mRedirectUrl))
        return false;
      if (!this.mRedirectUrl.equals(that.mRedirectUrl))
        return false;
    }

    boolean this_present_theRoadOrder = true && this.isSetTheRoadOrder();
    boolean that_present_theRoadOrder = true && that.isSetTheRoadOrder();
    if (this_present_theRoadOrder || that_present_theRoadOrder) {
      if (!(this_present_theRoadOrder && that_present_theRoadOrder))
        return false;
      if (this.theRoadOrder != that.theRoadOrder)
        return false;
    }

    boolean this_present_multiLangStage = true && this.isSetMultiLangStage();
    boolean that_present_multiLangStage = true && that.isSetMultiLangStage();
    if (this_present_multiLangStage || that_present_multiLangStage) {
      if (!(this_present_multiLangStage && that_present_multiLangStage))
        return false;
      if (!this.multiLangStage.equals(that.multiLangStage))
        return false;
    }

    boolean this_present_multiLangRound = true && this.isSetMultiLangRound();
    boolean that_present_multiLangRound = true && that.isSetMultiLangRound();
    if (this_present_multiLangRound || that_present_multiLangRound) {
      if (!(this_present_multiLangRound && that_present_multiLangRound))
        return false;
      if (!this.multiLangRound.equals(that.multiLangRound))
        return false;
    }

    boolean this_present_multiLangGroup = true && this.isSetMultiLangGroup();
    boolean that_present_multiLangGroup = true && that.isSetMultiLangGroup();
    if (this_present_multiLangGroup || that_present_multiLangGroup) {
      if (!(this_present_multiLangGroup && that_present_multiLangGroup))
        return false;
      if (!this.multiLangGroup.equals(that.multiLangGroup))
        return false;
    }

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_playerPageLink = true && this.isSetPlayerPageLink();
    boolean that_present_playerPageLink = true && that.isSetPlayerPageLink();
    if (this_present_playerPageLink || that_present_playerPageLink) {
      if (!(this_present_playerPageLink && that_present_playerPageLink))
        return false;
      if (!this.playerPageLink.equals(that.playerPageLink))
        return false;
    }

    boolean this_present_scorePageLink = true && this.isSetScorePageLink();
    boolean that_present_scorePageLink = true && that.isSetScorePageLink();
    if (this_present_scorePageLink || that_present_scorePageLink) {
      if (!(this_present_scorePageLink && that_present_scorePageLink))
        return false;
      if (!this.scorePageLink.equals(that.scorePageLink))
        return false;
    }

    boolean this_present_disciplineId = true && this.isSetDisciplineId();
    boolean that_present_disciplineId = true && that.isSetDisciplineId();
    if (this_present_disciplineId || that_present_disciplineId) {
      if (!(this_present_disciplineId && that_present_disciplineId))
        return false;
      if (this.disciplineId != that.disciplineId)
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_partnerType = true && this.isSetPartnerType();
    boolean that_present_partnerType = true && that.isSetPartnerType();
    if (this_present_partnerType || that_present_partnerType) {
      if (!(this_present_partnerType && that_present_partnerType))
        return false;
      if (this.partnerType != that.partnerType)
        return false;
    }

    boolean this_present_itemUrl = true && this.isSetItemUrl();
    boolean that_present_itemUrl = true && that.isSetItemUrl();
    if (this_present_itemUrl || that_present_itemUrl) {
      if (!(this_present_itemUrl && that_present_itemUrl))
        return false;
      if (!this.itemUrl.equals(that.itemUrl))
        return false;
    }

    boolean this_present_medalType = true && this.isSetMedalType();
    boolean that_present_medalType = true && that.isSetMedalType();
    if (this_present_medalType || that_present_medalType) {
      if (!(this_present_medalType && that_present_medalType))
        return false;
      if (!this.medalType.equals(that.medalType))
        return false;
    }

    boolean this_present_discipline = true && this.isSetDiscipline();
    boolean that_present_discipline = true && that.isSetDiscipline();
    if (this_present_discipline || that_present_discipline) {
      if (!(this_present_discipline && that_present_discipline))
        return false;
      if (!this.discipline.equals(that.discipline))
        return false;
    }

    boolean this_present_multiLangDiscipline = true && this.isSetMultiLangDiscipline();
    boolean that_present_multiLangDiscipline = true && that.isSetMultiLangDiscipline();
    if (this_present_multiLangDiscipline || that_present_multiLangDiscipline) {
      if (!(this_present_multiLangDiscipline && that_present_multiLangDiscipline))
        return false;
      if (!this.multiLangDiscipline.equals(that.multiLangDiscipline))
        return false;
    }

    boolean this_present_multiLangSubstation = true && this.isSetMultiLangSubstation();
    boolean that_present_multiLangSubstation = true && that.isSetMultiLangSubstation();
    if (this_present_multiLangSubstation || that_present_multiLangSubstation) {
      if (!(this_present_multiLangSubstation && that_present_multiLangSubstation))
        return false;
      if (!this.multiLangSubstation.equals(that.multiLangSubstation))
        return false;
    }

    boolean this_present_aid = true && this.isSetAid();
    boolean that_present_aid = true && that.isSetAid();
    if (this_present_aid || that_present_aid) {
      if (!(this_present_aid && that_present_aid))
        return false;
      if (this.aid != that.aid)
        return false;
    }

    boolean this_present_topicUrl = true && this.isSetTopicUrl();
    boolean that_present_topicUrl = true && that.isSetTopicUrl();
    if (this_present_topicUrl || that_present_topicUrl) {
      if (!(this_present_topicUrl && that_present_topicUrl))
        return false;
      if (!this.topicUrl.equals(that.topicUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_mid = true && (isSetMid());
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_leecoAid = true && (isSetLeecoAid());
    list.add(present_leecoAid);
    if (present_leecoAid)
      list.add(leecoAid);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_matchStatus = true && (isSetMatchStatus());
    list.add(present_matchStatus);
    if (present_matchStatus)
      list.add(matchStatus.getValue());

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_streams = true && (isSetStreams());
    list.add(present_streams);
    if (present_streams)
      list.add(streams);

    boolean present_videos = true && (isSetVideos());
    list.add(present_videos);
    if (present_videos)
      list.add(videos);

    boolean present_stage = true && (isSetStage());
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_round = true && (isSetRound());
    list.add(present_round);
    if (present_round)
      list.add(round);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_substation = true && (isSetSubstation());
    list.add(present_substation);
    if (present_substation)
      list.add(substation);

    boolean present_competitors = true && (isSetCompetitors());
    list.add(present_competitors);
    if (present_competitors)
      list.add(competitors);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_vs = true && (isSetVs());
    list.add(present_vs);
    if (present_vs)
      list.add(vs);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_gameFType = true && (isSetGameFType());
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_gameSType = true && (isSetGameSType());
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_liveUniqueId = true && (isSetLiveUniqueId());
    list.add(present_liveUniqueId);
    if (present_liveUniqueId)
      list.add(liveUniqueId);

    boolean present_periods = true && (isSetPeriods());
    list.add(present_periods);
    if (present_periods)
      list.add(periods);

    boolean present_matchSystem = true && (isSetMatchSystem());
    list.add(present_matchSystem);
    if (present_matchSystem)
      list.add(matchSystem.getValue());

    boolean present_roundId = true && (isSetRoundId());
    list.add(present_roundId);
    if (present_roundId)
      list.add(roundId);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    boolean present_moment = true && (isSetMoment());
    list.add(present_moment);
    if (present_moment)
      list.add(moment);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_xinyingPay = true && (isSetXinyingPay());
    list.add(present_xinyingPay);
    if (present_xinyingPay)
      list.add(xinyingPay);

    boolean present_xinyingMatchId = true && (isSetXinyingMatchId());
    list.add(present_xinyingMatchId);
    if (present_xinyingMatchId)
      list.add(xinyingMatchId);

    boolean present_price = true && (isSetPrice());
    list.add(present_price);
    if (present_price)
      list.add(price);

    boolean present_playLink = true && (isSetPlayLink());
    list.add(present_playLink);
    if (present_playLink)
      list.add(playLink);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_duration = true && (isSetDuration());
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_commentId = true && (isSetCommentId());
    list.add(present_commentId);
    if (present_commentId)
      list.add(commentId);

    boolean present_abbreviation = true && (isSetAbbreviation());
    list.add(present_abbreviation);
    if (present_abbreviation)
      list.add(abbreviation);

    boolean present_competitionName = true && (isSetCompetitionName());
    list.add(present_competitionName);
    if (present_competitionName)
      list.add(competitionName);

    boolean present_albumName = true && (isSetAlbumName());
    list.add(present_albumName);
    if (present_albumName)
      list.add(albumName);

    boolean present_textlives = true && (isSetTextlives());
    list.add(present_textlives);
    if (present_textlives)
      list.add(textlives);

    boolean present_currentMoment = true && (isSetCurrentMoment());
    list.add(present_currentMoment);
    if (present_currentMoment)
      list.add(currentMoment);

    boolean present_tLiveLink = true && (isSetTLiveLink());
    list.add(present_tLiveLink);
    if (present_tLiveLink)
      list.add(tLiveLink);

    boolean present_chatRoomId = true && (isSetChatRoomId());
    list.add(present_chatRoomId);
    if (present_chatRoomId)
      list.add(chatRoomId);

    boolean present_isOctopus = true && (isSetIsOctopus());
    list.add(present_isOctopus);
    if (present_isOctopus)
      list.add(isOctopus);

    boolean present_octopusMatchId = true && (isSetOctopusMatchId());
    list.add(present_octopusMatchId);
    if (present_octopusMatchId)
      list.add(octopusMatchId);

    boolean present_textLiveStatus = true && (isSetTextLiveStatus());
    list.add(present_textLiveStatus);
    if (present_textLiveStatus)
      list.add(textLiveStatus.getValue());

    boolean present_appActivities = true && (isSetAppActivities());
    list.add(present_appActivities);
    if (present_appActivities)
      list.add(appActivities);

    boolean present_livePlatforms = true && (isSetLivePlatforms());
    list.add(present_livePlatforms);
    if (present_livePlatforms)
      list.add(livePlatforms);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_deleted = true && (isSetDeleted());
    list.add(present_deleted);
    if (present_deleted)
      list.add(deleted);

    boolean present_relatedItems = true && (isSetRelatedItems());
    list.add(present_relatedItems);
    if (present_relatedItems)
      list.add(relatedItems);

    boolean present_stadium = true && (isSetStadium());
    list.add(present_stadium);
    if (present_stadium)
      list.add(stadium);

    boolean present_weather = true && (isSetWeather());
    list.add(present_weather);
    if (present_weather)
      list.add(weather);

    boolean present_judge = true && (isSetJudge());
    list.add(present_judge);
    if (present_judge)
      list.add(judge);

    boolean present_isPay = true && (isSetIsPay());
    list.add(present_isPay);
    if (present_isPay)
      list.add(isPay);

    boolean present_shareName = true && (isSetShareName());
    list.add(present_shareName);
    if (present_shareName)
      list.add(shareName);

    boolean present_isSyncToCloud = true && (isSetIsSyncToCloud());
    list.add(present_isSyncToCloud);
    if (present_isSyncToCloud)
      list.add(isSyncToCloud);

    boolean present_isUrlRedirect = true && (isSetIsUrlRedirect());
    list.add(present_isUrlRedirect);
    if (present_isUrlRedirect)
      list.add(isUrlRedirect);

    boolean present_pcRedirectUrl = true && (isSetPcRedirectUrl());
    list.add(present_pcRedirectUrl);
    if (present_pcRedirectUrl)
      list.add(pcRedirectUrl);

    boolean present_mRedirectUrl = true && (isSetMRedirectUrl());
    list.add(present_mRedirectUrl);
    if (present_mRedirectUrl)
      list.add(mRedirectUrl);

    boolean present_theRoadOrder = true && (isSetTheRoadOrder());
    list.add(present_theRoadOrder);
    if (present_theRoadOrder)
      list.add(theRoadOrder);

    boolean present_multiLangStage = true && (isSetMultiLangStage());
    list.add(present_multiLangStage);
    if (present_multiLangStage)
      list.add(multiLangStage);

    boolean present_multiLangRound = true && (isSetMultiLangRound());
    list.add(present_multiLangRound);
    if (present_multiLangRound)
      list.add(multiLangRound);

    boolean present_multiLangGroup = true && (isSetMultiLangGroup());
    list.add(present_multiLangGroup);
    if (present_multiLangGroup)
      list.add(multiLangGroup);

    boolean present_countryCode = true && (isSetCountryCode());
    list.add(present_countryCode);
    if (present_countryCode)
      list.add(countryCode.getValue());

    boolean present_playerPageLink = true && (isSetPlayerPageLink());
    list.add(present_playerPageLink);
    if (present_playerPageLink)
      list.add(playerPageLink);

    boolean present_scorePageLink = true && (isSetScorePageLink());
    list.add(present_scorePageLink);
    if (present_scorePageLink)
      list.add(scorePageLink);

    boolean present_disciplineId = true && (isSetDisciplineId());
    list.add(present_disciplineId);
    if (present_disciplineId)
      list.add(disciplineId);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_partnerType = true && (isSetPartnerType());
    list.add(present_partnerType);
    if (present_partnerType)
      list.add(partnerType);

    boolean present_itemUrl = true && (isSetItemUrl());
    list.add(present_itemUrl);
    if (present_itemUrl)
      list.add(itemUrl);

    boolean present_medalType = true && (isSetMedalType());
    list.add(present_medalType);
    if (present_medalType)
      list.add(medalType.getValue());

    boolean present_discipline = true && (isSetDiscipline());
    list.add(present_discipline);
    if (present_discipline)
      list.add(discipline);

    boolean present_multiLangDiscipline = true && (isSetMultiLangDiscipline());
    list.add(present_multiLangDiscipline);
    if (present_multiLangDiscipline)
      list.add(multiLangDiscipline);

    boolean present_multiLangSubstation = true && (isSetMultiLangSubstation());
    list.add(present_multiLangSubstation);
    if (present_multiLangSubstation)
      list.add(multiLangSubstation);

    boolean present_aid = true && (isSetAid());
    list.add(present_aid);
    if (present_aid)
      list.add(aid);

    boolean present_topicUrl = true && (isSetTopicUrl());
    list.add(present_topicUrl);
    if (present_topicUrl)
      list.add(topicUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(TComboEpisode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeecoAid()).compareTo(other.isSetLeecoAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeecoAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leecoAid, other.leecoAid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchStatus()).compareTo(other.isSetMatchStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchStatus, other.matchStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreams()).compareTo(other.isSetStreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streams, other.streams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideos()).compareTo(other.isSetVideos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videos, other.videos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRound()).compareTo(other.isSetRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.round, other.round);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubstation()).compareTo(other.isSetSubstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.substation, other.substation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitors()).compareTo(other.isSetCompetitors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitors, other.competitors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVs()).compareTo(other.isSetVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vs, other.vs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveUniqueId()).compareTo(other.isSetLiveUniqueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveUniqueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveUniqueId, other.liveUniqueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriods()).compareTo(other.isSetPeriods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.periods, other.periods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchSystem()).compareTo(other.isSetMatchSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchSystem, other.matchSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoundId()).compareTo(other.isSetRoundId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoundId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundId, other.roundId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoment()).compareTo(other.isSetMoment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moment, other.moment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXinyingPay()).compareTo(other.isSetXinyingPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXinyingPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xinyingPay, other.xinyingPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXinyingMatchId()).compareTo(other.isSetXinyingMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXinyingMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xinyingMatchId, other.xinyingMatchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayLink()).compareTo(other.isSetPlayLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playLink, other.playLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbbreviation()).compareTo(other.isSetAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbreviation, other.abbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitionName()).compareTo(other.isSetCompetitionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitionName, other.competitionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbumName()).compareTo(other.isSetAlbumName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbumName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albumName, other.albumName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextlives()).compareTo(other.isSetTextlives());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextlives()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textlives, other.textlives);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMoment()).compareTo(other.isSetCurrentMoment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMoment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMoment, other.currentMoment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTLiveLink()).compareTo(other.isSetTLiveLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTLiveLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tLiveLink, other.tLiveLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatRoomId()).compareTo(other.isSetChatRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatRoomId, other.chatRoomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOctopus()).compareTo(other.isSetIsOctopus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOctopus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOctopus, other.isOctopus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOctopusMatchId()).compareTo(other.isSetOctopusMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOctopusMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.octopusMatchId, other.octopusMatchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextLiveStatus()).compareTo(other.isSetTextLiveStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextLiveStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveStatus, other.textLiveStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppActivities()).compareTo(other.isSetAppActivities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppActivities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appActivities, other.appActivities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLivePlatforms()).compareTo(other.isSetLivePlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLivePlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.livePlatforms, other.livePlatforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedItems()).compareTo(other.isSetRelatedItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedItems, other.relatedItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStadium()).compareTo(other.isSetStadium());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStadium()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stadium, other.stadium);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeather()).compareTo(other.isSetWeather());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeather()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weather, other.weather);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJudge()).compareTo(other.isSetJudge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJudge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.judge, other.judge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPay()).compareTo(other.isSetIsPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPay, other.isPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareName()).compareTo(other.isSetShareName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareName, other.shareName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSyncToCloud()).compareTo(other.isSetIsSyncToCloud());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSyncToCloud()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSyncToCloud, other.isSyncToCloud);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsUrlRedirect()).compareTo(other.isSetIsUrlRedirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUrlRedirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUrlRedirect, other.isUrlRedirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPcRedirectUrl()).compareTo(other.isSetPcRedirectUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPcRedirectUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pcRedirectUrl, other.pcRedirectUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMRedirectUrl()).compareTo(other.isSetMRedirectUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMRedirectUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mRedirectUrl, other.mRedirectUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheRoadOrder()).compareTo(other.isSetTheRoadOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheRoadOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theRoadOrder, other.theRoadOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangStage()).compareTo(other.isSetMultiLangStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangStage, other.multiLangStage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangRound()).compareTo(other.isSetMultiLangRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangRound, other.multiLangRound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGroup()).compareTo(other.isSetMultiLangGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGroup, other.multiLangGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerPageLink()).compareTo(other.isSetPlayerPageLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerPageLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerPageLink, other.playerPageLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScorePageLink()).compareTo(other.isSetScorePageLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScorePageLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scorePageLink, other.scorePageLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisciplineId()).compareTo(other.isSetDisciplineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisciplineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disciplineId, other.disciplineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerType()).compareTo(other.isSetPartnerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerType, other.partnerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemUrl()).compareTo(other.isSetItemUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemUrl, other.itemUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedalType()).compareTo(other.isSetMedalType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedalType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medalType, other.medalType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscipline()).compareTo(other.isSetDiscipline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscipline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discipline, other.discipline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDiscipline()).compareTo(other.isSetMultiLangDiscipline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDiscipline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDiscipline, other.multiLangDiscipline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangSubstation()).compareTo(other.isSetMultiLangSubstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangSubstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangSubstation, other.multiLangSubstation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicUrl()).compareTo(other.isSetTopicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicUrl, other.topicUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TComboEpisode(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMid()) {
      if (!first) sb.append(", ");
      sb.append("mid:");
      sb.append(this.mid);
      first = false;
    }
    if (isSetLeecoAid()) {
      if (!first) sb.append(", ");
      sb.append("leecoAid:");
      sb.append(this.leecoAid);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetMatchStatus()) {
      if (!first) sb.append(", ");
      sb.append("matchStatus:");
      if (this.matchStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.matchStatus);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetStreams()) {
      if (!first) sb.append(", ");
      sb.append("streams:");
      if (this.streams == null) {
        sb.append("null");
      } else {
        sb.append(this.streams);
      }
      first = false;
    }
    if (isSetVideos()) {
      if (!first) sb.append(", ");
      sb.append("videos:");
      if (this.videos == null) {
        sb.append("null");
      } else {
        sb.append(this.videos);
      }
      first = false;
    }
    if (isSetStage()) {
      if (!first) sb.append(", ");
      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
    }
    if (isSetRound()) {
      if (!first) sb.append(", ");
      sb.append("round:");
      if (this.round == null) {
        sb.append("null");
      } else {
        sb.append(this.round);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetSubstation()) {
      if (!first) sb.append(", ");
      sb.append("substation:");
      if (this.substation == null) {
        sb.append("null");
      } else {
        sb.append(this.substation);
      }
      first = false;
    }
    if (isSetCompetitors()) {
      if (!first) sb.append(", ");
      sb.append("competitors:");
      if (this.competitors == null) {
        sb.append("null");
      } else {
        sb.append(this.competitors);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetVs()) {
      if (!first) sb.append(", ");
      sb.append("vs:");
      sb.append(this.vs);
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetGameFType()) {
      if (!first) sb.append(", ");
      sb.append("gameFType:");
      sb.append(this.gameFType);
      first = false;
    }
    if (isSetGameSType()) {
      if (!first) sb.append(", ");
      sb.append("gameSType:");
      sb.append(this.gameSType);
      first = false;
    }
    if (isSetLiveUniqueId()) {
      if (!first) sb.append(", ");
      sb.append("liveUniqueId:");
      if (this.liveUniqueId == null) {
        sb.append("null");
      } else {
        sb.append(this.liveUniqueId);
      }
      first = false;
    }
    if (isSetPeriods()) {
      if (!first) sb.append(", ");
      sb.append("periods:");
      if (this.periods == null) {
        sb.append("null");
      } else {
        sb.append(this.periods);
      }
      first = false;
    }
    if (isSetMatchSystem()) {
      if (!first) sb.append(", ");
      sb.append("matchSystem:");
      if (this.matchSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.matchSystem);
      }
      first = false;
    }
    if (isSetRoundId()) {
      if (!first) sb.append(", ");
      sb.append("roundId:");
      sb.append(this.roundId);
      first = false;
    }
    if (isSetLogo()) {
      if (!first) sb.append(", ");
      sb.append("logo:");
      if (this.logo == null) {
        sb.append("null");
      } else {
        sb.append(this.logo);
      }
      first = false;
    }
    if (isSetMoment()) {
      if (!first) sb.append(", ");
      sb.append("moment:");
      if (this.moment == null) {
        sb.append("null");
      } else {
        sb.append(this.moment);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetXinyingPay()) {
      if (!first) sb.append(", ");
      sb.append("xinyingPay:");
      sb.append(this.xinyingPay);
      first = false;
    }
    if (isSetXinyingMatchId()) {
      if (!first) sb.append(", ");
      sb.append("xinyingMatchId:");
      sb.append(this.xinyingMatchId);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetPlayLink()) {
      if (!first) sb.append(", ");
      sb.append("playLink:");
      if (this.playLink == null) {
        sb.append("null");
      } else {
        sb.append(this.playLink);
      }
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
    }
    if (isSetCommentId()) {
      if (!first) sb.append(", ");
      sb.append("commentId:");
      if (this.commentId == null) {
        sb.append("null");
      } else {
        sb.append(this.commentId);
      }
      first = false;
    }
    if (isSetAbbreviation()) {
      if (!first) sb.append(", ");
      sb.append("abbreviation:");
      if (this.abbreviation == null) {
        sb.append("null");
      } else {
        sb.append(this.abbreviation);
      }
      first = false;
    }
    if (isSetCompetitionName()) {
      if (!first) sb.append(", ");
      sb.append("competitionName:");
      if (this.competitionName == null) {
        sb.append("null");
      } else {
        sb.append(this.competitionName);
      }
      first = false;
    }
    if (isSetAlbumName()) {
      if (!first) sb.append(", ");
      sb.append("albumName:");
      if (this.albumName == null) {
        sb.append("null");
      } else {
        sb.append(this.albumName);
      }
      first = false;
    }
    if (isSetTextlives()) {
      if (!first) sb.append(", ");
      sb.append("textlives:");
      if (this.textlives == null) {
        sb.append("null");
      } else {
        sb.append(this.textlives);
      }
      first = false;
    }
    if (isSetCurrentMoment()) {
      if (!first) sb.append(", ");
      sb.append("currentMoment:");
      if (this.currentMoment == null) {
        sb.append("null");
      } else {
        sb.append(this.currentMoment);
      }
      first = false;
    }
    if (isSetTLiveLink()) {
      if (!first) sb.append(", ");
      sb.append("tLiveLink:");
      if (this.tLiveLink == null) {
        sb.append("null");
      } else {
        sb.append(this.tLiveLink);
      }
      first = false;
    }
    if (isSetChatRoomId()) {
      if (!first) sb.append(", ");
      sb.append("chatRoomId:");
      if (this.chatRoomId == null) {
        sb.append("null");
      } else {
        sb.append(this.chatRoomId);
      }
      first = false;
    }
    if (isSetIsOctopus()) {
      if (!first) sb.append(", ");
      sb.append("isOctopus:");
      sb.append(this.isOctopus);
      first = false;
    }
    if (isSetOctopusMatchId()) {
      if (!first) sb.append(", ");
      sb.append("octopusMatchId:");
      sb.append(this.octopusMatchId);
      first = false;
    }
    if (isSetTextLiveStatus()) {
      if (!first) sb.append(", ");
      sb.append("textLiveStatus:");
      if (this.textLiveStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.textLiveStatus);
      }
      first = false;
    }
    if (isSetAppActivities()) {
      if (!first) sb.append(", ");
      sb.append("appActivities:");
      if (this.appActivities == null) {
        sb.append("null");
      } else {
        sb.append(this.appActivities);
      }
      first = false;
    }
    if (isSetLivePlatforms()) {
      if (!first) sb.append(", ");
      sb.append("livePlatforms:");
      if (this.livePlatforms == null) {
        sb.append("null");
      } else {
        sb.append(this.livePlatforms);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      sb.append(this.deleted);
      first = false;
    }
    if (isSetRelatedItems()) {
      if (!first) sb.append(", ");
      sb.append("relatedItems:");
      if (this.relatedItems == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedItems);
      }
      first = false;
    }
    if (isSetStadium()) {
      if (!first) sb.append(", ");
      sb.append("stadium:");
      if (this.stadium == null) {
        sb.append("null");
      } else {
        sb.append(this.stadium);
      }
      first = false;
    }
    if (isSetWeather()) {
      if (!first) sb.append(", ");
      sb.append("weather:");
      if (this.weather == null) {
        sb.append("null");
      } else {
        sb.append(this.weather);
      }
      first = false;
    }
    if (isSetJudge()) {
      if (!first) sb.append(", ");
      sb.append("judge:");
      if (this.judge == null) {
        sb.append("null");
      } else {
        sb.append(this.judge);
      }
      first = false;
    }
    if (isSetIsPay()) {
      if (!first) sb.append(", ");
      sb.append("isPay:");
      sb.append(this.isPay);
      first = false;
    }
    if (isSetShareName()) {
      if (!first) sb.append(", ");
      sb.append("shareName:");
      if (this.shareName == null) {
        sb.append("null");
      } else {
        sb.append(this.shareName);
      }
      first = false;
    }
    if (isSetIsSyncToCloud()) {
      if (!first) sb.append(", ");
      sb.append("isSyncToCloud:");
      sb.append(this.isSyncToCloud);
      first = false;
    }
    if (isSetIsUrlRedirect()) {
      if (!first) sb.append(", ");
      sb.append("isUrlRedirect:");
      sb.append(this.isUrlRedirect);
      first = false;
    }
    if (isSetPcRedirectUrl()) {
      if (!first) sb.append(", ");
      sb.append("pcRedirectUrl:");
      if (this.pcRedirectUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.pcRedirectUrl);
      }
      first = false;
    }
    if (isSetMRedirectUrl()) {
      if (!first) sb.append(", ");
      sb.append("mRedirectUrl:");
      if (this.mRedirectUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.mRedirectUrl);
      }
      first = false;
    }
    if (isSetTheRoadOrder()) {
      if (!first) sb.append(", ");
      sb.append("theRoadOrder:");
      sb.append(this.theRoadOrder);
      first = false;
    }
    if (isSetMultiLangStage()) {
      if (!first) sb.append(", ");
      sb.append("multiLangStage:");
      if (this.multiLangStage == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangStage);
      }
      first = false;
    }
    if (isSetMultiLangRound()) {
      if (!first) sb.append(", ");
      sb.append("multiLangRound:");
      if (this.multiLangRound == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangRound);
      }
      first = false;
    }
    if (isSetMultiLangGroup()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGroup:");
      if (this.multiLangGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGroup);
      }
      first = false;
    }
    if (isSetCountryCode()) {
      if (!first) sb.append(", ");
      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
    }
    if (isSetPlayerPageLink()) {
      if (!first) sb.append(", ");
      sb.append("playerPageLink:");
      if (this.playerPageLink == null) {
        sb.append("null");
      } else {
        sb.append(this.playerPageLink);
      }
      first = false;
    }
    if (isSetScorePageLink()) {
      if (!first) sb.append(", ");
      sb.append("scorePageLink:");
      if (this.scorePageLink == null) {
        sb.append("null");
      } else {
        sb.append(this.scorePageLink);
      }
      first = false;
    }
    if (isSetDisciplineId()) {
      if (!first) sb.append(", ");
      sb.append("disciplineId:");
      sb.append(this.disciplineId);
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetPartnerType()) {
      if (!first) sb.append(", ");
      sb.append("partnerType:");
      sb.append(this.partnerType);
      first = false;
    }
    if (isSetItemUrl()) {
      if (!first) sb.append(", ");
      sb.append("itemUrl:");
      if (this.itemUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.itemUrl);
      }
      first = false;
    }
    if (isSetMedalType()) {
      if (!first) sb.append(", ");
      sb.append("medalType:");
      if (this.medalType == null) {
        sb.append("null");
      } else {
        sb.append(this.medalType);
      }
      first = false;
    }
    if (isSetDiscipline()) {
      if (!first) sb.append(", ");
      sb.append("discipline:");
      if (this.discipline == null) {
        sb.append("null");
      } else {
        sb.append(this.discipline);
      }
      first = false;
    }
    if (isSetMultiLangDiscipline()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDiscipline:");
      if (this.multiLangDiscipline == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDiscipline);
      }
      first = false;
    }
    if (isSetMultiLangSubstation()) {
      if (!first) sb.append(", ");
      sb.append("multiLangSubstation:");
      if (this.multiLangSubstation == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangSubstation);
      }
      first = false;
    }
    if (isSetAid()) {
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
    }
    if (isSetTopicUrl()) {
      if (!first) sb.append(", ");
      sb.append("topicUrl:");
      if (this.topicUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.topicUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (currentMoment != null) {
      currentMoment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TComboEpisodeStandardSchemeFactory implements SchemeFactory {
    public TComboEpisodeStandardScheme getScheme() {
      return new TComboEpisodeStandardScheme();
    }
  }

  private static class TComboEpisodeStandardScheme extends StandardScheme<TComboEpisode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TComboEpisode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mid = iprot.readI64();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEECO_AID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leecoAid = iprot.readI64();
              struct.setLeecoAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MATCH_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchStatus = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
              struct.setMatchStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.lesports.api.common.LiveShowStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.streams = new ArrayList<TLiveStream>(_list52.size);
                TLiveStream _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new TLiveStream();
                  _elem53.read(iprot);
                  struct.streams.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setStreamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIDEOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.videos = new ArrayList<TSimpleVideo>(_list55.size);
                TSimpleVideo _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = new TSimpleVideo();
                  _elem56.read(iprot);
                  struct.videos.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setVideosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stage = iprot.readString();
              struct.setStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.round = iprot.readString();
              struct.setRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUBSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.substation = iprot.readString();
              struct.setSubstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMPETITORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>(_list58.size);
                com.lesports.qmt.sbd.api.dto.TCompetitor _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new com.lesports.qmt.sbd.api.dto.TCompetitor();
                  _elem59.read(iprot);
                  struct.competitors.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbc.api.common.EpisodeType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vs = iprot.readBool();
              struct.setVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFType = iprot.readI64();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSType = iprot.readI64();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LIVE_UNIQUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveUniqueId = iprot.readString();
              struct.setLiveUniqueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PERIODS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.periods = iprot.readString();
              struct.setPeriodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MATCH_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchSystem = com.lesports.qmt.sbd.api.common.MatchSystem.findByValue(iprot.readI32());
              struct.setMatchSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ROUND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.roundId = iprot.readI64();
              struct.setRoundIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MOMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moment = iprot.readString();
              struct.setMomentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list61.size);
                com.lesports.qmt.config.api.dto.TTag _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem62.read(iprot);
                  struct.tags.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // XINYING_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.xinyingPay = iprot.readBool();
              struct.setXinyingPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // XINYING_MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.xinyingMatchId = iprot.readI64();
              struct.setXinyingMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PLAY_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playLink = iprot.readString();
              struct.setPlayLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.images = new HashMap<String,String>(2*_map64.size);
                String _key65;
                String _val66;
                for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                {
                  _key65 = iprot.readString();
                  _val66 = iprot.readString();
                  struct.images.put(_key65, _val66);
                }
                iprot.readMapEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentId = iprot.readString();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abbreviation = iprot.readString();
              struct.setAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // COMPETITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.competitionName = iprot.readString();
              struct.setCompetitionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // ALBUM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.albumName = iprot.readString();
              struct.setAlbumNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // TEXTLIVES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.textlives = new ArrayList<TSimpleTextLive>(_list68.size);
                TSimpleTextLive _elem69;
                for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                {
                  _elem69 = new TSimpleTextLive();
                  _elem69.read(iprot);
                  struct.textlives.add(_elem69);
                }
                iprot.readListEnd();
              }
              struct.setTextlivesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CURRENT_MOMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentMoment = new com.lesports.qmt.sbd.api.dto.TCurrentMoment();
              struct.currentMoment.read(iprot);
              struct.setCurrentMomentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // T_LIVE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tLiveLink = iprot.readString();
              struct.setTLiveLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // CHAT_ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatRoomId = iprot.readString();
              struct.setChatRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // IS_OCTOPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOctopus = iprot.readBool();
              struct.setIsOctopusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // OCTOPUS_MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.octopusMatchId = iprot.readI64();
              struct.setOctopusMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // TEXT_LIVE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.textLiveStatus = com.lesports.api.common.LiveShowStatus.findByValue(iprot.readI32());
              struct.setTextLiveStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // APP_ACTIVITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                struct.appActivities = new ArrayList<TSimpleActivity>(_list71.size);
                TSimpleActivity _elem72;
                for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                {
                  _elem72 = new TSimpleActivity();
                  _elem72.read(iprot);
                  struct.appActivities.add(_elem72);
                }
                iprot.readListEnd();
              }
              struct.setAppActivitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // LIVE_PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set74 = iprot.readSetBegin();
                struct.livePlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set74.size);
                com.lesports.api.common.Platform _elem75;
                for (int _i76 = 0; _i76 < _set74.size; ++_i76)
                {
                  _elem75 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.livePlatforms.add(_elem75);
                }
                iprot.readSetEnd();
              }
              struct.setLivePlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // RELATED_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                struct.relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>(_list77.size);
                com.lesports.qmt.sbc.api.common.TRelatedItem _elem78;
                for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                {
                  _elem78 = new com.lesports.qmt.sbc.api.common.TRelatedItem();
                  _elem78.read(iprot);
                  struct.relatedItems.add(_elem78);
                }
                iprot.readListEnd();
              }
              struct.setRelatedItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // STADIUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stadium = iprot.readString();
              struct.setStadiumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // WEATHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weather = iprot.readString();
              struct.setWeatherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // JUDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.judge = iprot.readString();
              struct.setJudgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // IS_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isPay = iprot.readBool();
              struct.setIsPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // SHARE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareName = iprot.readString();
              struct.setShareNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // IS_SYNC_TO_CLOUD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSyncToCloud = iprot.readBool();
              struct.setIsSyncToCloudIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // IS_URL_REDIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isUrlRedirect = iprot.readBool();
              struct.setIsUrlRedirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // PC_REDIRECT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pcRedirectUrl = iprot.readString();
              struct.setPcRedirectUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // M_REDIRECT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mRedirectUrl = iprot.readString();
              struct.setMRedirectUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // THE_ROAD_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.theRoadOrder = iprot.readI32();
              struct.setTheRoadOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // MULTI_LANG_STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.multiLangStage = new ArrayList<com.lesports.api.common.LangString>(_list80.size);
                com.lesports.api.common.LangString _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new com.lesports.api.common.LangString();
                  _elem81.read(iprot);
                  struct.multiLangStage.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // MULTI_LANG_ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.multiLangRound = new ArrayList<com.lesports.api.common.LangString>(_list83.size);
                com.lesports.api.common.LangString _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = new com.lesports.api.common.LangString();
                  _elem84.read(iprot);
                  struct.multiLangRound.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // MULTI_LANG_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                struct.multiLangGroup = new ArrayList<com.lesports.api.common.LangString>(_list86.size);
                com.lesports.api.common.LangString _elem87;
                for (int _i88 = 0; _i88 < _list86.size; ++_i88)
                {
                  _elem87 = new com.lesports.api.common.LangString();
                  _elem87.read(iprot);
                  struct.multiLangGroup.add(_elem87);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countryCode = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // PLAYER_PAGE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playerPageLink = iprot.readString();
              struct.setPlayerPageLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // SCORE_PAGE_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scorePageLink = iprot.readString();
              struct.setScorePageLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // DISCIPLINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.disciplineId = iprot.readI64();
              struct.setDisciplineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list89.size);
                com.lesports.api.common.LangString _elem90;
                for (int _i91 = 0; _i91 < _list89.size; ++_i91)
                {
                  _elem90 = new com.lesports.api.common.LangString();
                  _elem90.read(iprot);
                  struct.multiLangNames.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // PARTNER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerType = iprot.readI32();
              struct.setPartnerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // ITEM_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemUrl = iprot.readString();
              struct.setItemUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // MEDAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.medalType = com.lesports.qmt.sbd.api.common.MedalType.findByValue(iprot.readI32());
              struct.setMedalTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // DISCIPLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.discipline = iprot.readString();
              struct.setDisciplineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // MULTI_LANG_DISCIPLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                struct.multiLangDiscipline = new ArrayList<com.lesports.api.common.LangString>(_list92.size);
                com.lesports.api.common.LangString _elem93;
                for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                {
                  _elem93 = new com.lesports.api.common.LangString();
                  _elem93.read(iprot);
                  struct.multiLangDiscipline.add(_elem93);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDisciplineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // MULTI_LANG_SUBSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list95 = iprot.readListBegin();
                struct.multiLangSubstation = new ArrayList<com.lesports.api.common.LangString>(_list95.size);
                com.lesports.api.common.LangString _elem96;
                for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                {
                  _elem96 = new com.lesports.api.common.LangString();
                  _elem96.read(iprot);
                  struct.multiLangSubstation.add(_elem96);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangSubstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // AID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.aid = iprot.readI64();
              struct.setAidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // TOPIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topicUrl = iprot.readString();
              struct.setTopicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TComboEpisode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMid()) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeI64(struct.mid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeecoAid()) {
        oprot.writeFieldBegin(LEECO_AID_FIELD_DESC);
        oprot.writeI64(struct.leecoAid);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchStatus != null) {
        if (struct.isSetMatchStatus()) {
          oprot.writeFieldBegin(MATCH_STATUS_FIELD_DESC);
          oprot.writeI32(struct.matchStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.streams != null) {
        if (struct.isSetStreams()) {
          oprot.writeFieldBegin(STREAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.streams.size()));
            for (TLiveStream _iter98 : struct.streams)
            {
              _iter98.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.videos != null) {
        if (struct.isSetVideos()) {
          oprot.writeFieldBegin(VIDEOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.videos.size()));
            for (TSimpleVideo _iter99 : struct.videos)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stage != null) {
        if (struct.isSetStage()) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          oprot.writeString(struct.stage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.round != null) {
        if (struct.isSetRound()) {
          oprot.writeFieldBegin(ROUND_FIELD_DESC);
          oprot.writeString(struct.round);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.substation != null) {
        if (struct.isSetSubstation()) {
          oprot.writeFieldBegin(SUBSTATION_FIELD_DESC);
          oprot.writeString(struct.substation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitors != null) {
        if (struct.isSetCompetitors()) {
          oprot.writeFieldBegin(COMPETITORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.competitors.size()));
            for (com.lesports.qmt.sbd.api.dto.TCompetitor _iter100 : struct.competitors)
            {
              _iter100.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVs()) {
        oprot.writeFieldBegin(VS_FIELD_DESC);
        oprot.writeBool(struct.vs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameFType()) {
        oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
        oprot.writeI64(struct.gameFType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGameSType()) {
        oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
        oprot.writeI64(struct.gameSType);
        oprot.writeFieldEnd();
      }
      if (struct.liveUniqueId != null) {
        if (struct.isSetLiveUniqueId()) {
          oprot.writeFieldBegin(LIVE_UNIQUE_ID_FIELD_DESC);
          oprot.writeString(struct.liveUniqueId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.periods != null) {
        if (struct.isSetPeriods()) {
          oprot.writeFieldBegin(PERIODS_FIELD_DESC);
          oprot.writeString(struct.periods);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchSystem != null) {
        if (struct.isSetMatchSystem()) {
          oprot.writeFieldBegin(MATCH_SYSTEM_FIELD_DESC);
          oprot.writeI32(struct.matchSystem.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRoundId()) {
        oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
        oprot.writeI64(struct.roundId);
        oprot.writeFieldEnd();
      }
      if (struct.logo != null) {
        if (struct.isSetLogo()) {
          oprot.writeFieldBegin(LOGO_FIELD_DESC);
          oprot.writeString(struct.logo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.moment != null) {
        if (struct.isSetMoment()) {
          oprot.writeFieldBegin(MOMENT_FIELD_DESC);
          oprot.writeString(struct.moment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter101 : struct.tags)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetXinyingPay()) {
        oprot.writeFieldBegin(XINYING_PAY_FIELD_DESC);
        oprot.writeBool(struct.xinyingPay);
        oprot.writeFieldEnd();
      }
      if (struct.isSetXinyingMatchId()) {
        oprot.writeFieldBegin(XINYING_MATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.xinyingMatchId);
        oprot.writeFieldEnd();
      }
      if (struct.playLink != null) {
        if (struct.isSetPlayLink()) {
          oprot.writeFieldBegin(PLAY_LINK_FIELD_DESC);
          oprot.writeString(struct.playLink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (Map.Entry<String, String> _iter102 : struct.images.entrySet())
            {
              oprot.writeString(_iter102.getKey());
              oprot.writeString(_iter102.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDuration()) {
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI64(struct.duration);
        oprot.writeFieldEnd();
      }
      if (struct.commentId != null) {
        if (struct.isSetCommentId()) {
          oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
          oprot.writeString(struct.commentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.abbreviation != null) {
        if (struct.isSetAbbreviation()) {
          oprot.writeFieldBegin(ABBREVIATION_FIELD_DESC);
          oprot.writeString(struct.abbreviation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitionName != null) {
        if (struct.isSetCompetitionName()) {
          oprot.writeFieldBegin(COMPETITION_NAME_FIELD_DESC);
          oprot.writeString(struct.competitionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.albumName != null) {
        if (struct.isSetAlbumName()) {
          oprot.writeFieldBegin(ALBUM_NAME_FIELD_DESC);
          oprot.writeString(struct.albumName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.textlives != null) {
        if (struct.isSetTextlives()) {
          oprot.writeFieldBegin(TEXTLIVES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.textlives.size()));
            for (TSimpleTextLive _iter103 : struct.textlives)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentMoment != null) {
        if (struct.isSetCurrentMoment()) {
          oprot.writeFieldBegin(CURRENT_MOMENT_FIELD_DESC);
          struct.currentMoment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tLiveLink != null) {
        if (struct.isSetTLiveLink()) {
          oprot.writeFieldBegin(T_LIVE_LINK_FIELD_DESC);
          oprot.writeString(struct.tLiveLink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatRoomId != null) {
        if (struct.isSetChatRoomId()) {
          oprot.writeFieldBegin(CHAT_ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.chatRoomId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsOctopus()) {
        oprot.writeFieldBegin(IS_OCTOPUS_FIELD_DESC);
        oprot.writeBool(struct.isOctopus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOctopusMatchId()) {
        oprot.writeFieldBegin(OCTOPUS_MATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.octopusMatchId);
        oprot.writeFieldEnd();
      }
      if (struct.textLiveStatus != null) {
        if (struct.isSetTextLiveStatus()) {
          oprot.writeFieldBegin(TEXT_LIVE_STATUS_FIELD_DESC);
          oprot.writeI32(struct.textLiveStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.appActivities != null) {
        if (struct.isSetAppActivities()) {
          oprot.writeFieldBegin(APP_ACTIVITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.appActivities.size()));
            for (TSimpleActivity _iter104 : struct.appActivities)
            {
              _iter104.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.livePlatforms != null) {
        if (struct.isSetLivePlatforms()) {
          oprot.writeFieldBegin(LIVE_PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.livePlatforms.size()));
            for (com.lesports.api.common.Platform _iter105 : struct.livePlatforms)
            {
              oprot.writeI32(_iter105.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        oprot.writeBool(struct.deleted);
        oprot.writeFieldEnd();
      }
      if (struct.relatedItems != null) {
        if (struct.isSetRelatedItems()) {
          oprot.writeFieldBegin(RELATED_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relatedItems.size()));
            for (com.lesports.qmt.sbc.api.common.TRelatedItem _iter106 : struct.relatedItems)
            {
              _iter106.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stadium != null) {
        if (struct.isSetStadium()) {
          oprot.writeFieldBegin(STADIUM_FIELD_DESC);
          oprot.writeString(struct.stadium);
          oprot.writeFieldEnd();
        }
      }
      if (struct.weather != null) {
        if (struct.isSetWeather()) {
          oprot.writeFieldBegin(WEATHER_FIELD_DESC);
          oprot.writeString(struct.weather);
          oprot.writeFieldEnd();
        }
      }
      if (struct.judge != null) {
        if (struct.isSetJudge()) {
          oprot.writeFieldBegin(JUDGE_FIELD_DESC);
          oprot.writeString(struct.judge);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsPay()) {
        oprot.writeFieldBegin(IS_PAY_FIELD_DESC);
        oprot.writeBool(struct.isPay);
        oprot.writeFieldEnd();
      }
      if (struct.shareName != null) {
        if (struct.isSetShareName()) {
          oprot.writeFieldBegin(SHARE_NAME_FIELD_DESC);
          oprot.writeString(struct.shareName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSyncToCloud()) {
        oprot.writeFieldBegin(IS_SYNC_TO_CLOUD_FIELD_DESC);
        oprot.writeBool(struct.isSyncToCloud);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsUrlRedirect()) {
        oprot.writeFieldBegin(IS_URL_REDIRECT_FIELD_DESC);
        oprot.writeBool(struct.isUrlRedirect);
        oprot.writeFieldEnd();
      }
      if (struct.pcRedirectUrl != null) {
        if (struct.isSetPcRedirectUrl()) {
          oprot.writeFieldBegin(PC_REDIRECT_URL_FIELD_DESC);
          oprot.writeString(struct.pcRedirectUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mRedirectUrl != null) {
        if (struct.isSetMRedirectUrl()) {
          oprot.writeFieldBegin(M_REDIRECT_URL_FIELD_DESC);
          oprot.writeString(struct.mRedirectUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTheRoadOrder()) {
        oprot.writeFieldBegin(THE_ROAD_ORDER_FIELD_DESC);
        oprot.writeI32(struct.theRoadOrder);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangStage != null) {
        if (struct.isSetMultiLangStage()) {
          oprot.writeFieldBegin(MULTI_LANG_STAGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangStage.size()));
            for (com.lesports.api.common.LangString _iter107 : struct.multiLangStage)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangRound != null) {
        if (struct.isSetMultiLangRound()) {
          oprot.writeFieldBegin(MULTI_LANG_ROUND_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangRound.size()));
            for (com.lesports.api.common.LangString _iter108 : struct.multiLangRound)
            {
              _iter108.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangGroup != null) {
        if (struct.isSetMultiLangGroup()) {
          oprot.writeFieldBegin(MULTI_LANG_GROUP_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGroup.size()));
            for (com.lesports.api.common.LangString _iter109 : struct.multiLangGroup)
            {
              _iter109.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryCode != null) {
        if (struct.isSetCountryCode()) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeI32(struct.countryCode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerPageLink != null) {
        if (struct.isSetPlayerPageLink()) {
          oprot.writeFieldBegin(PLAYER_PAGE_LINK_FIELD_DESC);
          oprot.writeString(struct.playerPageLink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.scorePageLink != null) {
        if (struct.isSetScorePageLink()) {
          oprot.writeFieldBegin(SCORE_PAGE_LINK_FIELD_DESC);
          oprot.writeString(struct.scorePageLink);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeFieldBegin(DISCIPLINE_ID_FIELD_DESC);
        oprot.writeI64(struct.disciplineId);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter110 : struct.multiLangNames)
            {
              _iter110.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPartnerType()) {
        oprot.writeFieldBegin(PARTNER_TYPE_FIELD_DESC);
        oprot.writeI32(struct.partnerType);
        oprot.writeFieldEnd();
      }
      if (struct.itemUrl != null) {
        if (struct.isSetItemUrl()) {
          oprot.writeFieldBegin(ITEM_URL_FIELD_DESC);
          oprot.writeString(struct.itemUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.medalType != null) {
        if (struct.isSetMedalType()) {
          oprot.writeFieldBegin(MEDAL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.medalType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.discipline != null) {
        if (struct.isSetDiscipline()) {
          oprot.writeFieldBegin(DISCIPLINE_FIELD_DESC);
          oprot.writeString(struct.discipline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangDiscipline != null) {
        if (struct.isSetMultiLangDiscipline()) {
          oprot.writeFieldBegin(MULTI_LANG_DISCIPLINE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDiscipline.size()));
            for (com.lesports.api.common.LangString _iter111 : struct.multiLangDiscipline)
            {
              _iter111.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangSubstation != null) {
        if (struct.isSetMultiLangSubstation()) {
          oprot.writeFieldBegin(MULTI_LANG_SUBSTATION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangSubstation.size()));
            for (com.lesports.api.common.LangString _iter112 : struct.multiLangSubstation)
            {
              _iter112.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAid()) {
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
      }
      if (struct.topicUrl != null) {
        if (struct.isSetTopicUrl()) {
          oprot.writeFieldBegin(TOPIC_URL_FIELD_DESC);
          oprot.writeString(struct.topicUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TComboEpisodeTupleSchemeFactory implements SchemeFactory {
    public TComboEpisodeTupleScheme getScheme() {
      return new TComboEpisodeTupleScheme();
    }
  }

  private static class TComboEpisodeTupleScheme extends TupleScheme<TComboEpisode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TComboEpisode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMid()) {
        optionals.set(2);
      }
      if (struct.isSetLeecoAid()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetMatchStatus()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetStreams()) {
        optionals.set(7);
      }
      if (struct.isSetVideos()) {
        optionals.set(8);
      }
      if (struct.isSetStage()) {
        optionals.set(9);
      }
      if (struct.isSetRound()) {
        optionals.set(10);
      }
      if (struct.isSetGroup()) {
        optionals.set(11);
      }
      if (struct.isSetSubstation()) {
        optionals.set(12);
      }
      if (struct.isSetCompetitors()) {
        optionals.set(13);
      }
      if (struct.isSetType()) {
        optionals.set(14);
      }
      if (struct.isSetVs()) {
        optionals.set(15);
      }
      if (struct.isSetCid()) {
        optionals.set(16);
      }
      if (struct.isSetGameFType()) {
        optionals.set(17);
      }
      if (struct.isSetGameSType()) {
        optionals.set(18);
      }
      if (struct.isSetLiveUniqueId()) {
        optionals.set(19);
      }
      if (struct.isSetPeriods()) {
        optionals.set(20);
      }
      if (struct.isSetMatchSystem()) {
        optionals.set(21);
      }
      if (struct.isSetRoundId()) {
        optionals.set(22);
      }
      if (struct.isSetLogo()) {
        optionals.set(23);
      }
      if (struct.isSetMoment()) {
        optionals.set(24);
      }
      if (struct.isSetTags()) {
        optionals.set(25);
      }
      if (struct.isSetXinyingPay()) {
        optionals.set(26);
      }
      if (struct.isSetXinyingMatchId()) {
        optionals.set(27);
      }
      if (struct.isSetPrice()) {
        optionals.set(28);
      }
      if (struct.isSetPlayLink()) {
        optionals.set(29);
      }
      if (struct.isSetImages()) {
        optionals.set(30);
      }
      if (struct.isSetDesc()) {
        optionals.set(31);
      }
      if (struct.isSetDuration()) {
        optionals.set(32);
      }
      if (struct.isSetCommentId()) {
        optionals.set(33);
      }
      if (struct.isSetAbbreviation()) {
        optionals.set(34);
      }
      if (struct.isSetCompetitionName()) {
        optionals.set(35);
      }
      if (struct.isSetAlbumName()) {
        optionals.set(36);
      }
      if (struct.isSetTextlives()) {
        optionals.set(37);
      }
      if (struct.isSetCurrentMoment()) {
        optionals.set(38);
      }
      if (struct.isSetTLiveLink()) {
        optionals.set(39);
      }
      if (struct.isSetChatRoomId()) {
        optionals.set(40);
      }
      if (struct.isSetIsOctopus()) {
        optionals.set(41);
      }
      if (struct.isSetOctopusMatchId()) {
        optionals.set(42);
      }
      if (struct.isSetTextLiveStatus()) {
        optionals.set(43);
      }
      if (struct.isSetAppActivities()) {
        optionals.set(44);
      }
      if (struct.isSetLivePlatforms()) {
        optionals.set(45);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(46);
      }
      if (struct.isSetDeleted()) {
        optionals.set(47);
      }
      if (struct.isSetRelatedItems()) {
        optionals.set(48);
      }
      if (struct.isSetStadium()) {
        optionals.set(49);
      }
      if (struct.isSetWeather()) {
        optionals.set(50);
      }
      if (struct.isSetJudge()) {
        optionals.set(51);
      }
      if (struct.isSetIsPay()) {
        optionals.set(52);
      }
      if (struct.isSetShareName()) {
        optionals.set(53);
      }
      if (struct.isSetIsSyncToCloud()) {
        optionals.set(54);
      }
      if (struct.isSetIsUrlRedirect()) {
        optionals.set(55);
      }
      if (struct.isSetPcRedirectUrl()) {
        optionals.set(56);
      }
      if (struct.isSetMRedirectUrl()) {
        optionals.set(57);
      }
      if (struct.isSetTheRoadOrder()) {
        optionals.set(58);
      }
      if (struct.isSetMultiLangStage()) {
        optionals.set(59);
      }
      if (struct.isSetMultiLangRound()) {
        optionals.set(60);
      }
      if (struct.isSetMultiLangGroup()) {
        optionals.set(61);
      }
      if (struct.isSetCountryCode()) {
        optionals.set(62);
      }
      if (struct.isSetPlayerPageLink()) {
        optionals.set(63);
      }
      if (struct.isSetScorePageLink()) {
        optionals.set(64);
      }
      if (struct.isSetDisciplineId()) {
        optionals.set(65);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(66);
      }
      if (struct.isSetPartnerType()) {
        optionals.set(67);
      }
      if (struct.isSetItemUrl()) {
        optionals.set(68);
      }
      if (struct.isSetMedalType()) {
        optionals.set(69);
      }
      if (struct.isSetDiscipline()) {
        optionals.set(70);
      }
      if (struct.isSetMultiLangDiscipline()) {
        optionals.set(71);
      }
      if (struct.isSetMultiLangSubstation()) {
        optionals.set(72);
      }
      if (struct.isSetAid()) {
        optionals.set(73);
      }
      if (struct.isSetTopicUrl()) {
        optionals.set(74);
      }
      oprot.writeBitSet(optionals, 75);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMid()) {
        oprot.writeI64(struct.mid);
      }
      if (struct.isSetLeecoAid()) {
        oprot.writeI64(struct.leecoAid);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetMatchStatus()) {
        oprot.writeI32(struct.matchStatus.getValue());
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetStreams()) {
        {
          oprot.writeI32(struct.streams.size());
          for (TLiveStream _iter113 : struct.streams)
          {
            _iter113.write(oprot);
          }
        }
      }
      if (struct.isSetVideos()) {
        {
          oprot.writeI32(struct.videos.size());
          for (TSimpleVideo _iter114 : struct.videos)
          {
            _iter114.write(oprot);
          }
        }
      }
      if (struct.isSetStage()) {
        oprot.writeString(struct.stage);
      }
      if (struct.isSetRound()) {
        oprot.writeString(struct.round);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetSubstation()) {
        oprot.writeString(struct.substation);
      }
      if (struct.isSetCompetitors()) {
        {
          oprot.writeI32(struct.competitors.size());
          for (com.lesports.qmt.sbd.api.dto.TCompetitor _iter115 : struct.competitors)
          {
            _iter115.write(oprot);
          }
        }
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetVs()) {
        oprot.writeBool(struct.vs);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetGameFType()) {
        oprot.writeI64(struct.gameFType);
      }
      if (struct.isSetGameSType()) {
        oprot.writeI64(struct.gameSType);
      }
      if (struct.isSetLiveUniqueId()) {
        oprot.writeString(struct.liveUniqueId);
      }
      if (struct.isSetPeriods()) {
        oprot.writeString(struct.periods);
      }
      if (struct.isSetMatchSystem()) {
        oprot.writeI32(struct.matchSystem.getValue());
      }
      if (struct.isSetRoundId()) {
        oprot.writeI64(struct.roundId);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetMoment()) {
        oprot.writeString(struct.moment);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter116 : struct.tags)
          {
            _iter116.write(oprot);
          }
        }
      }
      if (struct.isSetXinyingPay()) {
        oprot.writeBool(struct.xinyingPay);
      }
      if (struct.isSetXinyingMatchId()) {
        oprot.writeI64(struct.xinyingMatchId);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetPlayLink()) {
        oprot.writeString(struct.playLink);
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (Map.Entry<String, String> _iter117 : struct.images.entrySet())
          {
            oprot.writeString(_iter117.getKey());
            oprot.writeString(_iter117.getValue());
          }
        }
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetCommentId()) {
        oprot.writeString(struct.commentId);
      }
      if (struct.isSetAbbreviation()) {
        oprot.writeString(struct.abbreviation);
      }
      if (struct.isSetCompetitionName()) {
        oprot.writeString(struct.competitionName);
      }
      if (struct.isSetAlbumName()) {
        oprot.writeString(struct.albumName);
      }
      if (struct.isSetTextlives()) {
        {
          oprot.writeI32(struct.textlives.size());
          for (TSimpleTextLive _iter118 : struct.textlives)
          {
            _iter118.write(oprot);
          }
        }
      }
      if (struct.isSetCurrentMoment()) {
        struct.currentMoment.write(oprot);
      }
      if (struct.isSetTLiveLink()) {
        oprot.writeString(struct.tLiveLink);
      }
      if (struct.isSetChatRoomId()) {
        oprot.writeString(struct.chatRoomId);
      }
      if (struct.isSetIsOctopus()) {
        oprot.writeBool(struct.isOctopus);
      }
      if (struct.isSetOctopusMatchId()) {
        oprot.writeI64(struct.octopusMatchId);
      }
      if (struct.isSetTextLiveStatus()) {
        oprot.writeI32(struct.textLiveStatus.getValue());
      }
      if (struct.isSetAppActivities()) {
        {
          oprot.writeI32(struct.appActivities.size());
          for (TSimpleActivity _iter119 : struct.appActivities)
          {
            _iter119.write(oprot);
          }
        }
      }
      if (struct.isSetLivePlatforms()) {
        {
          oprot.writeI32(struct.livePlatforms.size());
          for (com.lesports.api.common.Platform _iter120 : struct.livePlatforms)
          {
            oprot.writeI32(_iter120.getValue());
          }
        }
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
      if (struct.isSetRelatedItems()) {
        {
          oprot.writeI32(struct.relatedItems.size());
          for (com.lesports.qmt.sbc.api.common.TRelatedItem _iter121 : struct.relatedItems)
          {
            _iter121.write(oprot);
          }
        }
      }
      if (struct.isSetStadium()) {
        oprot.writeString(struct.stadium);
      }
      if (struct.isSetWeather()) {
        oprot.writeString(struct.weather);
      }
      if (struct.isSetJudge()) {
        oprot.writeString(struct.judge);
      }
      if (struct.isSetIsPay()) {
        oprot.writeBool(struct.isPay);
      }
      if (struct.isSetShareName()) {
        oprot.writeString(struct.shareName);
      }
      if (struct.isSetIsSyncToCloud()) {
        oprot.writeBool(struct.isSyncToCloud);
      }
      if (struct.isSetIsUrlRedirect()) {
        oprot.writeBool(struct.isUrlRedirect);
      }
      if (struct.isSetPcRedirectUrl()) {
        oprot.writeString(struct.pcRedirectUrl);
      }
      if (struct.isSetMRedirectUrl()) {
        oprot.writeString(struct.mRedirectUrl);
      }
      if (struct.isSetTheRoadOrder()) {
        oprot.writeI32(struct.theRoadOrder);
      }
      if (struct.isSetMultiLangStage()) {
        {
          oprot.writeI32(struct.multiLangStage.size());
          for (com.lesports.api.common.LangString _iter122 : struct.multiLangStage)
          {
            _iter122.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangRound()) {
        {
          oprot.writeI32(struct.multiLangRound.size());
          for (com.lesports.api.common.LangString _iter123 : struct.multiLangRound)
          {
            _iter123.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangGroup()) {
        {
          oprot.writeI32(struct.multiLangGroup.size());
          for (com.lesports.api.common.LangString _iter124 : struct.multiLangGroup)
          {
            _iter124.write(oprot);
          }
        }
      }
      if (struct.isSetCountryCode()) {
        oprot.writeI32(struct.countryCode.getValue());
      }
      if (struct.isSetPlayerPageLink()) {
        oprot.writeString(struct.playerPageLink);
      }
      if (struct.isSetScorePageLink()) {
        oprot.writeString(struct.scorePageLink);
      }
      if (struct.isSetDisciplineId()) {
        oprot.writeI64(struct.disciplineId);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter125 : struct.multiLangNames)
          {
            _iter125.write(oprot);
          }
        }
      }
      if (struct.isSetPartnerType()) {
        oprot.writeI32(struct.partnerType);
      }
      if (struct.isSetItemUrl()) {
        oprot.writeString(struct.itemUrl);
      }
      if (struct.isSetMedalType()) {
        oprot.writeI32(struct.medalType.getValue());
      }
      if (struct.isSetDiscipline()) {
        oprot.writeString(struct.discipline);
      }
      if (struct.isSetMultiLangDiscipline()) {
        {
          oprot.writeI32(struct.multiLangDiscipline.size());
          for (com.lesports.api.common.LangString _iter126 : struct.multiLangDiscipline)
          {
            _iter126.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangSubstation()) {
        {
          oprot.writeI32(struct.multiLangSubstation.size());
          for (com.lesports.api.common.LangString _iter127 : struct.multiLangSubstation)
          {
            _iter127.write(oprot);
          }
        }
      }
      if (struct.isSetAid()) {
        oprot.writeI64(struct.aid);
      }
      if (struct.isSetTopicUrl()) {
        oprot.writeString(struct.topicUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TComboEpisode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(75);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mid = iprot.readI64();
        struct.setMidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.leecoAid = iprot.readI64();
        struct.setLeecoAidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.matchStatus = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
        struct.setMatchStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = com.lesports.api.common.LiveShowStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list128 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.streams = new ArrayList<TLiveStream>(_list128.size);
          TLiveStream _elem129;
          for (int _i130 = 0; _i130 < _list128.size; ++_i130)
          {
            _elem129 = new TLiveStream();
            _elem129.read(iprot);
            struct.streams.add(_elem129);
          }
        }
        struct.setStreamsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.videos = new ArrayList<TSimpleVideo>(_list131.size);
          TSimpleVideo _elem132;
          for (int _i133 = 0; _i133 < _list131.size; ++_i133)
          {
            _elem132 = new TSimpleVideo();
            _elem132.read(iprot);
            struct.videos.add(_elem132);
          }
        }
        struct.setVideosIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stage = iprot.readString();
        struct.setStageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.round = iprot.readString();
        struct.setRoundIsSet(true);
      }
      if (incoming.get(11)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(12)) {
        struct.substation = iprot.readString();
        struct.setSubstationIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list134 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.competitors = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitor>(_list134.size);
          com.lesports.qmt.sbd.api.dto.TCompetitor _elem135;
          for (int _i136 = 0; _i136 < _list134.size; ++_i136)
          {
            _elem135 = new com.lesports.qmt.sbd.api.dto.TCompetitor();
            _elem135.read(iprot);
            struct.competitors.add(_elem135);
          }
        }
        struct.setCompetitorsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.type = com.lesports.qmt.sbc.api.common.EpisodeType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.vs = iprot.readBool();
        struct.setVsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(17)) {
        struct.gameFType = iprot.readI64();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.gameSType = iprot.readI64();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.liveUniqueId = iprot.readString();
        struct.setLiveUniqueIdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.periods = iprot.readString();
        struct.setPeriodsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.matchSystem = com.lesports.qmt.sbd.api.common.MatchSystem.findByValue(iprot.readI32());
        struct.setMatchSystemIsSet(true);
      }
      if (incoming.get(22)) {
        struct.roundId = iprot.readI64();
        struct.setRoundIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(24)) {
        struct.moment = iprot.readString();
        struct.setMomentIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list137.size);
          com.lesports.qmt.config.api.dto.TTag _elem138;
          for (int _i139 = 0; _i139 < _list137.size; ++_i139)
          {
            _elem138 = new com.lesports.qmt.config.api.dto.TTag();
            _elem138.read(iprot);
            struct.tags.add(_elem138);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(26)) {
        struct.xinyingPay = iprot.readBool();
        struct.setXinyingPayIsSet(true);
      }
      if (incoming.get(27)) {
        struct.xinyingMatchId = iprot.readI64();
        struct.setXinyingMatchIdIsSet(true);
      }
      if (incoming.get(28)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(29)) {
        struct.playLink = iprot.readString();
        struct.setPlayLinkIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TMap _map140 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new HashMap<String,String>(2*_map140.size);
          String _key141;
          String _val142;
          for (int _i143 = 0; _i143 < _map140.size; ++_i143)
          {
            _key141 = iprot.readString();
            _val142 = iprot.readString();
            struct.images.put(_key141, _val142);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(31)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(32)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(33)) {
        struct.commentId = iprot.readString();
        struct.setCommentIdIsSet(true);
      }
      if (incoming.get(34)) {
        struct.abbreviation = iprot.readString();
        struct.setAbbreviationIsSet(true);
      }
      if (incoming.get(35)) {
        struct.competitionName = iprot.readString();
        struct.setCompetitionNameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.albumName = iprot.readString();
        struct.setAlbumNameIsSet(true);
      }
      if (incoming.get(37)) {
        {
          org.apache.thrift.protocol.TList _list144 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.textlives = new ArrayList<TSimpleTextLive>(_list144.size);
          TSimpleTextLive _elem145;
          for (int _i146 = 0; _i146 < _list144.size; ++_i146)
          {
            _elem145 = new TSimpleTextLive();
            _elem145.read(iprot);
            struct.textlives.add(_elem145);
          }
        }
        struct.setTextlivesIsSet(true);
      }
      if (incoming.get(38)) {
        struct.currentMoment = new com.lesports.qmt.sbd.api.dto.TCurrentMoment();
        struct.currentMoment.read(iprot);
        struct.setCurrentMomentIsSet(true);
      }
      if (incoming.get(39)) {
        struct.tLiveLink = iprot.readString();
        struct.setTLiveLinkIsSet(true);
      }
      if (incoming.get(40)) {
        struct.chatRoomId = iprot.readString();
        struct.setChatRoomIdIsSet(true);
      }
      if (incoming.get(41)) {
        struct.isOctopus = iprot.readBool();
        struct.setIsOctopusIsSet(true);
      }
      if (incoming.get(42)) {
        struct.octopusMatchId = iprot.readI64();
        struct.setOctopusMatchIdIsSet(true);
      }
      if (incoming.get(43)) {
        struct.textLiveStatus = com.lesports.api.common.LiveShowStatus.findByValue(iprot.readI32());
        struct.setTextLiveStatusIsSet(true);
      }
      if (incoming.get(44)) {
        {
          org.apache.thrift.protocol.TList _list147 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.appActivities = new ArrayList<TSimpleActivity>(_list147.size);
          TSimpleActivity _elem148;
          for (int _i149 = 0; _i149 < _list147.size; ++_i149)
          {
            _elem148 = new TSimpleActivity();
            _elem148.read(iprot);
            struct.appActivities.add(_elem148);
          }
        }
        struct.setAppActivitiesIsSet(true);
      }
      if (incoming.get(45)) {
        {
          org.apache.thrift.protocol.TSet _set150 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.livePlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set150.size);
          com.lesports.api.common.Platform _elem151;
          for (int _i152 = 0; _i152 < _set150.size; ++_i152)
          {
            _elem151 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.livePlatforms.add(_elem151);
          }
        }
        struct.setLivePlatformsIsSet(true);
      }
      if (incoming.get(46)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(47)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(48)) {
        {
          org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>(_list153.size);
          com.lesports.qmt.sbc.api.common.TRelatedItem _elem154;
          for (int _i155 = 0; _i155 < _list153.size; ++_i155)
          {
            _elem154 = new com.lesports.qmt.sbc.api.common.TRelatedItem();
            _elem154.read(iprot);
            struct.relatedItems.add(_elem154);
          }
        }
        struct.setRelatedItemsIsSet(true);
      }
      if (incoming.get(49)) {
        struct.stadium = iprot.readString();
        struct.setStadiumIsSet(true);
      }
      if (incoming.get(50)) {
        struct.weather = iprot.readString();
        struct.setWeatherIsSet(true);
      }
      if (incoming.get(51)) {
        struct.judge = iprot.readString();
        struct.setJudgeIsSet(true);
      }
      if (incoming.get(52)) {
        struct.isPay = iprot.readBool();
        struct.setIsPayIsSet(true);
      }
      if (incoming.get(53)) {
        struct.shareName = iprot.readString();
        struct.setShareNameIsSet(true);
      }
      if (incoming.get(54)) {
        struct.isSyncToCloud = iprot.readBool();
        struct.setIsSyncToCloudIsSet(true);
      }
      if (incoming.get(55)) {
        struct.isUrlRedirect = iprot.readBool();
        struct.setIsUrlRedirectIsSet(true);
      }
      if (incoming.get(56)) {
        struct.pcRedirectUrl = iprot.readString();
        struct.setPcRedirectUrlIsSet(true);
      }
      if (incoming.get(57)) {
        struct.mRedirectUrl = iprot.readString();
        struct.setMRedirectUrlIsSet(true);
      }
      if (incoming.get(58)) {
        struct.theRoadOrder = iprot.readI32();
        struct.setTheRoadOrderIsSet(true);
      }
      if (incoming.get(59)) {
        {
          org.apache.thrift.protocol.TList _list156 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangStage = new ArrayList<com.lesports.api.common.LangString>(_list156.size);
          com.lesports.api.common.LangString _elem157;
          for (int _i158 = 0; _i158 < _list156.size; ++_i158)
          {
            _elem157 = new com.lesports.api.common.LangString();
            _elem157.read(iprot);
            struct.multiLangStage.add(_elem157);
          }
        }
        struct.setMultiLangStageIsSet(true);
      }
      if (incoming.get(60)) {
        {
          org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangRound = new ArrayList<com.lesports.api.common.LangString>(_list159.size);
          com.lesports.api.common.LangString _elem160;
          for (int _i161 = 0; _i161 < _list159.size; ++_i161)
          {
            _elem160 = new com.lesports.api.common.LangString();
            _elem160.read(iprot);
            struct.multiLangRound.add(_elem160);
          }
        }
        struct.setMultiLangRoundIsSet(true);
      }
      if (incoming.get(61)) {
        {
          org.apache.thrift.protocol.TList _list162 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGroup = new ArrayList<com.lesports.api.common.LangString>(_list162.size);
          com.lesports.api.common.LangString _elem163;
          for (int _i164 = 0; _i164 < _list162.size; ++_i164)
          {
            _elem163 = new com.lesports.api.common.LangString();
            _elem163.read(iprot);
            struct.multiLangGroup.add(_elem163);
          }
        }
        struct.setMultiLangGroupIsSet(true);
      }
      if (incoming.get(62)) {
        struct.countryCode = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
        struct.setCountryCodeIsSet(true);
      }
      if (incoming.get(63)) {
        struct.playerPageLink = iprot.readString();
        struct.setPlayerPageLinkIsSet(true);
      }
      if (incoming.get(64)) {
        struct.scorePageLink = iprot.readString();
        struct.setScorePageLinkIsSet(true);
      }
      if (incoming.get(65)) {
        struct.disciplineId = iprot.readI64();
        struct.setDisciplineIdIsSet(true);
      }
      if (incoming.get(66)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list165.size);
          com.lesports.api.common.LangString _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new com.lesports.api.common.LangString();
            _elem166.read(iprot);
            struct.multiLangNames.add(_elem166);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(67)) {
        struct.partnerType = iprot.readI32();
        struct.setPartnerTypeIsSet(true);
      }
      if (incoming.get(68)) {
        struct.itemUrl = iprot.readString();
        struct.setItemUrlIsSet(true);
      }
      if (incoming.get(69)) {
        struct.medalType = com.lesports.qmt.sbd.api.common.MedalType.findByValue(iprot.readI32());
        struct.setMedalTypeIsSet(true);
      }
      if (incoming.get(70)) {
        struct.discipline = iprot.readString();
        struct.setDisciplineIsSet(true);
      }
      if (incoming.get(71)) {
        {
          org.apache.thrift.protocol.TList _list168 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDiscipline = new ArrayList<com.lesports.api.common.LangString>(_list168.size);
          com.lesports.api.common.LangString _elem169;
          for (int _i170 = 0; _i170 < _list168.size; ++_i170)
          {
            _elem169 = new com.lesports.api.common.LangString();
            _elem169.read(iprot);
            struct.multiLangDiscipline.add(_elem169);
          }
        }
        struct.setMultiLangDisciplineIsSet(true);
      }
      if (incoming.get(72)) {
        {
          org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangSubstation = new ArrayList<com.lesports.api.common.LangString>(_list171.size);
          com.lesports.api.common.LangString _elem172;
          for (int _i173 = 0; _i173 < _list171.size; ++_i173)
          {
            _elem172 = new com.lesports.api.common.LangString();
            _elem172.read(iprot);
            struct.multiLangSubstation.add(_elem172);
          }
        }
        struct.setMultiLangSubstationIsSet(true);
      }
      if (incoming.get(73)) {
        struct.aid = iprot.readI64();
        struct.setAidIsSet(true);
      }
      if (incoming.get(74)) {
        struct.topicUrl = iprot.readString();
        struct.setTopicUrlIsSet(true);
      }
    }
  }

}

