/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TLiveStream implements org.apache.thrift.TBase<TLiveStream, TLiveStream._Fields>, java.io.Serializable, Cloneable, Comparable<TLiveStream> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLiveStream");

  private static final org.apache.thrift.protocol.TField LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField CHAT_ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatRoomId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPay", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField PAY_PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("payPlatforms", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DRM_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("drmFlag", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField VIEW_PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("viewPic", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLiveStreamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLiveStreamTupleSchemeFactory());
  }

  private String liveId; // required
  private String name; // optional
  private com.lesports.api.common.LiveStatus status; // optional
  private Map<String,String> images; // optional
  private String chatRoomId; // optional
  private int order; // optional
  private int isPay; // optional
  private List<Long> payPlatforms; // optional
  private int drmFlag; // optional
  private List<Long> platforms; // optional
  private String viewPic; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIVE_ID((short)1, "liveId"),
    NAME((short)2, "name"),
    /**
     * 
     * @see com.lesports.api.common.LiveStatus
     */
    STATUS((short)3, "status"),
    IMAGES((short)4, "images"),
    CHAT_ROOM_ID((short)5, "chatRoomId"),
    ORDER((short)6, "order"),
    IS_PAY((short)7, "isPay"),
    PAY_PLATFORMS((short)8, "payPlatforms"),
    DRM_FLAG((short)9, "drmFlag"),
    PLATFORMS((short)10, "platforms"),
    VIEW_PIC((short)11, "viewPic");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIVE_ID
          return LIVE_ID;
        case 2: // NAME
          return NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // IMAGES
          return IMAGES;
        case 5: // CHAT_ROOM_ID
          return CHAT_ROOM_ID;
        case 6: // ORDER
          return ORDER;
        case 7: // IS_PAY
          return IS_PAY;
        case 8: // PAY_PLATFORMS
          return PAY_PLATFORMS;
        case 9: // DRM_FLAG
          return DRM_FLAG;
        case 10: // PLATFORMS
          return PLATFORMS;
        case 11: // VIEW_PIC
          return VIEW_PIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDER_ISSET_ID = 0;
  private static final int __ISPAY_ISSET_ID = 1;
  private static final int __DRMFLAG_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.STATUS,_Fields.IMAGES,_Fields.CHAT_ROOM_ID,_Fields.ORDER,_Fields.IS_PAY,_Fields.PAY_PLATFORMS,_Fields.DRM_FLAG,_Fields.PLATFORMS,_Fields.VIEW_PIC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("liveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.LiveStatus.class)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHAT_ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("chatRoomId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("payPlatforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DRM_FLAG, new org.apache.thrift.meta_data.FieldMetaData("drmFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VIEW_PIC, new org.apache.thrift.meta_data.FieldMetaData("viewPic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLiveStream.class, metaDataMap);
  }

  public TLiveStream() {
  }

  public TLiveStream(
    String liveId)
  {
    this();
    this.liveId = liveId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLiveStream(TLiveStream other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLiveId()) {
      this.liveId = other.liveId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetImages()) {
      Map<String,String> __this__images = new HashMap<String,String>(other.images);
      this.images = __this__images;
    }
    if (other.isSetChatRoomId()) {
      this.chatRoomId = other.chatRoomId;
    }
    this.order = other.order;
    this.isPay = other.isPay;
    if (other.isSetPayPlatforms()) {
      List<Long> __this__payPlatforms = new ArrayList<Long>(other.payPlatforms);
      this.payPlatforms = __this__payPlatforms;
    }
    this.drmFlag = other.drmFlag;
    if (other.isSetPlatforms()) {
      List<Long> __this__platforms = new ArrayList<Long>(other.platforms);
      this.platforms = __this__platforms;
    }
    if (other.isSetViewPic()) {
      this.viewPic = other.viewPic;
    }
  }

  public TLiveStream deepCopy() {
    return new TLiveStream(this);
  }

  @Override
  public void clear() {
    this.liveId = null;
    this.name = null;
    this.status = null;
    this.images = null;
    this.chatRoomId = null;
    setOrderIsSet(false);
    this.order = 0;
    setIsPayIsSet(false);
    this.isPay = 0;
    this.payPlatforms = null;
    setDrmFlagIsSet(false);
    this.drmFlag = 0;
    this.platforms = null;
    this.viewPic = null;
  }

  public String getLiveId() {
    return this.liveId;
  }

  public void setLiveId(String liveId) {
    this.liveId = liveId;
  }

  public void unsetLiveId() {
    this.liveId = null;
  }

  /** Returns true if field liveId is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveId() {
    return this.liveId != null;
  }

  public void setLiveIdIsSet(boolean value) {
    if (!value) {
      this.liveId = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.LiveStatus
   */
  public com.lesports.api.common.LiveStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.lesports.api.common.LiveStatus
   */
  public void setStatus(com.lesports.api.common.LiveStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public void putToImages(String key, String val) {
    if (this.images == null) {
      this.images = new HashMap<String,String>();
    }
    this.images.put(key, val);
  }

  public Map<String,String> getImages() {
    return this.images;
  }

  public void setImages(Map<String,String> images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public String getChatRoomId() {
    return this.chatRoomId;
  }

  public void setChatRoomId(String chatRoomId) {
    this.chatRoomId = chatRoomId;
  }

  public void unsetChatRoomId() {
    this.chatRoomId = null;
  }

  /** Returns true if field chatRoomId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatRoomId() {
    return this.chatRoomId != null;
  }

  public void setChatRoomIdIsSet(boolean value) {
    if (!value) {
      this.chatRoomId = null;
    }
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public int getIsPay() {
    return this.isPay;
  }

  public void setIsPay(int isPay) {
    this.isPay = isPay;
    setIsPayIsSet(true);
  }

  public void unsetIsPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  /** Returns true if field isPay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  public void setIsPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAY_ISSET_ID, value);
  }

  public int getPayPlatformsSize() {
    return (this.payPlatforms == null) ? 0 : this.payPlatforms.size();
  }

  public java.util.Iterator<Long> getPayPlatformsIterator() {
    return (this.payPlatforms == null) ? null : this.payPlatforms.iterator();
  }

  public void addToPayPlatforms(long elem) {
    if (this.payPlatforms == null) {
      this.payPlatforms = new ArrayList<Long>();
    }
    this.payPlatforms.add(elem);
  }

  public List<Long> getPayPlatforms() {
    return this.payPlatforms;
  }

  public void setPayPlatforms(List<Long> payPlatforms) {
    this.payPlatforms = payPlatforms;
  }

  public void unsetPayPlatforms() {
    this.payPlatforms = null;
  }

  /** Returns true if field payPlatforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPlatforms() {
    return this.payPlatforms != null;
  }

  public void setPayPlatformsIsSet(boolean value) {
    if (!value) {
      this.payPlatforms = null;
    }
  }

  public int getDrmFlag() {
    return this.drmFlag;
  }

  public void setDrmFlag(int drmFlag) {
    this.drmFlag = drmFlag;
    setDrmFlagIsSet(true);
  }

  public void unsetDrmFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRMFLAG_ISSET_ID);
  }

  /** Returns true if field drmFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDrmFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __DRMFLAG_ISSET_ID);
  }

  public void setDrmFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRMFLAG_ISSET_ID, value);
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<Long> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(long elem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<Long>();
    }
    this.platforms.add(elem);
  }

  public List<Long> getPlatforms() {
    return this.platforms;
  }

  public void setPlatforms(List<Long> platforms) {
    this.platforms = platforms;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public String getViewPic() {
    return this.viewPic;
  }

  public void setViewPic(String viewPic) {
    this.viewPic = viewPic;
  }

  public void unsetViewPic() {
    this.viewPic = null;
  }

  /** Returns true if field viewPic is set (has been assigned a value) and false otherwise */
  public boolean isSetViewPic() {
    return this.viewPic != null;
  }

  public void setViewPicIsSet(boolean value) {
    if (!value) {
      this.viewPic = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LIVE_ID:
      if (value == null) {
        unsetLiveId();
      } else {
        setLiveId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.lesports.api.common.LiveStatus)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((Map<String,String>)value);
      }
      break;

    case CHAT_ROOM_ID:
      if (value == null) {
        unsetChatRoomId();
      } else {
        setChatRoomId((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case IS_PAY:
      if (value == null) {
        unsetIsPay();
      } else {
        setIsPay((Integer)value);
      }
      break;

    case PAY_PLATFORMS:
      if (value == null) {
        unsetPayPlatforms();
      } else {
        setPayPlatforms((List<Long>)value);
      }
      break;

    case DRM_FLAG:
      if (value == null) {
        unsetDrmFlag();
      } else {
        setDrmFlag((Integer)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((List<Long>)value);
      }
      break;

    case VIEW_PIC:
      if (value == null) {
        unsetViewPic();
      } else {
        setViewPic((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LIVE_ID:
      return getLiveId();

    case NAME:
      return getName();

    case STATUS:
      return getStatus();

    case IMAGES:
      return getImages();

    case CHAT_ROOM_ID:
      return getChatRoomId();

    case ORDER:
      return Integer.valueOf(getOrder());

    case IS_PAY:
      return Integer.valueOf(getIsPay());

    case PAY_PLATFORMS:
      return getPayPlatforms();

    case DRM_FLAG:
      return Integer.valueOf(getDrmFlag());

    case PLATFORMS:
      return getPlatforms();

    case VIEW_PIC:
      return getViewPic();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LIVE_ID:
      return isSetLiveId();
    case NAME:
      return isSetName();
    case STATUS:
      return isSetStatus();
    case IMAGES:
      return isSetImages();
    case CHAT_ROOM_ID:
      return isSetChatRoomId();
    case ORDER:
      return isSetOrder();
    case IS_PAY:
      return isSetIsPay();
    case PAY_PLATFORMS:
      return isSetPayPlatforms();
    case DRM_FLAG:
      return isSetDrmFlag();
    case PLATFORMS:
      return isSetPlatforms();
    case VIEW_PIC:
      return isSetViewPic();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLiveStream)
      return this.equals((TLiveStream)that);
    return false;
  }

  public boolean equals(TLiveStream that) {
    if (that == null)
      return false;

    boolean this_present_liveId = true && this.isSetLiveId();
    boolean that_present_liveId = true && that.isSetLiveId();
    if (this_present_liveId || that_present_liveId) {
      if (!(this_present_liveId && that_present_liveId))
        return false;
      if (!this.liveId.equals(that.liveId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_chatRoomId = true && this.isSetChatRoomId();
    boolean that_present_chatRoomId = true && that.isSetChatRoomId();
    if (this_present_chatRoomId || that_present_chatRoomId) {
      if (!(this_present_chatRoomId && that_present_chatRoomId))
        return false;
      if (!this.chatRoomId.equals(that.chatRoomId))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_isPay = true && this.isSetIsPay();
    boolean that_present_isPay = true && that.isSetIsPay();
    if (this_present_isPay || that_present_isPay) {
      if (!(this_present_isPay && that_present_isPay))
        return false;
      if (this.isPay != that.isPay)
        return false;
    }

    boolean this_present_payPlatforms = true && this.isSetPayPlatforms();
    boolean that_present_payPlatforms = true && that.isSetPayPlatforms();
    if (this_present_payPlatforms || that_present_payPlatforms) {
      if (!(this_present_payPlatforms && that_present_payPlatforms))
        return false;
      if (!this.payPlatforms.equals(that.payPlatforms))
        return false;
    }

    boolean this_present_drmFlag = true && this.isSetDrmFlag();
    boolean that_present_drmFlag = true && that.isSetDrmFlag();
    if (this_present_drmFlag || that_present_drmFlag) {
      if (!(this_present_drmFlag && that_present_drmFlag))
        return false;
      if (this.drmFlag != that.drmFlag)
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    boolean this_present_viewPic = true && this.isSetViewPic();
    boolean that_present_viewPic = true && that.isSetViewPic();
    if (this_present_viewPic || that_present_viewPic) {
      if (!(this_present_viewPic && that_present_viewPic))
        return false;
      if (!this.viewPic.equals(that.viewPic))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_liveId = true && (isSetLiveId());
    list.add(present_liveId);
    if (present_liveId)
      list.add(liveId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    boolean present_chatRoomId = true && (isSetChatRoomId());
    list.add(present_chatRoomId);
    if (present_chatRoomId)
      list.add(chatRoomId);

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_isPay = true && (isSetIsPay());
    list.add(present_isPay);
    if (present_isPay)
      list.add(isPay);

    boolean present_payPlatforms = true && (isSetPayPlatforms());
    list.add(present_payPlatforms);
    if (present_payPlatforms)
      list.add(payPlatforms);

    boolean present_drmFlag = true && (isSetDrmFlag());
    list.add(present_drmFlag);
    if (present_drmFlag)
      list.add(drmFlag);

    boolean present_platforms = true && (isSetPlatforms());
    list.add(present_platforms);
    if (present_platforms)
      list.add(platforms);

    boolean present_viewPic = true && (isSetViewPic());
    list.add(present_viewPic);
    if (present_viewPic)
      list.add(viewPic);

    return list.hashCode();
  }

  @Override
  public int compareTo(TLiveStream other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLiveId()).compareTo(other.isSetLiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveId, other.liveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatRoomId()).compareTo(other.isSetChatRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatRoomId, other.chatRoomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPay()).compareTo(other.isSetIsPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPay, other.isPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPlatforms()).compareTo(other.isSetPayPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPlatforms, other.payPlatforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrmFlag()).compareTo(other.isSetDrmFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrmFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drmFlag, other.drmFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewPic()).compareTo(other.isSetViewPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewPic, other.viewPic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLiveStream(");
    boolean first = true;

    sb.append("liveId:");
    if (this.liveId == null) {
      sb.append("null");
    } else {
      sb.append(this.liveId);
    }
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetChatRoomId()) {
      if (!first) sb.append(", ");
      sb.append("chatRoomId:");
      if (this.chatRoomId == null) {
        sb.append("null");
      } else {
        sb.append(this.chatRoomId);
      }
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetIsPay()) {
      if (!first) sb.append(", ");
      sb.append("isPay:");
      sb.append(this.isPay);
      first = false;
    }
    if (isSetPayPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("payPlatforms:");
      if (this.payPlatforms == null) {
        sb.append("null");
      } else {
        sb.append(this.payPlatforms);
      }
      first = false;
    }
    if (isSetDrmFlag()) {
      if (!first) sb.append(", ");
      sb.append("drmFlag:");
      sb.append(this.drmFlag);
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    if (isSetViewPic()) {
      if (!first) sb.append(", ");
      sb.append("viewPic:");
      if (this.viewPic == null) {
        sb.append("null");
      } else {
        sb.append(this.viewPic);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLiveStreamStandardSchemeFactory implements SchemeFactory {
    public TLiveStreamStandardScheme getScheme() {
      return new TLiveStreamStandardScheme();
    }
  }

  private static class TLiveStreamStandardScheme extends StandardScheme<TLiveStream> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLiveStream struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveId = iprot.readString();
              struct.setLiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.lesports.api.common.LiveStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.images = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.images.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHAT_ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatRoomId = iprot.readString();
              struct.setChatRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPay = iprot.readI32();
              struct.setIsPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAY_PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.payPlatforms = new ArrayList<Long>(_list4.size);
                long _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readI64();
                  struct.payPlatforms.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPayPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DRM_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.drmFlag = iprot.readI32();
              struct.setDrmFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.platforms = new ArrayList<Long>(_list7.size);
                long _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readI64();
                  struct.platforms.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VIEW_PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.viewPic = iprot.readString();
              struct.setViewPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLiveStream struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.liveId != null) {
        oprot.writeFieldBegin(LIVE_ID_FIELD_DESC);
        oprot.writeString(struct.liveId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (Map.Entry<String, String> _iter10 : struct.images.entrySet())
            {
              oprot.writeString(_iter10.getKey());
              oprot.writeString(_iter10.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.chatRoomId != null) {
        if (struct.isSetChatRoomId()) {
          oprot.writeFieldBegin(CHAT_ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.chatRoomId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsPay()) {
        oprot.writeFieldBegin(IS_PAY_FIELD_DESC);
        oprot.writeI32(struct.isPay);
        oprot.writeFieldEnd();
      }
      if (struct.payPlatforms != null) {
        if (struct.isSetPayPlatforms()) {
          oprot.writeFieldBegin(PAY_PLATFORMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.payPlatforms.size()));
            for (long _iter11 : struct.payPlatforms)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDrmFlag()) {
        oprot.writeFieldBegin(DRM_FLAG_FIELD_DESC);
        oprot.writeI32(struct.drmFlag);
        oprot.writeFieldEnd();
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.platforms.size()));
            for (long _iter12 : struct.platforms)
            {
              oprot.writeI64(_iter12);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.viewPic != null) {
        if (struct.isSetViewPic()) {
          oprot.writeFieldBegin(VIEW_PIC_FIELD_DESC);
          oprot.writeString(struct.viewPic);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLiveStreamTupleSchemeFactory implements SchemeFactory {
    public TLiveStreamTupleScheme getScheme() {
      return new TLiveStreamTupleScheme();
    }
  }

  private static class TLiveStreamTupleScheme extends TupleScheme<TLiveStream> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLiveStream struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLiveId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetImages()) {
        optionals.set(3);
      }
      if (struct.isSetChatRoomId()) {
        optionals.set(4);
      }
      if (struct.isSetOrder()) {
        optionals.set(5);
      }
      if (struct.isSetIsPay()) {
        optionals.set(6);
      }
      if (struct.isSetPayPlatforms()) {
        optionals.set(7);
      }
      if (struct.isSetDrmFlag()) {
        optionals.set(8);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(9);
      }
      if (struct.isSetViewPic()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetLiveId()) {
        oprot.writeString(struct.liveId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (Map.Entry<String, String> _iter13 : struct.images.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeString(_iter13.getValue());
          }
        }
      }
      if (struct.isSetChatRoomId()) {
        oprot.writeString(struct.chatRoomId);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetIsPay()) {
        oprot.writeI32(struct.isPay);
      }
      if (struct.isSetPayPlatforms()) {
        {
          oprot.writeI32(struct.payPlatforms.size());
          for (long _iter14 : struct.payPlatforms)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
      if (struct.isSetDrmFlag()) {
        oprot.writeI32(struct.drmFlag);
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (long _iter15 : struct.platforms)
          {
            oprot.writeI64(_iter15);
          }
        }
      }
      if (struct.isSetViewPic()) {
        oprot.writeString(struct.viewPic);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLiveStream struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.liveId = iprot.readString();
        struct.setLiveIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = com.lesports.api.common.LiveStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new HashMap<String,String>(2*_map16.size);
          String _key17;
          String _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            _val18 = iprot.readString();
            struct.images.put(_key17, _val18);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.chatRoomId = iprot.readString();
        struct.setChatRoomIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isPay = iprot.readI32();
        struct.setIsPayIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.payPlatforms = new ArrayList<Long>(_list20.size);
          long _elem21;
          for (int _i22 = 0; _i22 < _list20.size; ++_i22)
          {
            _elem21 = iprot.readI64();
            struct.payPlatforms.add(_elem21);
          }
        }
        struct.setPayPlatformsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.drmFlag = iprot.readI32();
        struct.setDrmFlagIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.platforms = new ArrayList<Long>(_list23.size);
          long _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readI64();
            struct.platforms.add(_elem24);
          }
        }
        struct.setPlatformsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.viewPic = iprot.readString();
        struct.setViewPicIsSet(true);
      }
    }
  }

}

