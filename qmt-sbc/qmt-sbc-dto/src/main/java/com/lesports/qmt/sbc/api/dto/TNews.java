/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TNews implements org.apache.thrift.TBase<TNews, TNews._Fields>, java.io.Serializable, Cloneable, Comparable<TNews> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNews");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField IS_JUMP_FIELD_DESC = new org.apache.thrift.protocol.TField("isJump", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField JUMP_URL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpUrlType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField JUMP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("jumpUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SHARE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shareName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SHARE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDesc", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField SUB_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("subChannel", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField STAR_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("starLevel", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)16);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.SET, (short)19);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField PUBLISH_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishAt", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField STATEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("statements", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField ALLOW_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("allowComment", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField COVER_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("coverImage", org.apache.thrift.protocol.TType.MAP, (short)25);
  private static final org.apache.thrift.protocol.TField RELATED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedItems", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField LEECO_VID_FIELD_DESC = new org.apache.thrift.protocol.TField("leecoVid", org.apache.thrift.protocol.TType.I64, (short)31);
  private static final org.apache.thrift.protocol.TField IS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPay", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField PAY_PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("payPlatforms", org.apache.thrift.protocol.TType.SET, (short)33);
  private static final org.apache.thrift.protocol.TField DRM_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("drmFlag", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)35);
  private static final org.apache.thrift.protocol.TField VIDEO_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("videoImages", org.apache.thrift.protocol.TType.MAP, (short)36);
  private static final org.apache.thrift.protocol.TField HAS_BIG_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasBigImage", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentId", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField PLAY_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("playLink", org.apache.thrift.protocol.TType.STRING, (short)39);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TNewsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TNewsTupleSchemeFactory());
  }

  private long id; // required
  private boolean isJump; // optional
  private JumpUrlType jumpUrlType; // optional
  private String jumpUrl; // optional
  private String name; // optional
  private String shortName; // optional
  private String shareName; // optional
  private String desc; // optional
  private String shareDesc; // optional
  private com.lesports.api.common.Channel channel; // optional
  private com.lesports.api.common.Channel subChannel; // optional
  private long starLevel; // optional
  private String source; // optional
  private String author; // optional
  private long cid; // optional
  private Set<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private com.lesports.api.common.PublishStatus online; // optional
  private com.lesports.qmt.sbc.api.common.NewsType type; // optional
  private Set<com.lesports.api.common.Platform> platforms; // optional
  private String content; // optional
  private boolean deleted; // optional
  private String publishAt; // optional
  private List<String> statements; // optional
  private boolean allowComment; // optional
  private Map<String,String> coverImage; // optional
  private List<com.lesports.qmt.sbc.api.common.TRelatedItem> relatedItems; // optional
  private List<TNewsImage> images; // optional
  private long vid; // optional
  private long leecoVid; // optional
  private int isPay; // optional
  private Set<com.lesports.api.common.Platform> payPlatforms; // optional
  private int drmFlag; // optional
  private long duration; // optional
  private Map<String,String> videoImages; // optional
  private boolean hasBigImage; // optional
  private String commentId; // optional
  private String playLink; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    IS_JUMP((short)2, "isJump"),
    JUMP_URL_TYPE((short)3, "jumpUrlType"),
    JUMP_URL((short)4, "jumpUrl"),
    NAME((short)5, "name"),
    SHORT_NAME((short)6, "shortName"),
    SHARE_NAME((short)7, "shareName"),
    DESC((short)8, "desc"),
    SHARE_DESC((short)9, "shareDesc"),
    CHANNEL((short)10, "channel"),
    SUB_CHANNEL((short)11, "subChannel"),
    STAR_LEVEL((short)12, "starLevel"),
    SOURCE((short)13, "source"),
    AUTHOR((short)14, "author"),
    CID((short)15, "cid"),
    TAGS((short)16, "tags"),
    /**
     * 
     * @see com.lesports.api.common.PublishStatus
     */
    ONLINE((short)17, "online"),
    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.NewsType
     */
    TYPE((short)18, "type"),
    PLATFORMS((short)19, "platforms"),
    CONTENT((short)20, "content"),
    DELETED((short)21, "deleted"),
    PUBLISH_AT((short)22, "publishAt"),
    STATEMENTS((short)23, "statements"),
    ALLOW_COMMENT((short)24, "allowComment"),
    COVER_IMAGE((short)25, "coverImage"),
    RELATED_ITEMS((short)28, "relatedItems"),
    IMAGES((short)29, "images"),
    /**
     * ***********************视频新闻属性****************************
     */
    VID((short)30, "vid"),
    LEECO_VID((short)31, "leecoVid"),
    IS_PAY((short)32, "isPay"),
    PAY_PLATFORMS((short)33, "payPlatforms"),
    DRM_FLAG((short)34, "drmFlag"),
    DURATION((short)35, "duration"),
    VIDEO_IMAGES((short)36, "videoImages"),
    HAS_BIG_IMAGE((short)37, "hasBigImage"),
    COMMENT_ID((short)38, "commentId"),
    PLAY_LINK((short)39, "playLink");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // IS_JUMP
          return IS_JUMP;
        case 3: // JUMP_URL_TYPE
          return JUMP_URL_TYPE;
        case 4: // JUMP_URL
          return JUMP_URL;
        case 5: // NAME
          return NAME;
        case 6: // SHORT_NAME
          return SHORT_NAME;
        case 7: // SHARE_NAME
          return SHARE_NAME;
        case 8: // DESC
          return DESC;
        case 9: // SHARE_DESC
          return SHARE_DESC;
        case 10: // CHANNEL
          return CHANNEL;
        case 11: // SUB_CHANNEL
          return SUB_CHANNEL;
        case 12: // STAR_LEVEL
          return STAR_LEVEL;
        case 13: // SOURCE
          return SOURCE;
        case 14: // AUTHOR
          return AUTHOR;
        case 15: // CID
          return CID;
        case 16: // TAGS
          return TAGS;
        case 17: // ONLINE
          return ONLINE;
        case 18: // TYPE
          return TYPE;
        case 19: // PLATFORMS
          return PLATFORMS;
        case 20: // CONTENT
          return CONTENT;
        case 21: // DELETED
          return DELETED;
        case 22: // PUBLISH_AT
          return PUBLISH_AT;
        case 23: // STATEMENTS
          return STATEMENTS;
        case 24: // ALLOW_COMMENT
          return ALLOW_COMMENT;
        case 25: // COVER_IMAGE
          return COVER_IMAGE;
        case 28: // RELATED_ITEMS
          return RELATED_ITEMS;
        case 29: // IMAGES
          return IMAGES;
        case 30: // VID
          return VID;
        case 31: // LEECO_VID
          return LEECO_VID;
        case 32: // IS_PAY
          return IS_PAY;
        case 33: // PAY_PLATFORMS
          return PAY_PLATFORMS;
        case 34: // DRM_FLAG
          return DRM_FLAG;
        case 35: // DURATION
          return DURATION;
        case 36: // VIDEO_IMAGES
          return VIDEO_IMAGES;
        case 37: // HAS_BIG_IMAGE
          return HAS_BIG_IMAGE;
        case 38: // COMMENT_ID
          return COMMENT_ID;
        case 39: // PLAY_LINK
          return PLAY_LINK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ISJUMP_ISSET_ID = 1;
  private static final int __STARLEVEL_ISSET_ID = 2;
  private static final int __CID_ISSET_ID = 3;
  private static final int __DELETED_ISSET_ID = 4;
  private static final int __ALLOWCOMMENT_ISSET_ID = 5;
  private static final int __VID_ISSET_ID = 6;
  private static final int __LEECOVID_ISSET_ID = 7;
  private static final int __ISPAY_ISSET_ID = 8;
  private static final int __DRMFLAG_ISSET_ID = 9;
  private static final int __DURATION_ISSET_ID = 10;
  private static final int __HASBIGIMAGE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_JUMP,_Fields.JUMP_URL_TYPE,_Fields.JUMP_URL,_Fields.NAME,_Fields.SHORT_NAME,_Fields.SHARE_NAME,_Fields.DESC,_Fields.SHARE_DESC,_Fields.CHANNEL,_Fields.SUB_CHANNEL,_Fields.STAR_LEVEL,_Fields.SOURCE,_Fields.AUTHOR,_Fields.CID,_Fields.TAGS,_Fields.ONLINE,_Fields.TYPE,_Fields.PLATFORMS,_Fields.CONTENT,_Fields.DELETED,_Fields.PUBLISH_AT,_Fields.STATEMENTS,_Fields.ALLOW_COMMENT,_Fields.COVER_IMAGE,_Fields.RELATED_ITEMS,_Fields.IMAGES,_Fields.VID,_Fields.LEECO_VID,_Fields.IS_PAY,_Fields.PAY_PLATFORMS,_Fields.DRM_FLAG,_Fields.DURATION,_Fields.VIDEO_IMAGES,_Fields.HAS_BIG_IMAGE,_Fields.COMMENT_ID,_Fields.PLAY_LINK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_JUMP, new org.apache.thrift.meta_data.FieldMetaData("isJump", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JUMP_URL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("jumpUrlType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "JumpUrlType")));
    tmpMap.put(_Fields.JUMP_URL, new org.apache.thrift.meta_data.FieldMetaData("jumpUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_NAME, new org.apache.thrift.meta_data.FieldMetaData("shareName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_DESC, new org.apache.thrift.meta_data.FieldMetaData("shareDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.Channel.class)));
    tmpMap.put(_Fields.SUB_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("subChannel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.Channel.class)));
    tmpMap.put(_Fields.STAR_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("starLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.PublishStatus.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.NewsType.class)));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUBLISH_AT, new org.apache.thrift.meta_data.FieldMetaData("publishAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATEMENTS, new org.apache.thrift.meta_data.FieldMetaData("statements", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ALLOW_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("allowComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COVER_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("coverImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RELATED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("relatedItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.common.TRelatedItem.class))));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TNewsImage"))));
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEECO_VID, new org.apache.thrift.meta_data.FieldMetaData("leecoVid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAY_PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("payPlatforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.DRM_FLAG, new org.apache.thrift.meta_data.FieldMetaData("drmFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VIDEO_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("videoImages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.HAS_BIG_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("hasBigImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("commentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAY_LINK, new org.apache.thrift.meta_data.FieldMetaData("playLink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNews.class, metaDataMap);
  }

  public TNews() {
  }

  public TNews(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNews(TNews other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.isJump = other.isJump;
    if (other.isSetJumpUrlType()) {
      this.jumpUrlType = other.jumpUrlType;
    }
    if (other.isSetJumpUrl()) {
      this.jumpUrl = other.jumpUrl;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetShareName()) {
      this.shareName = other.shareName;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetShareDesc()) {
      this.shareDesc = other.shareDesc;
    }
    if (other.isSetChannel()) {
      this.channel = new com.lesports.api.common.Channel(other.channel);
    }
    if (other.isSetSubChannel()) {
      this.subChannel = new com.lesports.api.common.Channel(other.subChannel);
    }
    this.starLevel = other.starLevel;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    this.cid = other.cid;
    if (other.isSetTags()) {
      Set<com.lesports.qmt.config.api.dto.TTag> __this__tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetOnline()) {
      this.online = other.online;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPlatforms()) {
      Set<com.lesports.api.common.Platform> __this__platforms = new HashSet<com.lesports.api.common.Platform>(other.platforms.size());
      for (com.lesports.api.common.Platform other_element : other.platforms) {
        __this__platforms.add(other_element);
      }
      this.platforms = __this__platforms;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.deleted = other.deleted;
    if (other.isSetPublishAt()) {
      this.publishAt = other.publishAt;
    }
    if (other.isSetStatements()) {
      List<String> __this__statements = new ArrayList<String>(other.statements);
      this.statements = __this__statements;
    }
    this.allowComment = other.allowComment;
    if (other.isSetCoverImage()) {
      Map<String,String> __this__coverImage = new HashMap<String,String>(other.coverImage);
      this.coverImage = __this__coverImage;
    }
    if (other.isSetRelatedItems()) {
      List<com.lesports.qmt.sbc.api.common.TRelatedItem> __this__relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>(other.relatedItems.size());
      for (com.lesports.qmt.sbc.api.common.TRelatedItem other_element : other.relatedItems) {
        __this__relatedItems.add(new com.lesports.qmt.sbc.api.common.TRelatedItem(other_element));
      }
      this.relatedItems = __this__relatedItems;
    }
    if (other.isSetImages()) {
      List<TNewsImage> __this__images = new ArrayList<TNewsImage>(other.images.size());
      for (TNewsImage other_element : other.images) {
        __this__images.add(other_element);
      }
      this.images = __this__images;
    }
    this.vid = other.vid;
    this.leecoVid = other.leecoVid;
    this.isPay = other.isPay;
    if (other.isSetPayPlatforms()) {
      Set<com.lesports.api.common.Platform> __this__payPlatforms = new HashSet<com.lesports.api.common.Platform>(other.payPlatforms.size());
      for (com.lesports.api.common.Platform other_element : other.payPlatforms) {
        __this__payPlatforms.add(other_element);
      }
      this.payPlatforms = __this__payPlatforms;
    }
    this.drmFlag = other.drmFlag;
    this.duration = other.duration;
    if (other.isSetVideoImages()) {
      Map<String,String> __this__videoImages = new HashMap<String,String>(other.videoImages);
      this.videoImages = __this__videoImages;
    }
    this.hasBigImage = other.hasBigImage;
    if (other.isSetCommentId()) {
      this.commentId = other.commentId;
    }
    if (other.isSetPlayLink()) {
      this.playLink = other.playLink;
    }
  }

  public TNews deepCopy() {
    return new TNews(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setIsJumpIsSet(false);
    this.isJump = false;
    this.jumpUrlType = null;
    this.jumpUrl = null;
    this.name = null;
    this.shortName = null;
    this.shareName = null;
    this.desc = null;
    this.shareDesc = null;
    this.channel = null;
    this.subChannel = null;
    setStarLevelIsSet(false);
    this.starLevel = 0;
    this.source = null;
    this.author = null;
    setCidIsSet(false);
    this.cid = 0;
    this.tags = null;
    this.online = null;
    this.type = null;
    this.platforms = null;
    this.content = null;
    setDeletedIsSet(false);
    this.deleted = false;
    this.publishAt = null;
    this.statements = null;
    setAllowCommentIsSet(false);
    this.allowComment = false;
    this.coverImage = null;
    this.relatedItems = null;
    this.images = null;
    setVidIsSet(false);
    this.vid = 0;
    setLeecoVidIsSet(false);
    this.leecoVid = 0;
    setIsPayIsSet(false);
    this.isPay = 0;
    this.payPlatforms = null;
    setDrmFlagIsSet(false);
    this.drmFlag = 0;
    setDurationIsSet(false);
    this.duration = 0;
    this.videoImages = null;
    setHasBigImageIsSet(false);
    this.hasBigImage = false;
    this.commentId = null;
    this.playLink = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public boolean isIsJump() {
    return this.isJump;
  }

  public void setIsJump(boolean isJump) {
    this.isJump = isJump;
    setIsJumpIsSet(true);
  }

  public void unsetIsJump() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISJUMP_ISSET_ID);
  }

  /** Returns true if field isJump is set (has been assigned a value) and false otherwise */
  public boolean isSetIsJump() {
    return EncodingUtils.testBit(__isset_bitfield, __ISJUMP_ISSET_ID);
  }

  public void setIsJumpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISJUMP_ISSET_ID, value);
  }

  public JumpUrlType getJumpUrlType() {
    return this.jumpUrlType;
  }

  public void setJumpUrlType(JumpUrlType jumpUrlType) {
    this.jumpUrlType = jumpUrlType;
  }

  public void unsetJumpUrlType() {
    this.jumpUrlType = null;
  }

  /** Returns true if field jumpUrlType is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpUrlType() {
    return this.jumpUrlType != null;
  }

  public void setJumpUrlTypeIsSet(boolean value) {
    if (!value) {
      this.jumpUrlType = null;
    }
  }

  public String getJumpUrl() {
    return this.jumpUrl;
  }

  public void setJumpUrl(String jumpUrl) {
    this.jumpUrl = jumpUrl;
  }

  public void unsetJumpUrl() {
    this.jumpUrl = null;
  }

  /** Returns true if field jumpUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetJumpUrl() {
    return this.jumpUrl != null;
  }

  public void setJumpUrlIsSet(boolean value) {
    if (!value) {
      this.jumpUrl = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public String getShareName() {
    return this.shareName;
  }

  public void setShareName(String shareName) {
    this.shareName = shareName;
  }

  public void unsetShareName() {
    this.shareName = null;
  }

  /** Returns true if field shareName is set (has been assigned a value) and false otherwise */
  public boolean isSetShareName() {
    return this.shareName != null;
  }

  public void setShareNameIsSet(boolean value) {
    if (!value) {
      this.shareName = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getShareDesc() {
    return this.shareDesc;
  }

  public void setShareDesc(String shareDesc) {
    this.shareDesc = shareDesc;
  }

  public void unsetShareDesc() {
    this.shareDesc = null;
  }

  /** Returns true if field shareDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShareDesc() {
    return this.shareDesc != null;
  }

  public void setShareDescIsSet(boolean value) {
    if (!value) {
      this.shareDesc = null;
    }
  }

  public com.lesports.api.common.Channel getChannel() {
    return this.channel;
  }

  public void setChannel(com.lesports.api.common.Channel channel) {
    this.channel = channel;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public com.lesports.api.common.Channel getSubChannel() {
    return this.subChannel;
  }

  public void setSubChannel(com.lesports.api.common.Channel subChannel) {
    this.subChannel = subChannel;
  }

  public void unsetSubChannel() {
    this.subChannel = null;
  }

  /** Returns true if field subChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetSubChannel() {
    return this.subChannel != null;
  }

  public void setSubChannelIsSet(boolean value) {
    if (!value) {
      this.subChannel = null;
    }
  }

  public long getStarLevel() {
    return this.starLevel;
  }

  public void setStarLevel(long starLevel) {
    this.starLevel = starLevel;
    setStarLevelIsSet(true);
  }

  public void unsetStarLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARLEVEL_ISSET_ID);
  }

  /** Returns true if field starLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetStarLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __STARLEVEL_ISSET_ID);
  }

  public void setStarLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARLEVEL_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public Set<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(Set<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.PublishStatus
   */
  public com.lesports.api.common.PublishStatus getOnline() {
    return this.online;
  }

  /**
   * 
   * @see com.lesports.api.common.PublishStatus
   */
  public void setOnline(com.lesports.api.common.PublishStatus online) {
    this.online = online;
  }

  public void unsetOnline() {
    this.online = null;
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return this.online != null;
  }

  public void setOnlineIsSet(boolean value) {
    if (!value) {
      this.online = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.NewsType
   */
  public com.lesports.qmt.sbc.api.common.NewsType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.NewsType
   */
  public void setType(com.lesports.qmt.sbc.api.common.NewsType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(com.lesports.api.common.Platform elem) {
    if (this.platforms == null) {
      this.platforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.platforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getPlatforms() {
    return this.platforms;
  }

  public void setPlatforms(Set<com.lesports.api.common.Platform> platforms) {
    this.platforms = platforms;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public void setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public String getPublishAt() {
    return this.publishAt;
  }

  public void setPublishAt(String publishAt) {
    this.publishAt = publishAt;
  }

  public void unsetPublishAt() {
    this.publishAt = null;
  }

  /** Returns true if field publishAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishAt() {
    return this.publishAt != null;
  }

  public void setPublishAtIsSet(boolean value) {
    if (!value) {
      this.publishAt = null;
    }
  }

  public int getStatementsSize() {
    return (this.statements == null) ? 0 : this.statements.size();
  }

  public java.util.Iterator<String> getStatementsIterator() {
    return (this.statements == null) ? null : this.statements.iterator();
  }

  public void addToStatements(String elem) {
    if (this.statements == null) {
      this.statements = new ArrayList<String>();
    }
    this.statements.add(elem);
  }

  public List<String> getStatements() {
    return this.statements;
  }

  public void setStatements(List<String> statements) {
    this.statements = statements;
  }

  public void unsetStatements() {
    this.statements = null;
  }

  /** Returns true if field statements is set (has been assigned a value) and false otherwise */
  public boolean isSetStatements() {
    return this.statements != null;
  }

  public void setStatementsIsSet(boolean value) {
    if (!value) {
      this.statements = null;
    }
  }

  public boolean isAllowComment() {
    return this.allowComment;
  }

  public void setAllowComment(boolean allowComment) {
    this.allowComment = allowComment;
    setAllowCommentIsSet(true);
  }

  public void unsetAllowComment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOWCOMMENT_ISSET_ID);
  }

  /** Returns true if field allowComment is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowComment() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLOWCOMMENT_ISSET_ID);
  }

  public void setAllowCommentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLOWCOMMENT_ISSET_ID, value);
  }

  public int getCoverImageSize() {
    return (this.coverImage == null) ? 0 : this.coverImage.size();
  }

  public void putToCoverImage(String key, String val) {
    if (this.coverImage == null) {
      this.coverImage = new HashMap<String,String>();
    }
    this.coverImage.put(key, val);
  }

  public Map<String,String> getCoverImage() {
    return this.coverImage;
  }

  public void setCoverImage(Map<String,String> coverImage) {
    this.coverImage = coverImage;
  }

  public void unsetCoverImage() {
    this.coverImage = null;
  }

  /** Returns true if field coverImage is set (has been assigned a value) and false otherwise */
  public boolean isSetCoverImage() {
    return this.coverImage != null;
  }

  public void setCoverImageIsSet(boolean value) {
    if (!value) {
      this.coverImage = null;
    }
  }

  public int getRelatedItemsSize() {
    return (this.relatedItems == null) ? 0 : this.relatedItems.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbc.api.common.TRelatedItem> getRelatedItemsIterator() {
    return (this.relatedItems == null) ? null : this.relatedItems.iterator();
  }

  public void addToRelatedItems(com.lesports.qmt.sbc.api.common.TRelatedItem elem) {
    if (this.relatedItems == null) {
      this.relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>();
    }
    this.relatedItems.add(elem);
  }

  public List<com.lesports.qmt.sbc.api.common.TRelatedItem> getRelatedItems() {
    return this.relatedItems;
  }

  public void setRelatedItems(List<com.lesports.qmt.sbc.api.common.TRelatedItem> relatedItems) {
    this.relatedItems = relatedItems;
  }

  public void unsetRelatedItems() {
    this.relatedItems = null;
  }

  /** Returns true if field relatedItems is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedItems() {
    return this.relatedItems != null;
  }

  public void setRelatedItemsIsSet(boolean value) {
    if (!value) {
      this.relatedItems = null;
    }
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public java.util.Iterator<TNewsImage> getImagesIterator() {
    return (this.images == null) ? null : this.images.iterator();
  }

  public void addToImages(TNewsImage elem) {
    if (this.images == null) {
      this.images = new ArrayList<TNewsImage>();
    }
    this.images.add(elem);
  }

  public List<TNewsImage> getImages() {
    return this.images;
  }

  public void setImages(List<TNewsImage> images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  /**
   * ***********************视频新闻属性****************************
   */
  public long getVid() {
    return this.vid;
  }

  /**
   * ***********************视频新闻属性****************************
   */
  public void setVid(long vid) {
    this.vid = vid;
    setVidIsSet(true);
  }

  public void unsetVid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
  }

  public void setVidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
  }

  public long getLeecoVid() {
    return this.leecoVid;
  }

  public void setLeecoVid(long leecoVid) {
    this.leecoVid = leecoVid;
    setLeecoVidIsSet(true);
  }

  public void unsetLeecoVid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEECOVID_ISSET_ID);
  }

  /** Returns true if field leecoVid is set (has been assigned a value) and false otherwise */
  public boolean isSetLeecoVid() {
    return EncodingUtils.testBit(__isset_bitfield, __LEECOVID_ISSET_ID);
  }

  public void setLeecoVidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEECOVID_ISSET_ID, value);
  }

  public int getIsPay() {
    return this.isPay;
  }

  public void setIsPay(int isPay) {
    this.isPay = isPay;
    setIsPayIsSet(true);
  }

  public void unsetIsPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  /** Returns true if field isPay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  public void setIsPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAY_ISSET_ID, value);
  }

  public int getPayPlatformsSize() {
    return (this.payPlatforms == null) ? 0 : this.payPlatforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getPayPlatformsIterator() {
    return (this.payPlatforms == null) ? null : this.payPlatforms.iterator();
  }

  public void addToPayPlatforms(com.lesports.api.common.Platform elem) {
    if (this.payPlatforms == null) {
      this.payPlatforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.payPlatforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getPayPlatforms() {
    return this.payPlatforms;
  }

  public void setPayPlatforms(Set<com.lesports.api.common.Platform> payPlatforms) {
    this.payPlatforms = payPlatforms;
  }

  public void unsetPayPlatforms() {
    this.payPlatforms = null;
  }

  /** Returns true if field payPlatforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPlatforms() {
    return this.payPlatforms != null;
  }

  public void setPayPlatformsIsSet(boolean value) {
    if (!value) {
      this.payPlatforms = null;
    }
  }

  public int getDrmFlag() {
    return this.drmFlag;
  }

  public void setDrmFlag(int drmFlag) {
    this.drmFlag = drmFlag;
    setDrmFlagIsSet(true);
  }

  public void unsetDrmFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DRMFLAG_ISSET_ID);
  }

  /** Returns true if field drmFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDrmFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __DRMFLAG_ISSET_ID);
  }

  public void setDrmFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DRMFLAG_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public void setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getVideoImagesSize() {
    return (this.videoImages == null) ? 0 : this.videoImages.size();
  }

  public void putToVideoImages(String key, String val) {
    if (this.videoImages == null) {
      this.videoImages = new HashMap<String,String>();
    }
    this.videoImages.put(key, val);
  }

  public Map<String,String> getVideoImages() {
    return this.videoImages;
  }

  public void setVideoImages(Map<String,String> videoImages) {
    this.videoImages = videoImages;
  }

  public void unsetVideoImages() {
    this.videoImages = null;
  }

  /** Returns true if field videoImages is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoImages() {
    return this.videoImages != null;
  }

  public void setVideoImagesIsSet(boolean value) {
    if (!value) {
      this.videoImages = null;
    }
  }

  public boolean isHasBigImage() {
    return this.hasBigImage;
  }

  public void setHasBigImage(boolean hasBigImage) {
    this.hasBigImage = hasBigImage;
    setHasBigImageIsSet(true);
  }

  public void unsetHasBigImage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASBIGIMAGE_ISSET_ID);
  }

  /** Returns true if field hasBigImage is set (has been assigned a value) and false otherwise */
  public boolean isSetHasBigImage() {
    return EncodingUtils.testBit(__isset_bitfield, __HASBIGIMAGE_ISSET_ID);
  }

  public void setHasBigImageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASBIGIMAGE_ISSET_ID, value);
  }

  public String getCommentId() {
    return this.commentId;
  }

  public void setCommentId(String commentId) {
    this.commentId = commentId;
  }

  public void unsetCommentId() {
    this.commentId = null;
  }

  /** Returns true if field commentId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentId() {
    return this.commentId != null;
  }

  public void setCommentIdIsSet(boolean value) {
    if (!value) {
      this.commentId = null;
    }
  }

  public String getPlayLink() {
    return this.playLink;
  }

  public void setPlayLink(String playLink) {
    this.playLink = playLink;
  }

  public void unsetPlayLink() {
    this.playLink = null;
  }

  /** Returns true if field playLink is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayLink() {
    return this.playLink != null;
  }

  public void setPlayLinkIsSet(boolean value) {
    if (!value) {
      this.playLink = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case IS_JUMP:
      if (value == null) {
        unsetIsJump();
      } else {
        setIsJump((Boolean)value);
      }
      break;

    case JUMP_URL_TYPE:
      if (value == null) {
        unsetJumpUrlType();
      } else {
        setJumpUrlType((JumpUrlType)value);
      }
      break;

    case JUMP_URL:
      if (value == null) {
        unsetJumpUrl();
      } else {
        setJumpUrl((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case SHARE_NAME:
      if (value == null) {
        unsetShareName();
      } else {
        setShareName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case SHARE_DESC:
      if (value == null) {
        unsetShareDesc();
      } else {
        setShareDesc((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((com.lesports.api.common.Channel)value);
      }
      break;

    case SUB_CHANNEL:
      if (value == null) {
        unsetSubChannel();
      } else {
        setSubChannel((com.lesports.api.common.Channel)value);
      }
      break;

    case STAR_LEVEL:
      if (value == null) {
        unsetStarLevel();
      } else {
        setStarLevel((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Set<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((com.lesports.api.common.PublishStatus)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.lesports.qmt.sbc.api.common.NewsType)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    case PUBLISH_AT:
      if (value == null) {
        unsetPublishAt();
      } else {
        setPublishAt((String)value);
      }
      break;

    case STATEMENTS:
      if (value == null) {
        unsetStatements();
      } else {
        setStatements((List<String>)value);
      }
      break;

    case ALLOW_COMMENT:
      if (value == null) {
        unsetAllowComment();
      } else {
        setAllowComment((Boolean)value);
      }
      break;

    case COVER_IMAGE:
      if (value == null) {
        unsetCoverImage();
      } else {
        setCoverImage((Map<String,String>)value);
      }
      break;

    case RELATED_ITEMS:
      if (value == null) {
        unsetRelatedItems();
      } else {
        setRelatedItems((List<com.lesports.qmt.sbc.api.common.TRelatedItem>)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((List<TNewsImage>)value);
      }
      break;

    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((Long)value);
      }
      break;

    case LEECO_VID:
      if (value == null) {
        unsetLeecoVid();
      } else {
        setLeecoVid((Long)value);
      }
      break;

    case IS_PAY:
      if (value == null) {
        unsetIsPay();
      } else {
        setIsPay((Integer)value);
      }
      break;

    case PAY_PLATFORMS:
      if (value == null) {
        unsetPayPlatforms();
      } else {
        setPayPlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case DRM_FLAG:
      if (value == null) {
        unsetDrmFlag();
      } else {
        setDrmFlag((Integer)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case VIDEO_IMAGES:
      if (value == null) {
        unsetVideoImages();
      } else {
        setVideoImages((Map<String,String>)value);
      }
      break;

    case HAS_BIG_IMAGE:
      if (value == null) {
        unsetHasBigImage();
      } else {
        setHasBigImage((Boolean)value);
      }
      break;

    case COMMENT_ID:
      if (value == null) {
        unsetCommentId();
      } else {
        setCommentId((String)value);
      }
      break;

    case PLAY_LINK:
      if (value == null) {
        unsetPlayLink();
      } else {
        setPlayLink((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case IS_JUMP:
      return Boolean.valueOf(isIsJump());

    case JUMP_URL_TYPE:
      return getJumpUrlType();

    case JUMP_URL:
      return getJumpUrl();

    case NAME:
      return getName();

    case SHORT_NAME:
      return getShortName();

    case SHARE_NAME:
      return getShareName();

    case DESC:
      return getDesc();

    case SHARE_DESC:
      return getShareDesc();

    case CHANNEL:
      return getChannel();

    case SUB_CHANNEL:
      return getSubChannel();

    case STAR_LEVEL:
      return Long.valueOf(getStarLevel());

    case SOURCE:
      return getSource();

    case AUTHOR:
      return getAuthor();

    case CID:
      return Long.valueOf(getCid());

    case TAGS:
      return getTags();

    case ONLINE:
      return getOnline();

    case TYPE:
      return getType();

    case PLATFORMS:
      return getPlatforms();

    case CONTENT:
      return getContent();

    case DELETED:
      return Boolean.valueOf(isDeleted());

    case PUBLISH_AT:
      return getPublishAt();

    case STATEMENTS:
      return getStatements();

    case ALLOW_COMMENT:
      return Boolean.valueOf(isAllowComment());

    case COVER_IMAGE:
      return getCoverImage();

    case RELATED_ITEMS:
      return getRelatedItems();

    case IMAGES:
      return getImages();

    case VID:
      return Long.valueOf(getVid());

    case LEECO_VID:
      return Long.valueOf(getLeecoVid());

    case IS_PAY:
      return Integer.valueOf(getIsPay());

    case PAY_PLATFORMS:
      return getPayPlatforms();

    case DRM_FLAG:
      return Integer.valueOf(getDrmFlag());

    case DURATION:
      return Long.valueOf(getDuration());

    case VIDEO_IMAGES:
      return getVideoImages();

    case HAS_BIG_IMAGE:
      return Boolean.valueOf(isHasBigImage());

    case COMMENT_ID:
      return getCommentId();

    case PLAY_LINK:
      return getPlayLink();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case IS_JUMP:
      return isSetIsJump();
    case JUMP_URL_TYPE:
      return isSetJumpUrlType();
    case JUMP_URL:
      return isSetJumpUrl();
    case NAME:
      return isSetName();
    case SHORT_NAME:
      return isSetShortName();
    case SHARE_NAME:
      return isSetShareName();
    case DESC:
      return isSetDesc();
    case SHARE_DESC:
      return isSetShareDesc();
    case CHANNEL:
      return isSetChannel();
    case SUB_CHANNEL:
      return isSetSubChannel();
    case STAR_LEVEL:
      return isSetStarLevel();
    case SOURCE:
      return isSetSource();
    case AUTHOR:
      return isSetAuthor();
    case CID:
      return isSetCid();
    case TAGS:
      return isSetTags();
    case ONLINE:
      return isSetOnline();
    case TYPE:
      return isSetType();
    case PLATFORMS:
      return isSetPlatforms();
    case CONTENT:
      return isSetContent();
    case DELETED:
      return isSetDeleted();
    case PUBLISH_AT:
      return isSetPublishAt();
    case STATEMENTS:
      return isSetStatements();
    case ALLOW_COMMENT:
      return isSetAllowComment();
    case COVER_IMAGE:
      return isSetCoverImage();
    case RELATED_ITEMS:
      return isSetRelatedItems();
    case IMAGES:
      return isSetImages();
    case VID:
      return isSetVid();
    case LEECO_VID:
      return isSetLeecoVid();
    case IS_PAY:
      return isSetIsPay();
    case PAY_PLATFORMS:
      return isSetPayPlatforms();
    case DRM_FLAG:
      return isSetDrmFlag();
    case DURATION:
      return isSetDuration();
    case VIDEO_IMAGES:
      return isSetVideoImages();
    case HAS_BIG_IMAGE:
      return isSetHasBigImage();
    case COMMENT_ID:
      return isSetCommentId();
    case PLAY_LINK:
      return isSetPlayLink();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNews)
      return this.equals((TNews)that);
    return false;
  }

  public boolean equals(TNews that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_isJump = true && this.isSetIsJump();
    boolean that_present_isJump = true && that.isSetIsJump();
    if (this_present_isJump || that_present_isJump) {
      if (!(this_present_isJump && that_present_isJump))
        return false;
      if (this.isJump != that.isJump)
        return false;
    }

    boolean this_present_jumpUrlType = true && this.isSetJumpUrlType();
    boolean that_present_jumpUrlType = true && that.isSetJumpUrlType();
    if (this_present_jumpUrlType || that_present_jumpUrlType) {
      if (!(this_present_jumpUrlType && that_present_jumpUrlType))
        return false;
      if (!this.jumpUrlType.equals(that.jumpUrlType))
        return false;
    }

    boolean this_present_jumpUrl = true && this.isSetJumpUrl();
    boolean that_present_jumpUrl = true && that.isSetJumpUrl();
    if (this_present_jumpUrl || that_present_jumpUrl) {
      if (!(this_present_jumpUrl && that_present_jumpUrl))
        return false;
      if (!this.jumpUrl.equals(that.jumpUrl))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_shareName = true && this.isSetShareName();
    boolean that_present_shareName = true && that.isSetShareName();
    if (this_present_shareName || that_present_shareName) {
      if (!(this_present_shareName && that_present_shareName))
        return false;
      if (!this.shareName.equals(that.shareName))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_shareDesc = true && this.isSetShareDesc();
    boolean that_present_shareDesc = true && that.isSetShareDesc();
    if (this_present_shareDesc || that_present_shareDesc) {
      if (!(this_present_shareDesc && that_present_shareDesc))
        return false;
      if (!this.shareDesc.equals(that.shareDesc))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_subChannel = true && this.isSetSubChannel();
    boolean that_present_subChannel = true && that.isSetSubChannel();
    if (this_present_subChannel || that_present_subChannel) {
      if (!(this_present_subChannel && that_present_subChannel))
        return false;
      if (!this.subChannel.equals(that.subChannel))
        return false;
    }

    boolean this_present_starLevel = true && this.isSetStarLevel();
    boolean that_present_starLevel = true && that.isSetStarLevel();
    if (this_present_starLevel || that_present_starLevel) {
      if (!(this_present_starLevel && that_present_starLevel))
        return false;
      if (this.starLevel != that.starLevel)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_online = true && this.isSetOnline();
    boolean that_present_online = true && that.isSetOnline();
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (!this.online.equals(that.online))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    boolean this_present_publishAt = true && this.isSetPublishAt();
    boolean that_present_publishAt = true && that.isSetPublishAt();
    if (this_present_publishAt || that_present_publishAt) {
      if (!(this_present_publishAt && that_present_publishAt))
        return false;
      if (!this.publishAt.equals(that.publishAt))
        return false;
    }

    boolean this_present_statements = true && this.isSetStatements();
    boolean that_present_statements = true && that.isSetStatements();
    if (this_present_statements || that_present_statements) {
      if (!(this_present_statements && that_present_statements))
        return false;
      if (!this.statements.equals(that.statements))
        return false;
    }

    boolean this_present_allowComment = true && this.isSetAllowComment();
    boolean that_present_allowComment = true && that.isSetAllowComment();
    if (this_present_allowComment || that_present_allowComment) {
      if (!(this_present_allowComment && that_present_allowComment))
        return false;
      if (this.allowComment != that.allowComment)
        return false;
    }

    boolean this_present_coverImage = true && this.isSetCoverImage();
    boolean that_present_coverImage = true && that.isSetCoverImage();
    if (this_present_coverImage || that_present_coverImage) {
      if (!(this_present_coverImage && that_present_coverImage))
        return false;
      if (!this.coverImage.equals(that.coverImage))
        return false;
    }

    boolean this_present_relatedItems = true && this.isSetRelatedItems();
    boolean that_present_relatedItems = true && that.isSetRelatedItems();
    if (this_present_relatedItems || that_present_relatedItems) {
      if (!(this_present_relatedItems && that_present_relatedItems))
        return false;
      if (!this.relatedItems.equals(that.relatedItems))
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_vid = true && this.isSetVid();
    boolean that_present_vid = true && that.isSetVid();
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (this.vid != that.vid)
        return false;
    }

    boolean this_present_leecoVid = true && this.isSetLeecoVid();
    boolean that_present_leecoVid = true && that.isSetLeecoVid();
    if (this_present_leecoVid || that_present_leecoVid) {
      if (!(this_present_leecoVid && that_present_leecoVid))
        return false;
      if (this.leecoVid != that.leecoVid)
        return false;
    }

    boolean this_present_isPay = true && this.isSetIsPay();
    boolean that_present_isPay = true && that.isSetIsPay();
    if (this_present_isPay || that_present_isPay) {
      if (!(this_present_isPay && that_present_isPay))
        return false;
      if (this.isPay != that.isPay)
        return false;
    }

    boolean this_present_payPlatforms = true && this.isSetPayPlatforms();
    boolean that_present_payPlatforms = true && that.isSetPayPlatforms();
    if (this_present_payPlatforms || that_present_payPlatforms) {
      if (!(this_present_payPlatforms && that_present_payPlatforms))
        return false;
      if (!this.payPlatforms.equals(that.payPlatforms))
        return false;
    }

    boolean this_present_drmFlag = true && this.isSetDrmFlag();
    boolean that_present_drmFlag = true && that.isSetDrmFlag();
    if (this_present_drmFlag || that_present_drmFlag) {
      if (!(this_present_drmFlag && that_present_drmFlag))
        return false;
      if (this.drmFlag != that.drmFlag)
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_videoImages = true && this.isSetVideoImages();
    boolean that_present_videoImages = true && that.isSetVideoImages();
    if (this_present_videoImages || that_present_videoImages) {
      if (!(this_present_videoImages && that_present_videoImages))
        return false;
      if (!this.videoImages.equals(that.videoImages))
        return false;
    }

    boolean this_present_hasBigImage = true && this.isSetHasBigImage();
    boolean that_present_hasBigImage = true && that.isSetHasBigImage();
    if (this_present_hasBigImage || that_present_hasBigImage) {
      if (!(this_present_hasBigImage && that_present_hasBigImage))
        return false;
      if (this.hasBigImage != that.hasBigImage)
        return false;
    }

    boolean this_present_commentId = true && this.isSetCommentId();
    boolean that_present_commentId = true && that.isSetCommentId();
    if (this_present_commentId || that_present_commentId) {
      if (!(this_present_commentId && that_present_commentId))
        return false;
      if (!this.commentId.equals(that.commentId))
        return false;
    }

    boolean this_present_playLink = true && this.isSetPlayLink();
    boolean that_present_playLink = true && that.isSetPlayLink();
    if (this_present_playLink || that_present_playLink) {
      if (!(this_present_playLink && that_present_playLink))
        return false;
      if (!this.playLink.equals(that.playLink))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_isJump = true && (isSetIsJump());
    list.add(present_isJump);
    if (present_isJump)
      list.add(isJump);

    boolean present_jumpUrlType = true && (isSetJumpUrlType());
    list.add(present_jumpUrlType);
    if (present_jumpUrlType)
      list.add(jumpUrlType.getValue());

    boolean present_jumpUrl = true && (isSetJumpUrl());
    list.add(present_jumpUrl);
    if (present_jumpUrl)
      list.add(jumpUrl);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_shortName = true && (isSetShortName());
    list.add(present_shortName);
    if (present_shortName)
      list.add(shortName);

    boolean present_shareName = true && (isSetShareName());
    list.add(present_shareName);
    if (present_shareName)
      list.add(shareName);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_shareDesc = true && (isSetShareDesc());
    list.add(present_shareDesc);
    if (present_shareDesc)
      list.add(shareDesc);

    boolean present_channel = true && (isSetChannel());
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_subChannel = true && (isSetSubChannel());
    list.add(present_subChannel);
    if (present_subChannel)
      list.add(subChannel);

    boolean present_starLevel = true && (isSetStarLevel());
    list.add(present_starLevel);
    if (present_starLevel)
      list.add(starLevel);

    boolean present_source = true && (isSetSource());
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_online = true && (isSetOnline());
    list.add(present_online);
    if (present_online)
      list.add(online.getValue());

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_platforms = true && (isSetPlatforms());
    list.add(present_platforms);
    if (present_platforms)
      list.add(platforms);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_deleted = true && (isSetDeleted());
    list.add(present_deleted);
    if (present_deleted)
      list.add(deleted);

    boolean present_publishAt = true && (isSetPublishAt());
    list.add(present_publishAt);
    if (present_publishAt)
      list.add(publishAt);

    boolean present_statements = true && (isSetStatements());
    list.add(present_statements);
    if (present_statements)
      list.add(statements);

    boolean present_allowComment = true && (isSetAllowComment());
    list.add(present_allowComment);
    if (present_allowComment)
      list.add(allowComment);

    boolean present_coverImage = true && (isSetCoverImage());
    list.add(present_coverImage);
    if (present_coverImage)
      list.add(coverImage);

    boolean present_relatedItems = true && (isSetRelatedItems());
    list.add(present_relatedItems);
    if (present_relatedItems)
      list.add(relatedItems);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    boolean present_vid = true && (isSetVid());
    list.add(present_vid);
    if (present_vid)
      list.add(vid);

    boolean present_leecoVid = true && (isSetLeecoVid());
    list.add(present_leecoVid);
    if (present_leecoVid)
      list.add(leecoVid);

    boolean present_isPay = true && (isSetIsPay());
    list.add(present_isPay);
    if (present_isPay)
      list.add(isPay);

    boolean present_payPlatforms = true && (isSetPayPlatforms());
    list.add(present_payPlatforms);
    if (present_payPlatforms)
      list.add(payPlatforms);

    boolean present_drmFlag = true && (isSetDrmFlag());
    list.add(present_drmFlag);
    if (present_drmFlag)
      list.add(drmFlag);

    boolean present_duration = true && (isSetDuration());
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_videoImages = true && (isSetVideoImages());
    list.add(present_videoImages);
    if (present_videoImages)
      list.add(videoImages);

    boolean present_hasBigImage = true && (isSetHasBigImage());
    list.add(present_hasBigImage);
    if (present_hasBigImage)
      list.add(hasBigImage);

    boolean present_commentId = true && (isSetCommentId());
    list.add(present_commentId);
    if (present_commentId)
      list.add(commentId);

    boolean present_playLink = true && (isSetPlayLink());
    list.add(present_playLink);
    if (present_playLink)
      list.add(playLink);

    return list.hashCode();
  }

  @Override
  public int compareTo(TNews other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsJump()).compareTo(other.isSetIsJump());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsJump()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isJump, other.isJump);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpUrlType()).compareTo(other.isSetJumpUrlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpUrlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpUrlType, other.jumpUrlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJumpUrl()).compareTo(other.isSetJumpUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJumpUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jumpUrl, other.jumpUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(other.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, other.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareName()).compareTo(other.isSetShareName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareName, other.shareName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareDesc()).compareTo(other.isSetShareDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDesc, other.shareDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubChannel()).compareTo(other.isSetSubChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subChannel, other.subChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarLevel()).compareTo(other.isSetStarLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starLevel, other.starLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(other.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, other.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishAt()).compareTo(other.isSetPublishAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishAt, other.publishAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatements()).compareTo(other.isSetStatements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statements, other.statements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllowComment()).compareTo(other.isSetAllowComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowComment, other.allowComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoverImage()).compareTo(other.isSetCoverImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoverImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coverImage, other.coverImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedItems()).compareTo(other.isSetRelatedItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedItems, other.relatedItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeecoVid()).compareTo(other.isSetLeecoVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeecoVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leecoVid, other.leecoVid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPay()).compareTo(other.isSetIsPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPay, other.isPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPlatforms()).compareTo(other.isSetPayPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPlatforms, other.payPlatforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrmFlag()).compareTo(other.isSetDrmFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrmFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drmFlag, other.drmFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideoImages()).compareTo(other.isSetVideoImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videoImages, other.videoImages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasBigImage()).compareTo(other.isSetHasBigImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasBigImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasBigImage, other.hasBigImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentId()).compareTo(other.isSetCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentId, other.commentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayLink()).compareTo(other.isSetPlayLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayLink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playLink, other.playLink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNews(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetIsJump()) {
      if (!first) sb.append(", ");
      sb.append("isJump:");
      sb.append(this.isJump);
      first = false;
    }
    if (isSetJumpUrlType()) {
      if (!first) sb.append(", ");
      sb.append("jumpUrlType:");
      if (this.jumpUrlType == null) {
        sb.append("null");
      } else {
        sb.append(this.jumpUrlType);
      }
      first = false;
    }
    if (isSetJumpUrl()) {
      if (!first) sb.append(", ");
      sb.append("jumpUrl:");
      if (this.jumpUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.jumpUrl);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetShortName()) {
      if (!first) sb.append(", ");
      sb.append("shortName:");
      if (this.shortName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortName);
      }
      first = false;
    }
    if (isSetShareName()) {
      if (!first) sb.append(", ");
      sb.append("shareName:");
      if (this.shareName == null) {
        sb.append("null");
      } else {
        sb.append(this.shareName);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetShareDesc()) {
      if (!first) sb.append(", ");
      sb.append("shareDesc:");
      if (this.shareDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.shareDesc);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
    }
    if (isSetSubChannel()) {
      if (!first) sb.append(", ");
      sb.append("subChannel:");
      if (this.subChannel == null) {
        sb.append("null");
      } else {
        sb.append(this.subChannel);
      }
      first = false;
    }
    if (isSetStarLevel()) {
      if (!first) sb.append(", ");
      sb.append("starLevel:");
      sb.append(this.starLevel);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetAuthor()) {
      if (!first) sb.append(", ");
      sb.append("author:");
      if (this.author == null) {
        sb.append("null");
      } else {
        sb.append(this.author);
      }
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetOnline()) {
      if (!first) sb.append(", ");
      sb.append("online:");
      if (this.online == null) {
        sb.append("null");
      } else {
        sb.append(this.online);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      sb.append(this.deleted);
      first = false;
    }
    if (isSetPublishAt()) {
      if (!first) sb.append(", ");
      sb.append("publishAt:");
      if (this.publishAt == null) {
        sb.append("null");
      } else {
        sb.append(this.publishAt);
      }
      first = false;
    }
    if (isSetStatements()) {
      if (!first) sb.append(", ");
      sb.append("statements:");
      if (this.statements == null) {
        sb.append("null");
      } else {
        sb.append(this.statements);
      }
      first = false;
    }
    if (isSetAllowComment()) {
      if (!first) sb.append(", ");
      sb.append("allowComment:");
      sb.append(this.allowComment);
      first = false;
    }
    if (isSetCoverImage()) {
      if (!first) sb.append(", ");
      sb.append("coverImage:");
      if (this.coverImage == null) {
        sb.append("null");
      } else {
        sb.append(this.coverImage);
      }
      first = false;
    }
    if (isSetRelatedItems()) {
      if (!first) sb.append(", ");
      sb.append("relatedItems:");
      if (this.relatedItems == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedItems);
      }
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetVid()) {
      if (!first) sb.append(", ");
      sb.append("vid:");
      sb.append(this.vid);
      first = false;
    }
    if (isSetLeecoVid()) {
      if (!first) sb.append(", ");
      sb.append("leecoVid:");
      sb.append(this.leecoVid);
      first = false;
    }
    if (isSetIsPay()) {
      if (!first) sb.append(", ");
      sb.append("isPay:");
      sb.append(this.isPay);
      first = false;
    }
    if (isSetPayPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("payPlatforms:");
      if (this.payPlatforms == null) {
        sb.append("null");
      } else {
        sb.append(this.payPlatforms);
      }
      first = false;
    }
    if (isSetDrmFlag()) {
      if (!first) sb.append(", ");
      sb.append("drmFlag:");
      sb.append(this.drmFlag);
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
    }
    if (isSetVideoImages()) {
      if (!first) sb.append(", ");
      sb.append("videoImages:");
      if (this.videoImages == null) {
        sb.append("null");
      } else {
        sb.append(this.videoImages);
      }
      first = false;
    }
    if (isSetHasBigImage()) {
      if (!first) sb.append(", ");
      sb.append("hasBigImage:");
      sb.append(this.hasBigImage);
      first = false;
    }
    if (isSetCommentId()) {
      if (!first) sb.append(", ");
      sb.append("commentId:");
      if (this.commentId == null) {
        sb.append("null");
      } else {
        sb.append(this.commentId);
      }
      first = false;
    }
    if (isSetPlayLink()) {
      if (!first) sb.append(", ");
      sb.append("playLink:");
      if (this.playLink == null) {
        sb.append("null");
      } else {
        sb.append(this.playLink);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (channel != null) {
      channel.validate();
    }
    if (subChannel != null) {
      subChannel.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNewsStandardSchemeFactory implements SchemeFactory {
    public TNewsStandardScheme getScheme() {
      return new TNewsStandardScheme();
    }
  }

  private static class TNewsStandardScheme extends StandardScheme<TNews> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TNews struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_JUMP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isJump = iprot.readBool();
              struct.setIsJumpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JUMP_URL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.jumpUrlType = com.lesports.qmt.sbc.api.dto.JumpUrlType.findByValue(iprot.readI32());
              struct.setJumpUrlTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JUMP_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jumpUrl = iprot.readString();
              struct.setJumpUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortName = iprot.readString();
              struct.setShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareName = iprot.readString();
              struct.setShareNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHARE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareDesc = iprot.readString();
              struct.setShareDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.channel = new com.lesports.api.common.Channel();
              struct.channel.read(iprot);
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUB_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subChannel = new com.lesports.api.common.Channel();
              struct.subChannel.read(iprot);
              struct.setSubChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STAR_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.starLevel = iprot.readI64();
              struct.setStarLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>(2*_set0.size);
                com.lesports.qmt.config.api.dto.TTag _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem1.read(iprot);
                  struct.tags.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.online = com.lesports.api.common.PublishStatus.findByValue(iprot.readI32());
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set3.size);
                com.lesports.api.common.Platform _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.platforms.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PUBLISH_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publishAt = iprot.readString();
              struct.setPublishAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STATEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.statements = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.statements.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setStatementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALLOW_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allowComment = iprot.readBool();
              struct.setAllowCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // COVER_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                struct.coverImage = new HashMap<String,String>(2*_map9.size);
                String _key10;
                String _val11;
                for (int _i12 = 0; _i12 < _map9.size; ++_i12)
                {
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.coverImage.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setCoverImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // RELATED_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                struct.relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>(_list13.size);
                com.lesports.qmt.sbc.api.common.TRelatedItem _elem14;
                for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                {
                  _elem14 = new com.lesports.qmt.sbc.api.common.TRelatedItem();
                  _elem14.read(iprot);
                  struct.relatedItems.add(_elem14);
                }
                iprot.readListEnd();
              }
              struct.setRelatedItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.images = new ArrayList<TNewsImage>(_list16.size);
                TNewsImage _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new TNewsImage();
                  _elem17.read(iprot);
                  struct.images.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vid = iprot.readI64();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LEECO_VID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leecoVid = iprot.readI64();
              struct.setLeecoVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // IS_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPay = iprot.readI32();
              struct.setIsPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PAY_PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set19 = iprot.readSetBegin();
                struct.payPlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set19.size);
                com.lesports.api.common.Platform _elem20;
                for (int _i21 = 0; _i21 < _set19.size; ++_i21)
                {
                  _elem20 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.payPlatforms.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setPayPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // DRM_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.drmFlag = iprot.readI32();
              struct.setDrmFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // VIDEO_IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin();
                struct.videoImages = new HashMap<String,String>(2*_map22.size);
                String _key23;
                String _val24;
                for (int _i25 = 0; _i25 < _map22.size; ++_i25)
                {
                  _key23 = iprot.readString();
                  _val24 = iprot.readString();
                  struct.videoImages.put(_key23, _val24);
                }
                iprot.readMapEnd();
              }
              struct.setVideoImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // HAS_BIG_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasBigImage = iprot.readBool();
              struct.setHasBigImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentId = iprot.readString();
              struct.setCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // PLAY_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playLink = iprot.readString();
              struct.setPlayLinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TNews struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.isSetIsJump()) {
        oprot.writeFieldBegin(IS_JUMP_FIELD_DESC);
        oprot.writeBool(struct.isJump);
        oprot.writeFieldEnd();
      }
      if (struct.jumpUrlType != null) {
        if (struct.isSetJumpUrlType()) {
          oprot.writeFieldBegin(JUMP_URL_TYPE_FIELD_DESC);
          oprot.writeI32(struct.jumpUrlType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.jumpUrl != null) {
        if (struct.isSetJumpUrl()) {
          oprot.writeFieldBegin(JUMP_URL_FIELD_DESC);
          oprot.writeString(struct.jumpUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortName != null) {
        if (struct.isSetShortName()) {
          oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
          oprot.writeString(struct.shortName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareName != null) {
        if (struct.isSetShareName()) {
          oprot.writeFieldBegin(SHARE_NAME_FIELD_DESC);
          oprot.writeString(struct.shareName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareDesc != null) {
        if (struct.isSetShareDesc()) {
          oprot.writeFieldBegin(SHARE_DESC_FIELD_DESC);
          oprot.writeString(struct.shareDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.channel != null) {
        if (struct.isSetChannel()) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          struct.channel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subChannel != null) {
        if (struct.isSetSubChannel()) {
          oprot.writeFieldBegin(SUB_CHANNEL_FIELD_DESC);
          struct.subChannel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStarLevel()) {
        oprot.writeFieldBegin(STAR_LEVEL_FIELD_DESC);
        oprot.writeI64(struct.starLevel);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.author != null) {
        if (struct.isSetAuthor()) {
          oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
          oprot.writeString(struct.author);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter26 : struct.tags)
            {
              _iter26.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.online != null) {
        if (struct.isSetOnline()) {
          oprot.writeFieldBegin(ONLINE_FIELD_DESC);
          oprot.writeI32(struct.online.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.platforms.size()));
            for (com.lesports.api.common.Platform _iter27 : struct.platforms)
            {
              oprot.writeI32(_iter27.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        oprot.writeBool(struct.deleted);
        oprot.writeFieldEnd();
      }
      if (struct.publishAt != null) {
        if (struct.isSetPublishAt()) {
          oprot.writeFieldBegin(PUBLISH_AT_FIELD_DESC);
          oprot.writeString(struct.publishAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.statements != null) {
        if (struct.isSetStatements()) {
          oprot.writeFieldBegin(STATEMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.statements.size()));
            for (String _iter28 : struct.statements)
            {
              oprot.writeString(_iter28);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllowComment()) {
        oprot.writeFieldBegin(ALLOW_COMMENT_FIELD_DESC);
        oprot.writeBool(struct.allowComment);
        oprot.writeFieldEnd();
      }
      if (struct.coverImage != null) {
        if (struct.isSetCoverImage()) {
          oprot.writeFieldBegin(COVER_IMAGE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.coverImage.size()));
            for (Map.Entry<String, String> _iter29 : struct.coverImage.entrySet())
            {
              oprot.writeString(_iter29.getKey());
              oprot.writeString(_iter29.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedItems != null) {
        if (struct.isSetRelatedItems()) {
          oprot.writeFieldBegin(RELATED_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relatedItems.size()));
            for (com.lesports.qmt.sbc.api.common.TRelatedItem _iter30 : struct.relatedItems)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.images.size()));
            for (TNewsImage _iter31 : struct.images)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVid()) {
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeecoVid()) {
        oprot.writeFieldBegin(LEECO_VID_FIELD_DESC);
        oprot.writeI64(struct.leecoVid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsPay()) {
        oprot.writeFieldBegin(IS_PAY_FIELD_DESC);
        oprot.writeI32(struct.isPay);
        oprot.writeFieldEnd();
      }
      if (struct.payPlatforms != null) {
        if (struct.isSetPayPlatforms()) {
          oprot.writeFieldBegin(PAY_PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.payPlatforms.size()));
            for (com.lesports.api.common.Platform _iter32 : struct.payPlatforms)
            {
              oprot.writeI32(_iter32.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDrmFlag()) {
        oprot.writeFieldBegin(DRM_FLAG_FIELD_DESC);
        oprot.writeI32(struct.drmFlag);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDuration()) {
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI64(struct.duration);
        oprot.writeFieldEnd();
      }
      if (struct.videoImages != null) {
        if (struct.isSetVideoImages()) {
          oprot.writeFieldBegin(VIDEO_IMAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.videoImages.size()));
            for (Map.Entry<String, String> _iter33 : struct.videoImages.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              oprot.writeString(_iter33.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHasBigImage()) {
        oprot.writeFieldBegin(HAS_BIG_IMAGE_FIELD_DESC);
        oprot.writeBool(struct.hasBigImage);
        oprot.writeFieldEnd();
      }
      if (struct.commentId != null) {
        if (struct.isSetCommentId()) {
          oprot.writeFieldBegin(COMMENT_ID_FIELD_DESC);
          oprot.writeString(struct.commentId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.playLink != null) {
        if (struct.isSetPlayLink()) {
          oprot.writeFieldBegin(PLAY_LINK_FIELD_DESC);
          oprot.writeString(struct.playLink);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNewsTupleSchemeFactory implements SchemeFactory {
    public TNewsTupleScheme getScheme() {
      return new TNewsTupleScheme();
    }
  }

  private static class TNewsTupleScheme extends TupleScheme<TNews> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNews struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetIsJump()) {
        optionals.set(1);
      }
      if (struct.isSetJumpUrlType()) {
        optionals.set(2);
      }
      if (struct.isSetJumpUrl()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetShortName()) {
        optionals.set(5);
      }
      if (struct.isSetShareName()) {
        optionals.set(6);
      }
      if (struct.isSetDesc()) {
        optionals.set(7);
      }
      if (struct.isSetShareDesc()) {
        optionals.set(8);
      }
      if (struct.isSetChannel()) {
        optionals.set(9);
      }
      if (struct.isSetSubChannel()) {
        optionals.set(10);
      }
      if (struct.isSetStarLevel()) {
        optionals.set(11);
      }
      if (struct.isSetSource()) {
        optionals.set(12);
      }
      if (struct.isSetAuthor()) {
        optionals.set(13);
      }
      if (struct.isSetCid()) {
        optionals.set(14);
      }
      if (struct.isSetTags()) {
        optionals.set(15);
      }
      if (struct.isSetOnline()) {
        optionals.set(16);
      }
      if (struct.isSetType()) {
        optionals.set(17);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(18);
      }
      if (struct.isSetContent()) {
        optionals.set(19);
      }
      if (struct.isSetDeleted()) {
        optionals.set(20);
      }
      if (struct.isSetPublishAt()) {
        optionals.set(21);
      }
      if (struct.isSetStatements()) {
        optionals.set(22);
      }
      if (struct.isSetAllowComment()) {
        optionals.set(23);
      }
      if (struct.isSetCoverImage()) {
        optionals.set(24);
      }
      if (struct.isSetRelatedItems()) {
        optionals.set(25);
      }
      if (struct.isSetImages()) {
        optionals.set(26);
      }
      if (struct.isSetVid()) {
        optionals.set(27);
      }
      if (struct.isSetLeecoVid()) {
        optionals.set(28);
      }
      if (struct.isSetIsPay()) {
        optionals.set(29);
      }
      if (struct.isSetPayPlatforms()) {
        optionals.set(30);
      }
      if (struct.isSetDrmFlag()) {
        optionals.set(31);
      }
      if (struct.isSetDuration()) {
        optionals.set(32);
      }
      if (struct.isSetVideoImages()) {
        optionals.set(33);
      }
      if (struct.isSetHasBigImage()) {
        optionals.set(34);
      }
      if (struct.isSetCommentId()) {
        optionals.set(35);
      }
      if (struct.isSetPlayLink()) {
        optionals.set(36);
      }
      oprot.writeBitSet(optionals, 37);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetIsJump()) {
        oprot.writeBool(struct.isJump);
      }
      if (struct.isSetJumpUrlType()) {
        oprot.writeI32(struct.jumpUrlType.getValue());
      }
      if (struct.isSetJumpUrl()) {
        oprot.writeString(struct.jumpUrl);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetShortName()) {
        oprot.writeString(struct.shortName);
      }
      if (struct.isSetShareName()) {
        oprot.writeString(struct.shareName);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetShareDesc()) {
        oprot.writeString(struct.shareDesc);
      }
      if (struct.isSetChannel()) {
        struct.channel.write(oprot);
      }
      if (struct.isSetSubChannel()) {
        struct.subChannel.write(oprot);
      }
      if (struct.isSetStarLevel()) {
        oprot.writeI64(struct.starLevel);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter34 : struct.tags)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetOnline()) {
        oprot.writeI32(struct.online.getValue());
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (com.lesports.api.common.Platform _iter35 : struct.platforms)
          {
            oprot.writeI32(_iter35.getValue());
          }
        }
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
      if (struct.isSetPublishAt()) {
        oprot.writeString(struct.publishAt);
      }
      if (struct.isSetStatements()) {
        {
          oprot.writeI32(struct.statements.size());
          for (String _iter36 : struct.statements)
          {
            oprot.writeString(_iter36);
          }
        }
      }
      if (struct.isSetAllowComment()) {
        oprot.writeBool(struct.allowComment);
      }
      if (struct.isSetCoverImage()) {
        {
          oprot.writeI32(struct.coverImage.size());
          for (Map.Entry<String, String> _iter37 : struct.coverImage.entrySet())
          {
            oprot.writeString(_iter37.getKey());
            oprot.writeString(_iter37.getValue());
          }
        }
      }
      if (struct.isSetRelatedItems()) {
        {
          oprot.writeI32(struct.relatedItems.size());
          for (com.lesports.qmt.sbc.api.common.TRelatedItem _iter38 : struct.relatedItems)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (TNewsImage _iter39 : struct.images)
          {
            _iter39.write(oprot);
          }
        }
      }
      if (struct.isSetVid()) {
        oprot.writeI64(struct.vid);
      }
      if (struct.isSetLeecoVid()) {
        oprot.writeI64(struct.leecoVid);
      }
      if (struct.isSetIsPay()) {
        oprot.writeI32(struct.isPay);
      }
      if (struct.isSetPayPlatforms()) {
        {
          oprot.writeI32(struct.payPlatforms.size());
          for (com.lesports.api.common.Platform _iter40 : struct.payPlatforms)
          {
            oprot.writeI32(_iter40.getValue());
          }
        }
      }
      if (struct.isSetDrmFlag()) {
        oprot.writeI32(struct.drmFlag);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetVideoImages()) {
        {
          oprot.writeI32(struct.videoImages.size());
          for (Map.Entry<String, String> _iter41 : struct.videoImages.entrySet())
          {
            oprot.writeString(_iter41.getKey());
            oprot.writeString(_iter41.getValue());
          }
        }
      }
      if (struct.isSetHasBigImage()) {
        oprot.writeBool(struct.hasBigImage);
      }
      if (struct.isSetCommentId()) {
        oprot.writeString(struct.commentId);
      }
      if (struct.isSetPlayLink()) {
        oprot.writeString(struct.playLink);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNews struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(37);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isJump = iprot.readBool();
        struct.setIsJumpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jumpUrlType = com.lesports.qmt.sbc.api.dto.JumpUrlType.findByValue(iprot.readI32());
        struct.setJumpUrlTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jumpUrl = iprot.readString();
        struct.setJumpUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.shortName = iprot.readString();
        struct.setShortNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shareName = iprot.readString();
        struct.setShareNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shareDesc = iprot.readString();
        struct.setShareDescIsSet(true);
      }
      if (incoming.get(9)) {
        struct.channel = new com.lesports.api.common.Channel();
        struct.channel.read(iprot);
        struct.setChannelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.subChannel = new com.lesports.api.common.Channel();
        struct.subChannel.read(iprot);
        struct.setSubChannelIsSet(true);
      }
      if (incoming.get(11)) {
        struct.starLevel = iprot.readI64();
        struct.setStarLevelIsSet(true);
      }
      if (incoming.get(12)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TSet _set42 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>(2*_set42.size);
          com.lesports.qmt.config.api.dto.TTag _elem43;
          for (int _i44 = 0; _i44 < _set42.size; ++_i44)
          {
            _elem43 = new com.lesports.qmt.config.api.dto.TTag();
            _elem43.read(iprot);
            struct.tags.add(_elem43);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.online = com.lesports.api.common.PublishStatus.findByValue(iprot.readI32());
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(17)) {
        struct.type = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set45.size);
          com.lesports.api.common.Platform _elem46;
          for (int _i47 = 0; _i47 < _set45.size; ++_i47)
          {
            _elem46 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.platforms.add(_elem46);
          }
        }
        struct.setPlatformsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(20)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
      if (incoming.get(21)) {
        struct.publishAt = iprot.readString();
        struct.setPublishAtIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.statements = new ArrayList<String>(_list48.size);
          String _elem49;
          for (int _i50 = 0; _i50 < _list48.size; ++_i50)
          {
            _elem49 = iprot.readString();
            struct.statements.add(_elem49);
          }
        }
        struct.setStatementsIsSet(true);
      }
      if (incoming.get(23)) {
        struct.allowComment = iprot.readBool();
        struct.setAllowCommentIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TMap _map51 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.coverImage = new HashMap<String,String>(2*_map51.size);
          String _key52;
          String _val53;
          for (int _i54 = 0; _i54 < _map51.size; ++_i54)
          {
            _key52 = iprot.readString();
            _val53 = iprot.readString();
            struct.coverImage.put(_key52, _val53);
          }
        }
        struct.setCoverImageIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relatedItems = new ArrayList<com.lesports.qmt.sbc.api.common.TRelatedItem>(_list55.size);
          com.lesports.qmt.sbc.api.common.TRelatedItem _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new com.lesports.qmt.sbc.api.common.TRelatedItem();
            _elem56.read(iprot);
            struct.relatedItems.add(_elem56);
          }
        }
        struct.setRelatedItemsIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.images = new ArrayList<TNewsImage>(_list58.size);
          TNewsImage _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new TNewsImage();
            _elem59.read(iprot);
            struct.images.add(_elem59);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(27)) {
        struct.vid = iprot.readI64();
        struct.setVidIsSet(true);
      }
      if (incoming.get(28)) {
        struct.leecoVid = iprot.readI64();
        struct.setLeecoVidIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isPay = iprot.readI32();
        struct.setIsPayIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.payPlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set61.size);
          com.lesports.api.common.Platform _elem62;
          for (int _i63 = 0; _i63 < _set61.size; ++_i63)
          {
            _elem62 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.payPlatforms.add(_elem62);
          }
        }
        struct.setPayPlatformsIsSet(true);
      }
      if (incoming.get(31)) {
        struct.drmFlag = iprot.readI32();
        struct.setDrmFlagIsSet(true);
      }
      if (incoming.get(32)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TMap _map64 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.videoImages = new HashMap<String,String>(2*_map64.size);
          String _key65;
          String _val66;
          for (int _i67 = 0; _i67 < _map64.size; ++_i67)
          {
            _key65 = iprot.readString();
            _val66 = iprot.readString();
            struct.videoImages.put(_key65, _val66);
          }
        }
        struct.setVideoImagesIsSet(true);
      }
      if (incoming.get(34)) {
        struct.hasBigImage = iprot.readBool();
        struct.setHasBigImageIsSet(true);
      }
      if (incoming.get(35)) {
        struct.commentId = iprot.readString();
        struct.setCommentIdIsSet(true);
      }
      if (incoming.get(36)) {
        struct.playLink = iprot.readString();
        struct.setPlayLinkIsSet(true);
      }
    }
  }

}

