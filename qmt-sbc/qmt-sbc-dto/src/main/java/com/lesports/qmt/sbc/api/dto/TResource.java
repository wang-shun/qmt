/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-27")
public class TResource implements org.apache.thrift.TBase<TResource, TResource._Fields>, java.io.Serializable, Cloneable, Comparable<TResource> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TResource");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField LINK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("linkUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField CHILD_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("childIds", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ONLINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineId", org.apache.thrift.protocol.TType.I64, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TResourceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TResourceTupleSchemeFactory());
  }

  private long id; // required
  private ResourceDataType type; // optional
  private boolean group; // optional
  private String name; // optional
  private String shortName; // optional
  private String desc; // optional
  private String imageUrl; // optional
  private ResourceUpdateType updateType; // optional
  private List<TResourceLink> links; // optional
  private String linkUrl; // optional
  private List<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private List<Long> childIds; // optional
  private int version; // optional
  private long onlineId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TYPE((short)2, "type"),
    GROUP((short)3, "group"),
    NAME((short)4, "name"),
    SHORT_NAME((short)5, "shortName"),
    DESC((short)6, "desc"),
    IMAGE_URL((short)7, "imageUrl"),
    UPDATE_TYPE((short)8, "updateType"),
    LINKS((short)9, "links"),
    LINK_URL((short)10, "linkUrl"),
    TAGS((short)11, "tags"),
    CHILD_IDS((short)12, "childIds"),
    VERSION((short)13, "version"),
    ONLINE_ID((short)14, "onlineId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TYPE
          return TYPE;
        case 3: // GROUP
          return GROUP;
        case 4: // NAME
          return NAME;
        case 5: // SHORT_NAME
          return SHORT_NAME;
        case 6: // DESC
          return DESC;
        case 7: // IMAGE_URL
          return IMAGE_URL;
        case 8: // UPDATE_TYPE
          return UPDATE_TYPE;
        case 9: // LINKS
          return LINKS;
        case 10: // LINK_URL
          return LINK_URL;
        case 11: // TAGS
          return TAGS;
        case 12: // CHILD_IDS
          return CHILD_IDS;
        case 13: // VERSION
          return VERSION;
        case 14: // ONLINE_ID
          return ONLINE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GROUP_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __ONLINEID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TYPE,_Fields.GROUP,_Fields.NAME,_Fields.SHORT_NAME,_Fields.DESC,_Fields.IMAGE_URL,_Fields.UPDATE_TYPE,_Fields.LINKS,_Fields.LINK_URL,_Fields.TAGS,_Fields.CHILD_IDS,_Fields.VERSION,_Fields.ONLINE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "ResourceDataType")));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("updateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "ResourceUpdateType")));
    tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceLink.class))));
    tmpMap.put(_Fields.LINK_URL, new org.apache.thrift.meta_data.FieldMetaData("linkUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.CHILD_IDS, new org.apache.thrift.meta_data.FieldMetaData("childIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_ID, new org.apache.thrift.meta_data.FieldMetaData("onlineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TResource.class, metaDataMap);
  }

  public TResource() {
  }

  public TResource(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TResource(TResource other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.group = other.group;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.isSetUpdateType()) {
      this.updateType = other.updateType;
    }
    if (other.isSetLinks()) {
      List<TResourceLink> __this__links = new ArrayList<TResourceLink>(other.links.size());
      for (TResourceLink other_element : other.links) {
        __this__links.add(new TResourceLink(other_element));
      }
      this.links = __this__links;
    }
    if (other.isSetLinkUrl()) {
      this.linkUrl = other.linkUrl;
    }
    if (other.isSetTags()) {
      List<com.lesports.qmt.config.api.dto.TTag> __this__tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetChildIds()) {
      List<Long> __this__childIds = new ArrayList<Long>(other.childIds);
      this.childIds = __this__childIds;
    }
    this.version = other.version;
    this.onlineId = other.onlineId;
  }

  public TResource deepCopy() {
    return new TResource(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.type = null;
    setGroupIsSet(false);
    this.group = false;
    this.name = null;
    this.shortName = null;
    this.desc = null;
    this.imageUrl = null;
    this.updateType = null;
    this.links = null;
    this.linkUrl = null;
    this.tags = null;
    this.childIds = null;
    setVersionIsSet(false);
    this.version = 0;
    setOnlineIdIsSet(false);
    this.onlineId = 0;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public ResourceDataType getType() {
    return this.type;
  }

  public void setType(ResourceDataType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public boolean isGroup() {
    return this.group;
  }

  public void setGroup(boolean group) {
    this.group = group;
    setGroupIsSet(true);
  }

  public void unsetGroup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ISSET_ID);
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUP_ISSET_ID);
  }

  public void setGroupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public ResourceUpdateType getUpdateType() {
    return this.updateType;
  }

  public void setUpdateType(ResourceUpdateType updateType) {
    this.updateType = updateType;
  }

  public void unsetUpdateType() {
    this.updateType = null;
  }

  /** Returns true if field updateType is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateType() {
    return this.updateType != null;
  }

  public void setUpdateTypeIsSet(boolean value) {
    if (!value) {
      this.updateType = null;
    }
  }

  public int getLinksSize() {
    return (this.links == null) ? 0 : this.links.size();
  }

  public java.util.Iterator<TResourceLink> getLinksIterator() {
    return (this.links == null) ? null : this.links.iterator();
  }

  public void addToLinks(TResourceLink elem) {
    if (this.links == null) {
      this.links = new ArrayList<TResourceLink>();
    }
    this.links.add(elem);
  }

  public List<TResourceLink> getLinks() {
    return this.links;
  }

  public void setLinks(List<TResourceLink> links) {
    this.links = links;
  }

  public void unsetLinks() {
    this.links = null;
  }

  /** Returns true if field links is set (has been assigned a value) and false otherwise */
  public boolean isSetLinks() {
    return this.links != null;
  }

  public void setLinksIsSet(boolean value) {
    if (!value) {
      this.links = null;
    }
  }

  public String getLinkUrl() {
    return this.linkUrl;
  }

  public void setLinkUrl(String linkUrl) {
    this.linkUrl = linkUrl;
  }

  public void unsetLinkUrl() {
    this.linkUrl = null;
  }

  /** Returns true if field linkUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkUrl() {
    return this.linkUrl != null;
  }

  public void setLinkUrlIsSet(boolean value) {
    if (!value) {
      this.linkUrl = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public List<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getChildIdsSize() {
    return (this.childIds == null) ? 0 : this.childIds.size();
  }

  public java.util.Iterator<Long> getChildIdsIterator() {
    return (this.childIds == null) ? null : this.childIds.iterator();
  }

  public void addToChildIds(long elem) {
    if (this.childIds == null) {
      this.childIds = new ArrayList<Long>();
    }
    this.childIds.add(elem);
  }

  public List<Long> getChildIds() {
    return this.childIds;
  }

  public void setChildIds(List<Long> childIds) {
    this.childIds = childIds;
  }

  public void unsetChildIds() {
    this.childIds = null;
  }

  /** Returns true if field childIds is set (has been assigned a value) and false otherwise */
  public boolean isSetChildIds() {
    return this.childIds != null;
  }

  public void setChildIdsIsSet(boolean value) {
    if (!value) {
      this.childIds = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getOnlineId() {
    return this.onlineId;
  }

  public void setOnlineId(long onlineId) {
    this.onlineId = onlineId;
    setOnlineIdIsSet(true);
  }

  public void unsetOnlineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINEID_ISSET_ID);
  }

  /** Returns true if field onlineId is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineId() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINEID_ISSET_ID);
  }

  public void setOnlineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ResourceDataType)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((Boolean)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case UPDATE_TYPE:
      if (value == null) {
        unsetUpdateType();
      } else {
        setUpdateType((ResourceUpdateType)value);
      }
      break;

    case LINKS:
      if (value == null) {
        unsetLinks();
      } else {
        setLinks((List<TResourceLink>)value);
      }
      break;

    case LINK_URL:
      if (value == null) {
        unsetLinkUrl();
      } else {
        setLinkUrl((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case CHILD_IDS:
      if (value == null) {
        unsetChildIds();
      } else {
        setChildIds((List<Long>)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case ONLINE_ID:
      if (value == null) {
        unsetOnlineId();
      } else {
        setOnlineId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TYPE:
      return getType();

    case GROUP:
      return Boolean.valueOf(isGroup());

    case NAME:
      return getName();

    case SHORT_NAME:
      return getShortName();

    case DESC:
      return getDesc();

    case IMAGE_URL:
      return getImageUrl();

    case UPDATE_TYPE:
      return getUpdateType();

    case LINKS:
      return getLinks();

    case LINK_URL:
      return getLinkUrl();

    case TAGS:
      return getTags();

    case CHILD_IDS:
      return getChildIds();

    case VERSION:
      return Integer.valueOf(getVersion());

    case ONLINE_ID:
      return Long.valueOf(getOnlineId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TYPE:
      return isSetType();
    case GROUP:
      return isSetGroup();
    case NAME:
      return isSetName();
    case SHORT_NAME:
      return isSetShortName();
    case DESC:
      return isSetDesc();
    case IMAGE_URL:
      return isSetImageUrl();
    case UPDATE_TYPE:
      return isSetUpdateType();
    case LINKS:
      return isSetLinks();
    case LINK_URL:
      return isSetLinkUrl();
    case TAGS:
      return isSetTags();
    case CHILD_IDS:
      return isSetChildIds();
    case VERSION:
      return isSetVersion();
    case ONLINE_ID:
      return isSetOnlineId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TResource)
      return this.equals((TResource)that);
    return false;
  }

  public boolean equals(TResource that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (this.group != that.group)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_updateType = true && this.isSetUpdateType();
    boolean that_present_updateType = true && that.isSetUpdateType();
    if (this_present_updateType || that_present_updateType) {
      if (!(this_present_updateType && that_present_updateType))
        return false;
      if (!this.updateType.equals(that.updateType))
        return false;
    }

    boolean this_present_links = true && this.isSetLinks();
    boolean that_present_links = true && that.isSetLinks();
    if (this_present_links || that_present_links) {
      if (!(this_present_links && that_present_links))
        return false;
      if (!this.links.equals(that.links))
        return false;
    }

    boolean this_present_linkUrl = true && this.isSetLinkUrl();
    boolean that_present_linkUrl = true && that.isSetLinkUrl();
    if (this_present_linkUrl || that_present_linkUrl) {
      if (!(this_present_linkUrl && that_present_linkUrl))
        return false;
      if (!this.linkUrl.equals(that.linkUrl))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_childIds = true && this.isSetChildIds();
    boolean that_present_childIds = true && that.isSetChildIds();
    if (this_present_childIds || that_present_childIds) {
      if (!(this_present_childIds && that_present_childIds))
        return false;
      if (!this.childIds.equals(that.childIds))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_onlineId = true && this.isSetOnlineId();
    boolean that_present_onlineId = true && that.isSetOnlineId();
    if (this_present_onlineId || that_present_onlineId) {
      if (!(this_present_onlineId && that_present_onlineId))
        return false;
      if (this.onlineId != that.onlineId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_shortName = true && (isSetShortName());
    list.add(present_shortName);
    if (present_shortName)
      list.add(shortName);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_updateType = true && (isSetUpdateType());
    list.add(present_updateType);
    if (present_updateType)
      list.add(updateType.getValue());

    boolean present_links = true && (isSetLinks());
    list.add(present_links);
    if (present_links)
      list.add(links);

    boolean present_linkUrl = true && (isSetLinkUrl());
    list.add(present_linkUrl);
    if (present_linkUrl)
      list.add(linkUrl);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_childIds = true && (isSetChildIds());
    list.add(present_childIds);
    if (present_childIds)
      list.add(childIds);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_onlineId = true && (isSetOnlineId());
    list.add(present_onlineId);
    if (present_onlineId)
      list.add(onlineId);

    return list.hashCode();
  }

  @Override
  public int compareTo(TResource other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(other.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, other.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateType()).compareTo(other.isSetUpdateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateType, other.updateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkUrl()).compareTo(other.isSetLinkUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkUrl, other.linkUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildIds()).compareTo(other.isSetChildIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childIds, other.childIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineId()).compareTo(other.isSetOnlineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineId, other.onlineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TResource(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      sb.append(this.group);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetShortName()) {
      if (!first) sb.append(", ");
      sb.append("shortName:");
      if (this.shortName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortName);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetUpdateType()) {
      if (!first) sb.append(", ");
      sb.append("updateType:");
      if (this.updateType == null) {
        sb.append("null");
      } else {
        sb.append(this.updateType);
      }
      first = false;
    }
    if (isSetLinks()) {
      if (!first) sb.append(", ");
      sb.append("links:");
      if (this.links == null) {
        sb.append("null");
      } else {
        sb.append(this.links);
      }
      first = false;
    }
    if (isSetLinkUrl()) {
      if (!first) sb.append(", ");
      sb.append("linkUrl:");
      if (this.linkUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.linkUrl);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetChildIds()) {
      if (!first) sb.append(", ");
      sb.append("childIds:");
      if (this.childIds == null) {
        sb.append("null");
      } else {
        sb.append(this.childIds);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetOnlineId()) {
      if (!first) sb.append(", ");
      sb.append("onlineId:");
      sb.append(this.onlineId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TResourceStandardSchemeFactory implements SchemeFactory {
    public TResourceStandardScheme getScheme() {
      return new TResourceStandardScheme();
    }
  }

  private static class TResourceStandardScheme extends StandardScheme<TResource> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TResource struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbc.api.dto.ResourceDataType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.group = iprot.readBool();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortName = iprot.readString();
              struct.setShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateType = com.lesports.qmt.sbc.api.dto.ResourceUpdateType.findByValue(iprot.readI32());
              struct.setUpdateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.links = new ArrayList<TResourceLink>(_list0.size);
                TResourceLink _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TResourceLink();
                  _elem1.read(iprot);
                  struct.links.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LINK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkUrl = iprot.readString();
              struct.setLinkUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list3.size);
                com.lesports.qmt.config.api.dto.TTag _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem4.read(iprot);
                  struct.tags.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CHILD_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.childIds = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.childIds.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setChildIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ONLINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.onlineId = iprot.readI64();
              struct.setOnlineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TResource struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGroup()) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeBool(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortName != null) {
        if (struct.isSetShortName()) {
          oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
          oprot.writeString(struct.shortName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateType != null) {
        if (struct.isSetUpdateType()) {
          oprot.writeFieldBegin(UPDATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.updateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.links != null) {
        if (struct.isSetLinks()) {
          oprot.writeFieldBegin(LINKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.links.size()));
            for (TResourceLink _iter9 : struct.links)
            {
              _iter9.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkUrl != null) {
        if (struct.isSetLinkUrl()) {
          oprot.writeFieldBegin(LINK_URL_FIELD_DESC);
          oprot.writeString(struct.linkUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter10 : struct.tags)
            {
              _iter10.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.childIds != null) {
        if (struct.isSetChildIds()) {
          oprot.writeFieldBegin(CHILD_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.childIds.size()));
            for (long _iter11 : struct.childIds)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnlineId()) {
        oprot.writeFieldBegin(ONLINE_ID_FIELD_DESC);
        oprot.writeI64(struct.onlineId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TResourceTupleSchemeFactory implements SchemeFactory {
    public TResourceTupleScheme getScheme() {
      return new TResourceTupleScheme();
    }
  }

  private static class TResourceTupleScheme extends TupleScheme<TResource> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TResource struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetGroup()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetShortName()) {
        optionals.set(4);
      }
      if (struct.isSetDesc()) {
        optionals.set(5);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateType()) {
        optionals.set(7);
      }
      if (struct.isSetLinks()) {
        optionals.set(8);
      }
      if (struct.isSetLinkUrl()) {
        optionals.set(9);
      }
      if (struct.isSetTags()) {
        optionals.set(10);
      }
      if (struct.isSetChildIds()) {
        optionals.set(11);
      }
      if (struct.isSetVersion()) {
        optionals.set(12);
      }
      if (struct.isSetOnlineId()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetGroup()) {
        oprot.writeBool(struct.group);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetShortName()) {
        oprot.writeString(struct.shortName);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetUpdateType()) {
        oprot.writeI32(struct.updateType.getValue());
      }
      if (struct.isSetLinks()) {
        {
          oprot.writeI32(struct.links.size());
          for (TResourceLink _iter12 : struct.links)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetLinkUrl()) {
        oprot.writeString(struct.linkUrl);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter13 : struct.tags)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetChildIds()) {
        {
          oprot.writeI32(struct.childIds.size());
          for (long _iter14 : struct.childIds)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetOnlineId()) {
        oprot.writeI64(struct.onlineId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TResource struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = com.lesports.qmt.sbc.api.dto.ResourceDataType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.group = iprot.readBool();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shortName = iprot.readString();
        struct.setShortNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(6)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.updateType = com.lesports.qmt.sbc.api.dto.ResourceUpdateType.findByValue(iprot.readI32());
        struct.setUpdateTypeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.links = new ArrayList<TResourceLink>(_list15.size);
          TResourceLink _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new TResourceLink();
            _elem16.read(iprot);
            struct.links.add(_elem16);
          }
        }
        struct.setLinksIsSet(true);
      }
      if (incoming.get(9)) {
        struct.linkUrl = iprot.readString();
        struct.setLinkUrlIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list18.size);
          com.lesports.qmt.config.api.dto.TTag _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new com.lesports.qmt.config.api.dto.TTag();
            _elem19.read(iprot);
            struct.tags.add(_elem19);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.childIds = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.childIds.add(_elem22);
          }
        }
        struct.setChildIdsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.onlineId = iprot.readI64();
        struct.setOnlineIdIsSet(true);
      }
    }
  }

}

