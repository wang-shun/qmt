/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TSimpleVideo implements org.apache.thrift.TBase<TSimpleVideo, TSimpleVideo._Fields>, java.io.Serializable, Cloneable, Comparable<TSimpleVideo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSimpleVideo");

  private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("images", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.SET, (short)8);
  private static final org.apache.thrift.protocol.TField PAY_PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("payPlatforms", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField IS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPay", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSimpleVideoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSimpleVideoTupleSchemeFactory());
  }

  private long vid; // required
  private String name; // optional
  private com.lesports.qmt.sbc.api.common.VideoContentType type; // optional
  private String imageUrl; // optional
  private long duration; // optional
  private Map<String,String> images; // optional
  private String createTime; // optional
  private Set<com.lesports.api.common.Platform> platforms; // optional
  private Set<com.lesports.api.common.Platform> payPlatforms; // optional
  private int isPay; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VID((short)1, "vid"),
    NAME((short)2, "name"),
    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.VideoContentType
     */
    TYPE((short)3, "type"),
    IMAGE_URL((short)4, "imageUrl"),
    DURATION((short)5, "duration"),
    IMAGES((short)6, "images"),
    CREATE_TIME((short)7, "createTime"),
    PLATFORMS((short)8, "platforms"),
    PAY_PLATFORMS((short)9, "payPlatforms"),
    IS_PAY((short)10, "isPay");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VID
          return VID;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // IMAGE_URL
          return IMAGE_URL;
        case 5: // DURATION
          return DURATION;
        case 6: // IMAGES
          return IMAGES;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // PLATFORMS
          return PLATFORMS;
        case 9: // PAY_PLATFORMS
          return PAY_PLATFORMS;
        case 10: // IS_PAY
          return IS_PAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VID_ISSET_ID = 0;
  private static final int __DURATION_ISSET_ID = 1;
  private static final int __ISPAY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.TYPE,_Fields.IMAGE_URL,_Fields.DURATION,_Fields.IMAGES,_Fields.CREATE_TIME,_Fields.PLATFORMS,_Fields.PAY_PLATFORMS,_Fields.IS_PAY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.VideoContentType.class)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IMAGES, new org.apache.thrift.meta_data.FieldMetaData("images", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.PAY_PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("payPlatforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.IS_PAY, new org.apache.thrift.meta_data.FieldMetaData("isPay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSimpleVideo.class, metaDataMap);
  }

  public TSimpleVideo() {
  }

  public TSimpleVideo(
    long vid)
  {
    this();
    this.vid = vid;
    setVidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSimpleVideo(TSimpleVideo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.vid = other.vid;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    this.duration = other.duration;
    if (other.isSetImages()) {
      Map<String,String> __this__images = new HashMap<String,String>(other.images);
      this.images = __this__images;
    }
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    if (other.isSetPlatforms()) {
      Set<com.lesports.api.common.Platform> __this__platforms = new HashSet<com.lesports.api.common.Platform>(other.platforms.size());
      for (com.lesports.api.common.Platform other_element : other.platforms) {
        __this__platforms.add(other_element);
      }
      this.platforms = __this__platforms;
    }
    if (other.isSetPayPlatforms()) {
      Set<com.lesports.api.common.Platform> __this__payPlatforms = new HashSet<com.lesports.api.common.Platform>(other.payPlatforms.size());
      for (com.lesports.api.common.Platform other_element : other.payPlatforms) {
        __this__payPlatforms.add(other_element);
      }
      this.payPlatforms = __this__payPlatforms;
    }
    this.isPay = other.isPay;
  }

  public TSimpleVideo deepCopy() {
    return new TSimpleVideo(this);
  }

  @Override
  public void clear() {
    setVidIsSet(false);
    this.vid = 0;
    this.name = null;
    this.type = null;
    this.imageUrl = null;
    setDurationIsSet(false);
    this.duration = 0;
    this.images = null;
    this.createTime = null;
    this.platforms = null;
    this.payPlatforms = null;
    setIsPayIsSet(false);
    this.isPay = 0;
  }

  public long getVid() {
    return this.vid;
  }

  public void setVid(long vid) {
    this.vid = vid;
    setVidIsSet(true);
  }

  public void unsetVid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
  }

  /** Returns true if field vid is set (has been assigned a value) and false otherwise */
  public boolean isSetVid() {
    return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
  }

  public void setVidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.VideoContentType
   */
  public com.lesports.qmt.sbc.api.common.VideoContentType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.lesports.qmt.sbc.api.common.VideoContentType
   */
  public void setType(com.lesports.qmt.sbc.api.common.VideoContentType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public long getDuration() {
    return this.duration;
  }

  public void setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getImagesSize() {
    return (this.images == null) ? 0 : this.images.size();
  }

  public void putToImages(String key, String val) {
    if (this.images == null) {
      this.images = new HashMap<String,String>();
    }
    this.images.put(key, val);
  }

  public Map<String,String> getImages() {
    return this.images;
  }

  public void setImages(Map<String,String> images) {
    this.images = images;
  }

  public void unsetImages() {
    this.images = null;
  }

  /** Returns true if field images is set (has been assigned a value) and false otherwise */
  public boolean isSetImages() {
    return this.images != null;
  }

  public void setImagesIsSet(boolean value) {
    if (!value) {
      this.images = null;
    }
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(com.lesports.api.common.Platform elem) {
    if (this.platforms == null) {
      this.platforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.platforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getPlatforms() {
    return this.platforms;
  }

  public void setPlatforms(Set<com.lesports.api.common.Platform> platforms) {
    this.platforms = platforms;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public int getPayPlatformsSize() {
    return (this.payPlatforms == null) ? 0 : this.payPlatforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getPayPlatformsIterator() {
    return (this.payPlatforms == null) ? null : this.payPlatforms.iterator();
  }

  public void addToPayPlatforms(com.lesports.api.common.Platform elem) {
    if (this.payPlatforms == null) {
      this.payPlatforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.payPlatforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getPayPlatforms() {
    return this.payPlatforms;
  }

  public void setPayPlatforms(Set<com.lesports.api.common.Platform> payPlatforms) {
    this.payPlatforms = payPlatforms;
  }

  public void unsetPayPlatforms() {
    this.payPlatforms = null;
  }

  /** Returns true if field payPlatforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPayPlatforms() {
    return this.payPlatforms != null;
  }

  public void setPayPlatformsIsSet(boolean value) {
    if (!value) {
      this.payPlatforms = null;
    }
  }

  public int getIsPay() {
    return this.isPay;
  }

  public void setIsPay(int isPay) {
    this.isPay = isPay;
    setIsPayIsSet(true);
  }

  public void unsetIsPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  /** Returns true if field isPay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPAY_ISSET_ID);
  }

  public void setIsPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPAY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VID:
      if (value == null) {
        unsetVid();
      } else {
        setVid((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.lesports.qmt.sbc.api.common.VideoContentType)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case IMAGES:
      if (value == null) {
        unsetImages();
      } else {
        setImages((Map<String,String>)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case PAY_PLATFORMS:
      if (value == null) {
        unsetPayPlatforms();
      } else {
        setPayPlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case IS_PAY:
      if (value == null) {
        unsetIsPay();
      } else {
        setIsPay((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VID:
      return Long.valueOf(getVid());

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case IMAGE_URL:
      return getImageUrl();

    case DURATION:
      return Long.valueOf(getDuration());

    case IMAGES:
      return getImages();

    case CREATE_TIME:
      return getCreateTime();

    case PLATFORMS:
      return getPlatforms();

    case PAY_PLATFORMS:
      return getPayPlatforms();

    case IS_PAY:
      return Integer.valueOf(getIsPay());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VID:
      return isSetVid();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case IMAGE_URL:
      return isSetImageUrl();
    case DURATION:
      return isSetDuration();
    case IMAGES:
      return isSetImages();
    case CREATE_TIME:
      return isSetCreateTime();
    case PLATFORMS:
      return isSetPlatforms();
    case PAY_PLATFORMS:
      return isSetPayPlatforms();
    case IS_PAY:
      return isSetIsPay();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSimpleVideo)
      return this.equals((TSimpleVideo)that);
    return false;
  }

  public boolean equals(TSimpleVideo that) {
    if (that == null)
      return false;

    boolean this_present_vid = true;
    boolean that_present_vid = true;
    if (this_present_vid || that_present_vid) {
      if (!(this_present_vid && that_present_vid))
        return false;
      if (this.vid != that.vid)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_duration = true && this.isSetDuration();
    boolean that_present_duration = true && that.isSetDuration();
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_images = true && this.isSetImages();
    boolean that_present_images = true && that.isSetImages();
    if (this_present_images || that_present_images) {
      if (!(this_present_images && that_present_images))
        return false;
      if (!this.images.equals(that.images))
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    boolean this_present_payPlatforms = true && this.isSetPayPlatforms();
    boolean that_present_payPlatforms = true && that.isSetPayPlatforms();
    if (this_present_payPlatforms || that_present_payPlatforms) {
      if (!(this_present_payPlatforms && that_present_payPlatforms))
        return false;
      if (!this.payPlatforms.equals(that.payPlatforms))
        return false;
    }

    boolean this_present_isPay = true && this.isSetIsPay();
    boolean that_present_isPay = true && that.isSetIsPay();
    if (this_present_isPay || that_present_isPay) {
      if (!(this_present_isPay && that_present_isPay))
        return false;
      if (this.isPay != that.isPay)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_vid = true;
    list.add(present_vid);
    if (present_vid)
      list.add(vid);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_duration = true && (isSetDuration());
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_images = true && (isSetImages());
    list.add(present_images);
    if (present_images)
      list.add(images);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_platforms = true && (isSetPlatforms());
    list.add(present_platforms);
    if (present_platforms)
      list.add(platforms);

    boolean present_payPlatforms = true && (isSetPayPlatforms());
    list.add(present_payPlatforms);
    if (present_payPlatforms)
      list.add(payPlatforms);

    boolean present_isPay = true && (isSetIsPay());
    list.add(present_isPay);
    if (present_isPay)
      list.add(isPay);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSimpleVideo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImages()).compareTo(other.isSetImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.images, other.images);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayPlatforms()).compareTo(other.isSetPayPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payPlatforms, other.payPlatforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPay()).compareTo(other.isSetIsPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPay, other.isPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSimpleVideo(");
    boolean first = true;

    sb.append("vid:");
    sb.append(this.vid);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetDuration()) {
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
    }
    if (isSetImages()) {
      if (!first) sb.append(", ");
      sb.append("images:");
      if (this.images == null) {
        sb.append("null");
      } else {
        sb.append(this.images);
      }
      first = false;
    }
    if (isSetCreateTime()) {
      if (!first) sb.append(", ");
      sb.append("createTime:");
      if (this.createTime == null) {
        sb.append("null");
      } else {
        sb.append(this.createTime);
      }
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    if (isSetPayPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("payPlatforms:");
      if (this.payPlatforms == null) {
        sb.append("null");
      } else {
        sb.append(this.payPlatforms);
      }
      first = false;
    }
    if (isSetIsPay()) {
      if (!first) sb.append(", ");
      sb.append("isPay:");
      sb.append(this.isPay);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSimpleVideoStandardSchemeFactory implements SchemeFactory {
    public TSimpleVideoStandardScheme getScheme() {
      return new TSimpleVideoStandardScheme();
    }
  }

  private static class TSimpleVideoStandardScheme extends StandardScheme<TSimpleVideo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSimpleVideo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vid = iprot.readI64();
              struct.setVidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.sbc.api.common.VideoContentType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.images = new HashMap<String,String>(2*_map26.size);
                String _key27;
                String _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readString();
                  _val28 = iprot.readString();
                  struct.images.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set30.size);
                com.lesports.api.common.Platform _elem31;
                for (int _i32 = 0; _i32 < _set30.size; ++_i32)
                {
                  _elem31 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.platforms.add(_elem31);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAY_PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set33 = iprot.readSetBegin();
                struct.payPlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set33.size);
                com.lesports.api.common.Platform _elem34;
                for (int _i35 = 0; _i35 < _set33.size; ++_i35)
                {
                  _elem34 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.payPlatforms.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setPayPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPay = iprot.readI32();
              struct.setIsPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSimpleVideo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VID_FIELD_DESC);
      oprot.writeI64(struct.vid);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDuration()) {
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI64(struct.duration);
        oprot.writeFieldEnd();
      }
      if (struct.images != null) {
        if (struct.isSetImages()) {
          oprot.writeFieldBegin(IMAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.images.size()));
            for (Map.Entry<String, String> _iter36 : struct.images.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              oprot.writeString(_iter36.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.createTime != null) {
        if (struct.isSetCreateTime()) {
          oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
          oprot.writeString(struct.createTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.platforms.size()));
            for (com.lesports.api.common.Platform _iter37 : struct.platforms)
            {
              oprot.writeI32(_iter37.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.payPlatforms != null) {
        if (struct.isSetPayPlatforms()) {
          oprot.writeFieldBegin(PAY_PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.payPlatforms.size()));
            for (com.lesports.api.common.Platform _iter38 : struct.payPlatforms)
            {
              oprot.writeI32(_iter38.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsPay()) {
        oprot.writeFieldBegin(IS_PAY_FIELD_DESC);
        oprot.writeI32(struct.isPay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSimpleVideoTupleSchemeFactory implements SchemeFactory {
    public TSimpleVideoTupleScheme getScheme() {
      return new TSimpleVideoTupleScheme();
    }
  }

  private static class TSimpleVideoTupleScheme extends TupleScheme<TSimpleVideo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSimpleVideo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVid()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(3);
      }
      if (struct.isSetDuration()) {
        optionals.set(4);
      }
      if (struct.isSetImages()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(7);
      }
      if (struct.isSetPayPlatforms()) {
        optionals.set(8);
      }
      if (struct.isSetIsPay()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetVid()) {
        oprot.writeI64(struct.vid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetDuration()) {
        oprot.writeI64(struct.duration);
      }
      if (struct.isSetImages()) {
        {
          oprot.writeI32(struct.images.size());
          for (Map.Entry<String, String> _iter39 : struct.images.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            oprot.writeString(_iter39.getValue());
          }
        }
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (com.lesports.api.common.Platform _iter40 : struct.platforms)
          {
            oprot.writeI32(_iter40.getValue());
          }
        }
      }
      if (struct.isSetPayPlatforms()) {
        {
          oprot.writeI32(struct.payPlatforms.size());
          for (com.lesports.api.common.Platform _iter41 : struct.payPlatforms)
          {
            oprot.writeI32(_iter41.getValue());
          }
        }
      }
      if (struct.isSetIsPay()) {
        oprot.writeI32(struct.isPay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSimpleVideo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.vid = iprot.readI64();
        struct.setVidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = com.lesports.qmt.sbc.api.common.VideoContentType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.duration = iprot.readI64();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.images = new HashMap<String,String>(2*_map42.size);
          String _key43;
          String _val44;
          for (int _i45 = 0; _i45 < _map42.size; ++_i45)
          {
            _key43 = iprot.readString();
            _val44 = iprot.readString();
            struct.images.put(_key43, _val44);
          }
        }
        struct.setImagesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set46 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set46.size);
          com.lesports.api.common.Platform _elem47;
          for (int _i48 = 0; _i48 < _set46.size; ++_i48)
          {
            _elem47 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.platforms.add(_elem47);
          }
        }
        struct.setPlatformsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set49 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.payPlatforms = new HashSet<com.lesports.api.common.Platform>(2*_set49.size);
          com.lesports.api.common.Platform _elem50;
          for (int _i51 = 0; _i51 < _set49.size; ++_i51)
          {
            _elem50 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.payPlatforms.add(_elem50);
          }
        }
        struct.setPayPlatformsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isPay = iprot.readI32();
        struct.setIsPayIsSet(true);
      }
    }
  }

}

