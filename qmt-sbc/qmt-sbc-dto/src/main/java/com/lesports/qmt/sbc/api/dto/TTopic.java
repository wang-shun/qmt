/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.dto;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 专题
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-14")
public class TTopic implements org.apache.thrift.TBase<TTopic, TTopic._Fields>, java.io.Serializable, Cloneable, Comparable<TTopic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTopic");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPLATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("templateType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SHARE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shareName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SHARE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("shareDesc", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SUB_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("subChannel", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField PUB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pubName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHAREABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareable", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField PLATFORMS_FIELD_DESC = new org.apache.thrift.protocol.TField("platforms", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField BANNER_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("bannerImage", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField FOCUS_IMAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("focusImages", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.SET, (short)18);
  private static final org.apache.thrift.protocol.TField PUBLISH_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("publishAt", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTopicTupleSchemeFactory());
  }

  private long id; // required
  private TopicTemplateType templateType; // optional
  private String name; // optional
  private String shortName; // optional
  private String shareName; // optional
  private String desc; // optional
  private String shareDesc; // optional
  private com.lesports.api.common.Channel channel; // optional
  private com.lesports.api.common.Channel subChannel; // optional
  private long cid; // optional
  private String pubName; // optional
  private String keywords; // optional
  private boolean shareable; // optional
  private com.lesports.api.common.PublishStatus online; // optional
  private Set<com.lesports.api.common.Platform> platforms; // optional
  private String bannerImage; // optional
  private Map<String,String> focusImages; // optional
  private Set<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private String publishAt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see TopicTemplateType
     */
    TEMPLATE_TYPE((short)2, "templateType"),
    NAME((short)3, "name"),
    SHORT_NAME((short)4, "shortName"),
    SHARE_NAME((short)5, "shareName"),
    DESC((short)6, "desc"),
    SHARE_DESC((short)7, "shareDesc"),
    CHANNEL((short)8, "channel"),
    SUB_CHANNEL((short)9, "subChannel"),
    CID((short)10, "cid"),
    PUB_NAME((short)11, "pubName"),
    KEYWORDS((short)12, "keywords"),
    SHAREABLE((short)13, "shareable"),
    /**
     * 
     * @see com.lesports.api.common.PublishStatus
     */
    ONLINE((short)14, "online"),
    PLATFORMS((short)15, "platforms"),
    BANNER_IMAGE((short)16, "bannerImage"),
    FOCUS_IMAGES((short)17, "focusImages"),
    TAGS((short)18, "tags"),
    PUBLISH_AT((short)19, "publishAt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TEMPLATE_TYPE
          return TEMPLATE_TYPE;
        case 3: // NAME
          return NAME;
        case 4: // SHORT_NAME
          return SHORT_NAME;
        case 5: // SHARE_NAME
          return SHARE_NAME;
        case 6: // DESC
          return DESC;
        case 7: // SHARE_DESC
          return SHARE_DESC;
        case 8: // CHANNEL
          return CHANNEL;
        case 9: // SUB_CHANNEL
          return SUB_CHANNEL;
        case 10: // CID
          return CID;
        case 11: // PUB_NAME
          return PUB_NAME;
        case 12: // KEYWORDS
          return KEYWORDS;
        case 13: // SHAREABLE
          return SHAREABLE;
        case 14: // ONLINE
          return ONLINE;
        case 15: // PLATFORMS
          return PLATFORMS;
        case 16: // BANNER_IMAGE
          return BANNER_IMAGE;
        case 17: // FOCUS_IMAGES
          return FOCUS_IMAGES;
        case 18: // TAGS
          return TAGS;
        case 19: // PUBLISH_AT
          return PUBLISH_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __SHAREABLE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEMPLATE_TYPE,_Fields.NAME,_Fields.SHORT_NAME,_Fields.SHARE_NAME,_Fields.DESC,_Fields.SHARE_DESC,_Fields.CHANNEL,_Fields.SUB_CHANNEL,_Fields.CID,_Fields.PUB_NAME,_Fields.KEYWORDS,_Fields.SHAREABLE,_Fields.ONLINE,_Fields.PLATFORMS,_Fields.BANNER_IMAGE,_Fields.FOCUS_IMAGES,_Fields.TAGS,_Fields.PUBLISH_AT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEMPLATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("templateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TopicTemplateType.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_NAME, new org.apache.thrift.meta_data.FieldMetaData("shareName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_DESC, new org.apache.thrift.meta_data.FieldMetaData("shareDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.Channel.class)));
    tmpMap.put(_Fields.SUB_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("subChannel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.Channel.class)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUB_NAME, new org.apache.thrift.meta_data.FieldMetaData("pubName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHAREABLE, new org.apache.thrift.meta_data.FieldMetaData("shareable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.PublishStatus.class)));
    tmpMap.put(_Fields.PLATFORMS, new org.apache.thrift.meta_data.FieldMetaData("platforms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.Platform.class))));
    tmpMap.put(_Fields.BANNER_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("bannerImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOCUS_IMAGES, new org.apache.thrift.meta_data.FieldMetaData("focusImages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.PUBLISH_AT, new org.apache.thrift.meta_data.FieldMetaData("publishAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTopic.class, metaDataMap);
  }

  public TTopic() {
  }

  public TTopic(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTopic(TTopic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTemplateType()) {
      this.templateType = other.templateType;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetShareName()) {
      this.shareName = other.shareName;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetShareDesc()) {
      this.shareDesc = other.shareDesc;
    }
    if (other.isSetChannel()) {
      this.channel = new com.lesports.api.common.Channel(other.channel);
    }
    if (other.isSetSubChannel()) {
      this.subChannel = new com.lesports.api.common.Channel(other.subChannel);
    }
    this.cid = other.cid;
    if (other.isSetPubName()) {
      this.pubName = other.pubName;
    }
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    this.shareable = other.shareable;
    if (other.isSetOnline()) {
      this.online = other.online;
    }
    if (other.isSetPlatforms()) {
      Set<com.lesports.api.common.Platform> __this__platforms = new HashSet<com.lesports.api.common.Platform>(other.platforms.size());
      for (com.lesports.api.common.Platform other_element : other.platforms) {
        __this__platforms.add(other_element);
      }
      this.platforms = __this__platforms;
    }
    if (other.isSetBannerImage()) {
      this.bannerImage = other.bannerImage;
    }
    if (other.isSetFocusImages()) {
      Map<String,String> __this__focusImages = new HashMap<String,String>(other.focusImages);
      this.focusImages = __this__focusImages;
    }
    if (other.isSetTags()) {
      Set<com.lesports.qmt.config.api.dto.TTag> __this__tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetPublishAt()) {
      this.publishAt = other.publishAt;
    }
  }

  public TTopic deepCopy() {
    return new TTopic(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.templateType = null;
    this.name = null;
    this.shortName = null;
    this.shareName = null;
    this.desc = null;
    this.shareDesc = null;
    this.channel = null;
    this.subChannel = null;
    setCidIsSet(false);
    this.cid = 0;
    this.pubName = null;
    this.keywords = null;
    setShareableIsSet(false);
    this.shareable = false;
    this.online = null;
    this.platforms = null;
    this.bannerImage = null;
    this.focusImages = null;
    this.tags = null;
    this.publishAt = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TopicTemplateType
   */
  public TopicTemplateType getTemplateType() {
    return this.templateType;
  }

  /**
   * 
   * @see TopicTemplateType
   */
  public void setTemplateType(TopicTemplateType templateType) {
    this.templateType = templateType;
  }

  public void unsetTemplateType() {
    this.templateType = null;
  }

  /** Returns true if field templateType is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateType() {
    return this.templateType != null;
  }

  public void setTemplateTypeIsSet(boolean value) {
    if (!value) {
      this.templateType = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getShortName() {
    return this.shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public String getShareName() {
    return this.shareName;
  }

  public void setShareName(String shareName) {
    this.shareName = shareName;
  }

  public void unsetShareName() {
    this.shareName = null;
  }

  /** Returns true if field shareName is set (has been assigned a value) and false otherwise */
  public boolean isSetShareName() {
    return this.shareName != null;
  }

  public void setShareNameIsSet(boolean value) {
    if (!value) {
      this.shareName = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getShareDesc() {
    return this.shareDesc;
  }

  public void setShareDesc(String shareDesc) {
    this.shareDesc = shareDesc;
  }

  public void unsetShareDesc() {
    this.shareDesc = null;
  }

  /** Returns true if field shareDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetShareDesc() {
    return this.shareDesc != null;
  }

  public void setShareDescIsSet(boolean value) {
    if (!value) {
      this.shareDesc = null;
    }
  }

  public com.lesports.api.common.Channel getChannel() {
    return this.channel;
  }

  public void setChannel(com.lesports.api.common.Channel channel) {
    this.channel = channel;
  }

  public void unsetChannel() {
    this.channel = null;
  }

  /** Returns true if field channel is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel() {
    return this.channel != null;
  }

  public void setChannelIsSet(boolean value) {
    if (!value) {
      this.channel = null;
    }
  }

  public com.lesports.api.common.Channel getSubChannel() {
    return this.subChannel;
  }

  public void setSubChannel(com.lesports.api.common.Channel subChannel) {
    this.subChannel = subChannel;
  }

  public void unsetSubChannel() {
    this.subChannel = null;
  }

  /** Returns true if field subChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetSubChannel() {
    return this.subChannel != null;
  }

  public void setSubChannelIsSet(boolean value) {
    if (!value) {
      this.subChannel = null;
    }
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getPubName() {
    return this.pubName;
  }

  public void setPubName(String pubName) {
    this.pubName = pubName;
  }

  public void unsetPubName() {
    this.pubName = null;
  }

  /** Returns true if field pubName is set (has been assigned a value) and false otherwise */
  public boolean isSetPubName() {
    return this.pubName != null;
  }

  public void setPubNameIsSet(boolean value) {
    if (!value) {
      this.pubName = null;
    }
  }

  public String getKeywords() {
    return this.keywords;
  }

  public void setKeywords(String keywords) {
    this.keywords = keywords;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public boolean isShareable() {
    return this.shareable;
  }

  public void setShareable(boolean shareable) {
    this.shareable = shareable;
    setShareableIsSet(true);
  }

  public void unsetShareable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHAREABLE_ISSET_ID);
  }

  /** Returns true if field shareable is set (has been assigned a value) and false otherwise */
  public boolean isSetShareable() {
    return EncodingUtils.testBit(__isset_bitfield, __SHAREABLE_ISSET_ID);
  }

  public void setShareableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHAREABLE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.api.common.PublishStatus
   */
  public com.lesports.api.common.PublishStatus getOnline() {
    return this.online;
  }

  /**
   * 
   * @see com.lesports.api.common.PublishStatus
   */
  public void setOnline(com.lesports.api.common.PublishStatus online) {
    this.online = online;
  }

  public void unsetOnline() {
    this.online = null;
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return this.online != null;
  }

  public void setOnlineIsSet(boolean value) {
    if (!value) {
      this.online = null;
    }
  }

  public int getPlatformsSize() {
    return (this.platforms == null) ? 0 : this.platforms.size();
  }

  public java.util.Iterator<com.lesports.api.common.Platform> getPlatformsIterator() {
    return (this.platforms == null) ? null : this.platforms.iterator();
  }

  public void addToPlatforms(com.lesports.api.common.Platform elem) {
    if (this.platforms == null) {
      this.platforms = new HashSet<com.lesports.api.common.Platform>();
    }
    this.platforms.add(elem);
  }

  public Set<com.lesports.api.common.Platform> getPlatforms() {
    return this.platforms;
  }

  public void setPlatforms(Set<com.lesports.api.common.Platform> platforms) {
    this.platforms = platforms;
  }

  public void unsetPlatforms() {
    this.platforms = null;
  }

  /** Returns true if field platforms is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatforms() {
    return this.platforms != null;
  }

  public void setPlatformsIsSet(boolean value) {
    if (!value) {
      this.platforms = null;
    }
  }

  public String getBannerImage() {
    return this.bannerImage;
  }

  public void setBannerImage(String bannerImage) {
    this.bannerImage = bannerImage;
  }

  public void unsetBannerImage() {
    this.bannerImage = null;
  }

  /** Returns true if field bannerImage is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerImage() {
    return this.bannerImage != null;
  }

  public void setBannerImageIsSet(boolean value) {
    if (!value) {
      this.bannerImage = null;
    }
  }

  public int getFocusImagesSize() {
    return (this.focusImages == null) ? 0 : this.focusImages.size();
  }

  public void putToFocusImages(String key, String val) {
    if (this.focusImages == null) {
      this.focusImages = new HashMap<String,String>();
    }
    this.focusImages.put(key, val);
  }

  public Map<String,String> getFocusImages() {
    return this.focusImages;
  }

  public void setFocusImages(Map<String,String> focusImages) {
    this.focusImages = focusImages;
  }

  public void unsetFocusImages() {
    this.focusImages = null;
  }

  /** Returns true if field focusImages is set (has been assigned a value) and false otherwise */
  public boolean isSetFocusImages() {
    return this.focusImages != null;
  }

  public void setFocusImagesIsSet(boolean value) {
    if (!value) {
      this.focusImages = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public Set<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(Set<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getPublishAt() {
    return this.publishAt;
  }

  public void setPublishAt(String publishAt) {
    this.publishAt = publishAt;
  }

  public void unsetPublishAt() {
    this.publishAt = null;
  }

  /** Returns true if field publishAt is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishAt() {
    return this.publishAt != null;
  }

  public void setPublishAtIsSet(boolean value) {
    if (!value) {
      this.publishAt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TEMPLATE_TYPE:
      if (value == null) {
        unsetTemplateType();
      } else {
        setTemplateType((TopicTemplateType)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case SHARE_NAME:
      if (value == null) {
        unsetShareName();
      } else {
        setShareName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case SHARE_DESC:
      if (value == null) {
        unsetShareDesc();
      } else {
        setShareDesc((String)value);
      }
      break;

    case CHANNEL:
      if (value == null) {
        unsetChannel();
      } else {
        setChannel((com.lesports.api.common.Channel)value);
      }
      break;

    case SUB_CHANNEL:
      if (value == null) {
        unsetSubChannel();
      } else {
        setSubChannel((com.lesports.api.common.Channel)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case PUB_NAME:
      if (value == null) {
        unsetPubName();
      } else {
        setPubName((String)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((String)value);
      }
      break;

    case SHAREABLE:
      if (value == null) {
        unsetShareable();
      } else {
        setShareable((Boolean)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((com.lesports.api.common.PublishStatus)value);
      }
      break;

    case PLATFORMS:
      if (value == null) {
        unsetPlatforms();
      } else {
        setPlatforms((Set<com.lesports.api.common.Platform>)value);
      }
      break;

    case BANNER_IMAGE:
      if (value == null) {
        unsetBannerImage();
      } else {
        setBannerImage((String)value);
      }
      break;

    case FOCUS_IMAGES:
      if (value == null) {
        unsetFocusImages();
      } else {
        setFocusImages((Map<String,String>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Set<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case PUBLISH_AT:
      if (value == null) {
        unsetPublishAt();
      } else {
        setPublishAt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TEMPLATE_TYPE:
      return getTemplateType();

    case NAME:
      return getName();

    case SHORT_NAME:
      return getShortName();

    case SHARE_NAME:
      return getShareName();

    case DESC:
      return getDesc();

    case SHARE_DESC:
      return getShareDesc();

    case CHANNEL:
      return getChannel();

    case SUB_CHANNEL:
      return getSubChannel();

    case CID:
      return Long.valueOf(getCid());

    case PUB_NAME:
      return getPubName();

    case KEYWORDS:
      return getKeywords();

    case SHAREABLE:
      return Boolean.valueOf(isShareable());

    case ONLINE:
      return getOnline();

    case PLATFORMS:
      return getPlatforms();

    case BANNER_IMAGE:
      return getBannerImage();

    case FOCUS_IMAGES:
      return getFocusImages();

    case TAGS:
      return getTags();

    case PUBLISH_AT:
      return getPublishAt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEMPLATE_TYPE:
      return isSetTemplateType();
    case NAME:
      return isSetName();
    case SHORT_NAME:
      return isSetShortName();
    case SHARE_NAME:
      return isSetShareName();
    case DESC:
      return isSetDesc();
    case SHARE_DESC:
      return isSetShareDesc();
    case CHANNEL:
      return isSetChannel();
    case SUB_CHANNEL:
      return isSetSubChannel();
    case CID:
      return isSetCid();
    case PUB_NAME:
      return isSetPubName();
    case KEYWORDS:
      return isSetKeywords();
    case SHAREABLE:
      return isSetShareable();
    case ONLINE:
      return isSetOnline();
    case PLATFORMS:
      return isSetPlatforms();
    case BANNER_IMAGE:
      return isSetBannerImage();
    case FOCUS_IMAGES:
      return isSetFocusImages();
    case TAGS:
      return isSetTags();
    case PUBLISH_AT:
      return isSetPublishAt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTopic)
      return this.equals((TTopic)that);
    return false;
  }

  public boolean equals(TTopic that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_templateType = true && this.isSetTemplateType();
    boolean that_present_templateType = true && that.isSetTemplateType();
    if (this_present_templateType || that_present_templateType) {
      if (!(this_present_templateType && that_present_templateType))
        return false;
      if (!this.templateType.equals(that.templateType))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_shareName = true && this.isSetShareName();
    boolean that_present_shareName = true && that.isSetShareName();
    if (this_present_shareName || that_present_shareName) {
      if (!(this_present_shareName && that_present_shareName))
        return false;
      if (!this.shareName.equals(that.shareName))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_shareDesc = true && this.isSetShareDesc();
    boolean that_present_shareDesc = true && that.isSetShareDesc();
    if (this_present_shareDesc || that_present_shareDesc) {
      if (!(this_present_shareDesc && that_present_shareDesc))
        return false;
      if (!this.shareDesc.equals(that.shareDesc))
        return false;
    }

    boolean this_present_channel = true && this.isSetChannel();
    boolean that_present_channel = true && that.isSetChannel();
    if (this_present_channel || that_present_channel) {
      if (!(this_present_channel && that_present_channel))
        return false;
      if (!this.channel.equals(that.channel))
        return false;
    }

    boolean this_present_subChannel = true && this.isSetSubChannel();
    boolean that_present_subChannel = true && that.isSetSubChannel();
    if (this_present_subChannel || that_present_subChannel) {
      if (!(this_present_subChannel && that_present_subChannel))
        return false;
      if (!this.subChannel.equals(that.subChannel))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_pubName = true && this.isSetPubName();
    boolean that_present_pubName = true && that.isSetPubName();
    if (this_present_pubName || that_present_pubName) {
      if (!(this_present_pubName && that_present_pubName))
        return false;
      if (!this.pubName.equals(that.pubName))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_shareable = true && this.isSetShareable();
    boolean that_present_shareable = true && that.isSetShareable();
    if (this_present_shareable || that_present_shareable) {
      if (!(this_present_shareable && that_present_shareable))
        return false;
      if (this.shareable != that.shareable)
        return false;
    }

    boolean this_present_online = true && this.isSetOnline();
    boolean that_present_online = true && that.isSetOnline();
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (!this.online.equals(that.online))
        return false;
    }

    boolean this_present_platforms = true && this.isSetPlatforms();
    boolean that_present_platforms = true && that.isSetPlatforms();
    if (this_present_platforms || that_present_platforms) {
      if (!(this_present_platforms && that_present_platforms))
        return false;
      if (!this.platforms.equals(that.platforms))
        return false;
    }

    boolean this_present_bannerImage = true && this.isSetBannerImage();
    boolean that_present_bannerImage = true && that.isSetBannerImage();
    if (this_present_bannerImage || that_present_bannerImage) {
      if (!(this_present_bannerImage && that_present_bannerImage))
        return false;
      if (!this.bannerImage.equals(that.bannerImage))
        return false;
    }

    boolean this_present_focusImages = true && this.isSetFocusImages();
    boolean that_present_focusImages = true && that.isSetFocusImages();
    if (this_present_focusImages || that_present_focusImages) {
      if (!(this_present_focusImages && that_present_focusImages))
        return false;
      if (!this.focusImages.equals(that.focusImages))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_publishAt = true && this.isSetPublishAt();
    boolean that_present_publishAt = true && that.isSetPublishAt();
    if (this_present_publishAt || that_present_publishAt) {
      if (!(this_present_publishAt && that_present_publishAt))
        return false;
      if (!this.publishAt.equals(that.publishAt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_templateType = true && (isSetTemplateType());
    list.add(present_templateType);
    if (present_templateType)
      list.add(templateType.getValue());

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_shortName = true && (isSetShortName());
    list.add(present_shortName);
    if (present_shortName)
      list.add(shortName);

    boolean present_shareName = true && (isSetShareName());
    list.add(present_shareName);
    if (present_shareName)
      list.add(shareName);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_shareDesc = true && (isSetShareDesc());
    list.add(present_shareDesc);
    if (present_shareDesc)
      list.add(shareDesc);

    boolean present_channel = true && (isSetChannel());
    list.add(present_channel);
    if (present_channel)
      list.add(channel);

    boolean present_subChannel = true && (isSetSubChannel());
    list.add(present_subChannel);
    if (present_subChannel)
      list.add(subChannel);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_pubName = true && (isSetPubName());
    list.add(present_pubName);
    if (present_pubName)
      list.add(pubName);

    boolean present_keywords = true && (isSetKeywords());
    list.add(present_keywords);
    if (present_keywords)
      list.add(keywords);

    boolean present_shareable = true && (isSetShareable());
    list.add(present_shareable);
    if (present_shareable)
      list.add(shareable);

    boolean present_online = true && (isSetOnline());
    list.add(present_online);
    if (present_online)
      list.add(online.getValue());

    boolean present_platforms = true && (isSetPlatforms());
    list.add(present_platforms);
    if (present_platforms)
      list.add(platforms);

    boolean present_bannerImage = true && (isSetBannerImage());
    list.add(present_bannerImage);
    if (present_bannerImage)
      list.add(bannerImage);

    boolean present_focusImages = true && (isSetFocusImages());
    list.add(present_focusImages);
    if (present_focusImages)
      list.add(focusImages);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_publishAt = true && (isSetPublishAt());
    list.add(present_publishAt);
    if (present_publishAt)
      list.add(publishAt);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTopic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateType()).compareTo(other.isSetTemplateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateType, other.templateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(other.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, other.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareName()).compareTo(other.isSetShareName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareName, other.shareName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareDesc()).compareTo(other.isSetShareDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareDesc, other.shareDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannel()).compareTo(other.isSetChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, other.channel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubChannel()).compareTo(other.isSetSubChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subChannel, other.subChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPubName()).compareTo(other.isSetPubName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubName, other.pubName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShareable()).compareTo(other.isSetShareable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareable, other.shareable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(other.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, other.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatforms()).compareTo(other.isSetPlatforms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatforms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platforms, other.platforms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBannerImage()).compareTo(other.isSetBannerImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannerImage, other.bannerImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFocusImages()).compareTo(other.isSetFocusImages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFocusImages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.focusImages, other.focusImages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishAt()).compareTo(other.isSetPublishAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishAt, other.publishAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTopic(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetTemplateType()) {
      if (!first) sb.append(", ");
      sb.append("templateType:");
      if (this.templateType == null) {
        sb.append("null");
      } else {
        sb.append(this.templateType);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetShortName()) {
      if (!first) sb.append(", ");
      sb.append("shortName:");
      if (this.shortName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortName);
      }
      first = false;
    }
    if (isSetShareName()) {
      if (!first) sb.append(", ");
      sb.append("shareName:");
      if (this.shareName == null) {
        sb.append("null");
      } else {
        sb.append(this.shareName);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetShareDesc()) {
      if (!first) sb.append(", ");
      sb.append("shareDesc:");
      if (this.shareDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.shareDesc);
      }
      first = false;
    }
    if (isSetChannel()) {
      if (!first) sb.append(", ");
      sb.append("channel:");
      if (this.channel == null) {
        sb.append("null");
      } else {
        sb.append(this.channel);
      }
      first = false;
    }
    if (isSetSubChannel()) {
      if (!first) sb.append(", ");
      sb.append("subChannel:");
      if (this.subChannel == null) {
        sb.append("null");
      } else {
        sb.append(this.subChannel);
      }
      first = false;
    }
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetPubName()) {
      if (!first) sb.append(", ");
      sb.append("pubName:");
      if (this.pubName == null) {
        sb.append("null");
      } else {
        sb.append(this.pubName);
      }
      first = false;
    }
    if (isSetKeywords()) {
      if (!first) sb.append(", ");
      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
    }
    if (isSetShareable()) {
      if (!first) sb.append(", ");
      sb.append("shareable:");
      sb.append(this.shareable);
      first = false;
    }
    if (isSetOnline()) {
      if (!first) sb.append(", ");
      sb.append("online:");
      if (this.online == null) {
        sb.append("null");
      } else {
        sb.append(this.online);
      }
      first = false;
    }
    if (isSetPlatforms()) {
      if (!first) sb.append(", ");
      sb.append("platforms:");
      if (this.platforms == null) {
        sb.append("null");
      } else {
        sb.append(this.platforms);
      }
      first = false;
    }
    if (isSetBannerImage()) {
      if (!first) sb.append(", ");
      sb.append("bannerImage:");
      if (this.bannerImage == null) {
        sb.append("null");
      } else {
        sb.append(this.bannerImage);
      }
      first = false;
    }
    if (isSetFocusImages()) {
      if (!first) sb.append(", ");
      sb.append("focusImages:");
      if (this.focusImages == null) {
        sb.append("null");
      } else {
        sb.append(this.focusImages);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetPublishAt()) {
      if (!first) sb.append(", ");
      sb.append("publishAt:");
      if (this.publishAt == null) {
        sb.append("null");
      } else {
        sb.append(this.publishAt);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (channel != null) {
      channel.validate();
    }
    if (subChannel != null) {
      subChannel.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTopicStandardSchemeFactory implements SchemeFactory {
    public TTopicStandardScheme getScheme() {
      return new TTopicStandardScheme();
    }
  }

  private static class TTopicStandardScheme extends StandardScheme<TTopic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTopic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPLATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateType = com.lesports.qmt.sbc.api.dto.TopicTemplateType.findByValue(iprot.readI32());
              struct.setTemplateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortName = iprot.readString();
              struct.setShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHARE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareName = iprot.readString();
              struct.setShareNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shareDesc = iprot.readString();
              struct.setShareDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.channel = new com.lesports.api.common.Channel();
              struct.channel.read(iprot);
              struct.setChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUB_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subChannel = new com.lesports.api.common.Channel();
              struct.subChannel.read(iprot);
              struct.setSubChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PUB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubName = iprot.readString();
              struct.setPubNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHAREABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.shareable = iprot.readBool();
              struct.setShareableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.online = com.lesports.api.common.PublishStatus.findByValue(iprot.readI32());
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PLATFORMS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set0.size);
                com.lesports.api.common.Platform _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
                  struct.platforms.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setPlatformsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BANNER_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bannerImage = iprot.readString();
              struct.setBannerImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // FOCUS_IMAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.focusImages = new HashMap<String,String>(2*_map3.size);
                String _key4;
                String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.focusImages.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setFocusImagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>(2*_set7.size);
                com.lesports.qmt.config.api.dto.TTag _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem8.read(iprot);
                  struct.tags.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PUBLISH_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publishAt = iprot.readString();
              struct.setPublishAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTopic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.templateType != null) {
        if (struct.isSetTemplateType()) {
          oprot.writeFieldBegin(TEMPLATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.templateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shortName != null) {
        if (struct.isSetShortName()) {
          oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
          oprot.writeString(struct.shortName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareName != null) {
        if (struct.isSetShareName()) {
          oprot.writeFieldBegin(SHARE_NAME_FIELD_DESC);
          oprot.writeString(struct.shareName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.shareDesc != null) {
        if (struct.isSetShareDesc()) {
          oprot.writeFieldBegin(SHARE_DESC_FIELD_DESC);
          oprot.writeString(struct.shareDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.channel != null) {
        if (struct.isSetChannel()) {
          oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
          struct.channel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subChannel != null) {
        if (struct.isSetSubChannel()) {
          oprot.writeFieldBegin(SUB_CHANNEL_FIELD_DESC);
          struct.subChannel.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.pubName != null) {
        if (struct.isSetPubName()) {
          oprot.writeFieldBegin(PUB_NAME_FIELD_DESC);
          oprot.writeString(struct.pubName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keywords != null) {
        if (struct.isSetKeywords()) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          oprot.writeString(struct.keywords);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetShareable()) {
        oprot.writeFieldBegin(SHAREABLE_FIELD_DESC);
        oprot.writeBool(struct.shareable);
        oprot.writeFieldEnd();
      }
      if (struct.online != null) {
        if (struct.isSetOnline()) {
          oprot.writeFieldBegin(ONLINE_FIELD_DESC);
          oprot.writeI32(struct.online.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.platforms != null) {
        if (struct.isSetPlatforms()) {
          oprot.writeFieldBegin(PLATFORMS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.platforms.size()));
            for (com.lesports.api.common.Platform _iter10 : struct.platforms)
            {
              oprot.writeI32(_iter10.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bannerImage != null) {
        if (struct.isSetBannerImage()) {
          oprot.writeFieldBegin(BANNER_IMAGE_FIELD_DESC);
          oprot.writeString(struct.bannerImage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.focusImages != null) {
        if (struct.isSetFocusImages()) {
          oprot.writeFieldBegin(FOCUS_IMAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.focusImages.size()));
            for (Map.Entry<String, String> _iter11 : struct.focusImages.entrySet())
            {
              oprot.writeString(_iter11.getKey());
              oprot.writeString(_iter11.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter12 : struct.tags)
            {
              _iter12.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.publishAt != null) {
        if (struct.isSetPublishAt()) {
          oprot.writeFieldBegin(PUBLISH_AT_FIELD_DESC);
          oprot.writeString(struct.publishAt);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTopicTupleSchemeFactory implements SchemeFactory {
    public TTopicTupleScheme getScheme() {
      return new TTopicTupleScheme();
    }
  }

  private static class TTopicTupleScheme extends TupleScheme<TTopic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTemplateType()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetShortName()) {
        optionals.set(3);
      }
      if (struct.isSetShareName()) {
        optionals.set(4);
      }
      if (struct.isSetDesc()) {
        optionals.set(5);
      }
      if (struct.isSetShareDesc()) {
        optionals.set(6);
      }
      if (struct.isSetChannel()) {
        optionals.set(7);
      }
      if (struct.isSetSubChannel()) {
        optionals.set(8);
      }
      if (struct.isSetCid()) {
        optionals.set(9);
      }
      if (struct.isSetPubName()) {
        optionals.set(10);
      }
      if (struct.isSetKeywords()) {
        optionals.set(11);
      }
      if (struct.isSetShareable()) {
        optionals.set(12);
      }
      if (struct.isSetOnline()) {
        optionals.set(13);
      }
      if (struct.isSetPlatforms()) {
        optionals.set(14);
      }
      if (struct.isSetBannerImage()) {
        optionals.set(15);
      }
      if (struct.isSetFocusImages()) {
        optionals.set(16);
      }
      if (struct.isSetTags()) {
        optionals.set(17);
      }
      if (struct.isSetPublishAt()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTemplateType()) {
        oprot.writeI32(struct.templateType.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetShortName()) {
        oprot.writeString(struct.shortName);
      }
      if (struct.isSetShareName()) {
        oprot.writeString(struct.shareName);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetShareDesc()) {
        oprot.writeString(struct.shareDesc);
      }
      if (struct.isSetChannel()) {
        struct.channel.write(oprot);
      }
      if (struct.isSetSubChannel()) {
        struct.subChannel.write(oprot);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetPubName()) {
        oprot.writeString(struct.pubName);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetShareable()) {
        oprot.writeBool(struct.shareable);
      }
      if (struct.isSetOnline()) {
        oprot.writeI32(struct.online.getValue());
      }
      if (struct.isSetPlatforms()) {
        {
          oprot.writeI32(struct.platforms.size());
          for (com.lesports.api.common.Platform _iter13 : struct.platforms)
          {
            oprot.writeI32(_iter13.getValue());
          }
        }
      }
      if (struct.isSetBannerImage()) {
        oprot.writeString(struct.bannerImage);
      }
      if (struct.isSetFocusImages()) {
        {
          oprot.writeI32(struct.focusImages.size());
          for (Map.Entry<String, String> _iter14 : struct.focusImages.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeString(_iter14.getValue());
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter15 : struct.tags)
          {
            _iter15.write(oprot);
          }
        }
      }
      if (struct.isSetPublishAt()) {
        oprot.writeString(struct.publishAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.templateType = com.lesports.qmt.sbc.api.dto.TopicTemplateType.findByValue(iprot.readI32());
        struct.setTemplateTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.shortName = iprot.readString();
        struct.setShortNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shareName = iprot.readString();
        struct.setShareNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shareDesc = iprot.readString();
        struct.setShareDescIsSet(true);
      }
      if (incoming.get(7)) {
        struct.channel = new com.lesports.api.common.Channel();
        struct.channel.read(iprot);
        struct.setChannelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.subChannel = new com.lesports.api.common.Channel();
        struct.subChannel.read(iprot);
        struct.setSubChannelIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pubName = iprot.readString();
        struct.setPubNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shareable = iprot.readBool();
        struct.setShareableIsSet(true);
      }
      if (incoming.get(13)) {
        struct.online = com.lesports.api.common.PublishStatus.findByValue(iprot.readI32());
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TSet _set16 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.platforms = new HashSet<com.lesports.api.common.Platform>(2*_set16.size);
          com.lesports.api.common.Platform _elem17;
          for (int _i18 = 0; _i18 < _set16.size; ++_i18)
          {
            _elem17 = com.lesports.api.common.Platform.findByValue(iprot.readI32());
            struct.platforms.add(_elem17);
          }
        }
        struct.setPlatformsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.bannerImage = iprot.readString();
        struct.setBannerImageIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TMap _map19 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.focusImages = new HashMap<String,String>(2*_map19.size);
          String _key20;
          String _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readString();
            _val21 = iprot.readString();
            struct.focusImages.put(_key20, _val21);
          }
        }
        struct.setFocusImagesIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new HashSet<com.lesports.qmt.config.api.dto.TTag>(2*_set23.size);
          com.lesports.qmt.config.api.dto.TTag _elem24;
          for (int _i25 = 0; _i25 < _set23.size; ++_i25)
          {
            _elem24 = new com.lesports.qmt.config.api.dto.TTag();
            _elem24.read(iprot);
            struct.tags.add(_elem24);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.publishAt = iprot.readString();
        struct.setPublishAtIsSet(true);
      }
    }
  }

}

