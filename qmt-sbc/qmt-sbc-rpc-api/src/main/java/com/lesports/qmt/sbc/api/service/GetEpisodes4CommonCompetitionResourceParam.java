/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取通栏比赛卡片资源位里的节目
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetEpisodes4CommonCompetitionResourceParam implements org.apache.thrift.TBase<GetEpisodes4CommonCompetitionResourceParam, GetEpisodes4CommonCompetitionResourceParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetEpisodes4CommonCompetitionResourceParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEpisodes4CommonCompetitionResourceParam");

  private static final org.apache.thrift.protocol.TField CIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_OF_NOT_START_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfNotStart", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_OF_LIVING_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfLiving", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_OF_END_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfEnd", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetEpisodes4CommonCompetitionResourceParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetEpisodes4CommonCompetitionResourceParamTupleSchemeFactory());
  }

  private List<Long> cids; // optional
  private int numOfNotStart; // optional
  private int numOfLiving; // optional
  private int numOfEnd; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CIDS((short)1, "cids"),
    NUM_OF_NOT_START((short)2, "numOfNotStart"),
    NUM_OF_LIVING((short)3, "numOfLiving"),
    NUM_OF_END((short)4, "numOfEnd");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CIDS
          return CIDS;
        case 2: // NUM_OF_NOT_START
          return NUM_OF_NOT_START;
        case 3: // NUM_OF_LIVING
          return NUM_OF_LIVING;
        case 4: // NUM_OF_END
          return NUM_OF_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMOFNOTSTART_ISSET_ID = 0;
  private static final int __NUMOFLIVING_ISSET_ID = 1;
  private static final int __NUMOFEND_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CIDS,_Fields.NUM_OF_NOT_START,_Fields.NUM_OF_LIVING,_Fields.NUM_OF_END};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CIDS, new org.apache.thrift.meta_data.FieldMetaData("cids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NUM_OF_NOT_START, new org.apache.thrift.meta_data.FieldMetaData("numOfNotStart", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_OF_LIVING, new org.apache.thrift.meta_data.FieldMetaData("numOfLiving", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_OF_END, new org.apache.thrift.meta_data.FieldMetaData("numOfEnd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEpisodes4CommonCompetitionResourceParam.class, metaDataMap);
  }

  public GetEpisodes4CommonCompetitionResourceParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetEpisodes4CommonCompetitionResourceParam(GetEpisodes4CommonCompetitionResourceParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCids()) {
      List<Long> __this__cids = new ArrayList<Long>(other.cids);
      this.cids = __this__cids;
    }
    this.numOfNotStart = other.numOfNotStart;
    this.numOfLiving = other.numOfLiving;
    this.numOfEnd = other.numOfEnd;
  }

  public GetEpisodes4CommonCompetitionResourceParam deepCopy() {
    return new GetEpisodes4CommonCompetitionResourceParam(this);
  }

  @Override
  public void clear() {
    this.cids = null;
    setNumOfNotStartIsSet(false);
    this.numOfNotStart = 0;
    setNumOfLivingIsSet(false);
    this.numOfLiving = 0;
    setNumOfEndIsSet(false);
    this.numOfEnd = 0;
  }

  public int getCidsSize() {
    return (this.cids == null) ? 0 : this.cids.size();
  }

  public java.util.Iterator<Long> getCidsIterator() {
    return (this.cids == null) ? null : this.cids.iterator();
  }

  public void addToCids(long elem) {
    if (this.cids == null) {
      this.cids = new ArrayList<Long>();
    }
    this.cids.add(elem);
  }

  public List<Long> getCids() {
    return this.cids;
  }

  public void setCids(List<Long> cids) {
    this.cids = cids;
  }

  public void unsetCids() {
    this.cids = null;
  }

  /** Returns true if field cids is set (has been assigned a value) and false otherwise */
  public boolean isSetCids() {
    return this.cids != null;
  }

  public void setCidsIsSet(boolean value) {
    if (!value) {
      this.cids = null;
    }
  }

  public int getNumOfNotStart() {
    return this.numOfNotStart;
  }

  public void setNumOfNotStart(int numOfNotStart) {
    this.numOfNotStart = numOfNotStart;
    setNumOfNotStartIsSet(true);
  }

  public void unsetNumOfNotStart() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMOFNOTSTART_ISSET_ID);
  }

  /** Returns true if field numOfNotStart is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfNotStart() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMOFNOTSTART_ISSET_ID);
  }

  public void setNumOfNotStartIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMOFNOTSTART_ISSET_ID, value);
  }

  public int getNumOfLiving() {
    return this.numOfLiving;
  }

  public void setNumOfLiving(int numOfLiving) {
    this.numOfLiving = numOfLiving;
    setNumOfLivingIsSet(true);
  }

  public void unsetNumOfLiving() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMOFLIVING_ISSET_ID);
  }

  /** Returns true if field numOfLiving is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfLiving() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMOFLIVING_ISSET_ID);
  }

  public void setNumOfLivingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMOFLIVING_ISSET_ID, value);
  }

  public int getNumOfEnd() {
    return this.numOfEnd;
  }

  public void setNumOfEnd(int numOfEnd) {
    this.numOfEnd = numOfEnd;
    setNumOfEndIsSet(true);
  }

  public void unsetNumOfEnd() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMOFEND_ISSET_ID);
  }

  /** Returns true if field numOfEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfEnd() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMOFEND_ISSET_ID);
  }

  public void setNumOfEndIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMOFEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CIDS:
      if (value == null) {
        unsetCids();
      } else {
        setCids((List<Long>)value);
      }
      break;

    case NUM_OF_NOT_START:
      if (value == null) {
        unsetNumOfNotStart();
      } else {
        setNumOfNotStart((Integer)value);
      }
      break;

    case NUM_OF_LIVING:
      if (value == null) {
        unsetNumOfLiving();
      } else {
        setNumOfLiving((Integer)value);
      }
      break;

    case NUM_OF_END:
      if (value == null) {
        unsetNumOfEnd();
      } else {
        setNumOfEnd((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CIDS:
      return getCids();

    case NUM_OF_NOT_START:
      return Integer.valueOf(getNumOfNotStart());

    case NUM_OF_LIVING:
      return Integer.valueOf(getNumOfLiving());

    case NUM_OF_END:
      return Integer.valueOf(getNumOfEnd());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CIDS:
      return isSetCids();
    case NUM_OF_NOT_START:
      return isSetNumOfNotStart();
    case NUM_OF_LIVING:
      return isSetNumOfLiving();
    case NUM_OF_END:
      return isSetNumOfEnd();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetEpisodes4CommonCompetitionResourceParam)
      return this.equals((GetEpisodes4CommonCompetitionResourceParam)that);
    return false;
  }

  public boolean equals(GetEpisodes4CommonCompetitionResourceParam that) {
    if (that == null)
      return false;

    boolean this_present_cids = true && this.isSetCids();
    boolean that_present_cids = true && that.isSetCids();
    if (this_present_cids || that_present_cids) {
      if (!(this_present_cids && that_present_cids))
        return false;
      if (!this.cids.equals(that.cids))
        return false;
    }

    boolean this_present_numOfNotStart = true && this.isSetNumOfNotStart();
    boolean that_present_numOfNotStart = true && that.isSetNumOfNotStart();
    if (this_present_numOfNotStart || that_present_numOfNotStart) {
      if (!(this_present_numOfNotStart && that_present_numOfNotStart))
        return false;
      if (this.numOfNotStart != that.numOfNotStart)
        return false;
    }

    boolean this_present_numOfLiving = true && this.isSetNumOfLiving();
    boolean that_present_numOfLiving = true && that.isSetNumOfLiving();
    if (this_present_numOfLiving || that_present_numOfLiving) {
      if (!(this_present_numOfLiving && that_present_numOfLiving))
        return false;
      if (this.numOfLiving != that.numOfLiving)
        return false;
    }

    boolean this_present_numOfEnd = true && this.isSetNumOfEnd();
    boolean that_present_numOfEnd = true && that.isSetNumOfEnd();
    if (this_present_numOfEnd || that_present_numOfEnd) {
      if (!(this_present_numOfEnd && that_present_numOfEnd))
        return false;
      if (this.numOfEnd != that.numOfEnd)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cids = true && (isSetCids());
    list.add(present_cids);
    if (present_cids)
      list.add(cids);

    boolean present_numOfNotStart = true && (isSetNumOfNotStart());
    list.add(present_numOfNotStart);
    if (present_numOfNotStart)
      list.add(numOfNotStart);

    boolean present_numOfLiving = true && (isSetNumOfLiving());
    list.add(present_numOfLiving);
    if (present_numOfLiving)
      list.add(numOfLiving);

    boolean present_numOfEnd = true && (isSetNumOfEnd());
    list.add(present_numOfEnd);
    if (present_numOfEnd)
      list.add(numOfEnd);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetEpisodes4CommonCompetitionResourceParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCids()).compareTo(other.isSetCids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cids, other.cids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumOfNotStart()).compareTo(other.isSetNumOfNotStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfNotStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfNotStart, other.numOfNotStart);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumOfLiving()).compareTo(other.isSetNumOfLiving());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfLiving()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfLiving, other.numOfLiving);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumOfEnd()).compareTo(other.isSetNumOfEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfEnd, other.numOfEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetEpisodes4CommonCompetitionResourceParam(");
    boolean first = true;

    if (isSetCids()) {
      sb.append("cids:");
      if (this.cids == null) {
        sb.append("null");
      } else {
        sb.append(this.cids);
      }
      first = false;
    }
    if (isSetNumOfNotStart()) {
      if (!first) sb.append(", ");
      sb.append("numOfNotStart:");
      sb.append(this.numOfNotStart);
      first = false;
    }
    if (isSetNumOfLiving()) {
      if (!first) sb.append(", ");
      sb.append("numOfLiving:");
      sb.append(this.numOfLiving);
      first = false;
    }
    if (isSetNumOfEnd()) {
      if (!first) sb.append(", ");
      sb.append("numOfEnd:");
      sb.append(this.numOfEnd);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetEpisodes4CommonCompetitionResourceParamStandardSchemeFactory implements SchemeFactory {
    public GetEpisodes4CommonCompetitionResourceParamStandardScheme getScheme() {
      return new GetEpisodes4CommonCompetitionResourceParamStandardScheme();
    }
  }

  private static class GetEpisodes4CommonCompetitionResourceParamStandardScheme extends StandardScheme<GetEpisodes4CommonCompetitionResourceParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetEpisodes4CommonCompetitionResourceParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.cids = new ArrayList<Long>(_list48.size);
                long _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI64();
                  struct.cids.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setCidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_OF_NOT_START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfNotStart = iprot.readI32();
              struct.setNumOfNotStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_OF_LIVING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfLiving = iprot.readI32();
              struct.setNumOfLivingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_OF_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfEnd = iprot.readI32();
              struct.setNumOfEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetEpisodes4CommonCompetitionResourceParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cids != null) {
        if (struct.isSetCids()) {
          oprot.writeFieldBegin(CIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.cids.size()));
            for (long _iter51 : struct.cids)
            {
              oprot.writeI64(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumOfNotStart()) {
        oprot.writeFieldBegin(NUM_OF_NOT_START_FIELD_DESC);
        oprot.writeI32(struct.numOfNotStart);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumOfLiving()) {
        oprot.writeFieldBegin(NUM_OF_LIVING_FIELD_DESC);
        oprot.writeI32(struct.numOfLiving);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumOfEnd()) {
        oprot.writeFieldBegin(NUM_OF_END_FIELD_DESC);
        oprot.writeI32(struct.numOfEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetEpisodes4CommonCompetitionResourceParamTupleSchemeFactory implements SchemeFactory {
    public GetEpisodes4CommonCompetitionResourceParamTupleScheme getScheme() {
      return new GetEpisodes4CommonCompetitionResourceParamTupleScheme();
    }
  }

  private static class GetEpisodes4CommonCompetitionResourceParamTupleScheme extends TupleScheme<GetEpisodes4CommonCompetitionResourceParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetEpisodes4CommonCompetitionResourceParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCids()) {
        optionals.set(0);
      }
      if (struct.isSetNumOfNotStart()) {
        optionals.set(1);
      }
      if (struct.isSetNumOfLiving()) {
        optionals.set(2);
      }
      if (struct.isSetNumOfEnd()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCids()) {
        {
          oprot.writeI32(struct.cids.size());
          for (long _iter52 : struct.cids)
          {
            oprot.writeI64(_iter52);
          }
        }
      }
      if (struct.isSetNumOfNotStart()) {
        oprot.writeI32(struct.numOfNotStart);
      }
      if (struct.isSetNumOfLiving()) {
        oprot.writeI32(struct.numOfLiving);
      }
      if (struct.isSetNumOfEnd()) {
        oprot.writeI32(struct.numOfEnd);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetEpisodes4CommonCompetitionResourceParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cids = new ArrayList<Long>(_list53.size);
          long _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readI64();
            struct.cids.add(_elem54);
          }
        }
        struct.setCidsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.numOfNotStart = iprot.readI32();
        struct.setNumOfNotStartIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numOfLiving = iprot.readI32();
        struct.setNumOfLivingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.numOfEnd = iprot.readI32();
        struct.setNumOfEndIsSet(true);
      }
    }
  }

}

