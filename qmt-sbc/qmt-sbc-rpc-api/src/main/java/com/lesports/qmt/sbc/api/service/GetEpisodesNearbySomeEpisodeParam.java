/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取某节目附近的其他节目,上一场和下一场
 * 某一轮的节目
 * 某一站的节目
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetEpisodesNearbySomeEpisodeParam implements org.apache.thrift.TBase<GetEpisodesNearbySomeEpisodeParam, GetEpisodesNearbySomeEpisodeParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetEpisodesNearbySomeEpisodeParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEpisodesNearbySomeEpisodeParam");

  private static final org.apache.thrift.protocol.TField EPISODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("episodeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LIVE_SHOW_STATUS_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveShowStatusParam", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LIVE_TYPE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("liveTypeParam", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetEpisodesNearbySomeEpisodeParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetEpisodesNearbySomeEpisodeParamTupleSchemeFactory());
  }

  private long episodeId; // optional
  private LiveShowStatusParam liveShowStatusParam; // optional
  private LiveTypeParam liveTypeParam; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EPISODE_ID((short)1, "episodeId"),
    /**
     * 
     * @see LiveShowStatusParam
     */
    LIVE_SHOW_STATUS_PARAM((short)2, "liveShowStatusParam"),
    /**
     * 
     * @see LiveTypeParam
     */
    LIVE_TYPE_PARAM((short)3, "liveTypeParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EPISODE_ID
          return EPISODE_ID;
        case 2: // LIVE_SHOW_STATUS_PARAM
          return LIVE_SHOW_STATUS_PARAM;
        case 3: // LIVE_TYPE_PARAM
          return LIVE_TYPE_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EPISODEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EPISODE_ID,_Fields.LIVE_SHOW_STATUS_PARAM,_Fields.LIVE_TYPE_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EPISODE_ID, new org.apache.thrift.meta_data.FieldMetaData("episodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIVE_SHOW_STATUS_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveShowStatusParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveShowStatusParam.class)));
    tmpMap.put(_Fields.LIVE_TYPE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("liveTypeParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LiveTypeParam.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEpisodesNearbySomeEpisodeParam.class, metaDataMap);
  }

  public GetEpisodesNearbySomeEpisodeParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetEpisodesNearbySomeEpisodeParam(GetEpisodesNearbySomeEpisodeParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.episodeId = other.episodeId;
    if (other.isSetLiveShowStatusParam()) {
      this.liveShowStatusParam = other.liveShowStatusParam;
    }
    if (other.isSetLiveTypeParam()) {
      this.liveTypeParam = other.liveTypeParam;
    }
  }

  public GetEpisodesNearbySomeEpisodeParam deepCopy() {
    return new GetEpisodesNearbySomeEpisodeParam(this);
  }

  @Override
  public void clear() {
    setEpisodeIdIsSet(false);
    this.episodeId = 0;
    this.liveShowStatusParam = null;
    this.liveTypeParam = null;
  }

  public long getEpisodeId() {
    return this.episodeId;
  }

  public void setEpisodeId(long episodeId) {
    this.episodeId = episodeId;
    setEpisodeIdIsSet(true);
  }

  public void unsetEpisodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EPISODEID_ISSET_ID);
  }

  /** Returns true if field episodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEpisodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __EPISODEID_ISSET_ID);
  }

  public void setEpisodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EPISODEID_ISSET_ID, value);
  }

  /**
   * 
   * @see LiveShowStatusParam
   */
  public LiveShowStatusParam getLiveShowStatusParam() {
    return this.liveShowStatusParam;
  }

  /**
   * 
   * @see LiveShowStatusParam
   */
  public void setLiveShowStatusParam(LiveShowStatusParam liveShowStatusParam) {
    this.liveShowStatusParam = liveShowStatusParam;
  }

  public void unsetLiveShowStatusParam() {
    this.liveShowStatusParam = null;
  }

  /** Returns true if field liveShowStatusParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveShowStatusParam() {
    return this.liveShowStatusParam != null;
  }

  public void setLiveShowStatusParamIsSet(boolean value) {
    if (!value) {
      this.liveShowStatusParam = null;
    }
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public LiveTypeParam getLiveTypeParam() {
    return this.liveTypeParam;
  }

  /**
   * 
   * @see LiveTypeParam
   */
  public void setLiveTypeParam(LiveTypeParam liveTypeParam) {
    this.liveTypeParam = liveTypeParam;
  }

  public void unsetLiveTypeParam() {
    this.liveTypeParam = null;
  }

  /** Returns true if field liveTypeParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveTypeParam() {
    return this.liveTypeParam != null;
  }

  public void setLiveTypeParamIsSet(boolean value) {
    if (!value) {
      this.liveTypeParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EPISODE_ID:
      if (value == null) {
        unsetEpisodeId();
      } else {
        setEpisodeId((Long)value);
      }
      break;

    case LIVE_SHOW_STATUS_PARAM:
      if (value == null) {
        unsetLiveShowStatusParam();
      } else {
        setLiveShowStatusParam((LiveShowStatusParam)value);
      }
      break;

    case LIVE_TYPE_PARAM:
      if (value == null) {
        unsetLiveTypeParam();
      } else {
        setLiveTypeParam((LiveTypeParam)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EPISODE_ID:
      return Long.valueOf(getEpisodeId());

    case LIVE_SHOW_STATUS_PARAM:
      return getLiveShowStatusParam();

    case LIVE_TYPE_PARAM:
      return getLiveTypeParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EPISODE_ID:
      return isSetEpisodeId();
    case LIVE_SHOW_STATUS_PARAM:
      return isSetLiveShowStatusParam();
    case LIVE_TYPE_PARAM:
      return isSetLiveTypeParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetEpisodesNearbySomeEpisodeParam)
      return this.equals((GetEpisodesNearbySomeEpisodeParam)that);
    return false;
  }

  public boolean equals(GetEpisodesNearbySomeEpisodeParam that) {
    if (that == null)
      return false;

    boolean this_present_episodeId = true && this.isSetEpisodeId();
    boolean that_present_episodeId = true && that.isSetEpisodeId();
    if (this_present_episodeId || that_present_episodeId) {
      if (!(this_present_episodeId && that_present_episodeId))
        return false;
      if (this.episodeId != that.episodeId)
        return false;
    }

    boolean this_present_liveShowStatusParam = true && this.isSetLiveShowStatusParam();
    boolean that_present_liveShowStatusParam = true && that.isSetLiveShowStatusParam();
    if (this_present_liveShowStatusParam || that_present_liveShowStatusParam) {
      if (!(this_present_liveShowStatusParam && that_present_liveShowStatusParam))
        return false;
      if (!this.liveShowStatusParam.equals(that.liveShowStatusParam))
        return false;
    }

    boolean this_present_liveTypeParam = true && this.isSetLiveTypeParam();
    boolean that_present_liveTypeParam = true && that.isSetLiveTypeParam();
    if (this_present_liveTypeParam || that_present_liveTypeParam) {
      if (!(this_present_liveTypeParam && that_present_liveTypeParam))
        return false;
      if (!this.liveTypeParam.equals(that.liveTypeParam))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_episodeId = true && (isSetEpisodeId());
    list.add(present_episodeId);
    if (present_episodeId)
      list.add(episodeId);

    boolean present_liveShowStatusParam = true && (isSetLiveShowStatusParam());
    list.add(present_liveShowStatusParam);
    if (present_liveShowStatusParam)
      list.add(liveShowStatusParam.getValue());

    boolean present_liveTypeParam = true && (isSetLiveTypeParam());
    list.add(present_liveTypeParam);
    if (present_liveTypeParam)
      list.add(liveTypeParam.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(GetEpisodesNearbySomeEpisodeParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEpisodeId()).compareTo(other.isSetEpisodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpisodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.episodeId, other.episodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveShowStatusParam()).compareTo(other.isSetLiveShowStatusParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveShowStatusParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveShowStatusParam, other.liveShowStatusParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveTypeParam()).compareTo(other.isSetLiveTypeParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveTypeParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveTypeParam, other.liveTypeParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetEpisodesNearbySomeEpisodeParam(");
    boolean first = true;

    if (isSetEpisodeId()) {
      sb.append("episodeId:");
      sb.append(this.episodeId);
      first = false;
    }
    if (isSetLiveShowStatusParam()) {
      if (!first) sb.append(", ");
      sb.append("liveShowStatusParam:");
      if (this.liveShowStatusParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveShowStatusParam);
      }
      first = false;
    }
    if (isSetLiveTypeParam()) {
      if (!first) sb.append(", ");
      sb.append("liveTypeParam:");
      if (this.liveTypeParam == null) {
        sb.append("null");
      } else {
        sb.append(this.liveTypeParam);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetEpisodesNearbySomeEpisodeParamStandardSchemeFactory implements SchemeFactory {
    public GetEpisodesNearbySomeEpisodeParamStandardScheme getScheme() {
      return new GetEpisodesNearbySomeEpisodeParamStandardScheme();
    }
  }

  private static class GetEpisodesNearbySomeEpisodeParamStandardScheme extends StandardScheme<GetEpisodesNearbySomeEpisodeParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetEpisodesNearbySomeEpisodeParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EPISODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.episodeId = iprot.readI64();
              struct.setEpisodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIVE_SHOW_STATUS_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveShowStatusParam = com.lesports.qmt.sbc.api.service.LiveShowStatusParam.findByValue(iprot.readI32());
              struct.setLiveShowStatusParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIVE_TYPE_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
              struct.setLiveTypeParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetEpisodesNearbySomeEpisodeParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEpisodeId()) {
        oprot.writeFieldBegin(EPISODE_ID_FIELD_DESC);
        oprot.writeI64(struct.episodeId);
        oprot.writeFieldEnd();
      }
      if (struct.liveShowStatusParam != null) {
        if (struct.isSetLiveShowStatusParam()) {
          oprot.writeFieldBegin(LIVE_SHOW_STATUS_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveShowStatusParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.liveTypeParam != null) {
        if (struct.isSetLiveTypeParam()) {
          oprot.writeFieldBegin(LIVE_TYPE_PARAM_FIELD_DESC);
          oprot.writeI32(struct.liveTypeParam.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetEpisodesNearbySomeEpisodeParamTupleSchemeFactory implements SchemeFactory {
    public GetEpisodesNearbySomeEpisodeParamTupleScheme getScheme() {
      return new GetEpisodesNearbySomeEpisodeParamTupleScheme();
    }
  }

  private static class GetEpisodesNearbySomeEpisodeParamTupleScheme extends TupleScheme<GetEpisodesNearbySomeEpisodeParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetEpisodesNearbySomeEpisodeParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEpisodeId()) {
        optionals.set(0);
      }
      if (struct.isSetLiveShowStatusParam()) {
        optionals.set(1);
      }
      if (struct.isSetLiveTypeParam()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEpisodeId()) {
        oprot.writeI64(struct.episodeId);
      }
      if (struct.isSetLiveShowStatusParam()) {
        oprot.writeI32(struct.liveShowStatusParam.getValue());
      }
      if (struct.isSetLiveTypeParam()) {
        oprot.writeI32(struct.liveTypeParam.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetEpisodesNearbySomeEpisodeParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.episodeId = iprot.readI64();
        struct.setEpisodeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.liveShowStatusParam = com.lesports.qmt.sbc.api.service.LiveShowStatusParam.findByValue(iprot.readI32());
        struct.setLiveShowStatusParamIsSet(true);
      }
      if (incoming.get(2)) {
        struct.liveTypeParam = com.lesports.qmt.sbc.api.service.LiveTypeParam.findByValue(iprot.readI32());
        struct.setLiveTypeParamIsSet(true);
      }
    }
  }

}

