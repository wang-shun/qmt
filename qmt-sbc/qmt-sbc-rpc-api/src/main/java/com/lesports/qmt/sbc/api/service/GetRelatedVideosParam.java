/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取相关视频的请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-11")
public class GetRelatedVideosParam implements org.apache.thrift.TBase<GetRelatedVideosParam, GetRelatedVideosParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetRelatedVideosParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRelatedVideosParam");

  private static final org.apache.thrift.protocol.TField RELATED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetRelatedVideosParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetRelatedVideosParamTupleSchemeFactory());
  }

  private long relatedId; // required
  private long cid; // optional
  private List<com.lesports.qmt.sbc.api.common.VideoContentType> types; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATED_ID((short)1, "relatedId"),
    CID((short)2, "cid"),
    TYPES((short)3, "types");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATED_ID
          return RELATED_ID;
        case 2: // CID
          return CID;
        case 3: // TYPES
          return TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RELATEDID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.TYPES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATED_ID, new org.apache.thrift.meta_data.FieldMetaData("relatedId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.VideoContentType.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRelatedVideosParam.class, metaDataMap);
  }

  public GetRelatedVideosParam() {
  }

  public GetRelatedVideosParam(
    long relatedId)
  {
    this();
    this.relatedId = relatedId;
    setRelatedIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetRelatedVideosParam(GetRelatedVideosParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.relatedId = other.relatedId;
    this.cid = other.cid;
    if (other.isSetTypes()) {
      List<com.lesports.qmt.sbc.api.common.VideoContentType> __this__types = new ArrayList<com.lesports.qmt.sbc.api.common.VideoContentType>(other.types.size());
      for (com.lesports.qmt.sbc.api.common.VideoContentType other_element : other.types) {
        __this__types.add(other_element);
      }
      this.types = __this__types;
    }
  }

  public GetRelatedVideosParam deepCopy() {
    return new GetRelatedVideosParam(this);
  }

  @Override
  public void clear() {
    setRelatedIdIsSet(false);
    this.relatedId = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.types = null;
  }

  public long getRelatedId() {
    return this.relatedId;
  }

  public void setRelatedId(long relatedId) {
    this.relatedId = relatedId;
    setRelatedIdIsSet(true);
  }

  public void unsetRelatedId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEDID_ISSET_ID);
  }

  /** Returns true if field relatedId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEDID_ISSET_ID);
  }

  public void setRelatedIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEDID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public int getTypesSize() {
    return (this.types == null) ? 0 : this.types.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbc.api.common.VideoContentType> getTypesIterator() {
    return (this.types == null) ? null : this.types.iterator();
  }

  public void addToTypes(com.lesports.qmt.sbc.api.common.VideoContentType elem) {
    if (this.types == null) {
      this.types = new ArrayList<com.lesports.qmt.sbc.api.common.VideoContentType>();
    }
    this.types.add(elem);
  }

  public List<com.lesports.qmt.sbc.api.common.VideoContentType> getTypes() {
    return this.types;
  }

  public void setTypes(List<com.lesports.qmt.sbc.api.common.VideoContentType> types) {
    this.types = types;
  }

  public void unsetTypes() {
    this.types = null;
  }

  /** Returns true if field types is set (has been assigned a value) and false otherwise */
  public boolean isSetTypes() {
    return this.types != null;
  }

  public void setTypesIsSet(boolean value) {
    if (!value) {
      this.types = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATED_ID:
      if (value == null) {
        unsetRelatedId();
      } else {
        setRelatedId((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case TYPES:
      if (value == null) {
        unsetTypes();
      } else {
        setTypes((List<com.lesports.qmt.sbc.api.common.VideoContentType>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATED_ID:
      return Long.valueOf(getRelatedId());

    case CID:
      return Long.valueOf(getCid());

    case TYPES:
      return getTypes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATED_ID:
      return isSetRelatedId();
    case CID:
      return isSetCid();
    case TYPES:
      return isSetTypes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetRelatedVideosParam)
      return this.equals((GetRelatedVideosParam)that);
    return false;
  }

  public boolean equals(GetRelatedVideosParam that) {
    if (that == null)
      return false;

    boolean this_present_relatedId = true;
    boolean that_present_relatedId = true;
    if (this_present_relatedId || that_present_relatedId) {
      if (!(this_present_relatedId && that_present_relatedId))
        return false;
      if (this.relatedId != that.relatedId)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_types = true && this.isSetTypes();
    boolean that_present_types = true && that.isSetTypes();
    if (this_present_types || that_present_types) {
      if (!(this_present_types && that_present_types))
        return false;
      if (!this.types.equals(that.types))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_relatedId = true;
    list.add(present_relatedId);
    if (present_relatedId)
      list.add(relatedId);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_types = true && (isSetTypes());
    list.add(present_types);
    if (present_types)
      list.add(types);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetRelatedVideosParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelatedId()).compareTo(other.isSetRelatedId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedId, other.relatedId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetRelatedVideosParam(");
    boolean first = true;

    sb.append("relatedId:");
    sb.append(this.relatedId);
    first = false;
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetTypes()) {
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetRelatedId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'relatedId' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetRelatedVideosParamStandardSchemeFactory implements SchemeFactory {
    public GetRelatedVideosParamStandardScheme getScheme() {
      return new GetRelatedVideosParamStandardScheme();
    }
  }

  private static class GetRelatedVideosParamStandardScheme extends StandardScheme<GetRelatedVideosParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetRelatedVideosParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.relatedId = iprot.readI64();
              struct.setRelatedIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.types = new ArrayList<com.lesports.qmt.sbc.api.common.VideoContentType>(_list0.size);
                com.lesports.qmt.sbc.api.common.VideoContentType _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = com.lesports.qmt.sbc.api.common.VideoContentType.findByValue(iprot.readI32());
                  struct.types.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetRelatedVideosParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RELATED_ID_FIELD_DESC);
      oprot.writeI64(struct.relatedId);
      oprot.writeFieldEnd();
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.types != null) {
        if (struct.isSetTypes()) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.types.size()));
            for (com.lesports.qmt.sbc.api.common.VideoContentType _iter3 : struct.types)
            {
              oprot.writeI32(_iter3.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetRelatedVideosParamTupleSchemeFactory implements SchemeFactory {
    public GetRelatedVideosParamTupleScheme getScheme() {
      return new GetRelatedVideosParamTupleScheme();
    }
  }

  private static class GetRelatedVideosParamTupleScheme extends TupleScheme<GetRelatedVideosParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetRelatedVideosParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.relatedId);
      BitSet optionals = new BitSet();
      if (struct.isSetCid()) {
        optionals.set(0);
      }
      if (struct.isSetTypes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetTypes()) {
        {
          oprot.writeI32(struct.types.size());
          for (com.lesports.qmt.sbc.api.common.VideoContentType _iter4 : struct.types)
          {
            oprot.writeI32(_iter4.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetRelatedVideosParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.relatedId = iprot.readI64();
      struct.setRelatedIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.types = new ArrayList<com.lesports.qmt.sbc.api.common.VideoContentType>(_list5.size);
          com.lesports.qmt.sbc.api.common.VideoContentType _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = com.lesports.qmt.sbc.api.common.VideoContentType.findByValue(iprot.readI32());
            struct.types.add(_elem6);
          }
        }
        struct.setTypesIsSet(true);
      }
    }
  }

}

