/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-27")
public class TSbcEpisodeService {

  /**
   * Lesports Quan Mei Ti Episode Service Definition.
   * 
   */
  public interface Iface {

    /**
     * 晋级之路
     * 
     * 
     * @param cid
     * @param csid
     * @param caller
     */
    public List<Long> getTheRoadOfAdvance(long cid, long csid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 从当前时间开始获取节目列表
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getCurrentEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 按时间轴获取节目列表
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTimelineEpisodesByCids(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 按天计算节目数量
     * 
     * 
     * @param p
     * @param caller
     */
    public List<Long> countEpisodesByDay(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某天的节目列表
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getSomeDayEpisodeIds(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某天的节目列表
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getSomeDayEpisodeIdsWithTimezone(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取有节目的日期
     * 
     * 
     * @param p
     * @param caller
     */
    public List<String> getStartDatesBySomeDayEpisodeParam(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某个赛季，某个阶段的的节目信息,如(第几轮的比赛)
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getEpisodeIdsOfSeasonByMetaEntryId(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取和某节目相关的其他节目
     * 
     * 
     * @param episodeId
     * @param count
     * @param caller
     */
    public List<Long> getEpisodeIdsRelatedWithSomeEpisode(long episodeId, int count, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某节目附近的其他节目,上一场和下一场
     * 
     * 
     * @param p
     * @param caller
     */
    public Map<String,Long> getEpisodeIdsNearbySomeEpisode(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据节目id，获取Combo节目信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TComboEpisode getTComboEpisodeById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据节目id，批量获取Combo节目信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getTComboEpisodesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取专辑下的节目列表
     * 
     * 
     * @param albumId
     * @param page
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getTComboEpisodesInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取(奥运)赛程
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取(奥运)赛程总数
     * 
     * 
     * @param p
     * @param caller
     */
    public long countEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据liveid获取节目
     * 
     * @param liveId
     * @param caller
     */
    public long getEpisodeIdByLiveId(String liveId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取图文直播id所关联的节目id
     * 
     * @param textLiveId
     * @param caller
     */
    public long getEpisodeIdByTextLiveId(long textLiveId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据id获取往期的节目
     *  
     * 
     * @param albumId
     * @param page
     * @param caller
     */
    public List<Long> getPassedEpisodeIdsInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取比赛id所关联的节目id
     * 
     * @param mId
     * @param caller
     */
    public long getEpisodeIdByMid(long mId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据多个章鱼赛程ID获取节目列表
     * liveRequest: 直播请求类型: 只要直播,直播或者重点赛事,不过滤直播
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getEpisodeIdsOfOctopus(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 从当前时间开始,获取参赛者的比赛信息
     * competitorId : 参赛者id
     * csid : 赛季id, 可以为0, 为0取最新赛季,-1表示不过滤赛季
     * statusRequest : 直播请求状态,未开始,比赛中,比赛后,未结束
     * liveRequest: 直播请求类型: 只要直播,直播或者重点赛事,不过滤直播
     * pageRequest: 分页请求
     * 
     * 
     * @param competitorId
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getCurrentEpisodeIdsByCompetitorId(long competitorId, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 超级手机桌面
     * 
     * 
     * @param date
     * @param gameType
     * @param caller
     */
    public List<Long> getLephoneDesktopChannelEpisodes(String date, long gameType, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * app3.0获取一段时间的推荐比赛
     * 
     * 
     * @param caller
     */
    public List<Long> getPeriodAppRecommendEpisodes(com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 从当前时间开始获取会员节目列表
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getCurrentMemberEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取直播券对应的赛程列表
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTicketEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通栏比赛卡片
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getEpisodeIds4CommonCompetitionResource(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTheRoadOfAdvance(long cid, long csid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCurrentEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTimelineEpisodesByCids(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countEpisodesByDay(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSomeDayEpisodeIds(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSomeDayEpisodeIdsWithTimezone(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStartDatesBySomeDayEpisodeParam(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdsOfSeasonByMetaEntryId(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdsRelatedWithSomeEpisode(long episodeId, int count, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdsNearbySomeEpisode(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTComboEpisodeById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTComboEpisodesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTComboEpisodesInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdByLiveId(String liveId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdByTextLiveId(long textLiveId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPassedEpisodeIdsInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdByMid(long mId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIdsOfOctopus(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCurrentEpisodeIdsByCompetitorId(long competitorId, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLephoneDesktopChannelEpisodes(String date, long gameType, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPeriodAppRecommendEpisodes(com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCurrentMemberEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTicketEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEpisodeIds4CommonCompetitionResource(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Long> getTheRoadOfAdvance(long cid, long csid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTheRoadOfAdvance(cid, csid, caller);
      return recv_getTheRoadOfAdvance();
    }

    public void send_getTheRoadOfAdvance(long cid, long csid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTheRoadOfAdvance_args args = new getTheRoadOfAdvance_args();
      args.setCid(cid);
      args.setCsid(csid);
      args.setCaller(caller);
      sendBase("getTheRoadOfAdvance", args);
    }

    public List<Long> recv_getTheRoadOfAdvance() throws org.apache.thrift.TException
    {
      getTheRoadOfAdvance_result result = new getTheRoadOfAdvance_result();
      receiveBase(result, "getTheRoadOfAdvance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTheRoadOfAdvance failed: unknown result");
    }

    public List<Long> getCurrentEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getCurrentEpisodeIds(p, page, caller);
      return recv_getCurrentEpisodeIds();
    }

    public void send_getCurrentEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getCurrentEpisodeIds_args args = new getCurrentEpisodeIds_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getCurrentEpisodeIds", args);
    }

    public List<Long> recv_getCurrentEpisodeIds() throws org.apache.thrift.TException
    {
      getCurrentEpisodeIds_result result = new getCurrentEpisodeIds_result();
      receiveBase(result, "getCurrentEpisodeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentEpisodeIds failed: unknown result");
    }

    public List<Long> getTimelineEpisodesByCids(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTimelineEpisodesByCids(p, page, caller);
      return recv_getTimelineEpisodesByCids();
    }

    public void send_getTimelineEpisodesByCids(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTimelineEpisodesByCids_args args = new getTimelineEpisodesByCids_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTimelineEpisodesByCids", args);
    }

    public List<Long> recv_getTimelineEpisodesByCids() throws org.apache.thrift.TException
    {
      getTimelineEpisodesByCids_result result = new getTimelineEpisodesByCids_result();
      receiveBase(result, "getTimelineEpisodesByCids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTimelineEpisodesByCids failed: unknown result");
    }

    public List<Long> countEpisodesByDay(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_countEpisodesByDay(p, caller);
      return recv_countEpisodesByDay();
    }

    public void send_countEpisodesByDay(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      countEpisodesByDay_args args = new countEpisodesByDay_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("countEpisodesByDay", args);
    }

    public List<Long> recv_countEpisodesByDay() throws org.apache.thrift.TException
    {
      countEpisodesByDay_result result = new countEpisodesByDay_result();
      receiveBase(result, "countEpisodesByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countEpisodesByDay failed: unknown result");
    }

    public List<Long> getSomeDayEpisodeIds(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getSomeDayEpisodeIds(p, page, caller);
      return recv_getSomeDayEpisodeIds();
    }

    public void send_getSomeDayEpisodeIds(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getSomeDayEpisodeIds_args args = new getSomeDayEpisodeIds_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getSomeDayEpisodeIds", args);
    }

    public List<Long> recv_getSomeDayEpisodeIds() throws org.apache.thrift.TException
    {
      getSomeDayEpisodeIds_result result = new getSomeDayEpisodeIds_result();
      receiveBase(result, "getSomeDayEpisodeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSomeDayEpisodeIds failed: unknown result");
    }

    public List<Long> getSomeDayEpisodeIdsWithTimezone(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getSomeDayEpisodeIdsWithTimezone(p, page, caller);
      return recv_getSomeDayEpisodeIdsWithTimezone();
    }

    public void send_getSomeDayEpisodeIdsWithTimezone(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getSomeDayEpisodeIdsWithTimezone_args args = new getSomeDayEpisodeIdsWithTimezone_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getSomeDayEpisodeIdsWithTimezone", args);
    }

    public List<Long> recv_getSomeDayEpisodeIdsWithTimezone() throws org.apache.thrift.TException
    {
      getSomeDayEpisodeIdsWithTimezone_result result = new getSomeDayEpisodeIdsWithTimezone_result();
      receiveBase(result, "getSomeDayEpisodeIdsWithTimezone");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSomeDayEpisodeIdsWithTimezone failed: unknown result");
    }

    public List<String> getStartDatesBySomeDayEpisodeParam(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getStartDatesBySomeDayEpisodeParam(p, caller);
      return recv_getStartDatesBySomeDayEpisodeParam();
    }

    public void send_getStartDatesBySomeDayEpisodeParam(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getStartDatesBySomeDayEpisodeParam_args args = new getStartDatesBySomeDayEpisodeParam_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("getStartDatesBySomeDayEpisodeParam", args);
    }

    public List<String> recv_getStartDatesBySomeDayEpisodeParam() throws org.apache.thrift.TException
    {
      getStartDatesBySomeDayEpisodeParam_result result = new getStartDatesBySomeDayEpisodeParam_result();
      receiveBase(result, "getStartDatesBySomeDayEpisodeParam");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStartDatesBySomeDayEpisodeParam failed: unknown result");
    }

    public List<Long> getEpisodeIdsOfSeasonByMetaEntryId(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdsOfSeasonByMetaEntryId(p, page, caller);
      return recv_getEpisodeIdsOfSeasonByMetaEntryId();
    }

    public void send_getEpisodeIdsOfSeasonByMetaEntryId(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdsOfSeasonByMetaEntryId_args args = new getEpisodeIdsOfSeasonByMetaEntryId_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getEpisodeIdsOfSeasonByMetaEntryId", args);
    }

    public List<Long> recv_getEpisodeIdsOfSeasonByMetaEntryId() throws org.apache.thrift.TException
    {
      getEpisodeIdsOfSeasonByMetaEntryId_result result = new getEpisodeIdsOfSeasonByMetaEntryId_result();
      receiveBase(result, "getEpisodeIdsOfSeasonByMetaEntryId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdsOfSeasonByMetaEntryId failed: unknown result");
    }

    public List<Long> getEpisodeIdsRelatedWithSomeEpisode(long episodeId, int count, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdsRelatedWithSomeEpisode(episodeId, count, caller);
      return recv_getEpisodeIdsRelatedWithSomeEpisode();
    }

    public void send_getEpisodeIdsRelatedWithSomeEpisode(long episodeId, int count, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdsRelatedWithSomeEpisode_args args = new getEpisodeIdsRelatedWithSomeEpisode_args();
      args.setEpisodeId(episodeId);
      args.setCount(count);
      args.setCaller(caller);
      sendBase("getEpisodeIdsRelatedWithSomeEpisode", args);
    }

    public List<Long> recv_getEpisodeIdsRelatedWithSomeEpisode() throws org.apache.thrift.TException
    {
      getEpisodeIdsRelatedWithSomeEpisode_result result = new getEpisodeIdsRelatedWithSomeEpisode_result();
      receiveBase(result, "getEpisodeIdsRelatedWithSomeEpisode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdsRelatedWithSomeEpisode failed: unknown result");
    }

    public Map<String,Long> getEpisodeIdsNearbySomeEpisode(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdsNearbySomeEpisode(p, caller);
      return recv_getEpisodeIdsNearbySomeEpisode();
    }

    public void send_getEpisodeIdsNearbySomeEpisode(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdsNearbySomeEpisode_args args = new getEpisodeIdsNearbySomeEpisode_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("getEpisodeIdsNearbySomeEpisode", args);
    }

    public Map<String,Long> recv_getEpisodeIdsNearbySomeEpisode() throws org.apache.thrift.TException
    {
      getEpisodeIdsNearbySomeEpisode_result result = new getEpisodeIdsNearbySomeEpisode_result();
      receiveBase(result, "getEpisodeIdsNearbySomeEpisode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdsNearbySomeEpisode failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TComboEpisode getTComboEpisodeById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTComboEpisodeById(id, caller);
      return recv_getTComboEpisodeById();
    }

    public void send_getTComboEpisodeById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTComboEpisodeById_args args = new getTComboEpisodeById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTComboEpisodeById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TComboEpisode recv_getTComboEpisodeById() throws org.apache.thrift.TException
    {
      getTComboEpisodeById_result result = new getTComboEpisodeById_result();
      receiveBase(result, "getTComboEpisodeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTComboEpisodeById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getTComboEpisodesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTComboEpisodesByIds(ids, caller);
      return recv_getTComboEpisodesByIds();
    }

    public void send_getTComboEpisodesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTComboEpisodesByIds_args args = new getTComboEpisodesByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTComboEpisodesByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> recv_getTComboEpisodesByIds() throws org.apache.thrift.TException
    {
      getTComboEpisodesByIds_result result = new getTComboEpisodesByIds_result();
      receiveBase(result, "getTComboEpisodesByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTComboEpisodesByIds failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getTComboEpisodesInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTComboEpisodesInAlbum(albumId, page, caller);
      return recv_getTComboEpisodesInAlbum();
    }

    public void send_getTComboEpisodesInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTComboEpisodesInAlbum_args args = new getTComboEpisodesInAlbum_args();
      args.setAlbumId(albumId);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTComboEpisodesInAlbum", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> recv_getTComboEpisodesInAlbum() throws org.apache.thrift.TException
    {
      getTComboEpisodesInAlbum_result result = new getTComboEpisodesInAlbum_result();
      receiveBase(result, "getTComboEpisodesInAlbum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTComboEpisodesInAlbum failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodes4OlyMatchs(p, page, caller);
      return recv_getEpisodes4OlyMatchs();
    }

    public void send_getEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodes4OlyMatchs_args args = new getEpisodes4OlyMatchs_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getEpisodes4OlyMatchs", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> recv_getEpisodes4OlyMatchs() throws org.apache.thrift.TException
    {
      getEpisodes4OlyMatchs_result result = new getEpisodes4OlyMatchs_result();
      receiveBase(result, "getEpisodes4OlyMatchs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodes4OlyMatchs failed: unknown result");
    }

    public long countEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_countEpisodes4OlyMatchs(p, caller);
      return recv_countEpisodes4OlyMatchs();
    }

    public void send_countEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      countEpisodes4OlyMatchs_args args = new countEpisodes4OlyMatchs_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("countEpisodes4OlyMatchs", args);
    }

    public long recv_countEpisodes4OlyMatchs() throws org.apache.thrift.TException
    {
      countEpisodes4OlyMatchs_result result = new countEpisodes4OlyMatchs_result();
      receiveBase(result, "countEpisodes4OlyMatchs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countEpisodes4OlyMatchs failed: unknown result");
    }

    public long getEpisodeIdByLiveId(String liveId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdByLiveId(liveId, caller);
      return recv_getEpisodeIdByLiveId();
    }

    public void send_getEpisodeIdByLiveId(String liveId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdByLiveId_args args = new getEpisodeIdByLiveId_args();
      args.setLiveId(liveId);
      args.setCaller(caller);
      sendBase("getEpisodeIdByLiveId", args);
    }

    public long recv_getEpisodeIdByLiveId() throws org.apache.thrift.TException
    {
      getEpisodeIdByLiveId_result result = new getEpisodeIdByLiveId_result();
      receiveBase(result, "getEpisodeIdByLiveId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdByLiveId failed: unknown result");
    }

    public long getEpisodeIdByTextLiveId(long textLiveId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdByTextLiveId(textLiveId, caller);
      return recv_getEpisodeIdByTextLiveId();
    }

    public void send_getEpisodeIdByTextLiveId(long textLiveId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdByTextLiveId_args args = new getEpisodeIdByTextLiveId_args();
      args.setTextLiveId(textLiveId);
      args.setCaller(caller);
      sendBase("getEpisodeIdByTextLiveId", args);
    }

    public long recv_getEpisodeIdByTextLiveId() throws org.apache.thrift.TException
    {
      getEpisodeIdByTextLiveId_result result = new getEpisodeIdByTextLiveId_result();
      receiveBase(result, "getEpisodeIdByTextLiveId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdByTextLiveId failed: unknown result");
    }

    public List<Long> getPassedEpisodeIdsInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getPassedEpisodeIdsInAlbum(albumId, page, caller);
      return recv_getPassedEpisodeIdsInAlbum();
    }

    public void send_getPassedEpisodeIdsInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getPassedEpisodeIdsInAlbum_args args = new getPassedEpisodeIdsInAlbum_args();
      args.setAlbumId(albumId);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getPassedEpisodeIdsInAlbum", args);
    }

    public List<Long> recv_getPassedEpisodeIdsInAlbum() throws org.apache.thrift.TException
    {
      getPassedEpisodeIdsInAlbum_result result = new getPassedEpisodeIdsInAlbum_result();
      receiveBase(result, "getPassedEpisodeIdsInAlbum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPassedEpisodeIdsInAlbum failed: unknown result");
    }

    public long getEpisodeIdByMid(long mId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdByMid(mId, caller);
      return recv_getEpisodeIdByMid();
    }

    public void send_getEpisodeIdByMid(long mId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdByMid_args args = new getEpisodeIdByMid_args();
      args.setMId(mId);
      args.setCaller(caller);
      sendBase("getEpisodeIdByMid", args);
    }

    public long recv_getEpisodeIdByMid() throws org.apache.thrift.TException
    {
      getEpisodeIdByMid_result result = new getEpisodeIdByMid_result();
      receiveBase(result, "getEpisodeIdByMid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdByMid failed: unknown result");
    }

    public List<Long> getEpisodeIdsOfOctopus(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIdsOfOctopus(p, page, caller);
      return recv_getEpisodeIdsOfOctopus();
    }

    public void send_getEpisodeIdsOfOctopus(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIdsOfOctopus_args args = new getEpisodeIdsOfOctopus_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getEpisodeIdsOfOctopus", args);
    }

    public List<Long> recv_getEpisodeIdsOfOctopus() throws org.apache.thrift.TException
    {
      getEpisodeIdsOfOctopus_result result = new getEpisodeIdsOfOctopus_result();
      receiveBase(result, "getEpisodeIdsOfOctopus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIdsOfOctopus failed: unknown result");
    }

    public List<Long> getCurrentEpisodeIdsByCompetitorId(long competitorId, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getCurrentEpisodeIdsByCompetitorId(competitorId, p, page, caller);
      return recv_getCurrentEpisodeIdsByCompetitorId();
    }

    public void send_getCurrentEpisodeIdsByCompetitorId(long competitorId, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getCurrentEpisodeIdsByCompetitorId_args args = new getCurrentEpisodeIdsByCompetitorId_args();
      args.setCompetitorId(competitorId);
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getCurrentEpisodeIdsByCompetitorId", args);
    }

    public List<Long> recv_getCurrentEpisodeIdsByCompetitorId() throws org.apache.thrift.TException
    {
      getCurrentEpisodeIdsByCompetitorId_result result = new getCurrentEpisodeIdsByCompetitorId_result();
      receiveBase(result, "getCurrentEpisodeIdsByCompetitorId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentEpisodeIdsByCompetitorId failed: unknown result");
    }

    public List<Long> getLephoneDesktopChannelEpisodes(String date, long gameType, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getLephoneDesktopChannelEpisodes(date, gameType, caller);
      return recv_getLephoneDesktopChannelEpisodes();
    }

    public void send_getLephoneDesktopChannelEpisodes(String date, long gameType, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getLephoneDesktopChannelEpisodes_args args = new getLephoneDesktopChannelEpisodes_args();
      args.setDate(date);
      args.setGameType(gameType);
      args.setCaller(caller);
      sendBase("getLephoneDesktopChannelEpisodes", args);
    }

    public List<Long> recv_getLephoneDesktopChannelEpisodes() throws org.apache.thrift.TException
    {
      getLephoneDesktopChannelEpisodes_result result = new getLephoneDesktopChannelEpisodes_result();
      receiveBase(result, "getLephoneDesktopChannelEpisodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLephoneDesktopChannelEpisodes failed: unknown result");
    }

    public List<Long> getPeriodAppRecommendEpisodes(com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getPeriodAppRecommendEpisodes(caller);
      return recv_getPeriodAppRecommendEpisodes();
    }

    public void send_getPeriodAppRecommendEpisodes(com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getPeriodAppRecommendEpisodes_args args = new getPeriodAppRecommendEpisodes_args();
      args.setCaller(caller);
      sendBase("getPeriodAppRecommendEpisodes", args);
    }

    public List<Long> recv_getPeriodAppRecommendEpisodes() throws org.apache.thrift.TException
    {
      getPeriodAppRecommendEpisodes_result result = new getPeriodAppRecommendEpisodes_result();
      receiveBase(result, "getPeriodAppRecommendEpisodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPeriodAppRecommendEpisodes failed: unknown result");
    }

    public List<Long> getCurrentMemberEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getCurrentMemberEpisodeIds(p, page, caller);
      return recv_getCurrentMemberEpisodeIds();
    }

    public void send_getCurrentMemberEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getCurrentMemberEpisodeIds_args args = new getCurrentMemberEpisodeIds_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getCurrentMemberEpisodeIds", args);
    }

    public List<Long> recv_getCurrentMemberEpisodeIds() throws org.apache.thrift.TException
    {
      getCurrentMemberEpisodeIds_result result = new getCurrentMemberEpisodeIds_result();
      receiveBase(result, "getCurrentMemberEpisodeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentMemberEpisodeIds failed: unknown result");
    }

    public List<Long> getTicketEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTicketEpisodeIds(p, page, caller);
      return recv_getTicketEpisodeIds();
    }

    public void send_getTicketEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTicketEpisodeIds_args args = new getTicketEpisodeIds_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTicketEpisodeIds", args);
    }

    public List<Long> recv_getTicketEpisodeIds() throws org.apache.thrift.TException
    {
      getTicketEpisodeIds_result result = new getTicketEpisodeIds_result();
      receiveBase(result, "getTicketEpisodeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTicketEpisodeIds failed: unknown result");
    }

    public List<Long> getEpisodeIds4CommonCompetitionResource(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getEpisodeIds4CommonCompetitionResource(p, page, caller);
      return recv_getEpisodeIds4CommonCompetitionResource();
    }

    public void send_getEpisodeIds4CommonCompetitionResource(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getEpisodeIds4CommonCompetitionResource_args args = new getEpisodeIds4CommonCompetitionResource_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getEpisodeIds4CommonCompetitionResource", args);
    }

    public List<Long> recv_getEpisodeIds4CommonCompetitionResource() throws org.apache.thrift.TException
    {
      getEpisodeIds4CommonCompetitionResource_result result = new getEpisodeIds4CommonCompetitionResource_result();
      receiveBase(result, "getEpisodeIds4CommonCompetitionResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEpisodeIds4CommonCompetitionResource failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTheRoadOfAdvance(long cid, long csid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTheRoadOfAdvance_call method_call = new getTheRoadOfAdvance_call(cid, csid, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTheRoadOfAdvance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cid;
      private long csid;
      private com.lesports.api.common.CallerParam caller;
      public getTheRoadOfAdvance_call(long cid, long csid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.csid = csid;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTheRoadOfAdvance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTheRoadOfAdvance_args args = new getTheRoadOfAdvance_args();
        args.setCid(cid);
        args.setCsid(csid);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTheRoadOfAdvance();
      }
    }

    public void getCurrentEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentEpisodeIds_call method_call = new getCurrentEpisodeIds_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentEpisodeIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getCurrentEpisodeIds_call(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentEpisodeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentEpisodeIds_args args = new getCurrentEpisodeIds_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentEpisodeIds();
      }
    }

    public void getTimelineEpisodesByCids(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTimelineEpisodesByCids_call method_call = new getTimelineEpisodesByCids_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTimelineEpisodesByCids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTimelineEpisodesByCids_call(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTimelineEpisodesByCids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTimelineEpisodesByCids_args args = new getTimelineEpisodesByCids_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTimelineEpisodesByCids();
      }
    }

    public void countEpisodesByDay(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countEpisodesByDay_call method_call = new countEpisodesByDay_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countEpisodesByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p;
      private com.lesports.api.common.CallerParam caller;
      public countEpisodesByDay_call(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countEpisodesByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countEpisodesByDay_args args = new countEpisodesByDay_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countEpisodesByDay();
      }
    }

    public void getSomeDayEpisodeIds(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSomeDayEpisodeIds_call method_call = new getSomeDayEpisodeIds_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSomeDayEpisodeIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getSomeDayEpisodeIds_call(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSomeDayEpisodeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSomeDayEpisodeIds_args args = new getSomeDayEpisodeIds_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSomeDayEpisodeIds();
      }
    }

    public void getSomeDayEpisodeIdsWithTimezone(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSomeDayEpisodeIdsWithTimezone_call method_call = new getSomeDayEpisodeIdsWithTimezone_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSomeDayEpisodeIdsWithTimezone_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getSomeDayEpisodeIdsWithTimezone_call(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSomeDayEpisodeIdsWithTimezone", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSomeDayEpisodeIdsWithTimezone_args args = new getSomeDayEpisodeIdsWithTimezone_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSomeDayEpisodeIdsWithTimezone();
      }
    }

    public void getStartDatesBySomeDayEpisodeParam(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStartDatesBySomeDayEpisodeParam_call method_call = new getStartDatesBySomeDayEpisodeParam_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStartDatesBySomeDayEpisodeParam_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p;
      private com.lesports.api.common.CallerParam caller;
      public getStartDatesBySomeDayEpisodeParam_call(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStartDatesBySomeDayEpisodeParam", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStartDatesBySomeDayEpisodeParam_args args = new getStartDatesBySomeDayEpisodeParam_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStartDatesBySomeDayEpisodeParam();
      }
    }

    public void getEpisodeIdsOfSeasonByMetaEntryId(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdsOfSeasonByMetaEntryId_call method_call = new getEpisodeIdsOfSeasonByMetaEntryId_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdsOfSeasonByMetaEntryId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdsOfSeasonByMetaEntryId_call(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdsOfSeasonByMetaEntryId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdsOfSeasonByMetaEntryId_args args = new getEpisodeIdsOfSeasonByMetaEntryId_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdsOfSeasonByMetaEntryId();
      }
    }

    public void getEpisodeIdsRelatedWithSomeEpisode(long episodeId, int count, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdsRelatedWithSomeEpisode_call method_call = new getEpisodeIdsRelatedWithSomeEpisode_call(episodeId, count, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdsRelatedWithSomeEpisode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long episodeId;
      private int count;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdsRelatedWithSomeEpisode_call(long episodeId, int count, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.episodeId = episodeId;
        this.count = count;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdsRelatedWithSomeEpisode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdsRelatedWithSomeEpisode_args args = new getEpisodeIdsRelatedWithSomeEpisode_args();
        args.setEpisodeId(episodeId);
        args.setCount(count);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdsRelatedWithSomeEpisode();
      }
    }

    public void getEpisodeIdsNearbySomeEpisode(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdsNearbySomeEpisode_call method_call = new getEpisodeIdsNearbySomeEpisode_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdsNearbySomeEpisode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdsNearbySomeEpisode_call(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdsNearbySomeEpisode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdsNearbySomeEpisode_args args = new getEpisodeIdsNearbySomeEpisode_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdsNearbySomeEpisode();
      }
    }

    public void getTComboEpisodeById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTComboEpisodeById_call method_call = new getTComboEpisodeById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTComboEpisodeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTComboEpisodeById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTComboEpisodeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTComboEpisodeById_args args = new getTComboEpisodeById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TComboEpisode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTComboEpisodeById();
      }
    }

    public void getTComboEpisodesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTComboEpisodesByIds_call method_call = new getTComboEpisodesByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTComboEpisodesByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTComboEpisodesByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTComboEpisodesByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTComboEpisodesByIds_args args = new getTComboEpisodesByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTComboEpisodesByIds();
      }
    }

    public void getTComboEpisodesInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTComboEpisodesInAlbum_call method_call = new getTComboEpisodesInAlbum_call(albumId, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTComboEpisodesInAlbum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long albumId;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTComboEpisodesInAlbum_call(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.albumId = albumId;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTComboEpisodesInAlbum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTComboEpisodesInAlbum_args args = new getTComboEpisodesInAlbum_args();
        args.setAlbumId(albumId);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTComboEpisodesInAlbum();
      }
    }

    public void getEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodes4OlyMatchs_call method_call = new getEpisodes4OlyMatchs_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodes4OlyMatchs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodes4OlyMatchs_call(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodes4OlyMatchs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodes4OlyMatchs_args args = new getEpisodes4OlyMatchs_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodes4OlyMatchs();
      }
    }

    public void countEpisodes4OlyMatchs(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countEpisodes4OlyMatchs_call method_call = new countEpisodes4OlyMatchs_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countEpisodes4OlyMatchs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p;
      private com.lesports.api.common.CallerParam caller;
      public countEpisodes4OlyMatchs_call(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countEpisodes4OlyMatchs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countEpisodes4OlyMatchs_args args = new countEpisodes4OlyMatchs_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countEpisodes4OlyMatchs();
      }
    }

    public void getEpisodeIdByLiveId(String liveId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdByLiveId_call method_call = new getEpisodeIdByLiveId_call(liveId, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdByLiveId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String liveId;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdByLiveId_call(String liveId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.liveId = liveId;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdByLiveId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdByLiveId_args args = new getEpisodeIdByLiveId_args();
        args.setLiveId(liveId);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdByLiveId();
      }
    }

    public void getEpisodeIdByTextLiveId(long textLiveId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdByTextLiveId_call method_call = new getEpisodeIdByTextLiveId_call(textLiveId, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdByTextLiveId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdByTextLiveId_call(long textLiveId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdByTextLiveId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdByTextLiveId_args args = new getEpisodeIdByTextLiveId_args();
        args.setTextLiveId(textLiveId);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdByTextLiveId();
      }
    }

    public void getPassedEpisodeIdsInAlbum(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPassedEpisodeIdsInAlbum_call method_call = new getPassedEpisodeIdsInAlbum_call(albumId, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPassedEpisodeIdsInAlbum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long albumId;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getPassedEpisodeIdsInAlbum_call(long albumId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.albumId = albumId;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPassedEpisodeIdsInAlbum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPassedEpisodeIdsInAlbum_args args = new getPassedEpisodeIdsInAlbum_args();
        args.setAlbumId(albumId);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPassedEpisodeIdsInAlbum();
      }
    }

    public void getEpisodeIdByMid(long mId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdByMid_call method_call = new getEpisodeIdByMid_call(mId, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdByMid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mId;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdByMid_call(long mId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mId = mId;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdByMid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdByMid_args args = new getEpisodeIdByMid_args();
        args.setMId(mId);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdByMid();
      }
    }

    public void getEpisodeIdsOfOctopus(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIdsOfOctopus_call method_call = new getEpisodeIdsOfOctopus_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIdsOfOctopus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIdsOfOctopus_call(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIdsOfOctopus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIdsOfOctopus_args args = new getEpisodeIdsOfOctopus_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIdsOfOctopus();
      }
    }

    public void getCurrentEpisodeIdsByCompetitorId(long competitorId, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentEpisodeIdsByCompetitorId_call method_call = new getCurrentEpisodeIdsByCompetitorId_call(competitorId, p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentEpisodeIdsByCompetitorId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long competitorId;
      private com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getCurrentEpisodeIdsByCompetitorId_call(long competitorId, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.competitorId = competitorId;
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentEpisodeIdsByCompetitorId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentEpisodeIdsByCompetitorId_args args = new getCurrentEpisodeIdsByCompetitorId_args();
        args.setCompetitorId(competitorId);
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentEpisodeIdsByCompetitorId();
      }
    }

    public void getLephoneDesktopChannelEpisodes(String date, long gameType, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLephoneDesktopChannelEpisodes_call method_call = new getLephoneDesktopChannelEpisodes_call(date, gameType, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLephoneDesktopChannelEpisodes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String date;
      private long gameType;
      private com.lesports.api.common.CallerParam caller;
      public getLephoneDesktopChannelEpisodes_call(String date, long gameType, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
        this.gameType = gameType;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLephoneDesktopChannelEpisodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLephoneDesktopChannelEpisodes_args args = new getLephoneDesktopChannelEpisodes_args();
        args.setDate(date);
        args.setGameType(gameType);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLephoneDesktopChannelEpisodes();
      }
    }

    public void getPeriodAppRecommendEpisodes(com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPeriodAppRecommendEpisodes_call method_call = new getPeriodAppRecommendEpisodes_call(caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPeriodAppRecommendEpisodes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.api.common.CallerParam caller;
      public getPeriodAppRecommendEpisodes_call(com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPeriodAppRecommendEpisodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPeriodAppRecommendEpisodes_args args = new getPeriodAppRecommendEpisodes_args();
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPeriodAppRecommendEpisodes();
      }
    }

    public void getCurrentMemberEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentMemberEpisodeIds_call method_call = new getCurrentMemberEpisodeIds_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentMemberEpisodeIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getCurrentMemberEpisodeIds_call(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentMemberEpisodeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentMemberEpisodeIds_args args = new getCurrentMemberEpisodeIds_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentMemberEpisodeIds();
      }
    }

    public void getTicketEpisodeIds(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTicketEpisodeIds_call method_call = new getTicketEpisodeIds_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTicketEpisodeIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTicketEpisodeIds_call(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTicketEpisodeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTicketEpisodeIds_args args = new getTicketEpisodeIds_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTicketEpisodeIds();
      }
    }

    public void getEpisodeIds4CommonCompetitionResource(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEpisodeIds4CommonCompetitionResource_call method_call = new getEpisodeIds4CommonCompetitionResource_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEpisodeIds4CommonCompetitionResource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getEpisodeIds4CommonCompetitionResource_call(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEpisodeIds4CommonCompetitionResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEpisodeIds4CommonCompetitionResource_args args = new getEpisodeIds4CommonCompetitionResource_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEpisodeIds4CommonCompetitionResource();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTheRoadOfAdvance", new getTheRoadOfAdvance());
      processMap.put("getCurrentEpisodeIds", new getCurrentEpisodeIds());
      processMap.put("getTimelineEpisodesByCids", new getTimelineEpisodesByCids());
      processMap.put("countEpisodesByDay", new countEpisodesByDay());
      processMap.put("getSomeDayEpisodeIds", new getSomeDayEpisodeIds());
      processMap.put("getSomeDayEpisodeIdsWithTimezone", new getSomeDayEpisodeIdsWithTimezone());
      processMap.put("getStartDatesBySomeDayEpisodeParam", new getStartDatesBySomeDayEpisodeParam());
      processMap.put("getEpisodeIdsOfSeasonByMetaEntryId", new getEpisodeIdsOfSeasonByMetaEntryId());
      processMap.put("getEpisodeIdsRelatedWithSomeEpisode", new getEpisodeIdsRelatedWithSomeEpisode());
      processMap.put("getEpisodeIdsNearbySomeEpisode", new getEpisodeIdsNearbySomeEpisode());
      processMap.put("getTComboEpisodeById", new getTComboEpisodeById());
      processMap.put("getTComboEpisodesByIds", new getTComboEpisodesByIds());
      processMap.put("getTComboEpisodesInAlbum", new getTComboEpisodesInAlbum());
      processMap.put("getEpisodes4OlyMatchs", new getEpisodes4OlyMatchs());
      processMap.put("countEpisodes4OlyMatchs", new countEpisodes4OlyMatchs());
      processMap.put("getEpisodeIdByLiveId", new getEpisodeIdByLiveId());
      processMap.put("getEpisodeIdByTextLiveId", new getEpisodeIdByTextLiveId());
      processMap.put("getPassedEpisodeIdsInAlbum", new getPassedEpisodeIdsInAlbum());
      processMap.put("getEpisodeIdByMid", new getEpisodeIdByMid());
      processMap.put("getEpisodeIdsOfOctopus", new getEpisodeIdsOfOctopus());
      processMap.put("getCurrentEpisodeIdsByCompetitorId", new getCurrentEpisodeIdsByCompetitorId());
      processMap.put("getLephoneDesktopChannelEpisodes", new getLephoneDesktopChannelEpisodes());
      processMap.put("getPeriodAppRecommendEpisodes", new getPeriodAppRecommendEpisodes());
      processMap.put("getCurrentMemberEpisodeIds", new getCurrentMemberEpisodeIds());
      processMap.put("getTicketEpisodeIds", new getTicketEpisodeIds());
      processMap.put("getEpisodeIds4CommonCompetitionResource", new getEpisodeIds4CommonCompetitionResource());
      return processMap;
    }

    public static class getTheRoadOfAdvance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTheRoadOfAdvance_args> {
      public getTheRoadOfAdvance() {
        super("getTheRoadOfAdvance");
      }

      public getTheRoadOfAdvance_args getEmptyArgsInstance() {
        return new getTheRoadOfAdvance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTheRoadOfAdvance_result getResult(I iface, getTheRoadOfAdvance_args args) throws org.apache.thrift.TException {
        getTheRoadOfAdvance_result result = new getTheRoadOfAdvance_result();
        result.success = iface.getTheRoadOfAdvance(args.cid, args.csid, args.caller);
        return result;
      }
    }

    public static class getCurrentEpisodeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentEpisodeIds_args> {
      public getCurrentEpisodeIds() {
        super("getCurrentEpisodeIds");
      }

      public getCurrentEpisodeIds_args getEmptyArgsInstance() {
        return new getCurrentEpisodeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentEpisodeIds_result getResult(I iface, getCurrentEpisodeIds_args args) throws org.apache.thrift.TException {
        getCurrentEpisodeIds_result result = new getCurrentEpisodeIds_result();
        result.success = iface.getCurrentEpisodeIds(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTimelineEpisodesByCids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTimelineEpisodesByCids_args> {
      public getTimelineEpisodesByCids() {
        super("getTimelineEpisodesByCids");
      }

      public getTimelineEpisodesByCids_args getEmptyArgsInstance() {
        return new getTimelineEpisodesByCids_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTimelineEpisodesByCids_result getResult(I iface, getTimelineEpisodesByCids_args args) throws org.apache.thrift.TException {
        getTimelineEpisodesByCids_result result = new getTimelineEpisodesByCids_result();
        result.success = iface.getTimelineEpisodesByCids(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class countEpisodesByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countEpisodesByDay_args> {
      public countEpisodesByDay() {
        super("countEpisodesByDay");
      }

      public countEpisodesByDay_args getEmptyArgsInstance() {
        return new countEpisodesByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countEpisodesByDay_result getResult(I iface, countEpisodesByDay_args args) throws org.apache.thrift.TException {
        countEpisodesByDay_result result = new countEpisodesByDay_result();
        result.success = iface.countEpisodesByDay(args.p, args.caller);
        return result;
      }
    }

    public static class getSomeDayEpisodeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSomeDayEpisodeIds_args> {
      public getSomeDayEpisodeIds() {
        super("getSomeDayEpisodeIds");
      }

      public getSomeDayEpisodeIds_args getEmptyArgsInstance() {
        return new getSomeDayEpisodeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSomeDayEpisodeIds_result getResult(I iface, getSomeDayEpisodeIds_args args) throws org.apache.thrift.TException {
        getSomeDayEpisodeIds_result result = new getSomeDayEpisodeIds_result();
        result.success = iface.getSomeDayEpisodeIds(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getSomeDayEpisodeIdsWithTimezone<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSomeDayEpisodeIdsWithTimezone_args> {
      public getSomeDayEpisodeIdsWithTimezone() {
        super("getSomeDayEpisodeIdsWithTimezone");
      }

      public getSomeDayEpisodeIdsWithTimezone_args getEmptyArgsInstance() {
        return new getSomeDayEpisodeIdsWithTimezone_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSomeDayEpisodeIdsWithTimezone_result getResult(I iface, getSomeDayEpisodeIdsWithTimezone_args args) throws org.apache.thrift.TException {
        getSomeDayEpisodeIdsWithTimezone_result result = new getSomeDayEpisodeIdsWithTimezone_result();
        result.success = iface.getSomeDayEpisodeIdsWithTimezone(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getStartDatesBySomeDayEpisodeParam<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStartDatesBySomeDayEpisodeParam_args> {
      public getStartDatesBySomeDayEpisodeParam() {
        super("getStartDatesBySomeDayEpisodeParam");
      }

      public getStartDatesBySomeDayEpisodeParam_args getEmptyArgsInstance() {
        return new getStartDatesBySomeDayEpisodeParam_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStartDatesBySomeDayEpisodeParam_result getResult(I iface, getStartDatesBySomeDayEpisodeParam_args args) throws org.apache.thrift.TException {
        getStartDatesBySomeDayEpisodeParam_result result = new getStartDatesBySomeDayEpisodeParam_result();
        result.success = iface.getStartDatesBySomeDayEpisodeParam(args.p, args.caller);
        return result;
      }
    }

    public static class getEpisodeIdsOfSeasonByMetaEntryId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdsOfSeasonByMetaEntryId_args> {
      public getEpisodeIdsOfSeasonByMetaEntryId() {
        super("getEpisodeIdsOfSeasonByMetaEntryId");
      }

      public getEpisodeIdsOfSeasonByMetaEntryId_args getEmptyArgsInstance() {
        return new getEpisodeIdsOfSeasonByMetaEntryId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdsOfSeasonByMetaEntryId_result getResult(I iface, getEpisodeIdsOfSeasonByMetaEntryId_args args) throws org.apache.thrift.TException {
        getEpisodeIdsOfSeasonByMetaEntryId_result result = new getEpisodeIdsOfSeasonByMetaEntryId_result();
        result.success = iface.getEpisodeIdsOfSeasonByMetaEntryId(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getEpisodeIdsRelatedWithSomeEpisode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdsRelatedWithSomeEpisode_args> {
      public getEpisodeIdsRelatedWithSomeEpisode() {
        super("getEpisodeIdsRelatedWithSomeEpisode");
      }

      public getEpisodeIdsRelatedWithSomeEpisode_args getEmptyArgsInstance() {
        return new getEpisodeIdsRelatedWithSomeEpisode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdsRelatedWithSomeEpisode_result getResult(I iface, getEpisodeIdsRelatedWithSomeEpisode_args args) throws org.apache.thrift.TException {
        getEpisodeIdsRelatedWithSomeEpisode_result result = new getEpisodeIdsRelatedWithSomeEpisode_result();
        result.success = iface.getEpisodeIdsRelatedWithSomeEpisode(args.episodeId, args.count, args.caller);
        return result;
      }
    }

    public static class getEpisodeIdsNearbySomeEpisode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdsNearbySomeEpisode_args> {
      public getEpisodeIdsNearbySomeEpisode() {
        super("getEpisodeIdsNearbySomeEpisode");
      }

      public getEpisodeIdsNearbySomeEpisode_args getEmptyArgsInstance() {
        return new getEpisodeIdsNearbySomeEpisode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdsNearbySomeEpisode_result getResult(I iface, getEpisodeIdsNearbySomeEpisode_args args) throws org.apache.thrift.TException {
        getEpisodeIdsNearbySomeEpisode_result result = new getEpisodeIdsNearbySomeEpisode_result();
        result.success = iface.getEpisodeIdsNearbySomeEpisode(args.p, args.caller);
        return result;
      }
    }

    public static class getTComboEpisodeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTComboEpisodeById_args> {
      public getTComboEpisodeById() {
        super("getTComboEpisodeById");
      }

      public getTComboEpisodeById_args getEmptyArgsInstance() {
        return new getTComboEpisodeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTComboEpisodeById_result getResult(I iface, getTComboEpisodeById_args args) throws org.apache.thrift.TException {
        getTComboEpisodeById_result result = new getTComboEpisodeById_result();
        result.success = iface.getTComboEpisodeById(args.id, args.caller);
        return result;
      }
    }

    public static class getTComboEpisodesByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTComboEpisodesByIds_args> {
      public getTComboEpisodesByIds() {
        super("getTComboEpisodesByIds");
      }

      public getTComboEpisodesByIds_args getEmptyArgsInstance() {
        return new getTComboEpisodesByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTComboEpisodesByIds_result getResult(I iface, getTComboEpisodesByIds_args args) throws org.apache.thrift.TException {
        getTComboEpisodesByIds_result result = new getTComboEpisodesByIds_result();
        result.success = iface.getTComboEpisodesByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTComboEpisodesInAlbum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTComboEpisodesInAlbum_args> {
      public getTComboEpisodesInAlbum() {
        super("getTComboEpisodesInAlbum");
      }

      public getTComboEpisodesInAlbum_args getEmptyArgsInstance() {
        return new getTComboEpisodesInAlbum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTComboEpisodesInAlbum_result getResult(I iface, getTComboEpisodesInAlbum_args args) throws org.apache.thrift.TException {
        getTComboEpisodesInAlbum_result result = new getTComboEpisodesInAlbum_result();
        result.success = iface.getTComboEpisodesInAlbum(args.albumId, args.page, args.caller);
        return result;
      }
    }

    public static class getEpisodes4OlyMatchs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodes4OlyMatchs_args> {
      public getEpisodes4OlyMatchs() {
        super("getEpisodes4OlyMatchs");
      }

      public getEpisodes4OlyMatchs_args getEmptyArgsInstance() {
        return new getEpisodes4OlyMatchs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodes4OlyMatchs_result getResult(I iface, getEpisodes4OlyMatchs_args args) throws org.apache.thrift.TException {
        getEpisodes4OlyMatchs_result result = new getEpisodes4OlyMatchs_result();
        result.success = iface.getEpisodes4OlyMatchs(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class countEpisodes4OlyMatchs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countEpisodes4OlyMatchs_args> {
      public countEpisodes4OlyMatchs() {
        super("countEpisodes4OlyMatchs");
      }

      public countEpisodes4OlyMatchs_args getEmptyArgsInstance() {
        return new countEpisodes4OlyMatchs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countEpisodes4OlyMatchs_result getResult(I iface, countEpisodes4OlyMatchs_args args) throws org.apache.thrift.TException {
        countEpisodes4OlyMatchs_result result = new countEpisodes4OlyMatchs_result();
        result.success = iface.countEpisodes4OlyMatchs(args.p, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getEpisodeIdByLiveId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdByLiveId_args> {
      public getEpisodeIdByLiveId() {
        super("getEpisodeIdByLiveId");
      }

      public getEpisodeIdByLiveId_args getEmptyArgsInstance() {
        return new getEpisodeIdByLiveId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdByLiveId_result getResult(I iface, getEpisodeIdByLiveId_args args) throws org.apache.thrift.TException {
        getEpisodeIdByLiveId_result result = new getEpisodeIdByLiveId_result();
        result.success = iface.getEpisodeIdByLiveId(args.liveId, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getEpisodeIdByTextLiveId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdByTextLiveId_args> {
      public getEpisodeIdByTextLiveId() {
        super("getEpisodeIdByTextLiveId");
      }

      public getEpisodeIdByTextLiveId_args getEmptyArgsInstance() {
        return new getEpisodeIdByTextLiveId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdByTextLiveId_result getResult(I iface, getEpisodeIdByTextLiveId_args args) throws org.apache.thrift.TException {
        getEpisodeIdByTextLiveId_result result = new getEpisodeIdByTextLiveId_result();
        result.success = iface.getEpisodeIdByTextLiveId(args.textLiveId, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPassedEpisodeIdsInAlbum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPassedEpisodeIdsInAlbum_args> {
      public getPassedEpisodeIdsInAlbum() {
        super("getPassedEpisodeIdsInAlbum");
      }

      public getPassedEpisodeIdsInAlbum_args getEmptyArgsInstance() {
        return new getPassedEpisodeIdsInAlbum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPassedEpisodeIdsInAlbum_result getResult(I iface, getPassedEpisodeIdsInAlbum_args args) throws org.apache.thrift.TException {
        getPassedEpisodeIdsInAlbum_result result = new getPassedEpisodeIdsInAlbum_result();
        result.success = iface.getPassedEpisodeIdsInAlbum(args.albumId, args.page, args.caller);
        return result;
      }
    }

    public static class getEpisodeIdByMid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdByMid_args> {
      public getEpisodeIdByMid() {
        super("getEpisodeIdByMid");
      }

      public getEpisodeIdByMid_args getEmptyArgsInstance() {
        return new getEpisodeIdByMid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdByMid_result getResult(I iface, getEpisodeIdByMid_args args) throws org.apache.thrift.TException {
        getEpisodeIdByMid_result result = new getEpisodeIdByMid_result();
        result.success = iface.getEpisodeIdByMid(args.mId, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getEpisodeIdsOfOctopus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIdsOfOctopus_args> {
      public getEpisodeIdsOfOctopus() {
        super("getEpisodeIdsOfOctopus");
      }

      public getEpisodeIdsOfOctopus_args getEmptyArgsInstance() {
        return new getEpisodeIdsOfOctopus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIdsOfOctopus_result getResult(I iface, getEpisodeIdsOfOctopus_args args) throws org.apache.thrift.TException {
        getEpisodeIdsOfOctopus_result result = new getEpisodeIdsOfOctopus_result();
        result.success = iface.getEpisodeIdsOfOctopus(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getCurrentEpisodeIdsByCompetitorId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentEpisodeIdsByCompetitorId_args> {
      public getCurrentEpisodeIdsByCompetitorId() {
        super("getCurrentEpisodeIdsByCompetitorId");
      }

      public getCurrentEpisodeIdsByCompetitorId_args getEmptyArgsInstance() {
        return new getCurrentEpisodeIdsByCompetitorId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentEpisodeIdsByCompetitorId_result getResult(I iface, getCurrentEpisodeIdsByCompetitorId_args args) throws org.apache.thrift.TException {
        getCurrentEpisodeIdsByCompetitorId_result result = new getCurrentEpisodeIdsByCompetitorId_result();
        result.success = iface.getCurrentEpisodeIdsByCompetitorId(args.competitorId, args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getLephoneDesktopChannelEpisodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLephoneDesktopChannelEpisodes_args> {
      public getLephoneDesktopChannelEpisodes() {
        super("getLephoneDesktopChannelEpisodes");
      }

      public getLephoneDesktopChannelEpisodes_args getEmptyArgsInstance() {
        return new getLephoneDesktopChannelEpisodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLephoneDesktopChannelEpisodes_result getResult(I iface, getLephoneDesktopChannelEpisodes_args args) throws org.apache.thrift.TException {
        getLephoneDesktopChannelEpisodes_result result = new getLephoneDesktopChannelEpisodes_result();
        result.success = iface.getLephoneDesktopChannelEpisodes(args.date, args.gameType, args.caller);
        return result;
      }
    }

    public static class getPeriodAppRecommendEpisodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPeriodAppRecommendEpisodes_args> {
      public getPeriodAppRecommendEpisodes() {
        super("getPeriodAppRecommendEpisodes");
      }

      public getPeriodAppRecommendEpisodes_args getEmptyArgsInstance() {
        return new getPeriodAppRecommendEpisodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPeriodAppRecommendEpisodes_result getResult(I iface, getPeriodAppRecommendEpisodes_args args) throws org.apache.thrift.TException {
        getPeriodAppRecommendEpisodes_result result = new getPeriodAppRecommendEpisodes_result();
        result.success = iface.getPeriodAppRecommendEpisodes(args.caller);
        return result;
      }
    }

    public static class getCurrentMemberEpisodeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentMemberEpisodeIds_args> {
      public getCurrentMemberEpisodeIds() {
        super("getCurrentMemberEpisodeIds");
      }

      public getCurrentMemberEpisodeIds_args getEmptyArgsInstance() {
        return new getCurrentMemberEpisodeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCurrentMemberEpisodeIds_result getResult(I iface, getCurrentMemberEpisodeIds_args args) throws org.apache.thrift.TException {
        getCurrentMemberEpisodeIds_result result = new getCurrentMemberEpisodeIds_result();
        result.success = iface.getCurrentMemberEpisodeIds(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTicketEpisodeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTicketEpisodeIds_args> {
      public getTicketEpisodeIds() {
        super("getTicketEpisodeIds");
      }

      public getTicketEpisodeIds_args getEmptyArgsInstance() {
        return new getTicketEpisodeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTicketEpisodeIds_result getResult(I iface, getTicketEpisodeIds_args args) throws org.apache.thrift.TException {
        getTicketEpisodeIds_result result = new getTicketEpisodeIds_result();
        result.success = iface.getTicketEpisodeIds(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getEpisodeIds4CommonCompetitionResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEpisodeIds4CommonCompetitionResource_args> {
      public getEpisodeIds4CommonCompetitionResource() {
        super("getEpisodeIds4CommonCompetitionResource");
      }

      public getEpisodeIds4CommonCompetitionResource_args getEmptyArgsInstance() {
        return new getEpisodeIds4CommonCompetitionResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEpisodeIds4CommonCompetitionResource_result getResult(I iface, getEpisodeIds4CommonCompetitionResource_args args) throws org.apache.thrift.TException {
        getEpisodeIds4CommonCompetitionResource_result result = new getEpisodeIds4CommonCompetitionResource_result();
        result.success = iface.getEpisodeIds4CommonCompetitionResource(args.p, args.page, args.caller);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTheRoadOfAdvance", new getTheRoadOfAdvance());
      processMap.put("getCurrentEpisodeIds", new getCurrentEpisodeIds());
      processMap.put("getTimelineEpisodesByCids", new getTimelineEpisodesByCids());
      processMap.put("countEpisodesByDay", new countEpisodesByDay());
      processMap.put("getSomeDayEpisodeIds", new getSomeDayEpisodeIds());
      processMap.put("getSomeDayEpisodeIdsWithTimezone", new getSomeDayEpisodeIdsWithTimezone());
      processMap.put("getStartDatesBySomeDayEpisodeParam", new getStartDatesBySomeDayEpisodeParam());
      processMap.put("getEpisodeIdsOfSeasonByMetaEntryId", new getEpisodeIdsOfSeasonByMetaEntryId());
      processMap.put("getEpisodeIdsRelatedWithSomeEpisode", new getEpisodeIdsRelatedWithSomeEpisode());
      processMap.put("getEpisodeIdsNearbySomeEpisode", new getEpisodeIdsNearbySomeEpisode());
      processMap.put("getTComboEpisodeById", new getTComboEpisodeById());
      processMap.put("getTComboEpisodesByIds", new getTComboEpisodesByIds());
      processMap.put("getTComboEpisodesInAlbum", new getTComboEpisodesInAlbum());
      processMap.put("getEpisodes4OlyMatchs", new getEpisodes4OlyMatchs());
      processMap.put("countEpisodes4OlyMatchs", new countEpisodes4OlyMatchs());
      processMap.put("getEpisodeIdByLiveId", new getEpisodeIdByLiveId());
      processMap.put("getEpisodeIdByTextLiveId", new getEpisodeIdByTextLiveId());
      processMap.put("getPassedEpisodeIdsInAlbum", new getPassedEpisodeIdsInAlbum());
      processMap.put("getEpisodeIdByMid", new getEpisodeIdByMid());
      processMap.put("getEpisodeIdsOfOctopus", new getEpisodeIdsOfOctopus());
      processMap.put("getCurrentEpisodeIdsByCompetitorId", new getCurrentEpisodeIdsByCompetitorId());
      processMap.put("getLephoneDesktopChannelEpisodes", new getLephoneDesktopChannelEpisodes());
      processMap.put("getPeriodAppRecommendEpisodes", new getPeriodAppRecommendEpisodes());
      processMap.put("getCurrentMemberEpisodeIds", new getCurrentMemberEpisodeIds());
      processMap.put("getTicketEpisodeIds", new getTicketEpisodeIds());
      processMap.put("getEpisodeIds4CommonCompetitionResource", new getEpisodeIds4CommonCompetitionResource());
      return processMap;
    }

    public static class getTheRoadOfAdvance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTheRoadOfAdvance_args, List<Long>> {
      public getTheRoadOfAdvance() {
        super("getTheRoadOfAdvance");
      }

      public getTheRoadOfAdvance_args getEmptyArgsInstance() {
        return new getTheRoadOfAdvance_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTheRoadOfAdvance_result result = new getTheRoadOfAdvance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTheRoadOfAdvance_result result = new getTheRoadOfAdvance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTheRoadOfAdvance_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTheRoadOfAdvance(args.cid, args.csid, args.caller,resultHandler);
      }
    }

    public static class getCurrentEpisodeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentEpisodeIds_args, List<Long>> {
      public getCurrentEpisodeIds() {
        super("getCurrentEpisodeIds");
      }

      public getCurrentEpisodeIds_args getEmptyArgsInstance() {
        return new getCurrentEpisodeIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getCurrentEpisodeIds_result result = new getCurrentEpisodeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentEpisodeIds_result result = new getCurrentEpisodeIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentEpisodeIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getCurrentEpisodeIds(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTimelineEpisodesByCids<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTimelineEpisodesByCids_args, List<Long>> {
      public getTimelineEpisodesByCids() {
        super("getTimelineEpisodesByCids");
      }

      public getTimelineEpisodesByCids_args getEmptyArgsInstance() {
        return new getTimelineEpisodesByCids_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTimelineEpisodesByCids_result result = new getTimelineEpisodesByCids_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTimelineEpisodesByCids_result result = new getTimelineEpisodesByCids_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTimelineEpisodesByCids_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTimelineEpisodesByCids(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class countEpisodesByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countEpisodesByDay_args, List<Long>> {
      public countEpisodesByDay() {
        super("countEpisodesByDay");
      }

      public countEpisodesByDay_args getEmptyArgsInstance() {
        return new countEpisodesByDay_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            countEpisodesByDay_result result = new countEpisodesByDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countEpisodesByDay_result result = new countEpisodesByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countEpisodesByDay_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.countEpisodesByDay(args.p, args.caller,resultHandler);
      }
    }

    public static class getSomeDayEpisodeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSomeDayEpisodeIds_args, List<Long>> {
      public getSomeDayEpisodeIds() {
        super("getSomeDayEpisodeIds");
      }

      public getSomeDayEpisodeIds_args getEmptyArgsInstance() {
        return new getSomeDayEpisodeIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getSomeDayEpisodeIds_result result = new getSomeDayEpisodeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSomeDayEpisodeIds_result result = new getSomeDayEpisodeIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSomeDayEpisodeIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getSomeDayEpisodeIds(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getSomeDayEpisodeIdsWithTimezone<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSomeDayEpisodeIdsWithTimezone_args, List<Long>> {
      public getSomeDayEpisodeIdsWithTimezone() {
        super("getSomeDayEpisodeIdsWithTimezone");
      }

      public getSomeDayEpisodeIdsWithTimezone_args getEmptyArgsInstance() {
        return new getSomeDayEpisodeIdsWithTimezone_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getSomeDayEpisodeIdsWithTimezone_result result = new getSomeDayEpisodeIdsWithTimezone_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSomeDayEpisodeIdsWithTimezone_result result = new getSomeDayEpisodeIdsWithTimezone_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSomeDayEpisodeIdsWithTimezone_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getSomeDayEpisodeIdsWithTimezone(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getStartDatesBySomeDayEpisodeParam<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStartDatesBySomeDayEpisodeParam_args, List<String>> {
      public getStartDatesBySomeDayEpisodeParam() {
        super("getStartDatesBySomeDayEpisodeParam");
      }

      public getStartDatesBySomeDayEpisodeParam_args getEmptyArgsInstance() {
        return new getStartDatesBySomeDayEpisodeParam_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getStartDatesBySomeDayEpisodeParam_result result = new getStartDatesBySomeDayEpisodeParam_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStartDatesBySomeDayEpisodeParam_result result = new getStartDatesBySomeDayEpisodeParam_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStartDatesBySomeDayEpisodeParam_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getStartDatesBySomeDayEpisodeParam(args.p, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdsOfSeasonByMetaEntryId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdsOfSeasonByMetaEntryId_args, List<Long>> {
      public getEpisodeIdsOfSeasonByMetaEntryId() {
        super("getEpisodeIdsOfSeasonByMetaEntryId");
      }

      public getEpisodeIdsOfSeasonByMetaEntryId_args getEmptyArgsInstance() {
        return new getEpisodeIdsOfSeasonByMetaEntryId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getEpisodeIdsOfSeasonByMetaEntryId_result result = new getEpisodeIdsOfSeasonByMetaEntryId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdsOfSeasonByMetaEntryId_result result = new getEpisodeIdsOfSeasonByMetaEntryId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdsOfSeasonByMetaEntryId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getEpisodeIdsOfSeasonByMetaEntryId(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdsRelatedWithSomeEpisode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdsRelatedWithSomeEpisode_args, List<Long>> {
      public getEpisodeIdsRelatedWithSomeEpisode() {
        super("getEpisodeIdsRelatedWithSomeEpisode");
      }

      public getEpisodeIdsRelatedWithSomeEpisode_args getEmptyArgsInstance() {
        return new getEpisodeIdsRelatedWithSomeEpisode_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getEpisodeIdsRelatedWithSomeEpisode_result result = new getEpisodeIdsRelatedWithSomeEpisode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdsRelatedWithSomeEpisode_result result = new getEpisodeIdsRelatedWithSomeEpisode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdsRelatedWithSomeEpisode_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getEpisodeIdsRelatedWithSomeEpisode(args.episodeId, args.count, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdsNearbySomeEpisode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdsNearbySomeEpisode_args, Map<String,Long>> {
      public getEpisodeIdsNearbySomeEpisode() {
        super("getEpisodeIdsNearbySomeEpisode");
      }

      public getEpisodeIdsNearbySomeEpisode_args getEmptyArgsInstance() {
        return new getEpisodeIdsNearbySomeEpisode_args();
      }

      public AsyncMethodCallback<Map<String,Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Long>>() { 
          public void onComplete(Map<String,Long> o) {
            getEpisodeIdsNearbySomeEpisode_result result = new getEpisodeIdsNearbySomeEpisode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdsNearbySomeEpisode_result result = new getEpisodeIdsNearbySomeEpisode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdsNearbySomeEpisode_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Long>> resultHandler) throws TException {
        iface.getEpisodeIdsNearbySomeEpisode(args.p, args.caller,resultHandler);
      }
    }

    public static class getTComboEpisodeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTComboEpisodeById_args, com.lesports.qmt.sbc.api.dto.TComboEpisode> {
      public getTComboEpisodeById() {
        super("getTComboEpisodeById");
      }

      public getTComboEpisodeById_args getEmptyArgsInstance() {
        return new getTComboEpisodeById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TComboEpisode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TComboEpisode>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TComboEpisode o) {
            getTComboEpisodeById_result result = new getTComboEpisodeById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTComboEpisodeById_result result = new getTComboEpisodeById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTComboEpisodeById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TComboEpisode> resultHandler) throws TException {
        iface.getTComboEpisodeById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTComboEpisodesByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTComboEpisodesByIds_args, List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> {
      public getTComboEpisodesByIds() {
        super("getTComboEpisodesByIds");
      }

      public getTComboEpisodesByIds_args getEmptyArgsInstance() {
        return new getTComboEpisodesByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TComboEpisode> o) {
            getTComboEpisodesByIds_result result = new getTComboEpisodesByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTComboEpisodesByIds_result result = new getTComboEpisodesByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTComboEpisodesByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> resultHandler) throws TException {
        iface.getTComboEpisodesByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTComboEpisodesInAlbum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTComboEpisodesInAlbum_args, List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> {
      public getTComboEpisodesInAlbum() {
        super("getTComboEpisodesInAlbum");
      }

      public getTComboEpisodesInAlbum_args getEmptyArgsInstance() {
        return new getTComboEpisodesInAlbum_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TComboEpisode> o) {
            getTComboEpisodesInAlbum_result result = new getTComboEpisodesInAlbum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTComboEpisodesInAlbum_result result = new getTComboEpisodesInAlbum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTComboEpisodesInAlbum_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> resultHandler) throws TException {
        iface.getTComboEpisodesInAlbum(args.albumId, args.page, args.caller,resultHandler);
      }
    }

    public static class getEpisodes4OlyMatchs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodes4OlyMatchs_args, List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> {
      public getEpisodes4OlyMatchs() {
        super("getEpisodes4OlyMatchs");
      }

      public getEpisodes4OlyMatchs_args getEmptyArgsInstance() {
        return new getEpisodes4OlyMatchs_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TComboEpisode> o) {
            getEpisodes4OlyMatchs_result result = new getEpisodes4OlyMatchs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodes4OlyMatchs_result result = new getEpisodes4OlyMatchs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodes4OlyMatchs_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TComboEpisode>> resultHandler) throws TException {
        iface.getEpisodes4OlyMatchs(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class countEpisodes4OlyMatchs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countEpisodes4OlyMatchs_args, Long> {
      public countEpisodes4OlyMatchs() {
        super("countEpisodes4OlyMatchs");
      }

      public countEpisodes4OlyMatchs_args getEmptyArgsInstance() {
        return new countEpisodes4OlyMatchs_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            countEpisodes4OlyMatchs_result result = new countEpisodes4OlyMatchs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countEpisodes4OlyMatchs_result result = new countEpisodes4OlyMatchs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countEpisodes4OlyMatchs_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.countEpisodes4OlyMatchs(args.p, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdByLiveId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdByLiveId_args, Long> {
      public getEpisodeIdByLiveId() {
        super("getEpisodeIdByLiveId");
      }

      public getEpisodeIdByLiveId_args getEmptyArgsInstance() {
        return new getEpisodeIdByLiveId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getEpisodeIdByLiveId_result result = new getEpisodeIdByLiveId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdByLiveId_result result = new getEpisodeIdByLiveId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdByLiveId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getEpisodeIdByLiveId(args.liveId, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdByTextLiveId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdByTextLiveId_args, Long> {
      public getEpisodeIdByTextLiveId() {
        super("getEpisodeIdByTextLiveId");
      }

      public getEpisodeIdByTextLiveId_args getEmptyArgsInstance() {
        return new getEpisodeIdByTextLiveId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getEpisodeIdByTextLiveId_result result = new getEpisodeIdByTextLiveId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdByTextLiveId_result result = new getEpisodeIdByTextLiveId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdByTextLiveId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getEpisodeIdByTextLiveId(args.textLiveId, args.caller,resultHandler);
      }
    }

    public static class getPassedEpisodeIdsInAlbum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPassedEpisodeIdsInAlbum_args, List<Long>> {
      public getPassedEpisodeIdsInAlbum() {
        super("getPassedEpisodeIdsInAlbum");
      }

      public getPassedEpisodeIdsInAlbum_args getEmptyArgsInstance() {
        return new getPassedEpisodeIdsInAlbum_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getPassedEpisodeIdsInAlbum_result result = new getPassedEpisodeIdsInAlbum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPassedEpisodeIdsInAlbum_result result = new getPassedEpisodeIdsInAlbum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPassedEpisodeIdsInAlbum_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getPassedEpisodeIdsInAlbum(args.albumId, args.page, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdByMid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdByMid_args, Long> {
      public getEpisodeIdByMid() {
        super("getEpisodeIdByMid");
      }

      public getEpisodeIdByMid_args getEmptyArgsInstance() {
        return new getEpisodeIdByMid_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getEpisodeIdByMid_result result = new getEpisodeIdByMid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdByMid_result result = new getEpisodeIdByMid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdByMid_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getEpisodeIdByMid(args.mId, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIdsOfOctopus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIdsOfOctopus_args, List<Long>> {
      public getEpisodeIdsOfOctopus() {
        super("getEpisodeIdsOfOctopus");
      }

      public getEpisodeIdsOfOctopus_args getEmptyArgsInstance() {
        return new getEpisodeIdsOfOctopus_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getEpisodeIdsOfOctopus_result result = new getEpisodeIdsOfOctopus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIdsOfOctopus_result result = new getEpisodeIdsOfOctopus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIdsOfOctopus_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getEpisodeIdsOfOctopus(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getCurrentEpisodeIdsByCompetitorId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentEpisodeIdsByCompetitorId_args, List<Long>> {
      public getCurrentEpisodeIdsByCompetitorId() {
        super("getCurrentEpisodeIdsByCompetitorId");
      }

      public getCurrentEpisodeIdsByCompetitorId_args getEmptyArgsInstance() {
        return new getCurrentEpisodeIdsByCompetitorId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getCurrentEpisodeIdsByCompetitorId_result result = new getCurrentEpisodeIdsByCompetitorId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentEpisodeIdsByCompetitorId_result result = new getCurrentEpisodeIdsByCompetitorId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentEpisodeIdsByCompetitorId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getCurrentEpisodeIdsByCompetitorId(args.competitorId, args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getLephoneDesktopChannelEpisodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLephoneDesktopChannelEpisodes_args, List<Long>> {
      public getLephoneDesktopChannelEpisodes() {
        super("getLephoneDesktopChannelEpisodes");
      }

      public getLephoneDesktopChannelEpisodes_args getEmptyArgsInstance() {
        return new getLephoneDesktopChannelEpisodes_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getLephoneDesktopChannelEpisodes_result result = new getLephoneDesktopChannelEpisodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLephoneDesktopChannelEpisodes_result result = new getLephoneDesktopChannelEpisodes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLephoneDesktopChannelEpisodes_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getLephoneDesktopChannelEpisodes(args.date, args.gameType, args.caller,resultHandler);
      }
    }

    public static class getPeriodAppRecommendEpisodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPeriodAppRecommendEpisodes_args, List<Long>> {
      public getPeriodAppRecommendEpisodes() {
        super("getPeriodAppRecommendEpisodes");
      }

      public getPeriodAppRecommendEpisodes_args getEmptyArgsInstance() {
        return new getPeriodAppRecommendEpisodes_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getPeriodAppRecommendEpisodes_result result = new getPeriodAppRecommendEpisodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPeriodAppRecommendEpisodes_result result = new getPeriodAppRecommendEpisodes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPeriodAppRecommendEpisodes_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getPeriodAppRecommendEpisodes(args.caller,resultHandler);
      }
    }

    public static class getCurrentMemberEpisodeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCurrentMemberEpisodeIds_args, List<Long>> {
      public getCurrentMemberEpisodeIds() {
        super("getCurrentMemberEpisodeIds");
      }

      public getCurrentMemberEpisodeIds_args getEmptyArgsInstance() {
        return new getCurrentMemberEpisodeIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getCurrentMemberEpisodeIds_result result = new getCurrentMemberEpisodeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCurrentMemberEpisodeIds_result result = new getCurrentMemberEpisodeIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCurrentMemberEpisodeIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getCurrentMemberEpisodeIds(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTicketEpisodeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTicketEpisodeIds_args, List<Long>> {
      public getTicketEpisodeIds() {
        super("getTicketEpisodeIds");
      }

      public getTicketEpisodeIds_args getEmptyArgsInstance() {
        return new getTicketEpisodeIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTicketEpisodeIds_result result = new getTicketEpisodeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTicketEpisodeIds_result result = new getTicketEpisodeIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTicketEpisodeIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTicketEpisodeIds(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getEpisodeIds4CommonCompetitionResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEpisodeIds4CommonCompetitionResource_args, List<Long>> {
      public getEpisodeIds4CommonCompetitionResource() {
        super("getEpisodeIds4CommonCompetitionResource");
      }

      public getEpisodeIds4CommonCompetitionResource_args getEmptyArgsInstance() {
        return new getEpisodeIds4CommonCompetitionResource_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getEpisodeIds4CommonCompetitionResource_result result = new getEpisodeIds4CommonCompetitionResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEpisodeIds4CommonCompetitionResource_result result = new getEpisodeIds4CommonCompetitionResource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEpisodeIds4CommonCompetitionResource_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getEpisodeIds4CommonCompetitionResource(args.p, args.page, args.caller,resultHandler);
      }
    }

  }

  public static class getTheRoadOfAdvance_args implements org.apache.thrift.TBase<getTheRoadOfAdvance_args, getTheRoadOfAdvance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTheRoadOfAdvance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTheRoadOfAdvance_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTheRoadOfAdvance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTheRoadOfAdvance_argsTupleSchemeFactory());
    }

    private long cid; // required
    private long csid; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      CSID((short)2, "csid"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // CSID
            return CSID;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private static final int __CSID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTheRoadOfAdvance_args.class, metaDataMap);
    }

    public getTheRoadOfAdvance_args() {
    }

    public getTheRoadOfAdvance_args(
      long cid,
      long csid,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.csid = csid;
      setCsidIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTheRoadOfAdvance_args(getTheRoadOfAdvance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      this.csid = other.csid;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTheRoadOfAdvance_args deepCopy() {
      return new getTheRoadOfAdvance_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      setCsidIsSet(false);
      this.csid = 0;
      this.caller = null;
    }

    public long getCid() {
      return this.cid;
    }

    public void setCid(long cid) {
      this.cid = cid;
      setCidIsSet(true);
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public long getCsid() {
      return this.csid;
    }

    public void setCsid(long csid) {
      this.csid = csid;
      setCsidIsSet(true);
    }

    public void unsetCsid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
    }

    /** Returns true if field csid is set (has been assigned a value) and false otherwise */
    public boolean isSetCsid() {
      return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
    }

    public void setCsidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Long)value);
        }
        break;

      case CSID:
        if (value == null) {
          unsetCsid();
        } else {
          setCsid((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Long.valueOf(getCid());

      case CSID:
        return Long.valueOf(getCsid());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case CSID:
        return isSetCsid();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTheRoadOfAdvance_args)
        return this.equals((getTheRoadOfAdvance_args)that);
      return false;
    }

    public boolean equals(getTheRoadOfAdvance_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_csid = true;
      boolean that_present_csid = true;
      if (this_present_csid || that_present_csid) {
        if (!(this_present_csid && that_present_csid))
          return false;
        if (this.csid != that.csid)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_csid = true;
      list.add(present_csid);
      if (present_csid)
        list.add(csid);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTheRoadOfAdvance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTheRoadOfAdvance_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTheRoadOfAdvance_argsStandardSchemeFactory implements SchemeFactory {
      public getTheRoadOfAdvance_argsStandardScheme getScheme() {
        return new getTheRoadOfAdvance_argsStandardScheme();
      }
    }

    private static class getTheRoadOfAdvance_argsStandardScheme extends StandardScheme<getTheRoadOfAdvance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTheRoadOfAdvance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cid = iprot.readI64();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CSID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.csid = iprot.readI64();
                struct.setCsidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTheRoadOfAdvance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTheRoadOfAdvance_argsTupleSchemeFactory implements SchemeFactory {
      public getTheRoadOfAdvance_argsTupleScheme getScheme() {
        return new getTheRoadOfAdvance_argsTupleScheme();
      }
    }

    private static class getTheRoadOfAdvance_argsTupleScheme extends TupleScheme<getTheRoadOfAdvance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTheRoadOfAdvance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetCsid()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCid()) {
          oprot.writeI64(struct.cid);
        }
        if (struct.isSetCsid()) {
          oprot.writeI64(struct.csid);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTheRoadOfAdvance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cid = iprot.readI64();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.csid = iprot.readI64();
          struct.setCsidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTheRoadOfAdvance_result implements org.apache.thrift.TBase<getTheRoadOfAdvance_result, getTheRoadOfAdvance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTheRoadOfAdvance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTheRoadOfAdvance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTheRoadOfAdvance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTheRoadOfAdvance_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTheRoadOfAdvance_result.class, metaDataMap);
    }

    public getTheRoadOfAdvance_result() {
    }

    public getTheRoadOfAdvance_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTheRoadOfAdvance_result(getTheRoadOfAdvance_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTheRoadOfAdvance_result deepCopy() {
      return new getTheRoadOfAdvance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTheRoadOfAdvance_result)
        return this.equals((getTheRoadOfAdvance_result)that);
      return false;
    }

    public boolean equals(getTheRoadOfAdvance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTheRoadOfAdvance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTheRoadOfAdvance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTheRoadOfAdvance_resultStandardSchemeFactory implements SchemeFactory {
      public getTheRoadOfAdvance_resultStandardScheme getScheme() {
        return new getTheRoadOfAdvance_resultStandardScheme();
      }
    }

    private static class getTheRoadOfAdvance_resultStandardScheme extends StandardScheme<getTheRoadOfAdvance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTheRoadOfAdvance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list242.size);
                  long _elem243;
                  for (int _i244 = 0; _i244 < _list242.size; ++_i244)
                  {
                    _elem243 = iprot.readI64();
                    struct.success.add(_elem243);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTheRoadOfAdvance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter245 : struct.success)
            {
              oprot.writeI64(_iter245);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTheRoadOfAdvance_resultTupleSchemeFactory implements SchemeFactory {
      public getTheRoadOfAdvance_resultTupleScheme getScheme() {
        return new getTheRoadOfAdvance_resultTupleScheme();
      }
    }

    private static class getTheRoadOfAdvance_resultTupleScheme extends TupleScheme<getTheRoadOfAdvance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTheRoadOfAdvance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter246 : struct.success)
            {
              oprot.writeI64(_iter246);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTheRoadOfAdvance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list247.size);
            long _elem248;
            for (int _i249 = 0; _i249 < _list247.size; ++_i249)
            {
              _elem248 = iprot.readI64();
              struct.success.add(_elem248);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentEpisodeIds_args implements org.apache.thrift.TBase<getCurrentEpisodeIds_args, getCurrentEpisodeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentEpisodeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentEpisodeIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentEpisodeIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentEpisodeIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentEpisodeIds_args.class, metaDataMap);
    }

    public getCurrentEpisodeIds_args() {
    }

    public getCurrentEpisodeIds_args(
      com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentEpisodeIds_args(getCurrentEpisodeIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getCurrentEpisodeIds_args deepCopy() {
      return new getCurrentEpisodeIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentEpisodeIds_args)
        return this.equals((getCurrentEpisodeIds_args)that);
      return false;
    }

    public boolean equals(getCurrentEpisodeIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentEpisodeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentEpisodeIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentEpisodeIds_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIds_argsStandardScheme getScheme() {
        return new getCurrentEpisodeIds_argsStandardScheme();
      }
    }

    private static class getCurrentEpisodeIds_argsStandardScheme extends StandardScheme<getCurrentEpisodeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentEpisodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentEpisodeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentEpisodeIds_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIds_argsTupleScheme getScheme() {
        return new getCurrentEpisodeIds_argsTupleScheme();
      }
    }

    private static class getCurrentEpisodeIds_argsTupleScheme extends TupleScheme<getCurrentEpisodeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getCurrentEpisodeIds_result implements org.apache.thrift.TBase<getCurrentEpisodeIds_result, getCurrentEpisodeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentEpisodeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentEpisodeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentEpisodeIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentEpisodeIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentEpisodeIds_result.class, metaDataMap);
    }

    public getCurrentEpisodeIds_result() {
    }

    public getCurrentEpisodeIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentEpisodeIds_result(getCurrentEpisodeIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getCurrentEpisodeIds_result deepCopy() {
      return new getCurrentEpisodeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentEpisodeIds_result)
        return this.equals((getCurrentEpisodeIds_result)that);
      return false;
    }

    public boolean equals(getCurrentEpisodeIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentEpisodeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentEpisodeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentEpisodeIds_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIds_resultStandardScheme getScheme() {
        return new getCurrentEpisodeIds_resultStandardScheme();
      }
    }

    private static class getCurrentEpisodeIds_resultStandardScheme extends StandardScheme<getCurrentEpisodeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentEpisodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list250.size);
                  long _elem251;
                  for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                  {
                    _elem251 = iprot.readI64();
                    struct.success.add(_elem251);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentEpisodeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter253 : struct.success)
            {
              oprot.writeI64(_iter253);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentEpisodeIds_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIds_resultTupleScheme getScheme() {
        return new getCurrentEpisodeIds_resultTupleScheme();
      }
    }

    private static class getCurrentEpisodeIds_resultTupleScheme extends TupleScheme<getCurrentEpisodeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter254 : struct.success)
            {
              oprot.writeI64(_iter254);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list255 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list255.size);
            long _elem256;
            for (int _i257 = 0; _i257 < _list255.size; ++_i257)
            {
              _elem256 = iprot.readI64();
              struct.success.add(_elem256);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTimelineEpisodesByCids_args implements org.apache.thrift.TBase<getTimelineEpisodesByCids_args, getTimelineEpisodesByCids_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTimelineEpisodesByCids_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimelineEpisodesByCids_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimelineEpisodesByCids_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimelineEpisodesByCids_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimelineEpisodesByCids_args.class, metaDataMap);
    }

    public getTimelineEpisodesByCids_args() {
    }

    public getTimelineEpisodesByCids_args(
      com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimelineEpisodesByCids_args(getTimelineEpisodesByCids_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTimelineEpisodesByCids_args deepCopy() {
      return new getTimelineEpisodesByCids_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimelineEpisodesByCids_args)
        return this.equals((getTimelineEpisodesByCids_args)that);
      return false;
    }

    public boolean equals(getTimelineEpisodesByCids_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimelineEpisodesByCids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimelineEpisodesByCids_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimelineEpisodesByCids_argsStandardSchemeFactory implements SchemeFactory {
      public getTimelineEpisodesByCids_argsStandardScheme getScheme() {
        return new getTimelineEpisodesByCids_argsStandardScheme();
      }
    }

    private static class getTimelineEpisodesByCids_argsStandardScheme extends StandardScheme<getTimelineEpisodesByCids_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimelineEpisodesByCids_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimelineEpisodesByCids_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimelineEpisodesByCids_argsTupleSchemeFactory implements SchemeFactory {
      public getTimelineEpisodesByCids_argsTupleScheme getScheme() {
        return new getTimelineEpisodesByCids_argsTupleScheme();
      }
    }

    private static class getTimelineEpisodesByCids_argsTupleScheme extends TupleScheme<getTimelineEpisodesByCids_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimelineEpisodesByCids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimelineEpisodesByCids_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTimelineEpisodesByCids_result implements org.apache.thrift.TBase<getTimelineEpisodesByCids_result, getTimelineEpisodesByCids_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTimelineEpisodesByCids_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTimelineEpisodesByCids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTimelineEpisodesByCids_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTimelineEpisodesByCids_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTimelineEpisodesByCids_result.class, metaDataMap);
    }

    public getTimelineEpisodesByCids_result() {
    }

    public getTimelineEpisodesByCids_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTimelineEpisodesByCids_result(getTimelineEpisodesByCids_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTimelineEpisodesByCids_result deepCopy() {
      return new getTimelineEpisodesByCids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTimelineEpisodesByCids_result)
        return this.equals((getTimelineEpisodesByCids_result)that);
      return false;
    }

    public boolean equals(getTimelineEpisodesByCids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTimelineEpisodesByCids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTimelineEpisodesByCids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTimelineEpisodesByCids_resultStandardSchemeFactory implements SchemeFactory {
      public getTimelineEpisodesByCids_resultStandardScheme getScheme() {
        return new getTimelineEpisodesByCids_resultStandardScheme();
      }
    }

    private static class getTimelineEpisodesByCids_resultStandardScheme extends StandardScheme<getTimelineEpisodesByCids_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTimelineEpisodesByCids_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list258 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list258.size);
                  long _elem259;
                  for (int _i260 = 0; _i260 < _list258.size; ++_i260)
                  {
                    _elem259 = iprot.readI64();
                    struct.success.add(_elem259);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTimelineEpisodesByCids_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter261 : struct.success)
            {
              oprot.writeI64(_iter261);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTimelineEpisodesByCids_resultTupleSchemeFactory implements SchemeFactory {
      public getTimelineEpisodesByCids_resultTupleScheme getScheme() {
        return new getTimelineEpisodesByCids_resultTupleScheme();
      }
    }

    private static class getTimelineEpisodesByCids_resultTupleScheme extends TupleScheme<getTimelineEpisodesByCids_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTimelineEpisodesByCids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter262 : struct.success)
            {
              oprot.writeI64(_iter262);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTimelineEpisodesByCids_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list263.size);
            long _elem264;
            for (int _i265 = 0; _i265 < _list263.size; ++_i265)
            {
              _elem264 = iprot.readI64();
              struct.success.add(_elem264);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countEpisodesByDay_args implements org.apache.thrift.TBase<countEpisodesByDay_args, countEpisodesByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<countEpisodesByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countEpisodesByDay_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countEpisodesByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countEpisodesByDay_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countEpisodesByDay_args.class, metaDataMap);
    }

    public countEpisodesByDay_args() {
    }

    public countEpisodesByDay_args(
      com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countEpisodesByDay_args(countEpisodesByDay_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public countEpisodesByDay_args deepCopy() {
      return new countEpisodesByDay_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countEpisodesByDay_args)
        return this.equals((countEpisodesByDay_args)that);
      return false;
    }

    public boolean equals(countEpisodesByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(countEpisodesByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countEpisodesByDay_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countEpisodesByDay_argsStandardSchemeFactory implements SchemeFactory {
      public countEpisodesByDay_argsStandardScheme getScheme() {
        return new countEpisodesByDay_argsStandardScheme();
      }
    }

    private static class countEpisodesByDay_argsStandardScheme extends StandardScheme<countEpisodesByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countEpisodesByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countEpisodesByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countEpisodesByDay_argsTupleSchemeFactory implements SchemeFactory {
      public countEpisodesByDay_argsTupleScheme getScheme() {
        return new countEpisodesByDay_argsTupleScheme();
      }
    }

    private static class countEpisodesByDay_argsTupleScheme extends TupleScheme<countEpisodesByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countEpisodesByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countEpisodesByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class countEpisodesByDay_result implements org.apache.thrift.TBase<countEpisodesByDay_result, countEpisodesByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<countEpisodesByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countEpisodesByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countEpisodesByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countEpisodesByDay_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countEpisodesByDay_result.class, metaDataMap);
    }

    public countEpisodesByDay_result() {
    }

    public countEpisodesByDay_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countEpisodesByDay_result(countEpisodesByDay_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public countEpisodesByDay_result deepCopy() {
      return new countEpisodesByDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countEpisodesByDay_result)
        return this.equals((countEpisodesByDay_result)that);
      return false;
    }

    public boolean equals(countEpisodesByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countEpisodesByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countEpisodesByDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countEpisodesByDay_resultStandardSchemeFactory implements SchemeFactory {
      public countEpisodesByDay_resultStandardScheme getScheme() {
        return new countEpisodesByDay_resultStandardScheme();
      }
    }

    private static class countEpisodesByDay_resultStandardScheme extends StandardScheme<countEpisodesByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countEpisodesByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list266 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list266.size);
                  long _elem267;
                  for (int _i268 = 0; _i268 < _list266.size; ++_i268)
                  {
                    _elem267 = iprot.readI64();
                    struct.success.add(_elem267);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countEpisodesByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter269 : struct.success)
            {
              oprot.writeI64(_iter269);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countEpisodesByDay_resultTupleSchemeFactory implements SchemeFactory {
      public countEpisodesByDay_resultTupleScheme getScheme() {
        return new countEpisodesByDay_resultTupleScheme();
      }
    }

    private static class countEpisodesByDay_resultTupleScheme extends TupleScheme<countEpisodesByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countEpisodesByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter270 : struct.success)
            {
              oprot.writeI64(_iter270);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countEpisodesByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list271.size);
            long _elem272;
            for (int _i273 = 0; _i273 < _list271.size; ++_i273)
            {
              _elem272 = iprot.readI64();
              struct.success.add(_elem272);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSomeDayEpisodeIds_args implements org.apache.thrift.TBase<getSomeDayEpisodeIds_args, getSomeDayEpisodeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSomeDayEpisodeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSomeDayEpisodeIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSomeDayEpisodeIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSomeDayEpisodeIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSomeDayEpisodeIds_args.class, metaDataMap);
    }

    public getSomeDayEpisodeIds_args() {
    }

    public getSomeDayEpisodeIds_args(
      com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSomeDayEpisodeIds_args(getSomeDayEpisodeIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getSomeDayEpisodeIds_args deepCopy() {
      return new getSomeDayEpisodeIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSomeDayEpisodeIds_args)
        return this.equals((getSomeDayEpisodeIds_args)that);
      return false;
    }

    public boolean equals(getSomeDayEpisodeIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSomeDayEpisodeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSomeDayEpisodeIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSomeDayEpisodeIds_argsStandardSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIds_argsStandardScheme getScheme() {
        return new getSomeDayEpisodeIds_argsStandardScheme();
      }
    }

    private static class getSomeDayEpisodeIds_argsStandardScheme extends StandardScheme<getSomeDayEpisodeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSomeDayEpisodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSomeDayEpisodeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSomeDayEpisodeIds_argsTupleSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIds_argsTupleScheme getScheme() {
        return new getSomeDayEpisodeIds_argsTupleScheme();
      }
    }

    private static class getSomeDayEpisodeIds_argsTupleScheme extends TupleScheme<getSomeDayEpisodeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getSomeDayEpisodeIds_result implements org.apache.thrift.TBase<getSomeDayEpisodeIds_result, getSomeDayEpisodeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSomeDayEpisodeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSomeDayEpisodeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSomeDayEpisodeIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSomeDayEpisodeIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSomeDayEpisodeIds_result.class, metaDataMap);
    }

    public getSomeDayEpisodeIds_result() {
    }

    public getSomeDayEpisodeIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSomeDayEpisodeIds_result(getSomeDayEpisodeIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getSomeDayEpisodeIds_result deepCopy() {
      return new getSomeDayEpisodeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSomeDayEpisodeIds_result)
        return this.equals((getSomeDayEpisodeIds_result)that);
      return false;
    }

    public boolean equals(getSomeDayEpisodeIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSomeDayEpisodeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSomeDayEpisodeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSomeDayEpisodeIds_resultStandardSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIds_resultStandardScheme getScheme() {
        return new getSomeDayEpisodeIds_resultStandardScheme();
      }
    }

    private static class getSomeDayEpisodeIds_resultStandardScheme extends StandardScheme<getSomeDayEpisodeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSomeDayEpisodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list274 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list274.size);
                  long _elem275;
                  for (int _i276 = 0; _i276 < _list274.size; ++_i276)
                  {
                    _elem275 = iprot.readI64();
                    struct.success.add(_elem275);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSomeDayEpisodeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter277 : struct.success)
            {
              oprot.writeI64(_iter277);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSomeDayEpisodeIds_resultTupleSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIds_resultTupleScheme getScheme() {
        return new getSomeDayEpisodeIds_resultTupleScheme();
      }
    }

    private static class getSomeDayEpisodeIds_resultTupleScheme extends TupleScheme<getSomeDayEpisodeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter278 : struct.success)
            {
              oprot.writeI64(_iter278);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list279.size);
            long _elem280;
            for (int _i281 = 0; _i281 < _list279.size; ++_i281)
            {
              _elem280 = iprot.readI64();
              struct.success.add(_elem280);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSomeDayEpisodeIdsWithTimezone_args implements org.apache.thrift.TBase<getSomeDayEpisodeIdsWithTimezone_args, getSomeDayEpisodeIdsWithTimezone_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSomeDayEpisodeIdsWithTimezone_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSomeDayEpisodeIdsWithTimezone_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSomeDayEpisodeIdsWithTimezone_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSomeDayEpisodeIdsWithTimezone_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSomeDayEpisodeIdsWithTimezone_args.class, metaDataMap);
    }

    public getSomeDayEpisodeIdsWithTimezone_args() {
    }

    public getSomeDayEpisodeIdsWithTimezone_args(
      com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSomeDayEpisodeIdsWithTimezone_args(getSomeDayEpisodeIdsWithTimezone_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getSomeDayEpisodeIdsWithTimezone_args deepCopy() {
      return new getSomeDayEpisodeIdsWithTimezone_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSomeDayEpisodeIdsWithTimezone_args)
        return this.equals((getSomeDayEpisodeIdsWithTimezone_args)that);
      return false;
    }

    public boolean equals(getSomeDayEpisodeIdsWithTimezone_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSomeDayEpisodeIdsWithTimezone_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSomeDayEpisodeIdsWithTimezone_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSomeDayEpisodeIdsWithTimezone_argsStandardSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIdsWithTimezone_argsStandardScheme getScheme() {
        return new getSomeDayEpisodeIdsWithTimezone_argsStandardScheme();
      }
    }

    private static class getSomeDayEpisodeIdsWithTimezone_argsStandardScheme extends StandardScheme<getSomeDayEpisodeIdsWithTimezone_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSomeDayEpisodeIdsWithTimezone_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSomeDayEpisodeIdsWithTimezone_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSomeDayEpisodeIdsWithTimezone_argsTupleSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIdsWithTimezone_argsTupleScheme getScheme() {
        return new getSomeDayEpisodeIdsWithTimezone_argsTupleScheme();
      }
    }

    private static class getSomeDayEpisodeIdsWithTimezone_argsTupleScheme extends TupleScheme<getSomeDayEpisodeIdsWithTimezone_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIdsWithTimezone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIdsWithTimezone_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetSomeDayEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getSomeDayEpisodeIdsWithTimezone_result implements org.apache.thrift.TBase<getSomeDayEpisodeIdsWithTimezone_result, getSomeDayEpisodeIdsWithTimezone_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSomeDayEpisodeIdsWithTimezone_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSomeDayEpisodeIdsWithTimezone_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSomeDayEpisodeIdsWithTimezone_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSomeDayEpisodeIdsWithTimezone_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSomeDayEpisodeIdsWithTimezone_result.class, metaDataMap);
    }

    public getSomeDayEpisodeIdsWithTimezone_result() {
    }

    public getSomeDayEpisodeIdsWithTimezone_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSomeDayEpisodeIdsWithTimezone_result(getSomeDayEpisodeIdsWithTimezone_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getSomeDayEpisodeIdsWithTimezone_result deepCopy() {
      return new getSomeDayEpisodeIdsWithTimezone_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSomeDayEpisodeIdsWithTimezone_result)
        return this.equals((getSomeDayEpisodeIdsWithTimezone_result)that);
      return false;
    }

    public boolean equals(getSomeDayEpisodeIdsWithTimezone_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSomeDayEpisodeIdsWithTimezone_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSomeDayEpisodeIdsWithTimezone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSomeDayEpisodeIdsWithTimezone_resultStandardSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIdsWithTimezone_resultStandardScheme getScheme() {
        return new getSomeDayEpisodeIdsWithTimezone_resultStandardScheme();
      }
    }

    private static class getSomeDayEpisodeIdsWithTimezone_resultStandardScheme extends StandardScheme<getSomeDayEpisodeIdsWithTimezone_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSomeDayEpisodeIdsWithTimezone_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list282 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list282.size);
                  long _elem283;
                  for (int _i284 = 0; _i284 < _list282.size; ++_i284)
                  {
                    _elem283 = iprot.readI64();
                    struct.success.add(_elem283);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSomeDayEpisodeIdsWithTimezone_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter285 : struct.success)
            {
              oprot.writeI64(_iter285);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSomeDayEpisodeIdsWithTimezone_resultTupleSchemeFactory implements SchemeFactory {
      public getSomeDayEpisodeIdsWithTimezone_resultTupleScheme getScheme() {
        return new getSomeDayEpisodeIdsWithTimezone_resultTupleScheme();
      }
    }

    private static class getSomeDayEpisodeIdsWithTimezone_resultTupleScheme extends TupleScheme<getSomeDayEpisodeIdsWithTimezone_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIdsWithTimezone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter286 : struct.success)
            {
              oprot.writeI64(_iter286);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSomeDayEpisodeIdsWithTimezone_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list287 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list287.size);
            long _elem288;
            for (int _i289 = 0; _i289 < _list287.size; ++_i289)
            {
              _elem288 = iprot.readI64();
              struct.success.add(_elem288);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStartDatesBySomeDayEpisodeParam_args implements org.apache.thrift.TBase<getStartDatesBySomeDayEpisodeParam_args, getStartDatesBySomeDayEpisodeParam_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStartDatesBySomeDayEpisodeParam_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStartDatesBySomeDayEpisodeParam_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStartDatesBySomeDayEpisodeParam_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStartDatesBySomeDayEpisodeParam_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStartDatesBySomeDayEpisodeParam_args.class, metaDataMap);
    }

    public getStartDatesBySomeDayEpisodeParam_args() {
    }

    public getStartDatesBySomeDayEpisodeParam_args(
      com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStartDatesBySomeDayEpisodeParam_args(getStartDatesBySomeDayEpisodeParam_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getStartDatesBySomeDayEpisodeParam_args deepCopy() {
      return new getStartDatesBySomeDayEpisodeParam_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStartDatesBySomeDayEpisodeParam_args)
        return this.equals((getStartDatesBySomeDayEpisodeParam_args)that);
      return false;
    }

    public boolean equals(getStartDatesBySomeDayEpisodeParam_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStartDatesBySomeDayEpisodeParam_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStartDatesBySomeDayEpisodeParam_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStartDatesBySomeDayEpisodeParam_argsStandardSchemeFactory implements SchemeFactory {
      public getStartDatesBySomeDayEpisodeParam_argsStandardScheme getScheme() {
        return new getStartDatesBySomeDayEpisodeParam_argsStandardScheme();
      }
    }

    private static class getStartDatesBySomeDayEpisodeParam_argsStandardScheme extends StandardScheme<getStartDatesBySomeDayEpisodeParam_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStartDatesBySomeDayEpisodeParam_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStartDatesBySomeDayEpisodeParam_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStartDatesBySomeDayEpisodeParam_argsTupleSchemeFactory implements SchemeFactory {
      public getStartDatesBySomeDayEpisodeParam_argsTupleScheme getScheme() {
        return new getStartDatesBySomeDayEpisodeParam_argsTupleScheme();
      }
    }

    private static class getStartDatesBySomeDayEpisodeParam_argsTupleScheme extends TupleScheme<getStartDatesBySomeDayEpisodeParam_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStartDatesBySomeDayEpisodeParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStartDatesBySomeDayEpisodeParam_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.CountEpisodesByDayParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getStartDatesBySomeDayEpisodeParam_result implements org.apache.thrift.TBase<getStartDatesBySomeDayEpisodeParam_result, getStartDatesBySomeDayEpisodeParam_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStartDatesBySomeDayEpisodeParam_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStartDatesBySomeDayEpisodeParam_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStartDatesBySomeDayEpisodeParam_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStartDatesBySomeDayEpisodeParam_resultTupleSchemeFactory());
    }

    private List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStartDatesBySomeDayEpisodeParam_result.class, metaDataMap);
    }

    public getStartDatesBySomeDayEpisodeParam_result() {
    }

    public getStartDatesBySomeDayEpisodeParam_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStartDatesBySomeDayEpisodeParam_result(getStartDatesBySomeDayEpisodeParam_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getStartDatesBySomeDayEpisodeParam_result deepCopy() {
      return new getStartDatesBySomeDayEpisodeParam_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStartDatesBySomeDayEpisodeParam_result)
        return this.equals((getStartDatesBySomeDayEpisodeParam_result)that);
      return false;
    }

    public boolean equals(getStartDatesBySomeDayEpisodeParam_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStartDatesBySomeDayEpisodeParam_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStartDatesBySomeDayEpisodeParam_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStartDatesBySomeDayEpisodeParam_resultStandardSchemeFactory implements SchemeFactory {
      public getStartDatesBySomeDayEpisodeParam_resultStandardScheme getScheme() {
        return new getStartDatesBySomeDayEpisodeParam_resultStandardScheme();
      }
    }

    private static class getStartDatesBySomeDayEpisodeParam_resultStandardScheme extends StandardScheme<getStartDatesBySomeDayEpisodeParam_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStartDatesBySomeDayEpisodeParam_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list290 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list290.size);
                  String _elem291;
                  for (int _i292 = 0; _i292 < _list290.size; ++_i292)
                  {
                    _elem291 = iprot.readString();
                    struct.success.add(_elem291);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStartDatesBySomeDayEpisodeParam_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter293 : struct.success)
            {
              oprot.writeString(_iter293);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStartDatesBySomeDayEpisodeParam_resultTupleSchemeFactory implements SchemeFactory {
      public getStartDatesBySomeDayEpisodeParam_resultTupleScheme getScheme() {
        return new getStartDatesBySomeDayEpisodeParam_resultTupleScheme();
      }
    }

    private static class getStartDatesBySomeDayEpisodeParam_resultTupleScheme extends TupleScheme<getStartDatesBySomeDayEpisodeParam_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStartDatesBySomeDayEpisodeParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter294 : struct.success)
            {
              oprot.writeString(_iter294);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStartDatesBySomeDayEpisodeParam_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list295 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list295.size);
            String _elem296;
            for (int _i297 = 0; _i297 < _list295.size; ++_i297)
            {
              _elem296 = iprot.readString();
              struct.success.add(_elem296);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsOfSeasonByMetaEntryId_args implements org.apache.thrift.TBase<getEpisodeIdsOfSeasonByMetaEntryId_args, getEpisodeIdsOfSeasonByMetaEntryId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsOfSeasonByMetaEntryId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsOfSeasonByMetaEntryId_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsOfSeasonByMetaEntryId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsOfSeasonByMetaEntryId_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsOfSeasonByMetaEntryId_args.class, metaDataMap);
    }

    public getEpisodeIdsOfSeasonByMetaEntryId_args() {
    }

    public getEpisodeIdsOfSeasonByMetaEntryId_args(
      com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsOfSeasonByMetaEntryId_args(getEpisodeIdsOfSeasonByMetaEntryId_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdsOfSeasonByMetaEntryId_args deepCopy() {
      return new getEpisodeIdsOfSeasonByMetaEntryId_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsOfSeasonByMetaEntryId_args)
        return this.equals((getEpisodeIdsOfSeasonByMetaEntryId_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdsOfSeasonByMetaEntryId_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsOfSeasonByMetaEntryId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsOfSeasonByMetaEntryId_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfSeasonByMetaEntryId_argsStandardScheme getScheme() {
        return new getEpisodeIdsOfSeasonByMetaEntryId_argsStandardScheme();
      }
    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_argsStandardScheme extends StandardScheme<getEpisodeIdsOfSeasonByMetaEntryId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsOfSeasonByMetaEntryId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsOfSeasonByMetaEntryId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfSeasonByMetaEntryId_argsTupleScheme getScheme() {
        return new getEpisodeIdsOfSeasonByMetaEntryId_argsTupleScheme();
      }
    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_argsTupleScheme extends TupleScheme<getEpisodeIdsOfSeasonByMetaEntryId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfSeasonByMetaEntryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfSeasonByMetaEntryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsOfSeasonByMetaEntryId_result implements org.apache.thrift.TBase<getEpisodeIdsOfSeasonByMetaEntryId_result, getEpisodeIdsOfSeasonByMetaEntryId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsOfSeasonByMetaEntryId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsOfSeasonByMetaEntryId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsOfSeasonByMetaEntryId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsOfSeasonByMetaEntryId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsOfSeasonByMetaEntryId_result.class, metaDataMap);
    }

    public getEpisodeIdsOfSeasonByMetaEntryId_result() {
    }

    public getEpisodeIdsOfSeasonByMetaEntryId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsOfSeasonByMetaEntryId_result(getEpisodeIdsOfSeasonByMetaEntryId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getEpisodeIdsOfSeasonByMetaEntryId_result deepCopy() {
      return new getEpisodeIdsOfSeasonByMetaEntryId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsOfSeasonByMetaEntryId_result)
        return this.equals((getEpisodeIdsOfSeasonByMetaEntryId_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdsOfSeasonByMetaEntryId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsOfSeasonByMetaEntryId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsOfSeasonByMetaEntryId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfSeasonByMetaEntryId_resultStandardScheme getScheme() {
        return new getEpisodeIdsOfSeasonByMetaEntryId_resultStandardScheme();
      }
    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_resultStandardScheme extends StandardScheme<getEpisodeIdsOfSeasonByMetaEntryId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsOfSeasonByMetaEntryId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list298.size);
                  long _elem299;
                  for (int _i300 = 0; _i300 < _list298.size; ++_i300)
                  {
                    _elem299 = iprot.readI64();
                    struct.success.add(_elem299);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsOfSeasonByMetaEntryId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter301 : struct.success)
            {
              oprot.writeI64(_iter301);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfSeasonByMetaEntryId_resultTupleScheme getScheme() {
        return new getEpisodeIdsOfSeasonByMetaEntryId_resultTupleScheme();
      }
    }

    private static class getEpisodeIdsOfSeasonByMetaEntryId_resultTupleScheme extends TupleScheme<getEpisodeIdsOfSeasonByMetaEntryId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfSeasonByMetaEntryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter302 : struct.success)
            {
              oprot.writeI64(_iter302);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfSeasonByMetaEntryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list303 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list303.size);
            long _elem304;
            for (int _i305 = 0; _i305 < _list303.size; ++_i305)
            {
              _elem304 = iprot.readI64();
              struct.success.add(_elem304);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsRelatedWithSomeEpisode_args implements org.apache.thrift.TBase<getEpisodeIdsRelatedWithSomeEpisode_args, getEpisodeIdsRelatedWithSomeEpisode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsRelatedWithSomeEpisode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsRelatedWithSomeEpisode_args");

    private static final org.apache.thrift.protocol.TField EPISODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("episodeId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsRelatedWithSomeEpisode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsRelatedWithSomeEpisode_argsTupleSchemeFactory());
    }

    private long episodeId; // required
    private int count; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EPISODE_ID((short)1, "episodeId"),
      COUNT((short)2, "count"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EPISODE_ID
            return EPISODE_ID;
          case 2: // COUNT
            return COUNT;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EPISODEID_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EPISODE_ID, new org.apache.thrift.meta_data.FieldMetaData("episodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsRelatedWithSomeEpisode_args.class, metaDataMap);
    }

    public getEpisodeIdsRelatedWithSomeEpisode_args() {
    }

    public getEpisodeIdsRelatedWithSomeEpisode_args(
      long episodeId,
      int count,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.episodeId = episodeId;
      setEpisodeIdIsSet(true);
      this.count = count;
      setCountIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsRelatedWithSomeEpisode_args(getEpisodeIdsRelatedWithSomeEpisode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.episodeId = other.episodeId;
      this.count = other.count;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdsRelatedWithSomeEpisode_args deepCopy() {
      return new getEpisodeIdsRelatedWithSomeEpisode_args(this);
    }

    @Override
    public void clear() {
      setEpisodeIdIsSet(false);
      this.episodeId = 0;
      setCountIsSet(false);
      this.count = 0;
      this.caller = null;
    }

    public long getEpisodeId() {
      return this.episodeId;
    }

    public void setEpisodeId(long episodeId) {
      this.episodeId = episodeId;
      setEpisodeIdIsSet(true);
    }

    public void unsetEpisodeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EPISODEID_ISSET_ID);
    }

    /** Returns true if field episodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEpisodeId() {
      return EncodingUtils.testBit(__isset_bitfield, __EPISODEID_ISSET_ID);
    }

    public void setEpisodeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EPISODEID_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EPISODE_ID:
        if (value == null) {
          unsetEpisodeId();
        } else {
          setEpisodeId((Long)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((Integer)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EPISODE_ID:
        return Long.valueOf(getEpisodeId());

      case COUNT:
        return Integer.valueOf(getCount());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EPISODE_ID:
        return isSetEpisodeId();
      case COUNT:
        return isSetCount();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsRelatedWithSomeEpisode_args)
        return this.equals((getEpisodeIdsRelatedWithSomeEpisode_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdsRelatedWithSomeEpisode_args that) {
      if (that == null)
        return false;

      boolean this_present_episodeId = true;
      boolean that_present_episodeId = true;
      if (this_present_episodeId || that_present_episodeId) {
        if (!(this_present_episodeId && that_present_episodeId))
          return false;
        if (this.episodeId != that.episodeId)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_episodeId = true;
      list.add(present_episodeId);
      if (present_episodeId)
        list.add(episodeId);

      boolean present_count = true;
      list.add(present_count);
      if (present_count)
        list.add(count);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsRelatedWithSomeEpisode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEpisodeId()).compareTo(other.isSetEpisodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEpisodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.episodeId, other.episodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsRelatedWithSomeEpisode_args(");
      boolean first = true;

      sb.append("episodeId:");
      sb.append(this.episodeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsRelatedWithSomeEpisode_argsStandardScheme getScheme() {
        return new getEpisodeIdsRelatedWithSomeEpisode_argsStandardScheme();
      }
    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_argsStandardScheme extends StandardScheme<getEpisodeIdsRelatedWithSomeEpisode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsRelatedWithSomeEpisode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EPISODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.episodeId = iprot.readI64();
                struct.setEpisodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsRelatedWithSomeEpisode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EPISODE_ID_FIELD_DESC);
        oprot.writeI64(struct.episodeId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsRelatedWithSomeEpisode_argsTupleScheme getScheme() {
        return new getEpisodeIdsRelatedWithSomeEpisode_argsTupleScheme();
      }
    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_argsTupleScheme extends TupleScheme<getEpisodeIdsRelatedWithSomeEpisode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsRelatedWithSomeEpisode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEpisodeId()) {
          optionals.set(0);
        }
        if (struct.isSetCount()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEpisodeId()) {
          oprot.writeI64(struct.episodeId);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsRelatedWithSomeEpisode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.episodeId = iprot.readI64();
          struct.setEpisodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsRelatedWithSomeEpisode_result implements org.apache.thrift.TBase<getEpisodeIdsRelatedWithSomeEpisode_result, getEpisodeIdsRelatedWithSomeEpisode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsRelatedWithSomeEpisode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsRelatedWithSomeEpisode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsRelatedWithSomeEpisode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsRelatedWithSomeEpisode_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsRelatedWithSomeEpisode_result.class, metaDataMap);
    }

    public getEpisodeIdsRelatedWithSomeEpisode_result() {
    }

    public getEpisodeIdsRelatedWithSomeEpisode_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsRelatedWithSomeEpisode_result(getEpisodeIdsRelatedWithSomeEpisode_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getEpisodeIdsRelatedWithSomeEpisode_result deepCopy() {
      return new getEpisodeIdsRelatedWithSomeEpisode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsRelatedWithSomeEpisode_result)
        return this.equals((getEpisodeIdsRelatedWithSomeEpisode_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdsRelatedWithSomeEpisode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsRelatedWithSomeEpisode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsRelatedWithSomeEpisode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsRelatedWithSomeEpisode_resultStandardScheme getScheme() {
        return new getEpisodeIdsRelatedWithSomeEpisode_resultStandardScheme();
      }
    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_resultStandardScheme extends StandardScheme<getEpisodeIdsRelatedWithSomeEpisode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsRelatedWithSomeEpisode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list306 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list306.size);
                  long _elem307;
                  for (int _i308 = 0; _i308 < _list306.size; ++_i308)
                  {
                    _elem307 = iprot.readI64();
                    struct.success.add(_elem307);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsRelatedWithSomeEpisode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter309 : struct.success)
            {
              oprot.writeI64(_iter309);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsRelatedWithSomeEpisode_resultTupleScheme getScheme() {
        return new getEpisodeIdsRelatedWithSomeEpisode_resultTupleScheme();
      }
    }

    private static class getEpisodeIdsRelatedWithSomeEpisode_resultTupleScheme extends TupleScheme<getEpisodeIdsRelatedWithSomeEpisode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsRelatedWithSomeEpisode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter310 : struct.success)
            {
              oprot.writeI64(_iter310);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsRelatedWithSomeEpisode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list311.size);
            long _elem312;
            for (int _i313 = 0; _i313 < _list311.size; ++_i313)
            {
              _elem312 = iprot.readI64();
              struct.success.add(_elem312);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsNearbySomeEpisode_args implements org.apache.thrift.TBase<getEpisodeIdsNearbySomeEpisode_args, getEpisodeIdsNearbySomeEpisode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsNearbySomeEpisode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsNearbySomeEpisode_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsNearbySomeEpisode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsNearbySomeEpisode_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsNearbySomeEpisode_args.class, metaDataMap);
    }

    public getEpisodeIdsNearbySomeEpisode_args() {
    }

    public getEpisodeIdsNearbySomeEpisode_args(
      com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsNearbySomeEpisode_args(getEpisodeIdsNearbySomeEpisode_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdsNearbySomeEpisode_args deepCopy() {
      return new getEpisodeIdsNearbySomeEpisode_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsNearbySomeEpisode_args)
        return this.equals((getEpisodeIdsNearbySomeEpisode_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdsNearbySomeEpisode_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsNearbySomeEpisode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsNearbySomeEpisode_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsNearbySomeEpisode_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsNearbySomeEpisode_argsStandardScheme getScheme() {
        return new getEpisodeIdsNearbySomeEpisode_argsStandardScheme();
      }
    }

    private static class getEpisodeIdsNearbySomeEpisode_argsStandardScheme extends StandardScheme<getEpisodeIdsNearbySomeEpisode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsNearbySomeEpisode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsNearbySomeEpisode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsNearbySomeEpisode_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsNearbySomeEpisode_argsTupleScheme getScheme() {
        return new getEpisodeIdsNearbySomeEpisode_argsTupleScheme();
      }
    }

    private static class getEpisodeIdsNearbySomeEpisode_argsTupleScheme extends TupleScheme<getEpisodeIdsNearbySomeEpisode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsNearbySomeEpisode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsNearbySomeEpisode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodesNearbySomeEpisodeParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsNearbySomeEpisode_result implements org.apache.thrift.TBase<getEpisodeIdsNearbySomeEpisode_result, getEpisodeIdsNearbySomeEpisode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsNearbySomeEpisode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsNearbySomeEpisode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsNearbySomeEpisode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsNearbySomeEpisode_resultTupleSchemeFactory());
    }

    private Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsNearbySomeEpisode_result.class, metaDataMap);
    }

    public getEpisodeIdsNearbySomeEpisode_result() {
    }

    public getEpisodeIdsNearbySomeEpisode_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsNearbySomeEpisode_result(getEpisodeIdsNearbySomeEpisode_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>(other.success);
        this.success = __this__success;
      }
    }

    public getEpisodeIdsNearbySomeEpisode_result deepCopy() {
      return new getEpisodeIdsNearbySomeEpisode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsNearbySomeEpisode_result)
        return this.equals((getEpisodeIdsNearbySomeEpisode_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdsNearbySomeEpisode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsNearbySomeEpisode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsNearbySomeEpisode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsNearbySomeEpisode_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsNearbySomeEpisode_resultStandardScheme getScheme() {
        return new getEpisodeIdsNearbySomeEpisode_resultStandardScheme();
      }
    }

    private static class getEpisodeIdsNearbySomeEpisode_resultStandardScheme extends StandardScheme<getEpisodeIdsNearbySomeEpisode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsNearbySomeEpisode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map314 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map314.size);
                  String _key315;
                  long _val316;
                  for (int _i317 = 0; _i317 < _map314.size; ++_i317)
                  {
                    _key315 = iprot.readString();
                    _val316 = iprot.readI64();
                    struct.success.put(_key315, _val316);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsNearbySomeEpisode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter318 : struct.success.entrySet())
            {
              oprot.writeString(_iter318.getKey());
              oprot.writeI64(_iter318.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsNearbySomeEpisode_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsNearbySomeEpisode_resultTupleScheme getScheme() {
        return new getEpisodeIdsNearbySomeEpisode_resultTupleScheme();
      }
    }

    private static class getEpisodeIdsNearbySomeEpisode_resultTupleScheme extends TupleScheme<getEpisodeIdsNearbySomeEpisode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsNearbySomeEpisode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter319 : struct.success.entrySet())
            {
              oprot.writeString(_iter319.getKey());
              oprot.writeI64(_iter319.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsNearbySomeEpisode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map320 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map320.size);
            String _key321;
            long _val322;
            for (int _i323 = 0; _i323 < _map320.size; ++_i323)
            {
              _key321 = iprot.readString();
              _val322 = iprot.readI64();
              struct.success.put(_key321, _val322);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTComboEpisodeById_args implements org.apache.thrift.TBase<getTComboEpisodeById_args, getTComboEpisodeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTComboEpisodeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTComboEpisodeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTComboEpisodeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTComboEpisodeById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTComboEpisodeById_args.class, metaDataMap);
    }

    public getTComboEpisodeById_args() {
    }

    public getTComboEpisodeById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTComboEpisodeById_args(getTComboEpisodeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTComboEpisodeById_args deepCopy() {
      return new getTComboEpisodeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTComboEpisodeById_args)
        return this.equals((getTComboEpisodeById_args)that);
      return false;
    }

    public boolean equals(getTComboEpisodeById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTComboEpisodeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTComboEpisodeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTComboEpisodeById_argsStandardSchemeFactory implements SchemeFactory {
      public getTComboEpisodeById_argsStandardScheme getScheme() {
        return new getTComboEpisodeById_argsStandardScheme();
      }
    }

    private static class getTComboEpisodeById_argsStandardScheme extends StandardScheme<getTComboEpisodeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTComboEpisodeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTComboEpisodeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTComboEpisodeById_argsTupleSchemeFactory implements SchemeFactory {
      public getTComboEpisodeById_argsTupleScheme getScheme() {
        return new getTComboEpisodeById_argsTupleScheme();
      }
    }

    private static class getTComboEpisodeById_argsTupleScheme extends TupleScheme<getTComboEpisodeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTComboEpisodeById_result implements org.apache.thrift.TBase<getTComboEpisodeById_result, getTComboEpisodeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTComboEpisodeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTComboEpisodeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTComboEpisodeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTComboEpisodeById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TComboEpisode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TComboEpisode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTComboEpisodeById_result.class, metaDataMap);
    }

    public getTComboEpisodeById_result() {
    }

    public getTComboEpisodeById_result(
      com.lesports.qmt.sbc.api.dto.TComboEpisode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTComboEpisodeById_result(getTComboEpisodeById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TComboEpisode(other.success);
      }
    }

    public getTComboEpisodeById_result deepCopy() {
      return new getTComboEpisodeById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TComboEpisode getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TComboEpisode success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TComboEpisode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTComboEpisodeById_result)
        return this.equals((getTComboEpisodeById_result)that);
      return false;
    }

    public boolean equals(getTComboEpisodeById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTComboEpisodeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTComboEpisodeById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTComboEpisodeById_resultStandardSchemeFactory implements SchemeFactory {
      public getTComboEpisodeById_resultStandardScheme getScheme() {
        return new getTComboEpisodeById_resultStandardScheme();
      }
    }

    private static class getTComboEpisodeById_resultStandardScheme extends StandardScheme<getTComboEpisodeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTComboEpisodeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTComboEpisodeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTComboEpisodeById_resultTupleSchemeFactory implements SchemeFactory {
      public getTComboEpisodeById_resultTupleScheme getScheme() {
        return new getTComboEpisodeById_resultTupleScheme();
      }
    }

    private static class getTComboEpisodeById_resultTupleScheme extends TupleScheme<getTComboEpisodeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTComboEpisodesByIds_args implements org.apache.thrift.TBase<getTComboEpisodesByIds_args, getTComboEpisodesByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTComboEpisodesByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTComboEpisodesByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTComboEpisodesByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTComboEpisodesByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTComboEpisodesByIds_args.class, metaDataMap);
    }

    public getTComboEpisodesByIds_args() {
    }

    public getTComboEpisodesByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTComboEpisodesByIds_args(getTComboEpisodesByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTComboEpisodesByIds_args deepCopy() {
      return new getTComboEpisodesByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTComboEpisodesByIds_args)
        return this.equals((getTComboEpisodesByIds_args)that);
      return false;
    }

    public boolean equals(getTComboEpisodesByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTComboEpisodesByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTComboEpisodesByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTComboEpisodesByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTComboEpisodesByIds_argsStandardScheme getScheme() {
        return new getTComboEpisodesByIds_argsStandardScheme();
      }
    }

    private static class getTComboEpisodesByIds_argsStandardScheme extends StandardScheme<getTComboEpisodesByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTComboEpisodesByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list324 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list324.size);
                  long _elem325;
                  for (int _i326 = 0; _i326 < _list324.size; ++_i326)
                  {
                    _elem325 = iprot.readI64();
                    struct.ids.add(_elem325);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTComboEpisodesByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter327 : struct.ids)
            {
              oprot.writeI64(_iter327);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTComboEpisodesByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTComboEpisodesByIds_argsTupleScheme getScheme() {
        return new getTComboEpisodesByIds_argsTupleScheme();
      }
    }

    private static class getTComboEpisodesByIds_argsTupleScheme extends TupleScheme<getTComboEpisodesByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter328 : struct.ids)
            {
              oprot.writeI64(_iter328);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list329 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list329.size);
            long _elem330;
            for (int _i331 = 0; _i331 < _list329.size; ++_i331)
            {
              _elem330 = iprot.readI64();
              struct.ids.add(_elem330);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTComboEpisodesByIds_result implements org.apache.thrift.TBase<getTComboEpisodesByIds_result, getTComboEpisodesByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTComboEpisodesByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTComboEpisodesByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTComboEpisodesByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTComboEpisodesByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TComboEpisode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTComboEpisodesByIds_result.class, metaDataMap);
    }

    public getTComboEpisodesByIds_result() {
    }

    public getTComboEpisodesByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTComboEpisodesByIds_result(getTComboEpisodesByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TComboEpisode> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TComboEpisode other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TComboEpisode(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTComboEpisodesByIds_result deepCopy() {
      return new getTComboEpisodesByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TComboEpisode> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TComboEpisode elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TComboEpisode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTComboEpisodesByIds_result)
        return this.equals((getTComboEpisodesByIds_result)that);
      return false;
    }

    public boolean equals(getTComboEpisodesByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTComboEpisodesByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTComboEpisodesByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTComboEpisodesByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTComboEpisodesByIds_resultStandardScheme getScheme() {
        return new getTComboEpisodesByIds_resultStandardScheme();
      }
    }

    private static class getTComboEpisodesByIds_resultStandardScheme extends StandardScheme<getTComboEpisodesByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTComboEpisodesByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list332 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(_list332.size);
                  com.lesports.qmt.sbc.api.dto.TComboEpisode _elem333;
                  for (int _i334 = 0; _i334 < _list332.size; ++_i334)
                  {
                    _elem333 = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
                    _elem333.read(iprot);
                    struct.success.add(_elem333);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTComboEpisodesByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TComboEpisode _iter335 : struct.success)
            {
              _iter335.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTComboEpisodesByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTComboEpisodesByIds_resultTupleScheme getScheme() {
        return new getTComboEpisodesByIds_resultTupleScheme();
      }
    }

    private static class getTComboEpisodesByIds_resultTupleScheme extends TupleScheme<getTComboEpisodesByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TComboEpisode _iter336 : struct.success)
            {
              _iter336.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list337 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(_list337.size);
            com.lesports.qmt.sbc.api.dto.TComboEpisode _elem338;
            for (int _i339 = 0; _i339 < _list337.size; ++_i339)
            {
              _elem338 = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
              _elem338.read(iprot);
              struct.success.add(_elem338);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTComboEpisodesInAlbum_args implements org.apache.thrift.TBase<getTComboEpisodesInAlbum_args, getTComboEpisodesInAlbum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTComboEpisodesInAlbum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTComboEpisodesInAlbum_args");

    private static final org.apache.thrift.protocol.TField ALBUM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("albumId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTComboEpisodesInAlbum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTComboEpisodesInAlbum_argsTupleSchemeFactory());
    }

    private long albumId; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALBUM_ID((short)1, "albumId"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALBUM_ID
            return ALBUM_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ALBUMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALBUM_ID, new org.apache.thrift.meta_data.FieldMetaData("albumId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTComboEpisodesInAlbum_args.class, metaDataMap);
    }

    public getTComboEpisodesInAlbum_args() {
    }

    public getTComboEpisodesInAlbum_args(
      long albumId,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.albumId = albumId;
      setAlbumIdIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTComboEpisodesInAlbum_args(getTComboEpisodesInAlbum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.albumId = other.albumId;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTComboEpisodesInAlbum_args deepCopy() {
      return new getTComboEpisodesInAlbum_args(this);
    }

    @Override
    public void clear() {
      setAlbumIdIsSet(false);
      this.albumId = 0;
      this.page = null;
      this.caller = null;
    }

    public long getAlbumId() {
      return this.albumId;
    }

    public void setAlbumId(long albumId) {
      this.albumId = albumId;
      setAlbumIdIsSet(true);
    }

    public void unsetAlbumId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALBUMID_ISSET_ID);
    }

    /** Returns true if field albumId is set (has been assigned a value) and false otherwise */
    public boolean isSetAlbumId() {
      return EncodingUtils.testBit(__isset_bitfield, __ALBUMID_ISSET_ID);
    }

    public void setAlbumIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALBUMID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALBUM_ID:
        if (value == null) {
          unsetAlbumId();
        } else {
          setAlbumId((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALBUM_ID:
        return Long.valueOf(getAlbumId());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALBUM_ID:
        return isSetAlbumId();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTComboEpisodesInAlbum_args)
        return this.equals((getTComboEpisodesInAlbum_args)that);
      return false;
    }

    public boolean equals(getTComboEpisodesInAlbum_args that) {
      if (that == null)
        return false;

      boolean this_present_albumId = true;
      boolean that_present_albumId = true;
      if (this_present_albumId || that_present_albumId) {
        if (!(this_present_albumId && that_present_albumId))
          return false;
        if (this.albumId != that.albumId)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_albumId = true;
      list.add(present_albumId);
      if (present_albumId)
        list.add(albumId);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTComboEpisodesInAlbum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAlbumId()).compareTo(other.isSetAlbumId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlbumId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albumId, other.albumId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTComboEpisodesInAlbum_args(");
      boolean first = true;

      sb.append("albumId:");
      sb.append(this.albumId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTComboEpisodesInAlbum_argsStandardSchemeFactory implements SchemeFactory {
      public getTComboEpisodesInAlbum_argsStandardScheme getScheme() {
        return new getTComboEpisodesInAlbum_argsStandardScheme();
      }
    }

    private static class getTComboEpisodesInAlbum_argsStandardScheme extends StandardScheme<getTComboEpisodesInAlbum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTComboEpisodesInAlbum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALBUM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.albumId = iprot.readI64();
                struct.setAlbumIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTComboEpisodesInAlbum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ALBUM_ID_FIELD_DESC);
        oprot.writeI64(struct.albumId);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTComboEpisodesInAlbum_argsTupleSchemeFactory implements SchemeFactory {
      public getTComboEpisodesInAlbum_argsTupleScheme getScheme() {
        return new getTComboEpisodesInAlbum_argsTupleScheme();
      }
    }

    private static class getTComboEpisodesInAlbum_argsTupleScheme extends TupleScheme<getTComboEpisodesInAlbum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlbumId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAlbumId()) {
          oprot.writeI64(struct.albumId);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.albumId = iprot.readI64();
          struct.setAlbumIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTComboEpisodesInAlbum_result implements org.apache.thrift.TBase<getTComboEpisodesInAlbum_result, getTComboEpisodesInAlbum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTComboEpisodesInAlbum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTComboEpisodesInAlbum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTComboEpisodesInAlbum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTComboEpisodesInAlbum_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TComboEpisode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTComboEpisodesInAlbum_result.class, metaDataMap);
    }

    public getTComboEpisodesInAlbum_result() {
    }

    public getTComboEpisodesInAlbum_result(
      List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTComboEpisodesInAlbum_result(getTComboEpisodesInAlbum_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TComboEpisode> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TComboEpisode other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TComboEpisode(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTComboEpisodesInAlbum_result deepCopy() {
      return new getTComboEpisodesInAlbum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TComboEpisode> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TComboEpisode elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TComboEpisode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTComboEpisodesInAlbum_result)
        return this.equals((getTComboEpisodesInAlbum_result)that);
      return false;
    }

    public boolean equals(getTComboEpisodesInAlbum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTComboEpisodesInAlbum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTComboEpisodesInAlbum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTComboEpisodesInAlbum_resultStandardSchemeFactory implements SchemeFactory {
      public getTComboEpisodesInAlbum_resultStandardScheme getScheme() {
        return new getTComboEpisodesInAlbum_resultStandardScheme();
      }
    }

    private static class getTComboEpisodesInAlbum_resultStandardScheme extends StandardScheme<getTComboEpisodesInAlbum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTComboEpisodesInAlbum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(_list340.size);
                  com.lesports.qmt.sbc.api.dto.TComboEpisode _elem341;
                  for (int _i342 = 0; _i342 < _list340.size; ++_i342)
                  {
                    _elem341 = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
                    _elem341.read(iprot);
                    struct.success.add(_elem341);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTComboEpisodesInAlbum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TComboEpisode _iter343 : struct.success)
            {
              _iter343.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTComboEpisodesInAlbum_resultTupleSchemeFactory implements SchemeFactory {
      public getTComboEpisodesInAlbum_resultTupleScheme getScheme() {
        return new getTComboEpisodesInAlbum_resultTupleScheme();
      }
    }

    private static class getTComboEpisodesInAlbum_resultTupleScheme extends TupleScheme<getTComboEpisodesInAlbum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TComboEpisode _iter344 : struct.success)
            {
              _iter344.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTComboEpisodesInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list345 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(_list345.size);
            com.lesports.qmt.sbc.api.dto.TComboEpisode _elem346;
            for (int _i347 = 0; _i347 < _list345.size; ++_i347)
            {
              _elem346 = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
              _elem346.read(iprot);
              struct.success.add(_elem346);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodes4OlyMatchs_args implements org.apache.thrift.TBase<getEpisodes4OlyMatchs_args, getEpisodes4OlyMatchs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodes4OlyMatchs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodes4OlyMatchs_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodes4OlyMatchs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodes4OlyMatchs_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodes4OlyMatchs_args.class, metaDataMap);
    }

    public getEpisodes4OlyMatchs_args() {
    }

    public getEpisodes4OlyMatchs_args(
      com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodes4OlyMatchs_args(getEpisodes4OlyMatchs_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodes4OlyMatchs_args deepCopy() {
      return new getEpisodes4OlyMatchs_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodes4OlyMatchs_args)
        return this.equals((getEpisodes4OlyMatchs_args)that);
      return false;
    }

    public boolean equals(getEpisodes4OlyMatchs_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodes4OlyMatchs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodes4OlyMatchs_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodes4OlyMatchs_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodes4OlyMatchs_argsStandardScheme getScheme() {
        return new getEpisodes4OlyMatchs_argsStandardScheme();
      }
    }

    private static class getEpisodes4OlyMatchs_argsStandardScheme extends StandardScheme<getEpisodes4OlyMatchs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodes4OlyMatchs_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodes4OlyMatchs_argsTupleScheme getScheme() {
        return new getEpisodes4OlyMatchs_argsTupleScheme();
      }
    }

    private static class getEpisodes4OlyMatchs_argsTupleScheme extends TupleScheme<getEpisodes4OlyMatchs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodes4OlyMatchs_result implements org.apache.thrift.TBase<getEpisodes4OlyMatchs_result, getEpisodes4OlyMatchs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodes4OlyMatchs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodes4OlyMatchs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodes4OlyMatchs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodes4OlyMatchs_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TComboEpisode.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodes4OlyMatchs_result.class, metaDataMap);
    }

    public getEpisodes4OlyMatchs_result() {
    }

    public getEpisodes4OlyMatchs_result(
      List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodes4OlyMatchs_result(getEpisodes4OlyMatchs_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TComboEpisode> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TComboEpisode other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TComboEpisode(other_element));
        }
        this.success = __this__success;
      }
    }

    public getEpisodes4OlyMatchs_result deepCopy() {
      return new getEpisodes4OlyMatchs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TComboEpisode> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TComboEpisode elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TComboEpisode> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TComboEpisode> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TComboEpisode>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodes4OlyMatchs_result)
        return this.equals((getEpisodes4OlyMatchs_result)that);
      return false;
    }

    public boolean equals(getEpisodes4OlyMatchs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodes4OlyMatchs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodes4OlyMatchs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodes4OlyMatchs_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodes4OlyMatchs_resultStandardScheme getScheme() {
        return new getEpisodes4OlyMatchs_resultStandardScheme();
      }
    }

    private static class getEpisodes4OlyMatchs_resultStandardScheme extends StandardScheme<getEpisodes4OlyMatchs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(_list348.size);
                  com.lesports.qmt.sbc.api.dto.TComboEpisode _elem349;
                  for (int _i350 = 0; _i350 < _list348.size; ++_i350)
                  {
                    _elem349 = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
                    _elem349.read(iprot);
                    struct.success.add(_elem349);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TComboEpisode _iter351 : struct.success)
            {
              _iter351.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodes4OlyMatchs_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodes4OlyMatchs_resultTupleScheme getScheme() {
        return new getEpisodes4OlyMatchs_resultTupleScheme();
      }
    }

    private static class getEpisodes4OlyMatchs_resultTupleScheme extends TupleScheme<getEpisodes4OlyMatchs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TComboEpisode _iter352 : struct.success)
            {
              _iter352.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TComboEpisode>(_list353.size);
            com.lesports.qmt.sbc.api.dto.TComboEpisode _elem354;
            for (int _i355 = 0; _i355 < _list353.size; ++_i355)
            {
              _elem354 = new com.lesports.qmt.sbc.api.dto.TComboEpisode();
              _elem354.read(iprot);
              struct.success.add(_elem354);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countEpisodes4OlyMatchs_args implements org.apache.thrift.TBase<countEpisodes4OlyMatchs_args, countEpisodes4OlyMatchs_args._Fields>, java.io.Serializable, Cloneable, Comparable<countEpisodes4OlyMatchs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countEpisodes4OlyMatchs_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countEpisodes4OlyMatchs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countEpisodes4OlyMatchs_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countEpisodes4OlyMatchs_args.class, metaDataMap);
    }

    public countEpisodes4OlyMatchs_args() {
    }

    public countEpisodes4OlyMatchs_args(
      com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countEpisodes4OlyMatchs_args(countEpisodes4OlyMatchs_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public countEpisodes4OlyMatchs_args deepCopy() {
      return new countEpisodes4OlyMatchs_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countEpisodes4OlyMatchs_args)
        return this.equals((countEpisodes4OlyMatchs_args)that);
      return false;
    }

    public boolean equals(countEpisodes4OlyMatchs_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(countEpisodes4OlyMatchs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countEpisodes4OlyMatchs_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countEpisodes4OlyMatchs_argsStandardSchemeFactory implements SchemeFactory {
      public countEpisodes4OlyMatchs_argsStandardScheme getScheme() {
        return new countEpisodes4OlyMatchs_argsStandardScheme();
      }
    }

    private static class countEpisodes4OlyMatchs_argsStandardScheme extends StandardScheme<countEpisodes4OlyMatchs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countEpisodes4OlyMatchs_argsTupleSchemeFactory implements SchemeFactory {
      public countEpisodes4OlyMatchs_argsTupleScheme getScheme() {
        return new countEpisodes4OlyMatchs_argsTupleScheme();
      }
    }

    private static class countEpisodes4OlyMatchs_argsTupleScheme extends TupleScheme<countEpisodes4OlyMatchs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countEpisodes4OlyMatchs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetMatchsEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class countEpisodes4OlyMatchs_result implements org.apache.thrift.TBase<countEpisodes4OlyMatchs_result, countEpisodes4OlyMatchs_result._Fields>, java.io.Serializable, Cloneable, Comparable<countEpisodes4OlyMatchs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countEpisodes4OlyMatchs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countEpisodes4OlyMatchs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countEpisodes4OlyMatchs_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countEpisodes4OlyMatchs_result.class, metaDataMap);
    }

    public countEpisodes4OlyMatchs_result() {
    }

    public countEpisodes4OlyMatchs_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countEpisodes4OlyMatchs_result(countEpisodes4OlyMatchs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countEpisodes4OlyMatchs_result deepCopy() {
      return new countEpisodes4OlyMatchs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countEpisodes4OlyMatchs_result)
        return this.equals((countEpisodes4OlyMatchs_result)that);
      return false;
    }

    public boolean equals(countEpisodes4OlyMatchs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countEpisodes4OlyMatchs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countEpisodes4OlyMatchs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countEpisodes4OlyMatchs_resultStandardSchemeFactory implements SchemeFactory {
      public countEpisodes4OlyMatchs_resultStandardScheme getScheme() {
        return new countEpisodes4OlyMatchs_resultStandardScheme();
      }
    }

    private static class countEpisodes4OlyMatchs_resultStandardScheme extends StandardScheme<countEpisodes4OlyMatchs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countEpisodes4OlyMatchs_resultTupleSchemeFactory implements SchemeFactory {
      public countEpisodes4OlyMatchs_resultTupleScheme getScheme() {
        return new countEpisodes4OlyMatchs_resultTupleScheme();
      }
    }

    private static class countEpisodes4OlyMatchs_resultTupleScheme extends TupleScheme<countEpisodes4OlyMatchs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countEpisodes4OlyMatchs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdByLiveId_args implements org.apache.thrift.TBase<getEpisodeIdByLiveId_args, getEpisodeIdByLiveId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdByLiveId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdByLiveId_args");

    private static final org.apache.thrift.protocol.TField LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("liveId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdByLiveId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdByLiveId_argsTupleSchemeFactory());
    }

    private String liveId; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIVE_ID((short)1, "liveId"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIVE_ID
            return LIVE_ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("liveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdByLiveId_args.class, metaDataMap);
    }

    public getEpisodeIdByLiveId_args() {
    }

    public getEpisodeIdByLiveId_args(
      String liveId,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.liveId = liveId;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdByLiveId_args(getEpisodeIdByLiveId_args other) {
      if (other.isSetLiveId()) {
        this.liveId = other.liveId;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdByLiveId_args deepCopy() {
      return new getEpisodeIdByLiveId_args(this);
    }

    @Override
    public void clear() {
      this.liveId = null;
      this.caller = null;
    }

    public String getLiveId() {
      return this.liveId;
    }

    public void setLiveId(String liveId) {
      this.liveId = liveId;
    }

    public void unsetLiveId() {
      this.liveId = null;
    }

    /** Returns true if field liveId is set (has been assigned a value) and false otherwise */
    public boolean isSetLiveId() {
      return this.liveId != null;
    }

    public void setLiveIdIsSet(boolean value) {
      if (!value) {
        this.liveId = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIVE_ID:
        if (value == null) {
          unsetLiveId();
        } else {
          setLiveId((String)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIVE_ID:
        return getLiveId();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIVE_ID:
        return isSetLiveId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdByLiveId_args)
        return this.equals((getEpisodeIdByLiveId_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdByLiveId_args that) {
      if (that == null)
        return false;

      boolean this_present_liveId = true && this.isSetLiveId();
      boolean that_present_liveId = true && that.isSetLiveId();
      if (this_present_liveId || that_present_liveId) {
        if (!(this_present_liveId && that_present_liveId))
          return false;
        if (!this.liveId.equals(that.liveId))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_liveId = true && (isSetLiveId());
      list.add(present_liveId);
      if (present_liveId)
        list.add(liveId);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdByLiveId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLiveId()).compareTo(other.isSetLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveId, other.liveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdByLiveId_args(");
      boolean first = true;

      sb.append("liveId:");
      if (this.liveId == null) {
        sb.append("null");
      } else {
        sb.append(this.liveId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdByLiveId_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdByLiveId_argsStandardScheme getScheme() {
        return new getEpisodeIdByLiveId_argsStandardScheme();
      }
    }

    private static class getEpisodeIdByLiveId_argsStandardScheme extends StandardScheme<getEpisodeIdByLiveId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdByLiveId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.liveId = iprot.readString();
                struct.setLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdByLiveId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.liveId != null) {
          oprot.writeFieldBegin(LIVE_ID_FIELD_DESC);
          oprot.writeString(struct.liveId);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdByLiveId_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdByLiveId_argsTupleScheme getScheme() {
        return new getEpisodeIdByLiveId_argsTupleScheme();
      }
    }

    private static class getEpisodeIdByLiveId_argsTupleScheme extends TupleScheme<getEpisodeIdByLiveId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByLiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLiveId()) {
          oprot.writeString(struct.liveId);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByLiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.liveId = iprot.readString();
          struct.setLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdByLiveId_result implements org.apache.thrift.TBase<getEpisodeIdByLiveId_result, getEpisodeIdByLiveId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdByLiveId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdByLiveId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdByLiveId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdByLiveId_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdByLiveId_result.class, metaDataMap);
    }

    public getEpisodeIdByLiveId_result() {
    }

    public getEpisodeIdByLiveId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdByLiveId_result(getEpisodeIdByLiveId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getEpisodeIdByLiveId_result deepCopy() {
      return new getEpisodeIdByLiveId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdByLiveId_result)
        return this.equals((getEpisodeIdByLiveId_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdByLiveId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdByLiveId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdByLiveId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdByLiveId_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdByLiveId_resultStandardScheme getScheme() {
        return new getEpisodeIdByLiveId_resultStandardScheme();
      }
    }

    private static class getEpisodeIdByLiveId_resultStandardScheme extends StandardScheme<getEpisodeIdByLiveId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdByLiveId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdByLiveId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdByLiveId_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdByLiveId_resultTupleScheme getScheme() {
        return new getEpisodeIdByLiveId_resultTupleScheme();
      }
    }

    private static class getEpisodeIdByLiveId_resultTupleScheme extends TupleScheme<getEpisodeIdByLiveId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByLiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByLiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdByTextLiveId_args implements org.apache.thrift.TBase<getEpisodeIdByTextLiveId_args, getEpisodeIdByTextLiveId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdByTextLiveId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdByTextLiveId_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdByTextLiveId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdByTextLiveId_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdByTextLiveId_args.class, metaDataMap);
    }

    public getEpisodeIdByTextLiveId_args() {
    }

    public getEpisodeIdByTextLiveId_args(
      long textLiveId,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdByTextLiveId_args(getEpisodeIdByTextLiveId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdByTextLiveId_args deepCopy() {
      return new getEpisodeIdByTextLiveId_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      this.caller = null;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdByTextLiveId_args)
        return this.equals((getEpisodeIdByTextLiveId_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdByTextLiveId_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdByTextLiveId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdByTextLiveId_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdByTextLiveId_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdByTextLiveId_argsStandardScheme getScheme() {
        return new getEpisodeIdByTextLiveId_argsStandardScheme();
      }
    }

    private static class getEpisodeIdByTextLiveId_argsStandardScheme extends StandardScheme<getEpisodeIdByTextLiveId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdByTextLiveId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdByTextLiveId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdByTextLiveId_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdByTextLiveId_argsTupleScheme getScheme() {
        return new getEpisodeIdByTextLiveId_argsTupleScheme();
      }
    }

    private static class getEpisodeIdByTextLiveId_argsTupleScheme extends TupleScheme<getEpisodeIdByTextLiveId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByTextLiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByTextLiveId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdByTextLiveId_result implements org.apache.thrift.TBase<getEpisodeIdByTextLiveId_result, getEpisodeIdByTextLiveId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdByTextLiveId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdByTextLiveId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdByTextLiveId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdByTextLiveId_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdByTextLiveId_result.class, metaDataMap);
    }

    public getEpisodeIdByTextLiveId_result() {
    }

    public getEpisodeIdByTextLiveId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdByTextLiveId_result(getEpisodeIdByTextLiveId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getEpisodeIdByTextLiveId_result deepCopy() {
      return new getEpisodeIdByTextLiveId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdByTextLiveId_result)
        return this.equals((getEpisodeIdByTextLiveId_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdByTextLiveId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdByTextLiveId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdByTextLiveId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdByTextLiveId_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdByTextLiveId_resultStandardScheme getScheme() {
        return new getEpisodeIdByTextLiveId_resultStandardScheme();
      }
    }

    private static class getEpisodeIdByTextLiveId_resultStandardScheme extends StandardScheme<getEpisodeIdByTextLiveId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdByTextLiveId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdByTextLiveId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdByTextLiveId_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdByTextLiveId_resultTupleScheme getScheme() {
        return new getEpisodeIdByTextLiveId_resultTupleScheme();
      }
    }

    private static class getEpisodeIdByTextLiveId_resultTupleScheme extends TupleScheme<getEpisodeIdByTextLiveId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByTextLiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByTextLiveId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPassedEpisodeIdsInAlbum_args implements org.apache.thrift.TBase<getPassedEpisodeIdsInAlbum_args, getPassedEpisodeIdsInAlbum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPassedEpisodeIdsInAlbum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPassedEpisodeIdsInAlbum_args");

    private static final org.apache.thrift.protocol.TField ALBUM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("albumId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPassedEpisodeIdsInAlbum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPassedEpisodeIdsInAlbum_argsTupleSchemeFactory());
    }

    private long albumId; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ALBUM_ID((short)1, "albumId"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ALBUM_ID
            return ALBUM_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ALBUMID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ALBUM_ID, new org.apache.thrift.meta_data.FieldMetaData("albumId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPassedEpisodeIdsInAlbum_args.class, metaDataMap);
    }

    public getPassedEpisodeIdsInAlbum_args() {
    }

    public getPassedEpisodeIdsInAlbum_args(
      long albumId,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.albumId = albumId;
      setAlbumIdIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPassedEpisodeIdsInAlbum_args(getPassedEpisodeIdsInAlbum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.albumId = other.albumId;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getPassedEpisodeIdsInAlbum_args deepCopy() {
      return new getPassedEpisodeIdsInAlbum_args(this);
    }

    @Override
    public void clear() {
      setAlbumIdIsSet(false);
      this.albumId = 0;
      this.page = null;
      this.caller = null;
    }

    public long getAlbumId() {
      return this.albumId;
    }

    public void setAlbumId(long albumId) {
      this.albumId = albumId;
      setAlbumIdIsSet(true);
    }

    public void unsetAlbumId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALBUMID_ISSET_ID);
    }

    /** Returns true if field albumId is set (has been assigned a value) and false otherwise */
    public boolean isSetAlbumId() {
      return EncodingUtils.testBit(__isset_bitfield, __ALBUMID_ISSET_ID);
    }

    public void setAlbumIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALBUMID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ALBUM_ID:
        if (value == null) {
          unsetAlbumId();
        } else {
          setAlbumId((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ALBUM_ID:
        return Long.valueOf(getAlbumId());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ALBUM_ID:
        return isSetAlbumId();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPassedEpisodeIdsInAlbum_args)
        return this.equals((getPassedEpisodeIdsInAlbum_args)that);
      return false;
    }

    public boolean equals(getPassedEpisodeIdsInAlbum_args that) {
      if (that == null)
        return false;

      boolean this_present_albumId = true;
      boolean that_present_albumId = true;
      if (this_present_albumId || that_present_albumId) {
        if (!(this_present_albumId && that_present_albumId))
          return false;
        if (this.albumId != that.albumId)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_albumId = true;
      list.add(present_albumId);
      if (present_albumId)
        list.add(albumId);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPassedEpisodeIdsInAlbum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAlbumId()).compareTo(other.isSetAlbumId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAlbumId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albumId, other.albumId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPassedEpisodeIdsInAlbum_args(");
      boolean first = true;

      sb.append("albumId:");
      sb.append(this.albumId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPassedEpisodeIdsInAlbum_argsStandardSchemeFactory implements SchemeFactory {
      public getPassedEpisodeIdsInAlbum_argsStandardScheme getScheme() {
        return new getPassedEpisodeIdsInAlbum_argsStandardScheme();
      }
    }

    private static class getPassedEpisodeIdsInAlbum_argsStandardScheme extends StandardScheme<getPassedEpisodeIdsInAlbum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPassedEpisodeIdsInAlbum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ALBUM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.albumId = iprot.readI64();
                struct.setAlbumIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPassedEpisodeIdsInAlbum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ALBUM_ID_FIELD_DESC);
        oprot.writeI64(struct.albumId);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPassedEpisodeIdsInAlbum_argsTupleSchemeFactory implements SchemeFactory {
      public getPassedEpisodeIdsInAlbum_argsTupleScheme getScheme() {
        return new getPassedEpisodeIdsInAlbum_argsTupleScheme();
      }
    }

    private static class getPassedEpisodeIdsInAlbum_argsTupleScheme extends TupleScheme<getPassedEpisodeIdsInAlbum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPassedEpisodeIdsInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAlbumId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAlbumId()) {
          oprot.writeI64(struct.albumId);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPassedEpisodeIdsInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.albumId = iprot.readI64();
          struct.setAlbumIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getPassedEpisodeIdsInAlbum_result implements org.apache.thrift.TBase<getPassedEpisodeIdsInAlbum_result, getPassedEpisodeIdsInAlbum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPassedEpisodeIdsInAlbum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPassedEpisodeIdsInAlbum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPassedEpisodeIdsInAlbum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPassedEpisodeIdsInAlbum_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPassedEpisodeIdsInAlbum_result.class, metaDataMap);
    }

    public getPassedEpisodeIdsInAlbum_result() {
    }

    public getPassedEpisodeIdsInAlbum_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPassedEpisodeIdsInAlbum_result(getPassedEpisodeIdsInAlbum_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getPassedEpisodeIdsInAlbum_result deepCopy() {
      return new getPassedEpisodeIdsInAlbum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPassedEpisodeIdsInAlbum_result)
        return this.equals((getPassedEpisodeIdsInAlbum_result)that);
      return false;
    }

    public boolean equals(getPassedEpisodeIdsInAlbum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPassedEpisodeIdsInAlbum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPassedEpisodeIdsInAlbum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPassedEpisodeIdsInAlbum_resultStandardSchemeFactory implements SchemeFactory {
      public getPassedEpisodeIdsInAlbum_resultStandardScheme getScheme() {
        return new getPassedEpisodeIdsInAlbum_resultStandardScheme();
      }
    }

    private static class getPassedEpisodeIdsInAlbum_resultStandardScheme extends StandardScheme<getPassedEpisodeIdsInAlbum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPassedEpisodeIdsInAlbum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list356 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list356.size);
                  long _elem357;
                  for (int _i358 = 0; _i358 < _list356.size; ++_i358)
                  {
                    _elem357 = iprot.readI64();
                    struct.success.add(_elem357);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPassedEpisodeIdsInAlbum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter359 : struct.success)
            {
              oprot.writeI64(_iter359);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPassedEpisodeIdsInAlbum_resultTupleSchemeFactory implements SchemeFactory {
      public getPassedEpisodeIdsInAlbum_resultTupleScheme getScheme() {
        return new getPassedEpisodeIdsInAlbum_resultTupleScheme();
      }
    }

    private static class getPassedEpisodeIdsInAlbum_resultTupleScheme extends TupleScheme<getPassedEpisodeIdsInAlbum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPassedEpisodeIdsInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter360 : struct.success)
            {
              oprot.writeI64(_iter360);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPassedEpisodeIdsInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list361 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list361.size);
            long _elem362;
            for (int _i363 = 0; _i363 < _list361.size; ++_i363)
            {
              _elem362 = iprot.readI64();
              struct.success.add(_elem362);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdByMid_args implements org.apache.thrift.TBase<getEpisodeIdByMid_args, getEpisodeIdByMid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdByMid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdByMid_args");

    private static final org.apache.thrift.protocol.TField M_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdByMid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdByMid_argsTupleSchemeFactory());
    }

    private long mId; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      M_ID((short)1, "mId"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // M_ID
            return M_ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.M_ID, new org.apache.thrift.meta_data.FieldMetaData("mId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdByMid_args.class, metaDataMap);
    }

    public getEpisodeIdByMid_args() {
    }

    public getEpisodeIdByMid_args(
      long mId,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.mId = mId;
      setMIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdByMid_args(getEpisodeIdByMid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.mId = other.mId;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdByMid_args deepCopy() {
      return new getEpisodeIdByMid_args(this);
    }

    @Override
    public void clear() {
      setMIdIsSet(false);
      this.mId = 0;
      this.caller = null;
    }

    public long getMId() {
      return this.mId;
    }

    public void setMId(long mId) {
      this.mId = mId;
      setMIdIsSet(true);
    }

    public void unsetMId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
    }

    /** Returns true if field mId is set (has been assigned a value) and false otherwise */
    public boolean isSetMId() {
      return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
    }

    public void setMIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case M_ID:
        if (value == null) {
          unsetMId();
        } else {
          setMId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case M_ID:
        return Long.valueOf(getMId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case M_ID:
        return isSetMId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdByMid_args)
        return this.equals((getEpisodeIdByMid_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdByMid_args that) {
      if (that == null)
        return false;

      boolean this_present_mId = true;
      boolean that_present_mId = true;
      if (this_present_mId || that_present_mId) {
        if (!(this_present_mId && that_present_mId))
          return false;
        if (this.mId != that.mId)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_mId = true;
      list.add(present_mId);
      if (present_mId)
        list.add(mId);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdByMid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMId()).compareTo(other.isSetMId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mId, other.mId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdByMid_args(");
      boolean first = true;

      sb.append("mId:");
      sb.append(this.mId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdByMid_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdByMid_argsStandardScheme getScheme() {
        return new getEpisodeIdByMid_argsStandardScheme();
      }
    }

    private static class getEpisodeIdByMid_argsStandardScheme extends StandardScheme<getEpisodeIdByMid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdByMid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // M_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.mId = iprot.readI64();
                struct.setMIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdByMid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(M_ID_FIELD_DESC);
        oprot.writeI64(struct.mId);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdByMid_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdByMid_argsTupleScheme getScheme() {
        return new getEpisodeIdByMid_argsTupleScheme();
      }
    }

    private static class getEpisodeIdByMid_argsTupleScheme extends TupleScheme<getEpisodeIdByMid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByMid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMId()) {
          oprot.writeI64(struct.mId);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByMid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mId = iprot.readI64();
          struct.setMIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdByMid_result implements org.apache.thrift.TBase<getEpisodeIdByMid_result, getEpisodeIdByMid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdByMid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdByMid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdByMid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdByMid_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdByMid_result.class, metaDataMap);
    }

    public getEpisodeIdByMid_result() {
    }

    public getEpisodeIdByMid_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdByMid_result(getEpisodeIdByMid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getEpisodeIdByMid_result deepCopy() {
      return new getEpisodeIdByMid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdByMid_result)
        return this.equals((getEpisodeIdByMid_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdByMid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdByMid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdByMid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdByMid_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdByMid_resultStandardScheme getScheme() {
        return new getEpisodeIdByMid_resultStandardScheme();
      }
    }

    private static class getEpisodeIdByMid_resultStandardScheme extends StandardScheme<getEpisodeIdByMid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdByMid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdByMid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdByMid_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdByMid_resultTupleScheme getScheme() {
        return new getEpisodeIdByMid_resultTupleScheme();
      }
    }

    private static class getEpisodeIdByMid_resultTupleScheme extends TupleScheme<getEpisodeIdByMid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByMid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdByMid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsOfOctopus_args implements org.apache.thrift.TBase<getEpisodeIdsOfOctopus_args, getEpisodeIdsOfOctopus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsOfOctopus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsOfOctopus_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsOfOctopus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsOfOctopus_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsOfOctopus_args.class, metaDataMap);
    }

    public getEpisodeIdsOfOctopus_args() {
    }

    public getEpisodeIdsOfOctopus_args(
      com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsOfOctopus_args(getEpisodeIdsOfOctopus_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIdsOfOctopus_args deepCopy() {
      return new getEpisodeIdsOfOctopus_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsOfOctopus_args)
        return this.equals((getEpisodeIdsOfOctopus_args)that);
      return false;
    }

    public boolean equals(getEpisodeIdsOfOctopus_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsOfOctopus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsOfOctopus_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsOfOctopus_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfOctopus_argsStandardScheme getScheme() {
        return new getEpisodeIdsOfOctopus_argsStandardScheme();
      }
    }

    private static class getEpisodeIdsOfOctopus_argsStandardScheme extends StandardScheme<getEpisodeIdsOfOctopus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsOfOctopus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsOfOctopus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsOfOctopus_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfOctopus_argsTupleScheme getScheme() {
        return new getEpisodeIdsOfOctopus_argsTupleScheme();
      }
    }

    private static class getEpisodeIdsOfOctopus_argsTupleScheme extends TupleScheme<getEpisodeIdsOfOctopus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfOctopus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfOctopus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetZhangyuEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIdsOfOctopus_result implements org.apache.thrift.TBase<getEpisodeIdsOfOctopus_result, getEpisodeIdsOfOctopus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIdsOfOctopus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIdsOfOctopus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIdsOfOctopus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIdsOfOctopus_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIdsOfOctopus_result.class, metaDataMap);
    }

    public getEpisodeIdsOfOctopus_result() {
    }

    public getEpisodeIdsOfOctopus_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIdsOfOctopus_result(getEpisodeIdsOfOctopus_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getEpisodeIdsOfOctopus_result deepCopy() {
      return new getEpisodeIdsOfOctopus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIdsOfOctopus_result)
        return this.equals((getEpisodeIdsOfOctopus_result)that);
      return false;
    }

    public boolean equals(getEpisodeIdsOfOctopus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIdsOfOctopus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIdsOfOctopus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIdsOfOctopus_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfOctopus_resultStandardScheme getScheme() {
        return new getEpisodeIdsOfOctopus_resultStandardScheme();
      }
    }

    private static class getEpisodeIdsOfOctopus_resultStandardScheme extends StandardScheme<getEpisodeIdsOfOctopus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIdsOfOctopus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list364.size);
                  long _elem365;
                  for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                  {
                    _elem365 = iprot.readI64();
                    struct.success.add(_elem365);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIdsOfOctopus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter367 : struct.success)
            {
              oprot.writeI64(_iter367);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIdsOfOctopus_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIdsOfOctopus_resultTupleScheme getScheme() {
        return new getEpisodeIdsOfOctopus_resultTupleScheme();
      }
    }

    private static class getEpisodeIdsOfOctopus_resultTupleScheme extends TupleScheme<getEpisodeIdsOfOctopus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfOctopus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter368 : struct.success)
            {
              oprot.writeI64(_iter368);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIdsOfOctopus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list369 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list369.size);
            long _elem370;
            for (int _i371 = 0; _i371 < _list369.size; ++_i371)
            {
              _elem370 = iprot.readI64();
              struct.success.add(_elem370);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentEpisodeIdsByCompetitorId_args implements org.apache.thrift.TBase<getCurrentEpisodeIdsByCompetitorId_args, getCurrentEpisodeIdsByCompetitorId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentEpisodeIdsByCompetitorId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentEpisodeIdsByCompetitorId_args");

    private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentEpisodeIdsByCompetitorId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentEpisodeIdsByCompetitorId_argsTupleSchemeFactory());
    }

    private long competitorId; // required
    private com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPETITOR_ID((short)1, "competitorId"),
      P((short)2, "p"),
      PAGE((short)3, "page"),
      CALLER((short)4, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPETITOR_ID
            return COMPETITOR_ID;
          case 2: // P
            return P;
          case 3: // PAGE
            return PAGE;
          case 4: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMPETITORID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentEpisodeIdsByCompetitorId_args.class, metaDataMap);
    }

    public getCurrentEpisodeIdsByCompetitorId_args() {
    }

    public getCurrentEpisodeIdsByCompetitorId_args(
      long competitorId,
      com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.competitorId = competitorId;
      setCompetitorIdIsSet(true);
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentEpisodeIdsByCompetitorId_args(getCurrentEpisodeIdsByCompetitorId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.competitorId = other.competitorId;
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getCurrentEpisodeIdsByCompetitorId_args deepCopy() {
      return new getCurrentEpisodeIdsByCompetitorId_args(this);
    }

    @Override
    public void clear() {
      setCompetitorIdIsSet(false);
      this.competitorId = 0;
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public long getCompetitorId() {
      return this.competitorId;
    }

    public void setCompetitorId(long competitorId) {
      this.competitorId = competitorId;
      setCompetitorIdIsSet(true);
    }

    public void unsetCompetitorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
    }

    /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompetitorId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
    }

    public void setCompetitorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
    }

    public com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPETITOR_ID:
        if (value == null) {
          unsetCompetitorId();
        } else {
          setCompetitorId((Long)value);
        }
        break;

      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPETITOR_ID:
        return Long.valueOf(getCompetitorId());

      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPETITOR_ID:
        return isSetCompetitorId();
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentEpisodeIdsByCompetitorId_args)
        return this.equals((getCurrentEpisodeIdsByCompetitorId_args)that);
      return false;
    }

    public boolean equals(getCurrentEpisodeIdsByCompetitorId_args that) {
      if (that == null)
        return false;

      boolean this_present_competitorId = true;
      boolean that_present_competitorId = true;
      if (this_present_competitorId || that_present_competitorId) {
        if (!(this_present_competitorId && that_present_competitorId))
          return false;
        if (this.competitorId != that.competitorId)
          return false;
      }

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_competitorId = true;
      list.add(present_competitorId);
      if (present_competitorId)
        list.add(competitorId);

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentEpisodeIdsByCompetitorId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompetitorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentEpisodeIdsByCompetitorId_args(");
      boolean first = true;

      sb.append("competitorId:");
      sb.append(this.competitorId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentEpisodeIdsByCompetitorId_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIdsByCompetitorId_argsStandardScheme getScheme() {
        return new getCurrentEpisodeIdsByCompetitorId_argsStandardScheme();
      }
    }

    private static class getCurrentEpisodeIdsByCompetitorId_argsStandardScheme extends StandardScheme<getCurrentEpisodeIdsByCompetitorId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentEpisodeIdsByCompetitorId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPETITOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.competitorId = iprot.readI64();
                struct.setCompetitorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentEpisodeIdsByCompetitorId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorId);
        oprot.writeFieldEnd();
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentEpisodeIdsByCompetitorId_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIdsByCompetitorId_argsTupleScheme getScheme() {
        return new getCurrentEpisodeIdsByCompetitorId_argsTupleScheme();
      }
    }

    private static class getCurrentEpisodeIdsByCompetitorId_argsTupleScheme extends TupleScheme<getCurrentEpisodeIdsByCompetitorId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIdsByCompetitorId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompetitorId()) {
          optionals.set(0);
        }
        if (struct.isSetP()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetCaller()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCompetitorId()) {
          oprot.writeI64(struct.competitorId);
        }
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIdsByCompetitorId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.competitorId = iprot.readI64();
          struct.setCompetitorIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodesOfSeasonByMetaEntryIdParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getCurrentEpisodeIdsByCompetitorId_result implements org.apache.thrift.TBase<getCurrentEpisodeIdsByCompetitorId_result, getCurrentEpisodeIdsByCompetitorId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentEpisodeIdsByCompetitorId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentEpisodeIdsByCompetitorId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentEpisodeIdsByCompetitorId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentEpisodeIdsByCompetitorId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentEpisodeIdsByCompetitorId_result.class, metaDataMap);
    }

    public getCurrentEpisodeIdsByCompetitorId_result() {
    }

    public getCurrentEpisodeIdsByCompetitorId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentEpisodeIdsByCompetitorId_result(getCurrentEpisodeIdsByCompetitorId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getCurrentEpisodeIdsByCompetitorId_result deepCopy() {
      return new getCurrentEpisodeIdsByCompetitorId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentEpisodeIdsByCompetitorId_result)
        return this.equals((getCurrentEpisodeIdsByCompetitorId_result)that);
      return false;
    }

    public boolean equals(getCurrentEpisodeIdsByCompetitorId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentEpisodeIdsByCompetitorId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentEpisodeIdsByCompetitorId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentEpisodeIdsByCompetitorId_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIdsByCompetitorId_resultStandardScheme getScheme() {
        return new getCurrentEpisodeIdsByCompetitorId_resultStandardScheme();
      }
    }

    private static class getCurrentEpisodeIdsByCompetitorId_resultStandardScheme extends StandardScheme<getCurrentEpisodeIdsByCompetitorId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentEpisodeIdsByCompetitorId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list372 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list372.size);
                  long _elem373;
                  for (int _i374 = 0; _i374 < _list372.size; ++_i374)
                  {
                    _elem373 = iprot.readI64();
                    struct.success.add(_elem373);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentEpisodeIdsByCompetitorId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter375 : struct.success)
            {
              oprot.writeI64(_iter375);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentEpisodeIdsByCompetitorId_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentEpisodeIdsByCompetitorId_resultTupleScheme getScheme() {
        return new getCurrentEpisodeIdsByCompetitorId_resultTupleScheme();
      }
    }

    private static class getCurrentEpisodeIdsByCompetitorId_resultTupleScheme extends TupleScheme<getCurrentEpisodeIdsByCompetitorId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIdsByCompetitorId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter376 : struct.success)
            {
              oprot.writeI64(_iter376);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentEpisodeIdsByCompetitorId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list377 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list377.size);
            long _elem378;
            for (int _i379 = 0; _i379 < _list377.size; ++_i379)
            {
              _elem378 = iprot.readI64();
              struct.success.add(_elem378);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLephoneDesktopChannelEpisodes_args implements org.apache.thrift.TBase<getLephoneDesktopChannelEpisodes_args, getLephoneDesktopChannelEpisodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLephoneDesktopChannelEpisodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLephoneDesktopChannelEpisodes_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLephoneDesktopChannelEpisodes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLephoneDesktopChannelEpisodes_argsTupleSchemeFactory());
    }

    private String date; // required
    private long gameType; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date"),
      GAME_TYPE((short)2, "gameType"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          case 2: // GAME_TYPE
            return GAME_TYPE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GAMETYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLephoneDesktopChannelEpisodes_args.class, metaDataMap);
    }

    public getLephoneDesktopChannelEpisodes_args() {
    }

    public getLephoneDesktopChannelEpisodes_args(
      String date,
      long gameType,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.date = date;
      this.gameType = gameType;
      setGameTypeIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLephoneDesktopChannelEpisodes_args(getLephoneDesktopChannelEpisodes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDate()) {
        this.date = other.date;
      }
      this.gameType = other.gameType;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getLephoneDesktopChannelEpisodes_args deepCopy() {
      return new getLephoneDesktopChannelEpisodes_args(this);
    }

    @Override
    public void clear() {
      this.date = null;
      setGameTypeIsSet(false);
      this.gameType = 0;
      this.caller = null;
    }

    public String getDate() {
      return this.date;
    }

    public void setDate(String date) {
      this.date = date;
    }

    public void unsetDate() {
      this.date = null;
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return this.date != null;
    }

    public void setDateIsSet(boolean value) {
      if (!value) {
        this.date = null;
      }
    }

    public long getGameType() {
      return this.gameType;
    }

    public void setGameType(long gameType) {
      this.gameType = gameType;
      setGameTypeIsSet(true);
    }

    public void unsetGameType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
    }

    /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
    public boolean isSetGameType() {
      return EncodingUtils.testBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
    }

    public void setGameTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETYPE_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((String)value);
        }
        break;

      case GAME_TYPE:
        if (value == null) {
          unsetGameType();
        } else {
          setGameType((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return getDate();

      case GAME_TYPE:
        return Long.valueOf(getGameType());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      case GAME_TYPE:
        return isSetGameType();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLephoneDesktopChannelEpisodes_args)
        return this.equals((getLephoneDesktopChannelEpisodes_args)that);
      return false;
    }

    public boolean equals(getLephoneDesktopChannelEpisodes_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true && this.isSetDate();
      boolean that_present_date = true && that.isSetDate();
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (!this.date.equals(that.date))
          return false;
      }

      boolean this_present_gameType = true;
      boolean that_present_gameType = true;
      if (this_present_gameType || that_present_gameType) {
        if (!(this_present_gameType && that_present_gameType))
          return false;
        if (this.gameType != that.gameType)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_date = true && (isSetDate());
      list.add(present_date);
      if (present_date)
        list.add(date);

      boolean present_gameType = true;
      list.add(present_gameType);
      if (present_gameType)
        list.add(gameType);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLephoneDesktopChannelEpisodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGameType()).compareTo(other.isSetGameType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGameType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, other.gameType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLephoneDesktopChannelEpisodes_args(");
      boolean first = true;

      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gameType:");
      sb.append(this.gameType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLephoneDesktopChannelEpisodes_argsStandardSchemeFactory implements SchemeFactory {
      public getLephoneDesktopChannelEpisodes_argsStandardScheme getScheme() {
        return new getLephoneDesktopChannelEpisodes_argsStandardScheme();
      }
    }

    private static class getLephoneDesktopChannelEpisodes_argsStandardScheme extends StandardScheme<getLephoneDesktopChannelEpisodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLephoneDesktopChannelEpisodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GAME_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.gameType = iprot.readI64();
                struct.setGameTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLephoneDesktopChannelEpisodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.date != null) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
        oprot.writeI64(struct.gameType);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLephoneDesktopChannelEpisodes_argsTupleSchemeFactory implements SchemeFactory {
      public getLephoneDesktopChannelEpisodes_argsTupleScheme getScheme() {
        return new getLephoneDesktopChannelEpisodes_argsTupleScheme();
      }
    }

    private static class getLephoneDesktopChannelEpisodes_argsTupleScheme extends TupleScheme<getLephoneDesktopChannelEpisodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLephoneDesktopChannelEpisodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        if (struct.isSetGameType()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDate()) {
          oprot.writeString(struct.date);
        }
        if (struct.isSetGameType()) {
          oprot.writeI64(struct.gameType);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLephoneDesktopChannelEpisodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.date = iprot.readString();
          struct.setDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gameType = iprot.readI64();
          struct.setGameTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getLephoneDesktopChannelEpisodes_result implements org.apache.thrift.TBase<getLephoneDesktopChannelEpisodes_result, getLephoneDesktopChannelEpisodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLephoneDesktopChannelEpisodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLephoneDesktopChannelEpisodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLephoneDesktopChannelEpisodes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLephoneDesktopChannelEpisodes_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLephoneDesktopChannelEpisodes_result.class, metaDataMap);
    }

    public getLephoneDesktopChannelEpisodes_result() {
    }

    public getLephoneDesktopChannelEpisodes_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLephoneDesktopChannelEpisodes_result(getLephoneDesktopChannelEpisodes_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getLephoneDesktopChannelEpisodes_result deepCopy() {
      return new getLephoneDesktopChannelEpisodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLephoneDesktopChannelEpisodes_result)
        return this.equals((getLephoneDesktopChannelEpisodes_result)that);
      return false;
    }

    public boolean equals(getLephoneDesktopChannelEpisodes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLephoneDesktopChannelEpisodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLephoneDesktopChannelEpisodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLephoneDesktopChannelEpisodes_resultStandardSchemeFactory implements SchemeFactory {
      public getLephoneDesktopChannelEpisodes_resultStandardScheme getScheme() {
        return new getLephoneDesktopChannelEpisodes_resultStandardScheme();
      }
    }

    private static class getLephoneDesktopChannelEpisodes_resultStandardScheme extends StandardScheme<getLephoneDesktopChannelEpisodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLephoneDesktopChannelEpisodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list380 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list380.size);
                  long _elem381;
                  for (int _i382 = 0; _i382 < _list380.size; ++_i382)
                  {
                    _elem381 = iprot.readI64();
                    struct.success.add(_elem381);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLephoneDesktopChannelEpisodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter383 : struct.success)
            {
              oprot.writeI64(_iter383);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLephoneDesktopChannelEpisodes_resultTupleSchemeFactory implements SchemeFactory {
      public getLephoneDesktopChannelEpisodes_resultTupleScheme getScheme() {
        return new getLephoneDesktopChannelEpisodes_resultTupleScheme();
      }
    }

    private static class getLephoneDesktopChannelEpisodes_resultTupleScheme extends TupleScheme<getLephoneDesktopChannelEpisodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLephoneDesktopChannelEpisodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter384 : struct.success)
            {
              oprot.writeI64(_iter384);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLephoneDesktopChannelEpisodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list385 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list385.size);
            long _elem386;
            for (int _i387 = 0; _i387 < _list385.size; ++_i387)
            {
              _elem386 = iprot.readI64();
              struct.success.add(_elem386);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPeriodAppRecommendEpisodes_args implements org.apache.thrift.TBase<getPeriodAppRecommendEpisodes_args, getPeriodAppRecommendEpisodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPeriodAppRecommendEpisodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPeriodAppRecommendEpisodes_args");

    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPeriodAppRecommendEpisodes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPeriodAppRecommendEpisodes_argsTupleSchemeFactory());
    }

    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLER((short)1, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPeriodAppRecommendEpisodes_args.class, metaDataMap);
    }

    public getPeriodAppRecommendEpisodes_args() {
    }

    public getPeriodAppRecommendEpisodes_args(
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPeriodAppRecommendEpisodes_args(getPeriodAppRecommendEpisodes_args other) {
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getPeriodAppRecommendEpisodes_args deepCopy() {
      return new getPeriodAppRecommendEpisodes_args(this);
    }

    @Override
    public void clear() {
      this.caller = null;
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPeriodAppRecommendEpisodes_args)
        return this.equals((getPeriodAppRecommendEpisodes_args)that);
      return false;
    }

    public boolean equals(getPeriodAppRecommendEpisodes_args that) {
      if (that == null)
        return false;

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPeriodAppRecommendEpisodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPeriodAppRecommendEpisodes_args(");
      boolean first = true;

      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPeriodAppRecommendEpisodes_argsStandardSchemeFactory implements SchemeFactory {
      public getPeriodAppRecommendEpisodes_argsStandardScheme getScheme() {
        return new getPeriodAppRecommendEpisodes_argsStandardScheme();
      }
    }

    private static class getPeriodAppRecommendEpisodes_argsStandardScheme extends StandardScheme<getPeriodAppRecommendEpisodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPeriodAppRecommendEpisodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPeriodAppRecommendEpisodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPeriodAppRecommendEpisodes_argsTupleSchemeFactory implements SchemeFactory {
      public getPeriodAppRecommendEpisodes_argsTupleScheme getScheme() {
        return new getPeriodAppRecommendEpisodes_argsTupleScheme();
      }
    }

    private static class getPeriodAppRecommendEpisodes_argsTupleScheme extends TupleScheme<getPeriodAppRecommendEpisodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPeriodAppRecommendEpisodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaller()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPeriodAppRecommendEpisodes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getPeriodAppRecommendEpisodes_result implements org.apache.thrift.TBase<getPeriodAppRecommendEpisodes_result, getPeriodAppRecommendEpisodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPeriodAppRecommendEpisodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPeriodAppRecommendEpisodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPeriodAppRecommendEpisodes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPeriodAppRecommendEpisodes_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPeriodAppRecommendEpisodes_result.class, metaDataMap);
    }

    public getPeriodAppRecommendEpisodes_result() {
    }

    public getPeriodAppRecommendEpisodes_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPeriodAppRecommendEpisodes_result(getPeriodAppRecommendEpisodes_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getPeriodAppRecommendEpisodes_result deepCopy() {
      return new getPeriodAppRecommendEpisodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPeriodAppRecommendEpisodes_result)
        return this.equals((getPeriodAppRecommendEpisodes_result)that);
      return false;
    }

    public boolean equals(getPeriodAppRecommendEpisodes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPeriodAppRecommendEpisodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPeriodAppRecommendEpisodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPeriodAppRecommendEpisodes_resultStandardSchemeFactory implements SchemeFactory {
      public getPeriodAppRecommendEpisodes_resultStandardScheme getScheme() {
        return new getPeriodAppRecommendEpisodes_resultStandardScheme();
      }
    }

    private static class getPeriodAppRecommendEpisodes_resultStandardScheme extends StandardScheme<getPeriodAppRecommendEpisodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPeriodAppRecommendEpisodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list388 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list388.size);
                  long _elem389;
                  for (int _i390 = 0; _i390 < _list388.size; ++_i390)
                  {
                    _elem389 = iprot.readI64();
                    struct.success.add(_elem389);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPeriodAppRecommendEpisodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter391 : struct.success)
            {
              oprot.writeI64(_iter391);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPeriodAppRecommendEpisodes_resultTupleSchemeFactory implements SchemeFactory {
      public getPeriodAppRecommendEpisodes_resultTupleScheme getScheme() {
        return new getPeriodAppRecommendEpisodes_resultTupleScheme();
      }
    }

    private static class getPeriodAppRecommendEpisodes_resultTupleScheme extends TupleScheme<getPeriodAppRecommendEpisodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPeriodAppRecommendEpisodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter392 : struct.success)
            {
              oprot.writeI64(_iter392);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPeriodAppRecommendEpisodes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list393 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list393.size);
            long _elem394;
            for (int _i395 = 0; _i395 < _list393.size; ++_i395)
            {
              _elem394 = iprot.readI64();
              struct.success.add(_elem394);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentMemberEpisodeIds_args implements org.apache.thrift.TBase<getCurrentMemberEpisodeIds_args, getCurrentMemberEpisodeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentMemberEpisodeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentMemberEpisodeIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentMemberEpisodeIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentMemberEpisodeIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentMemberEpisodeIds_args.class, metaDataMap);
    }

    public getCurrentMemberEpisodeIds_args() {
    }

    public getCurrentMemberEpisodeIds_args(
      com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentMemberEpisodeIds_args(getCurrentMemberEpisodeIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getCurrentMemberEpisodeIds_args deepCopy() {
      return new getCurrentMemberEpisodeIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentMemberEpisodeIds_args)
        return this.equals((getCurrentMemberEpisodeIds_args)that);
      return false;
    }

    public boolean equals(getCurrentMemberEpisodeIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentMemberEpisodeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentMemberEpisodeIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentMemberEpisodeIds_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentMemberEpisodeIds_argsStandardScheme getScheme() {
        return new getCurrentMemberEpisodeIds_argsStandardScheme();
      }
    }

    private static class getCurrentMemberEpisodeIds_argsStandardScheme extends StandardScheme<getCurrentMemberEpisodeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentMemberEpisodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentMemberEpisodeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentMemberEpisodeIds_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentMemberEpisodeIds_argsTupleScheme getScheme() {
        return new getCurrentMemberEpisodeIds_argsTupleScheme();
      }
    }

    private static class getCurrentMemberEpisodeIds_argsTupleScheme extends TupleScheme<getCurrentMemberEpisodeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentMemberEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentMemberEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getCurrentMemberEpisodeIds_result implements org.apache.thrift.TBase<getCurrentMemberEpisodeIds_result, getCurrentMemberEpisodeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCurrentMemberEpisodeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentMemberEpisodeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentMemberEpisodeIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentMemberEpisodeIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentMemberEpisodeIds_result.class, metaDataMap);
    }

    public getCurrentMemberEpisodeIds_result() {
    }

    public getCurrentMemberEpisodeIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentMemberEpisodeIds_result(getCurrentMemberEpisodeIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getCurrentMemberEpisodeIds_result deepCopy() {
      return new getCurrentMemberEpisodeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentMemberEpisodeIds_result)
        return this.equals((getCurrentMemberEpisodeIds_result)that);
      return false;
    }

    public boolean equals(getCurrentMemberEpisodeIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCurrentMemberEpisodeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentMemberEpisodeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentMemberEpisodeIds_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentMemberEpisodeIds_resultStandardScheme getScheme() {
        return new getCurrentMemberEpisodeIds_resultStandardScheme();
      }
    }

    private static class getCurrentMemberEpisodeIds_resultStandardScheme extends StandardScheme<getCurrentMemberEpisodeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentMemberEpisodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list396 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list396.size);
                  long _elem397;
                  for (int _i398 = 0; _i398 < _list396.size; ++_i398)
                  {
                    _elem397 = iprot.readI64();
                    struct.success.add(_elem397);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentMemberEpisodeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter399 : struct.success)
            {
              oprot.writeI64(_iter399);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentMemberEpisodeIds_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentMemberEpisodeIds_resultTupleScheme getScheme() {
        return new getCurrentMemberEpisodeIds_resultTupleScheme();
      }
    }

    private static class getCurrentMemberEpisodeIds_resultTupleScheme extends TupleScheme<getCurrentMemberEpisodeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentMemberEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter400 : struct.success)
            {
              oprot.writeI64(_iter400);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentMemberEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list401 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list401.size);
            long _elem402;
            for (int _i403 = 0; _i403 < _list401.size; ++_i403)
            {
              _elem402 = iprot.readI64();
              struct.success.add(_elem402);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTicketEpisodeIds_args implements org.apache.thrift.TBase<getTicketEpisodeIds_args, getTicketEpisodeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketEpisodeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketEpisodeIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketEpisodeIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketEpisodeIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketEpisodeIds_args.class, metaDataMap);
    }

    public getTicketEpisodeIds_args() {
    }

    public getTicketEpisodeIds_args(
      com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketEpisodeIds_args(getTicketEpisodeIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTicketEpisodeIds_args deepCopy() {
      return new getTicketEpisodeIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketEpisodeIds_args)
        return this.equals((getTicketEpisodeIds_args)that);
      return false;
    }

    public boolean equals(getTicketEpisodeIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketEpisodeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketEpisodeIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketEpisodeIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTicketEpisodeIds_argsStandardScheme getScheme() {
        return new getTicketEpisodeIds_argsStandardScheme();
      }
    }

    private static class getTicketEpisodeIds_argsStandardScheme extends StandardScheme<getTicketEpisodeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketEpisodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketEpisodeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketEpisodeIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTicketEpisodeIds_argsTupleScheme getScheme() {
        return new getTicketEpisodeIds_argsTupleScheme();
      }
    }

    private static class getTicketEpisodeIds_argsTupleScheme extends TupleScheme<getTicketEpisodeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketEpisodeIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetCurrentEpisodesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTicketEpisodeIds_result implements org.apache.thrift.TBase<getTicketEpisodeIds_result, getTicketEpisodeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTicketEpisodeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTicketEpisodeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTicketEpisodeIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTicketEpisodeIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTicketEpisodeIds_result.class, metaDataMap);
    }

    public getTicketEpisodeIds_result() {
    }

    public getTicketEpisodeIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTicketEpisodeIds_result(getTicketEpisodeIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTicketEpisodeIds_result deepCopy() {
      return new getTicketEpisodeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTicketEpisodeIds_result)
        return this.equals((getTicketEpisodeIds_result)that);
      return false;
    }

    public boolean equals(getTicketEpisodeIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTicketEpisodeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTicketEpisodeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTicketEpisodeIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTicketEpisodeIds_resultStandardScheme getScheme() {
        return new getTicketEpisodeIds_resultStandardScheme();
      }
    }

    private static class getTicketEpisodeIds_resultStandardScheme extends StandardScheme<getTicketEpisodeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTicketEpisodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list404 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list404.size);
                  long _elem405;
                  for (int _i406 = 0; _i406 < _list404.size; ++_i406)
                  {
                    _elem405 = iprot.readI64();
                    struct.success.add(_elem405);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTicketEpisodeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter407 : struct.success)
            {
              oprot.writeI64(_iter407);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTicketEpisodeIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTicketEpisodeIds_resultTupleScheme getScheme() {
        return new getTicketEpisodeIds_resultTupleScheme();
      }
    }

    private static class getTicketEpisodeIds_resultTupleScheme extends TupleScheme<getTicketEpisodeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTicketEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter408 : struct.success)
            {
              oprot.writeI64(_iter408);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTicketEpisodeIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list409 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list409.size);
            long _elem410;
            for (int _i411 = 0; _i411 < _list409.size; ++_i411)
            {
              _elem410 = iprot.readI64();
              struct.success.add(_elem410);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIds4CommonCompetitionResource_args implements org.apache.thrift.TBase<getEpisodeIds4CommonCompetitionResource_args, getEpisodeIds4CommonCompetitionResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIds4CommonCompetitionResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIds4CommonCompetitionResource_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIds4CommonCompetitionResource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIds4CommonCompetitionResource_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIds4CommonCompetitionResource_args.class, metaDataMap);
    }

    public getEpisodeIds4CommonCompetitionResource_args() {
    }

    public getEpisodeIds4CommonCompetitionResource_args(
      com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIds4CommonCompetitionResource_args(getEpisodeIds4CommonCompetitionResource_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getEpisodeIds4CommonCompetitionResource_args deepCopy() {
      return new getEpisodeIds4CommonCompetitionResource_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIds4CommonCompetitionResource_args)
        return this.equals((getEpisodeIds4CommonCompetitionResource_args)that);
      return false;
    }

    public boolean equals(getEpisodeIds4CommonCompetitionResource_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIds4CommonCompetitionResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIds4CommonCompetitionResource_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIds4CommonCompetitionResource_argsStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIds4CommonCompetitionResource_argsStandardScheme getScheme() {
        return new getEpisodeIds4CommonCompetitionResource_argsStandardScheme();
      }
    }

    private static class getEpisodeIds4CommonCompetitionResource_argsStandardScheme extends StandardScheme<getEpisodeIds4CommonCompetitionResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIds4CommonCompetitionResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIds4CommonCompetitionResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIds4CommonCompetitionResource_argsTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIds4CommonCompetitionResource_argsTupleScheme getScheme() {
        return new getEpisodeIds4CommonCompetitionResource_argsTupleScheme();
      }
    }

    private static class getEpisodeIds4CommonCompetitionResource_argsTupleScheme extends TupleScheme<getEpisodeIds4CommonCompetitionResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIds4CommonCompetitionResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIds4CommonCompetitionResource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetEpisodes4CommonCompetitionResourceParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getEpisodeIds4CommonCompetitionResource_result implements org.apache.thrift.TBase<getEpisodeIds4CommonCompetitionResource_result, getEpisodeIds4CommonCompetitionResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEpisodeIds4CommonCompetitionResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEpisodeIds4CommonCompetitionResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEpisodeIds4CommonCompetitionResource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEpisodeIds4CommonCompetitionResource_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEpisodeIds4CommonCompetitionResource_result.class, metaDataMap);
    }

    public getEpisodeIds4CommonCompetitionResource_result() {
    }

    public getEpisodeIds4CommonCompetitionResource_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEpisodeIds4CommonCompetitionResource_result(getEpisodeIds4CommonCompetitionResource_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getEpisodeIds4CommonCompetitionResource_result deepCopy() {
      return new getEpisodeIds4CommonCompetitionResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEpisodeIds4CommonCompetitionResource_result)
        return this.equals((getEpisodeIds4CommonCompetitionResource_result)that);
      return false;
    }

    public boolean equals(getEpisodeIds4CommonCompetitionResource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEpisodeIds4CommonCompetitionResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEpisodeIds4CommonCompetitionResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEpisodeIds4CommonCompetitionResource_resultStandardSchemeFactory implements SchemeFactory {
      public getEpisodeIds4CommonCompetitionResource_resultStandardScheme getScheme() {
        return new getEpisodeIds4CommonCompetitionResource_resultStandardScheme();
      }
    }

    private static class getEpisodeIds4CommonCompetitionResource_resultStandardScheme extends StandardScheme<getEpisodeIds4CommonCompetitionResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEpisodeIds4CommonCompetitionResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list412 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list412.size);
                  long _elem413;
                  for (int _i414 = 0; _i414 < _list412.size; ++_i414)
                  {
                    _elem413 = iprot.readI64();
                    struct.success.add(_elem413);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEpisodeIds4CommonCompetitionResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter415 : struct.success)
            {
              oprot.writeI64(_iter415);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEpisodeIds4CommonCompetitionResource_resultTupleSchemeFactory implements SchemeFactory {
      public getEpisodeIds4CommonCompetitionResource_resultTupleScheme getScheme() {
        return new getEpisodeIds4CommonCompetitionResource_resultTupleScheme();
      }
    }

    private static class getEpisodeIds4CommonCompetitionResource_resultTupleScheme extends TupleScheme<getEpisodeIds4CommonCompetitionResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEpisodeIds4CommonCompetitionResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter416 : struct.success)
            {
              oprot.writeI64(_iter416);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEpisodeIds4CommonCompetitionResource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list417 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list417.size);
            long _elem418;
            for (int _i419 = 0; _i419 < _list417.size; ++_i419)
            {
              _elem418 = iprot.readI64();
              struct.success.add(_elem418);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
