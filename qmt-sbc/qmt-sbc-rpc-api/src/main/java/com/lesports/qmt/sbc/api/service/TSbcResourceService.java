/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-27")
public class TSbcResourceService {

  /**
   * Lesports Quan Mei Ti Resource Service Definition.
   * @author ellios
   */
  public interface Iface {

    /**
     * 通过资源位id获取资源位信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TResource getTResourceById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过资源位id获取资源位信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TResource getLastVersionTResourceById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过资源位id列表获取资源位信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TResource> getTResourcesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过资源位内容id获取资源位内容
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TResourceContent getTResourceContentById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过资源位内容id列表获取资源位内容列表
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过线上资源位内容id列表获取线上资源位内容列表
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getOnlineTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过资源位Id获取资源位内容列表
     * 
     * 
     * @param resourceId
     * @param page
     * @param caller
     */
    public List<Long> getResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过线上资源位Id获取资源位内容列表
     * 
     * 
     * @param resourceId
     * @param page
     * @param caller
     */
    public List<Long> getOnlineResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过资源位Id获取资源位内容个数 分页的时候用到
     * 
     * 
     * @param resourceId
     * @param caller
     */
    public long countResourceContentByResourceId(long resourceId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTResourceById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastVersionTResourceById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTResourcesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTResourceContentById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOnlineTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOnlineResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countResourceContentByResourceId(long resourceId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.lesports.qmt.sbc.api.dto.TResource getTResourceById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTResourceById(id, caller);
      return recv_getTResourceById();
    }

    public void send_getTResourceById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTResourceById_args args = new getTResourceById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTResourceById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TResource recv_getTResourceById() throws org.apache.thrift.TException
    {
      getTResourceById_result result = new getTResourceById_result();
      receiveBase(result, "getTResourceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTResourceById failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TResource getLastVersionTResourceById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getLastVersionTResourceById(id, caller);
      return recv_getLastVersionTResourceById();
    }

    public void send_getLastVersionTResourceById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getLastVersionTResourceById_args args = new getLastVersionTResourceById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getLastVersionTResourceById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TResource recv_getLastVersionTResourceById() throws org.apache.thrift.TException
    {
      getLastVersionTResourceById_result result = new getLastVersionTResourceById_result();
      receiveBase(result, "getLastVersionTResourceById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastVersionTResourceById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TResource> getTResourcesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTResourcesByIds(ids, caller);
      return recv_getTResourcesByIds();
    }

    public void send_getTResourcesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTResourcesByIds_args args = new getTResourcesByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTResourcesByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TResource> recv_getTResourcesByIds() throws org.apache.thrift.TException
    {
      getTResourcesByIds_result result = new getTResourcesByIds_result();
      receiveBase(result, "getTResourcesByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTResourcesByIds failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TResourceContent getTResourceContentById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTResourceContentById(id, caller);
      return recv_getTResourceContentById();
    }

    public void send_getTResourceContentById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTResourceContentById_args args = new getTResourceContentById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTResourceContentById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TResourceContent recv_getTResourceContentById() throws org.apache.thrift.TException
    {
      getTResourceContentById_result result = new getTResourceContentById_result();
      receiveBase(result, "getTResourceContentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTResourceContentById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTResourceContentsByIds(ids, caller);
      return recv_getTResourceContentsByIds();
    }

    public void send_getTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTResourceContentsByIds_args args = new getTResourceContentsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTResourceContentsByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> recv_getTResourceContentsByIds() throws org.apache.thrift.TException
    {
      getTResourceContentsByIds_result result = new getTResourceContentsByIds_result();
      receiveBase(result, "getTResourceContentsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTResourceContentsByIds failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getOnlineTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getOnlineTResourceContentsByIds(ids, caller);
      return recv_getOnlineTResourceContentsByIds();
    }

    public void send_getOnlineTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getOnlineTResourceContentsByIds_args args = new getOnlineTResourceContentsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getOnlineTResourceContentsByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> recv_getOnlineTResourceContentsByIds() throws org.apache.thrift.TException
    {
      getOnlineTResourceContentsByIds_result result = new getOnlineTResourceContentsByIds_result();
      receiveBase(result, "getOnlineTResourceContentsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOnlineTResourceContentsByIds failed: unknown result");
    }

    public List<Long> getResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getResourceContentIdsByResourceId(resourceId, page, caller);
      return recv_getResourceContentIdsByResourceId();
    }

    public void send_getResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getResourceContentIdsByResourceId_args args = new getResourceContentIdsByResourceId_args();
      args.setResourceId(resourceId);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getResourceContentIdsByResourceId", args);
    }

    public List<Long> recv_getResourceContentIdsByResourceId() throws org.apache.thrift.TException
    {
      getResourceContentIdsByResourceId_result result = new getResourceContentIdsByResourceId_result();
      receiveBase(result, "getResourceContentIdsByResourceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getResourceContentIdsByResourceId failed: unknown result");
    }

    public List<Long> getOnlineResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getOnlineResourceContentIdsByResourceId(resourceId, page, caller);
      return recv_getOnlineResourceContentIdsByResourceId();
    }

    public void send_getOnlineResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getOnlineResourceContentIdsByResourceId_args args = new getOnlineResourceContentIdsByResourceId_args();
      args.setResourceId(resourceId);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getOnlineResourceContentIdsByResourceId", args);
    }

    public List<Long> recv_getOnlineResourceContentIdsByResourceId() throws org.apache.thrift.TException
    {
      getOnlineResourceContentIdsByResourceId_result result = new getOnlineResourceContentIdsByResourceId_result();
      receiveBase(result, "getOnlineResourceContentIdsByResourceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOnlineResourceContentIdsByResourceId failed: unknown result");
    }

    public long countResourceContentByResourceId(long resourceId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_countResourceContentByResourceId(resourceId, caller);
      return recv_countResourceContentByResourceId();
    }

    public void send_countResourceContentByResourceId(long resourceId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      countResourceContentByResourceId_args args = new countResourceContentByResourceId_args();
      args.setResourceId(resourceId);
      args.setCaller(caller);
      sendBase("countResourceContentByResourceId", args);
    }

    public long recv_countResourceContentByResourceId() throws org.apache.thrift.TException
    {
      countResourceContentByResourceId_result result = new countResourceContentByResourceId_result();
      receiveBase(result, "countResourceContentByResourceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countResourceContentByResourceId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTResourceById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTResourceById_call method_call = new getTResourceById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTResourceById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTResourceById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTResourceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTResourceById_args args = new getTResourceById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TResource getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTResourceById();
      }
    }

    public void getLastVersionTResourceById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastVersionTResourceById_call method_call = new getLastVersionTResourceById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastVersionTResourceById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getLastVersionTResourceById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastVersionTResourceById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastVersionTResourceById_args args = new getLastVersionTResourceById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TResource getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastVersionTResourceById();
      }
    }

    public void getTResourcesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTResourcesByIds_call method_call = new getTResourcesByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTResourcesByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTResourcesByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTResourcesByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTResourcesByIds_args args = new getTResourcesByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TResource> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTResourcesByIds();
      }
    }

    public void getTResourceContentById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTResourceContentById_call method_call = new getTResourceContentById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTResourceContentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTResourceContentById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTResourceContentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTResourceContentById_args args = new getTResourceContentById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TResourceContent getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTResourceContentById();
      }
    }

    public void getTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTResourceContentsByIds_call method_call = new getTResourceContentsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTResourceContentsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTResourceContentsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTResourceContentsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTResourceContentsByIds_args args = new getTResourceContentsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTResourceContentsByIds();
      }
    }

    public void getOnlineTResourceContentsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOnlineTResourceContentsByIds_call method_call = new getOnlineTResourceContentsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOnlineTResourceContentsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getOnlineTResourceContentsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOnlineTResourceContentsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOnlineTResourceContentsByIds_args args = new getOnlineTResourceContentsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnlineTResourceContentsByIds();
      }
    }

    public void getResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getResourceContentIdsByResourceId_call method_call = new getResourceContentIdsByResourceId_call(resourceId, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getResourceContentIdsByResourceId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long resourceId;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getResourceContentIdsByResourceId_call(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resourceId = resourceId;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getResourceContentIdsByResourceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getResourceContentIdsByResourceId_args args = new getResourceContentIdsByResourceId_args();
        args.setResourceId(resourceId);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getResourceContentIdsByResourceId();
      }
    }

    public void getOnlineResourceContentIdsByResourceId(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOnlineResourceContentIdsByResourceId_call method_call = new getOnlineResourceContentIdsByResourceId_call(resourceId, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOnlineResourceContentIdsByResourceId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long resourceId;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getOnlineResourceContentIdsByResourceId_call(long resourceId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resourceId = resourceId;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOnlineResourceContentIdsByResourceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOnlineResourceContentIdsByResourceId_args args = new getOnlineResourceContentIdsByResourceId_args();
        args.setResourceId(resourceId);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnlineResourceContentIdsByResourceId();
      }
    }

    public void countResourceContentByResourceId(long resourceId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countResourceContentByResourceId_call method_call = new countResourceContentByResourceId_call(resourceId, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countResourceContentByResourceId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long resourceId;
      private com.lesports.api.common.CallerParam caller;
      public countResourceContentByResourceId_call(long resourceId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resourceId = resourceId;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countResourceContentByResourceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countResourceContentByResourceId_args args = new countResourceContentByResourceId_args();
        args.setResourceId(resourceId);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countResourceContentByResourceId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTResourceById", new getTResourceById());
      processMap.put("getLastVersionTResourceById", new getLastVersionTResourceById());
      processMap.put("getTResourcesByIds", new getTResourcesByIds());
      processMap.put("getTResourceContentById", new getTResourceContentById());
      processMap.put("getTResourceContentsByIds", new getTResourceContentsByIds());
      processMap.put("getOnlineTResourceContentsByIds", new getOnlineTResourceContentsByIds());
      processMap.put("getResourceContentIdsByResourceId", new getResourceContentIdsByResourceId());
      processMap.put("getOnlineResourceContentIdsByResourceId", new getOnlineResourceContentIdsByResourceId());
      processMap.put("countResourceContentByResourceId", new countResourceContentByResourceId());
      return processMap;
    }

    public static class getTResourceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTResourceById_args> {
      public getTResourceById() {
        super("getTResourceById");
      }

      public getTResourceById_args getEmptyArgsInstance() {
        return new getTResourceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTResourceById_result getResult(I iface, getTResourceById_args args) throws org.apache.thrift.TException {
        getTResourceById_result result = new getTResourceById_result();
        result.success = iface.getTResourceById(args.id, args.caller);
        return result;
      }
    }

    public static class getLastVersionTResourceById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastVersionTResourceById_args> {
      public getLastVersionTResourceById() {
        super("getLastVersionTResourceById");
      }

      public getLastVersionTResourceById_args getEmptyArgsInstance() {
        return new getLastVersionTResourceById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastVersionTResourceById_result getResult(I iface, getLastVersionTResourceById_args args) throws org.apache.thrift.TException {
        getLastVersionTResourceById_result result = new getLastVersionTResourceById_result();
        result.success = iface.getLastVersionTResourceById(args.id, args.caller);
        return result;
      }
    }

    public static class getTResourcesByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTResourcesByIds_args> {
      public getTResourcesByIds() {
        super("getTResourcesByIds");
      }

      public getTResourcesByIds_args getEmptyArgsInstance() {
        return new getTResourcesByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTResourcesByIds_result getResult(I iface, getTResourcesByIds_args args) throws org.apache.thrift.TException {
        getTResourcesByIds_result result = new getTResourcesByIds_result();
        result.success = iface.getTResourcesByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTResourceContentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTResourceContentById_args> {
      public getTResourceContentById() {
        super("getTResourceContentById");
      }

      public getTResourceContentById_args getEmptyArgsInstance() {
        return new getTResourceContentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTResourceContentById_result getResult(I iface, getTResourceContentById_args args) throws org.apache.thrift.TException {
        getTResourceContentById_result result = new getTResourceContentById_result();
        result.success = iface.getTResourceContentById(args.id, args.caller);
        return result;
      }
    }

    public static class getTResourceContentsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTResourceContentsByIds_args> {
      public getTResourceContentsByIds() {
        super("getTResourceContentsByIds");
      }

      public getTResourceContentsByIds_args getEmptyArgsInstance() {
        return new getTResourceContentsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTResourceContentsByIds_result getResult(I iface, getTResourceContentsByIds_args args) throws org.apache.thrift.TException {
        getTResourceContentsByIds_result result = new getTResourceContentsByIds_result();
        result.success = iface.getTResourceContentsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getOnlineTResourceContentsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOnlineTResourceContentsByIds_args> {
      public getOnlineTResourceContentsByIds() {
        super("getOnlineTResourceContentsByIds");
      }

      public getOnlineTResourceContentsByIds_args getEmptyArgsInstance() {
        return new getOnlineTResourceContentsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOnlineTResourceContentsByIds_result getResult(I iface, getOnlineTResourceContentsByIds_args args) throws org.apache.thrift.TException {
        getOnlineTResourceContentsByIds_result result = new getOnlineTResourceContentsByIds_result();
        result.success = iface.getOnlineTResourceContentsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getResourceContentIdsByResourceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getResourceContentIdsByResourceId_args> {
      public getResourceContentIdsByResourceId() {
        super("getResourceContentIdsByResourceId");
      }

      public getResourceContentIdsByResourceId_args getEmptyArgsInstance() {
        return new getResourceContentIdsByResourceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getResourceContentIdsByResourceId_result getResult(I iface, getResourceContentIdsByResourceId_args args) throws org.apache.thrift.TException {
        getResourceContentIdsByResourceId_result result = new getResourceContentIdsByResourceId_result();
        result.success = iface.getResourceContentIdsByResourceId(args.resourceId, args.page, args.caller);
        return result;
      }
    }

    public static class getOnlineResourceContentIdsByResourceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOnlineResourceContentIdsByResourceId_args> {
      public getOnlineResourceContentIdsByResourceId() {
        super("getOnlineResourceContentIdsByResourceId");
      }

      public getOnlineResourceContentIdsByResourceId_args getEmptyArgsInstance() {
        return new getOnlineResourceContentIdsByResourceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOnlineResourceContentIdsByResourceId_result getResult(I iface, getOnlineResourceContentIdsByResourceId_args args) throws org.apache.thrift.TException {
        getOnlineResourceContentIdsByResourceId_result result = new getOnlineResourceContentIdsByResourceId_result();
        result.success = iface.getOnlineResourceContentIdsByResourceId(args.resourceId, args.page, args.caller);
        return result;
      }
    }

    public static class countResourceContentByResourceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countResourceContentByResourceId_args> {
      public countResourceContentByResourceId() {
        super("countResourceContentByResourceId");
      }

      public countResourceContentByResourceId_args getEmptyArgsInstance() {
        return new countResourceContentByResourceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countResourceContentByResourceId_result getResult(I iface, countResourceContentByResourceId_args args) throws org.apache.thrift.TException {
        countResourceContentByResourceId_result result = new countResourceContentByResourceId_result();
        result.success = iface.countResourceContentByResourceId(args.resourceId, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTResourceById", new getTResourceById());
      processMap.put("getLastVersionTResourceById", new getLastVersionTResourceById());
      processMap.put("getTResourcesByIds", new getTResourcesByIds());
      processMap.put("getTResourceContentById", new getTResourceContentById());
      processMap.put("getTResourceContentsByIds", new getTResourceContentsByIds());
      processMap.put("getOnlineTResourceContentsByIds", new getOnlineTResourceContentsByIds());
      processMap.put("getResourceContentIdsByResourceId", new getResourceContentIdsByResourceId());
      processMap.put("getOnlineResourceContentIdsByResourceId", new getOnlineResourceContentIdsByResourceId());
      processMap.put("countResourceContentByResourceId", new countResourceContentByResourceId());
      return processMap;
    }

    public static class getTResourceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTResourceById_args, com.lesports.qmt.sbc.api.dto.TResource> {
      public getTResourceById() {
        super("getTResourceById");
      }

      public getTResourceById_args getEmptyArgsInstance() {
        return new getTResourceById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResource> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResource>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TResource o) {
            getTResourceById_result result = new getTResourceById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTResourceById_result result = new getTResourceById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTResourceById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResource> resultHandler) throws TException {
        iface.getTResourceById(args.id, args.caller,resultHandler);
      }
    }

    public static class getLastVersionTResourceById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastVersionTResourceById_args, com.lesports.qmt.sbc.api.dto.TResource> {
      public getLastVersionTResourceById() {
        super("getLastVersionTResourceById");
      }

      public getLastVersionTResourceById_args getEmptyArgsInstance() {
        return new getLastVersionTResourceById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResource> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResource>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TResource o) {
            getLastVersionTResourceById_result result = new getLastVersionTResourceById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastVersionTResourceById_result result = new getLastVersionTResourceById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastVersionTResourceById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResource> resultHandler) throws TException {
        iface.getLastVersionTResourceById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTResourcesByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTResourcesByIds_args, List<com.lesports.qmt.sbc.api.dto.TResource>> {
      public getTResourcesByIds() {
        super("getTResourcesByIds");
      }

      public getTResourcesByIds_args getEmptyArgsInstance() {
        return new getTResourcesByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResource>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResource>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TResource> o) {
            getTResourcesByIds_result result = new getTResourcesByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTResourcesByIds_result result = new getTResourcesByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTResourcesByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResource>> resultHandler) throws TException {
        iface.getTResourcesByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTResourceContentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTResourceContentById_args, com.lesports.qmt.sbc.api.dto.TResourceContent> {
      public getTResourceContentById() {
        super("getTResourceContentById");
      }

      public getTResourceContentById_args getEmptyArgsInstance() {
        return new getTResourceContentById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResourceContent> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResourceContent>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TResourceContent o) {
            getTResourceContentById_result result = new getTResourceContentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTResourceContentById_result result = new getTResourceContentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTResourceContentById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TResourceContent> resultHandler) throws TException {
        iface.getTResourceContentById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTResourceContentsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTResourceContentsByIds_args, List<com.lesports.qmt.sbc.api.dto.TResourceContent>> {
      public getTResourceContentsByIds() {
        super("getTResourceContentsByIds");
      }

      public getTResourceContentsByIds_args getEmptyArgsInstance() {
        return new getTResourceContentsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResourceContent>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResourceContent>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TResourceContent> o) {
            getTResourceContentsByIds_result result = new getTResourceContentsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTResourceContentsByIds_result result = new getTResourceContentsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTResourceContentsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResourceContent>> resultHandler) throws TException {
        iface.getTResourceContentsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getOnlineTResourceContentsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOnlineTResourceContentsByIds_args, List<com.lesports.qmt.sbc.api.dto.TResourceContent>> {
      public getOnlineTResourceContentsByIds() {
        super("getOnlineTResourceContentsByIds");
      }

      public getOnlineTResourceContentsByIds_args getEmptyArgsInstance() {
        return new getOnlineTResourceContentsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResourceContent>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResourceContent>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TResourceContent> o) {
            getOnlineTResourceContentsByIds_result result = new getOnlineTResourceContentsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOnlineTResourceContentsByIds_result result = new getOnlineTResourceContentsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOnlineTResourceContentsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TResourceContent>> resultHandler) throws TException {
        iface.getOnlineTResourceContentsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getResourceContentIdsByResourceId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getResourceContentIdsByResourceId_args, List<Long>> {
      public getResourceContentIdsByResourceId() {
        super("getResourceContentIdsByResourceId");
      }

      public getResourceContentIdsByResourceId_args getEmptyArgsInstance() {
        return new getResourceContentIdsByResourceId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getResourceContentIdsByResourceId_result result = new getResourceContentIdsByResourceId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getResourceContentIdsByResourceId_result result = new getResourceContentIdsByResourceId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getResourceContentIdsByResourceId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getResourceContentIdsByResourceId(args.resourceId, args.page, args.caller,resultHandler);
      }
    }

    public static class getOnlineResourceContentIdsByResourceId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOnlineResourceContentIdsByResourceId_args, List<Long>> {
      public getOnlineResourceContentIdsByResourceId() {
        super("getOnlineResourceContentIdsByResourceId");
      }

      public getOnlineResourceContentIdsByResourceId_args getEmptyArgsInstance() {
        return new getOnlineResourceContentIdsByResourceId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getOnlineResourceContentIdsByResourceId_result result = new getOnlineResourceContentIdsByResourceId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOnlineResourceContentIdsByResourceId_result result = new getOnlineResourceContentIdsByResourceId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOnlineResourceContentIdsByResourceId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getOnlineResourceContentIdsByResourceId(args.resourceId, args.page, args.caller,resultHandler);
      }
    }

    public static class countResourceContentByResourceId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countResourceContentByResourceId_args, Long> {
      public countResourceContentByResourceId() {
        super("countResourceContentByResourceId");
      }

      public countResourceContentByResourceId_args getEmptyArgsInstance() {
        return new countResourceContentByResourceId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            countResourceContentByResourceId_result result = new countResourceContentByResourceId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countResourceContentByResourceId_result result = new countResourceContentByResourceId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countResourceContentByResourceId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.countResourceContentByResourceId(args.resourceId, args.caller,resultHandler);
      }
    }

  }

  public static class getTResourceById_args implements org.apache.thrift.TBase<getTResourceById_args, getTResourceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourceById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourceById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourceById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourceById_args.class, metaDataMap);
    }

    public getTResourceById_args() {
    }

    public getTResourceById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourceById_args(getTResourceById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTResourceById_args deepCopy() {
      return new getTResourceById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourceById_args)
        return this.equals((getTResourceById_args)that);
      return false;
    }

    public boolean equals(getTResourceById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourceById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourceById_argsStandardSchemeFactory implements SchemeFactory {
      public getTResourceById_argsStandardScheme getScheme() {
        return new getTResourceById_argsStandardScheme();
      }
    }

    private static class getTResourceById_argsStandardScheme extends StandardScheme<getTResourceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourceById_argsTupleSchemeFactory implements SchemeFactory {
      public getTResourceById_argsTupleScheme getScheme() {
        return new getTResourceById_argsTupleScheme();
      }
    }

    private static class getTResourceById_argsTupleScheme extends TupleScheme<getTResourceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTResourceById_result implements org.apache.thrift.TBase<getTResourceById_result, getTResourceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourceById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourceById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TResource success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TResource.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourceById_result.class, metaDataMap);
    }

    public getTResourceById_result() {
    }

    public getTResourceById_result(
      com.lesports.qmt.sbc.api.dto.TResource success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourceById_result(getTResourceById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TResource(other.success);
      }
    }

    public getTResourceById_result deepCopy() {
      return new getTResourceById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TResource getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TResource success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TResource)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourceById_result)
        return this.equals((getTResourceById_result)that);
      return false;
    }

    public boolean equals(getTResourceById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourceById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourceById_resultStandardSchemeFactory implements SchemeFactory {
      public getTResourceById_resultStandardScheme getScheme() {
        return new getTResourceById_resultStandardScheme();
      }
    }

    private static class getTResourceById_resultStandardScheme extends StandardScheme<getTResourceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TResource();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourceById_resultTupleSchemeFactory implements SchemeFactory {
      public getTResourceById_resultTupleScheme getScheme() {
        return new getTResourceById_resultTupleScheme();
      }
    }

    private static class getTResourceById_resultTupleScheme extends TupleScheme<getTResourceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TResource();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLastVersionTResourceById_args implements org.apache.thrift.TBase<getLastVersionTResourceById_args, getLastVersionTResourceById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastVersionTResourceById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastVersionTResourceById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastVersionTResourceById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastVersionTResourceById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastVersionTResourceById_args.class, metaDataMap);
    }

    public getLastVersionTResourceById_args() {
    }

    public getLastVersionTResourceById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastVersionTResourceById_args(getLastVersionTResourceById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getLastVersionTResourceById_args deepCopy() {
      return new getLastVersionTResourceById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastVersionTResourceById_args)
        return this.equals((getLastVersionTResourceById_args)that);
      return false;
    }

    public boolean equals(getLastVersionTResourceById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastVersionTResourceById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastVersionTResourceById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastVersionTResourceById_argsStandardSchemeFactory implements SchemeFactory {
      public getLastVersionTResourceById_argsStandardScheme getScheme() {
        return new getLastVersionTResourceById_argsStandardScheme();
      }
    }

    private static class getLastVersionTResourceById_argsStandardScheme extends StandardScheme<getLastVersionTResourceById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastVersionTResourceById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastVersionTResourceById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastVersionTResourceById_argsTupleSchemeFactory implements SchemeFactory {
      public getLastVersionTResourceById_argsTupleScheme getScheme() {
        return new getLastVersionTResourceById_argsTupleScheme();
      }
    }

    private static class getLastVersionTResourceById_argsTupleScheme extends TupleScheme<getLastVersionTResourceById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastVersionTResourceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastVersionTResourceById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getLastVersionTResourceById_result implements org.apache.thrift.TBase<getLastVersionTResourceById_result, getLastVersionTResourceById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastVersionTResourceById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastVersionTResourceById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastVersionTResourceById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastVersionTResourceById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TResource success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TResource.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastVersionTResourceById_result.class, metaDataMap);
    }

    public getLastVersionTResourceById_result() {
    }

    public getLastVersionTResourceById_result(
      com.lesports.qmt.sbc.api.dto.TResource success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastVersionTResourceById_result(getLastVersionTResourceById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TResource(other.success);
      }
    }

    public getLastVersionTResourceById_result deepCopy() {
      return new getLastVersionTResourceById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TResource getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TResource success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TResource)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastVersionTResourceById_result)
        return this.equals((getLastVersionTResourceById_result)that);
      return false;
    }

    public boolean equals(getLastVersionTResourceById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastVersionTResourceById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastVersionTResourceById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastVersionTResourceById_resultStandardSchemeFactory implements SchemeFactory {
      public getLastVersionTResourceById_resultStandardScheme getScheme() {
        return new getLastVersionTResourceById_resultStandardScheme();
      }
    }

    private static class getLastVersionTResourceById_resultStandardScheme extends StandardScheme<getLastVersionTResourceById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastVersionTResourceById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TResource();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastVersionTResourceById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastVersionTResourceById_resultTupleSchemeFactory implements SchemeFactory {
      public getLastVersionTResourceById_resultTupleScheme getScheme() {
        return new getLastVersionTResourceById_resultTupleScheme();
      }
    }

    private static class getLastVersionTResourceById_resultTupleScheme extends TupleScheme<getLastVersionTResourceById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastVersionTResourceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastVersionTResourceById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TResource();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTResourcesByIds_args implements org.apache.thrift.TBase<getTResourcesByIds_args, getTResourcesByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourcesByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourcesByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourcesByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourcesByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourcesByIds_args.class, metaDataMap);
    }

    public getTResourcesByIds_args() {
    }

    public getTResourcesByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourcesByIds_args(getTResourcesByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTResourcesByIds_args deepCopy() {
      return new getTResourcesByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourcesByIds_args)
        return this.equals((getTResourcesByIds_args)that);
      return false;
    }

    public boolean equals(getTResourcesByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourcesByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourcesByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourcesByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTResourcesByIds_argsStandardScheme getScheme() {
        return new getTResourcesByIds_argsStandardScheme();
      }
    }

    private static class getTResourcesByIds_argsStandardScheme extends StandardScheme<getTResourcesByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourcesByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.ids.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourcesByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter3 : struct.ids)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourcesByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTResourcesByIds_argsTupleScheme getScheme() {
        return new getTResourcesByIds_argsTupleScheme();
      }
    }

    private static class getTResourcesByIds_argsTupleScheme extends TupleScheme<getTResourcesByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourcesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter4 : struct.ids)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourcesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.ids.add(_elem6);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTResourcesByIds_result implements org.apache.thrift.TBase<getTResourcesByIds_result, getTResourcesByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourcesByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourcesByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourcesByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourcesByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TResource> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TResource.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourcesByIds_result.class, metaDataMap);
    }

    public getTResourcesByIds_result() {
    }

    public getTResourcesByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TResource> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourcesByIds_result(getTResourcesByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TResource> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResource>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TResource other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TResource(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTResourcesByIds_result deepCopy() {
      return new getTResourcesByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TResource> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TResource elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResource>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TResource> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TResource> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TResource>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourcesByIds_result)
        return this.equals((getTResourcesByIds_result)that);
      return false;
    }

    public boolean equals(getTResourcesByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourcesByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourcesByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourcesByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTResourcesByIds_resultStandardScheme getScheme() {
        return new getTResourcesByIds_resultStandardScheme();
      }
    }

    private static class getTResourcesByIds_resultStandardScheme extends StandardScheme<getTResourcesByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourcesByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResource>(_list8.size);
                  com.lesports.qmt.sbc.api.dto.TResource _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.lesports.qmt.sbc.api.dto.TResource();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourcesByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TResource _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourcesByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTResourcesByIds_resultTupleScheme getScheme() {
        return new getTResourcesByIds_resultTupleScheme();
      }
    }

    private static class getTResourcesByIds_resultTupleScheme extends TupleScheme<getTResourcesByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourcesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TResource _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourcesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResource>(_list13.size);
            com.lesports.qmt.sbc.api.dto.TResource _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.lesports.qmt.sbc.api.dto.TResource();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTResourceContentById_args implements org.apache.thrift.TBase<getTResourceContentById_args, getTResourceContentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourceContentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourceContentById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourceContentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourceContentById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourceContentById_args.class, metaDataMap);
    }

    public getTResourceContentById_args() {
    }

    public getTResourceContentById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourceContentById_args(getTResourceContentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTResourceContentById_args deepCopy() {
      return new getTResourceContentById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourceContentById_args)
        return this.equals((getTResourceContentById_args)that);
      return false;
    }

    public boolean equals(getTResourceContentById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourceContentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourceContentById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourceContentById_argsStandardSchemeFactory implements SchemeFactory {
      public getTResourceContentById_argsStandardScheme getScheme() {
        return new getTResourceContentById_argsStandardScheme();
      }
    }

    private static class getTResourceContentById_argsStandardScheme extends StandardScheme<getTResourceContentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourceContentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourceContentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourceContentById_argsTupleSchemeFactory implements SchemeFactory {
      public getTResourceContentById_argsTupleScheme getScheme() {
        return new getTResourceContentById_argsTupleScheme();
      }
    }

    private static class getTResourceContentById_argsTupleScheme extends TupleScheme<getTResourceContentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourceContentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourceContentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTResourceContentById_result implements org.apache.thrift.TBase<getTResourceContentById_result, getTResourceContentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourceContentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourceContentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourceContentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourceContentById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TResourceContent success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TResourceContent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourceContentById_result.class, metaDataMap);
    }

    public getTResourceContentById_result() {
    }

    public getTResourceContentById_result(
      com.lesports.qmt.sbc.api.dto.TResourceContent success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourceContentById_result(getTResourceContentById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TResourceContent(other.success);
      }
    }

    public getTResourceContentById_result deepCopy() {
      return new getTResourceContentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TResourceContent getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TResourceContent success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TResourceContent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourceContentById_result)
        return this.equals((getTResourceContentById_result)that);
      return false;
    }

    public boolean equals(getTResourceContentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourceContentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourceContentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourceContentById_resultStandardSchemeFactory implements SchemeFactory {
      public getTResourceContentById_resultStandardScheme getScheme() {
        return new getTResourceContentById_resultStandardScheme();
      }
    }

    private static class getTResourceContentById_resultStandardScheme extends StandardScheme<getTResourceContentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourceContentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TResourceContent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourceContentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourceContentById_resultTupleSchemeFactory implements SchemeFactory {
      public getTResourceContentById_resultTupleScheme getScheme() {
        return new getTResourceContentById_resultTupleScheme();
      }
    }

    private static class getTResourceContentById_resultTupleScheme extends TupleScheme<getTResourceContentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourceContentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourceContentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TResourceContent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTResourceContentsByIds_args implements org.apache.thrift.TBase<getTResourceContentsByIds_args, getTResourceContentsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourceContentsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourceContentsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourceContentsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourceContentsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourceContentsByIds_args.class, metaDataMap);
    }

    public getTResourceContentsByIds_args() {
    }

    public getTResourceContentsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourceContentsByIds_args(getTResourceContentsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTResourceContentsByIds_args deepCopy() {
      return new getTResourceContentsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourceContentsByIds_args)
        return this.equals((getTResourceContentsByIds_args)that);
      return false;
    }

    public boolean equals(getTResourceContentsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourceContentsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourceContentsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourceContentsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTResourceContentsByIds_argsStandardScheme getScheme() {
        return new getTResourceContentsByIds_argsStandardScheme();
      }
    }

    private static class getTResourceContentsByIds_argsStandardScheme extends StandardScheme<getTResourceContentsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list16.size);
                  long _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI64();
                    struct.ids.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter19 : struct.ids)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourceContentsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTResourceContentsByIds_argsTupleScheme getScheme() {
        return new getTResourceContentsByIds_argsTupleScheme();
      }
    }

    private static class getTResourceContentsByIds_argsTupleScheme extends TupleScheme<getTResourceContentsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter20 : struct.ids)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list21.size);
            long _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI64();
              struct.ids.add(_elem22);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTResourceContentsByIds_result implements org.apache.thrift.TBase<getTResourceContentsByIds_result, getTResourceContentsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTResourceContentsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTResourceContentsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTResourceContentsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTResourceContentsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TResourceContent> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TResourceContent.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTResourceContentsByIds_result.class, metaDataMap);
    }

    public getTResourceContentsByIds_result() {
    }

    public getTResourceContentsByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TResourceContent> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTResourceContentsByIds_result(getTResourceContentsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TResourceContent> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TResourceContent other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TResourceContent(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTResourceContentsByIds_result deepCopy() {
      return new getTResourceContentsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TResourceContent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TResourceContent elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TResourceContent> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TResourceContent>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTResourceContentsByIds_result)
        return this.equals((getTResourceContentsByIds_result)that);
      return false;
    }

    public boolean equals(getTResourceContentsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTResourceContentsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTResourceContentsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTResourceContentsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTResourceContentsByIds_resultStandardScheme getScheme() {
        return new getTResourceContentsByIds_resultStandardScheme();
      }
    }

    private static class getTResourceContentsByIds_resultStandardScheme extends StandardScheme<getTResourceContentsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>(_list24.size);
                  com.lesports.qmt.sbc.api.dto.TResourceContent _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.lesports.qmt.sbc.api.dto.TResourceContent();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TResourceContent _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTResourceContentsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTResourceContentsByIds_resultTupleScheme getScheme() {
        return new getTResourceContentsByIds_resultTupleScheme();
      }
    }

    private static class getTResourceContentsByIds_resultTupleScheme extends TupleScheme<getTResourceContentsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TResourceContent _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>(_list29.size);
            com.lesports.qmt.sbc.api.dto.TResourceContent _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.lesports.qmt.sbc.api.dto.TResourceContent();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOnlineTResourceContentsByIds_args implements org.apache.thrift.TBase<getOnlineTResourceContentsByIds_args, getOnlineTResourceContentsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineTResourceContentsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineTResourceContentsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineTResourceContentsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineTResourceContentsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineTResourceContentsByIds_args.class, metaDataMap);
    }

    public getOnlineTResourceContentsByIds_args() {
    }

    public getOnlineTResourceContentsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineTResourceContentsByIds_args(getOnlineTResourceContentsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getOnlineTResourceContentsByIds_args deepCopy() {
      return new getOnlineTResourceContentsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineTResourceContentsByIds_args)
        return this.equals((getOnlineTResourceContentsByIds_args)that);
      return false;
    }

    public boolean equals(getOnlineTResourceContentsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineTResourceContentsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineTResourceContentsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineTResourceContentsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getOnlineTResourceContentsByIds_argsStandardScheme getScheme() {
        return new getOnlineTResourceContentsByIds_argsStandardScheme();
      }
    }

    private static class getOnlineTResourceContentsByIds_argsStandardScheme extends StandardScheme<getOnlineTResourceContentsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    struct.ids.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter35 : struct.ids)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineTResourceContentsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getOnlineTResourceContentsByIds_argsTupleScheme getScheme() {
        return new getOnlineTResourceContentsByIds_argsTupleScheme();
      }
    }

    private static class getOnlineTResourceContentsByIds_argsTupleScheme extends TupleScheme<getOnlineTResourceContentsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter36 : struct.ids)
            {
              oprot.writeI64(_iter36);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineTResourceContentsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list37.size);
            long _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI64();
              struct.ids.add(_elem38);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getOnlineTResourceContentsByIds_result implements org.apache.thrift.TBase<getOnlineTResourceContentsByIds_result, getOnlineTResourceContentsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineTResourceContentsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineTResourceContentsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineTResourceContentsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineTResourceContentsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TResourceContent> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TResourceContent.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineTResourceContentsByIds_result.class, metaDataMap);
    }

    public getOnlineTResourceContentsByIds_result() {
    }

    public getOnlineTResourceContentsByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TResourceContent> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineTResourceContentsByIds_result(getOnlineTResourceContentsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TResourceContent> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TResourceContent other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TResourceContent(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOnlineTResourceContentsByIds_result deepCopy() {
      return new getOnlineTResourceContentsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TResourceContent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TResourceContent elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TResourceContent> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TResourceContent> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TResourceContent>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineTResourceContentsByIds_result)
        return this.equals((getOnlineTResourceContentsByIds_result)that);
      return false;
    }

    public boolean equals(getOnlineTResourceContentsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineTResourceContentsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineTResourceContentsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineTResourceContentsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getOnlineTResourceContentsByIds_resultStandardScheme getScheme() {
        return new getOnlineTResourceContentsByIds_resultStandardScheme();
      }
    }

    private static class getOnlineTResourceContentsByIds_resultStandardScheme extends StandardScheme<getOnlineTResourceContentsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>(_list40.size);
                  com.lesports.qmt.sbc.api.dto.TResourceContent _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.lesports.qmt.sbc.api.dto.TResourceContent();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TResourceContent _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineTResourceContentsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getOnlineTResourceContentsByIds_resultTupleScheme getScheme() {
        return new getOnlineTResourceContentsByIds_resultTupleScheme();
      }
    }

    private static class getOnlineTResourceContentsByIds_resultTupleScheme extends TupleScheme<getOnlineTResourceContentsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TResourceContent _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineTResourceContentsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TResourceContent>(_list45.size);
            com.lesports.qmt.sbc.api.dto.TResourceContent _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.lesports.qmt.sbc.api.dto.TResourceContent();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getResourceContentIdsByResourceId_args implements org.apache.thrift.TBase<getResourceContentIdsByResourceId_args, getResourceContentIdsByResourceId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getResourceContentIdsByResourceId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResourceContentIdsByResourceId_args");

    private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResourceContentIdsByResourceId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResourceContentIdsByResourceId_argsTupleSchemeFactory());
    }

    private long resourceId; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCE_ID((short)1, "resourceId"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCE_ID
            return RESOURCE_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESOURCEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResourceContentIdsByResourceId_args.class, metaDataMap);
    }

    public getResourceContentIdsByResourceId_args() {
    }

    public getResourceContentIdsByResourceId_args(
      long resourceId,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceContentIdsByResourceId_args(getResourceContentIdsByResourceId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.resourceId = other.resourceId;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getResourceContentIdsByResourceId_args deepCopy() {
      return new getResourceContentIdsByResourceId_args(this);
    }

    @Override
    public void clear() {
      setResourceIdIsSet(false);
      this.resourceId = 0;
      this.page = null;
      this.caller = null;
    }

    public long getResourceId() {
      return this.resourceId;
    }

    public void setResourceId(long resourceId) {
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
    }

    public void unsetResourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    public void setResourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESOURCE_ID:
        if (value == null) {
          unsetResourceId();
        } else {
          setResourceId((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCE_ID:
        return Long.valueOf(getResourceId());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESOURCE_ID:
        return isSetResourceId();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceContentIdsByResourceId_args)
        return this.equals((getResourceContentIdsByResourceId_args)that);
      return false;
    }

    public boolean equals(getResourceContentIdsByResourceId_args that) {
      if (that == null)
        return false;

      boolean this_present_resourceId = true;
      boolean that_present_resourceId = true;
      if (this_present_resourceId || that_present_resourceId) {
        if (!(this_present_resourceId && that_present_resourceId))
          return false;
        if (this.resourceId != that.resourceId)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_resourceId = true;
      list.add(present_resourceId);
      if (present_resourceId)
        list.add(resourceId);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getResourceContentIdsByResourceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceContentIdsByResourceId_args(");
      boolean first = true;

      sb.append("resourceId:");
      sb.append(this.resourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResourceContentIdsByResourceId_argsStandardSchemeFactory implements SchemeFactory {
      public getResourceContentIdsByResourceId_argsStandardScheme getScheme() {
        return new getResourceContentIdsByResourceId_argsStandardScheme();
      }
    }

    private static class getResourceContentIdsByResourceId_argsStandardScheme extends StandardScheme<getResourceContentIdsByResourceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.resourceId = iprot.readI64();
                struct.setResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resourceId);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResourceContentIdsByResourceId_argsTupleSchemeFactory implements SchemeFactory {
      public getResourceContentIdsByResourceId_argsTupleScheme getScheme() {
        return new getResourceContentIdsByResourceId_argsTupleScheme();
      }
    }

    private static class getResourceContentIdsByResourceId_argsTupleScheme extends TupleScheme<getResourceContentIdsByResourceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResourceId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetResourceId()) {
          oprot.writeI64(struct.resourceId);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.resourceId = iprot.readI64();
          struct.setResourceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getResourceContentIdsByResourceId_result implements org.apache.thrift.TBase<getResourceContentIdsByResourceId_result, getResourceContentIdsByResourceId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getResourceContentIdsByResourceId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getResourceContentIdsByResourceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getResourceContentIdsByResourceId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getResourceContentIdsByResourceId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getResourceContentIdsByResourceId_result.class, metaDataMap);
    }

    public getResourceContentIdsByResourceId_result() {
    }

    public getResourceContentIdsByResourceId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getResourceContentIdsByResourceId_result(getResourceContentIdsByResourceId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getResourceContentIdsByResourceId_result deepCopy() {
      return new getResourceContentIdsByResourceId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResourceContentIdsByResourceId_result)
        return this.equals((getResourceContentIdsByResourceId_result)that);
      return false;
    }

    public boolean equals(getResourceContentIdsByResourceId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getResourceContentIdsByResourceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getResourceContentIdsByResourceId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getResourceContentIdsByResourceId_resultStandardSchemeFactory implements SchemeFactory {
      public getResourceContentIdsByResourceId_resultStandardScheme getScheme() {
        return new getResourceContentIdsByResourceId_resultStandardScheme();
      }
    }

    private static class getResourceContentIdsByResourceId_resultStandardScheme extends StandardScheme<getResourceContentIdsByResourceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list48.size);
                  long _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI64();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter51 : struct.success)
            {
              oprot.writeI64(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getResourceContentIdsByResourceId_resultTupleSchemeFactory implements SchemeFactory {
      public getResourceContentIdsByResourceId_resultTupleScheme getScheme() {
        return new getResourceContentIdsByResourceId_resultTupleScheme();
      }
    }

    private static class getResourceContentIdsByResourceId_resultTupleScheme extends TupleScheme<getResourceContentIdsByResourceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter52 : struct.success)
            {
              oprot.writeI64(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list53.size);
            long _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readI64();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOnlineResourceContentIdsByResourceId_args implements org.apache.thrift.TBase<getOnlineResourceContentIdsByResourceId_args, getOnlineResourceContentIdsByResourceId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineResourceContentIdsByResourceId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineResourceContentIdsByResourceId_args");

    private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineResourceContentIdsByResourceId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineResourceContentIdsByResourceId_argsTupleSchemeFactory());
    }

    private long resourceId; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCE_ID((short)1, "resourceId"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCE_ID
            return RESOURCE_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESOURCEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineResourceContentIdsByResourceId_args.class, metaDataMap);
    }

    public getOnlineResourceContentIdsByResourceId_args() {
    }

    public getOnlineResourceContentIdsByResourceId_args(
      long resourceId,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineResourceContentIdsByResourceId_args(getOnlineResourceContentIdsByResourceId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.resourceId = other.resourceId;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getOnlineResourceContentIdsByResourceId_args deepCopy() {
      return new getOnlineResourceContentIdsByResourceId_args(this);
    }

    @Override
    public void clear() {
      setResourceIdIsSet(false);
      this.resourceId = 0;
      this.page = null;
      this.caller = null;
    }

    public long getResourceId() {
      return this.resourceId;
    }

    public void setResourceId(long resourceId) {
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
    }

    public void unsetResourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    public void setResourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESOURCE_ID:
        if (value == null) {
          unsetResourceId();
        } else {
          setResourceId((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCE_ID:
        return Long.valueOf(getResourceId());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESOURCE_ID:
        return isSetResourceId();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineResourceContentIdsByResourceId_args)
        return this.equals((getOnlineResourceContentIdsByResourceId_args)that);
      return false;
    }

    public boolean equals(getOnlineResourceContentIdsByResourceId_args that) {
      if (that == null)
        return false;

      boolean this_present_resourceId = true;
      boolean that_present_resourceId = true;
      if (this_present_resourceId || that_present_resourceId) {
        if (!(this_present_resourceId && that_present_resourceId))
          return false;
        if (this.resourceId != that.resourceId)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_resourceId = true;
      list.add(present_resourceId);
      if (present_resourceId)
        list.add(resourceId);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineResourceContentIdsByResourceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineResourceContentIdsByResourceId_args(");
      boolean first = true;

      sb.append("resourceId:");
      sb.append(this.resourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineResourceContentIdsByResourceId_argsStandardSchemeFactory implements SchemeFactory {
      public getOnlineResourceContentIdsByResourceId_argsStandardScheme getScheme() {
        return new getOnlineResourceContentIdsByResourceId_argsStandardScheme();
      }
    }

    private static class getOnlineResourceContentIdsByResourceId_argsStandardScheme extends StandardScheme<getOnlineResourceContentIdsByResourceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.resourceId = iprot.readI64();
                struct.setResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resourceId);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineResourceContentIdsByResourceId_argsTupleSchemeFactory implements SchemeFactory {
      public getOnlineResourceContentIdsByResourceId_argsTupleScheme getScheme() {
        return new getOnlineResourceContentIdsByResourceId_argsTupleScheme();
      }
    }

    private static class getOnlineResourceContentIdsByResourceId_argsTupleScheme extends TupleScheme<getOnlineResourceContentIdsByResourceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResourceId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetResourceId()) {
          oprot.writeI64(struct.resourceId);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineResourceContentIdsByResourceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.resourceId = iprot.readI64();
          struct.setResourceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getOnlineResourceContentIdsByResourceId_result implements org.apache.thrift.TBase<getOnlineResourceContentIdsByResourceId_result, getOnlineResourceContentIdsByResourceId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineResourceContentIdsByResourceId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineResourceContentIdsByResourceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineResourceContentIdsByResourceId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineResourceContentIdsByResourceId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineResourceContentIdsByResourceId_result.class, metaDataMap);
    }

    public getOnlineResourceContentIdsByResourceId_result() {
    }

    public getOnlineResourceContentIdsByResourceId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineResourceContentIdsByResourceId_result(getOnlineResourceContentIdsByResourceId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getOnlineResourceContentIdsByResourceId_result deepCopy() {
      return new getOnlineResourceContentIdsByResourceId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineResourceContentIdsByResourceId_result)
        return this.equals((getOnlineResourceContentIdsByResourceId_result)that);
      return false;
    }

    public boolean equals(getOnlineResourceContentIdsByResourceId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineResourceContentIdsByResourceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineResourceContentIdsByResourceId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineResourceContentIdsByResourceId_resultStandardSchemeFactory implements SchemeFactory {
      public getOnlineResourceContentIdsByResourceId_resultStandardScheme getScheme() {
        return new getOnlineResourceContentIdsByResourceId_resultStandardScheme();
      }
    }

    private static class getOnlineResourceContentIdsByResourceId_resultStandardScheme extends StandardScheme<getOnlineResourceContentIdsByResourceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list56.size);
                  long _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI64();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter59 : struct.success)
            {
              oprot.writeI64(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineResourceContentIdsByResourceId_resultTupleSchemeFactory implements SchemeFactory {
      public getOnlineResourceContentIdsByResourceId_resultTupleScheme getScheme() {
        return new getOnlineResourceContentIdsByResourceId_resultTupleScheme();
      }
    }

    private static class getOnlineResourceContentIdsByResourceId_resultTupleScheme extends TupleScheme<getOnlineResourceContentIdsByResourceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter60 : struct.success)
            {
              oprot.writeI64(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineResourceContentIdsByResourceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list61.size);
            long _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readI64();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countResourceContentByResourceId_args implements org.apache.thrift.TBase<countResourceContentByResourceId_args, countResourceContentByResourceId_args._Fields>, java.io.Serializable, Cloneable, Comparable<countResourceContentByResourceId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countResourceContentByResourceId_args");

    private static final org.apache.thrift.protocol.TField RESOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countResourceContentByResourceId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countResourceContentByResourceId_argsTupleSchemeFactory());
    }

    private long resourceId; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCE_ID((short)1, "resourceId"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCE_ID
            return RESOURCE_ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESOURCEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countResourceContentByResourceId_args.class, metaDataMap);
    }

    public countResourceContentByResourceId_args() {
    }

    public countResourceContentByResourceId_args(
      long resourceId,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countResourceContentByResourceId_args(countResourceContentByResourceId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.resourceId = other.resourceId;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public countResourceContentByResourceId_args deepCopy() {
      return new countResourceContentByResourceId_args(this);
    }

    @Override
    public void clear() {
      setResourceIdIsSet(false);
      this.resourceId = 0;
      this.caller = null;
    }

    public long getResourceId() {
      return this.resourceId;
    }

    public void setResourceId(long resourceId) {
      this.resourceId = resourceId;
      setResourceIdIsSet(true);
    }

    public void unsetResourceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    /** Returns true if field resourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceId() {
      return EncodingUtils.testBit(__isset_bitfield, __RESOURCEID_ISSET_ID);
    }

    public void setResourceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESOURCE_ID:
        if (value == null) {
          unsetResourceId();
        } else {
          setResourceId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCE_ID:
        return Long.valueOf(getResourceId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESOURCE_ID:
        return isSetResourceId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countResourceContentByResourceId_args)
        return this.equals((countResourceContentByResourceId_args)that);
      return false;
    }

    public boolean equals(countResourceContentByResourceId_args that) {
      if (that == null)
        return false;

      boolean this_present_resourceId = true;
      boolean that_present_resourceId = true;
      if (this_present_resourceId || that_present_resourceId) {
        if (!(this_present_resourceId && that_present_resourceId))
          return false;
        if (this.resourceId != that.resourceId)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_resourceId = true;
      list.add(present_resourceId);
      if (present_resourceId)
        list.add(resourceId);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(countResourceContentByResourceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResourceId()).compareTo(other.isSetResourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceId, other.resourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countResourceContentByResourceId_args(");
      boolean first = true;

      sb.append("resourceId:");
      sb.append(this.resourceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countResourceContentByResourceId_argsStandardSchemeFactory implements SchemeFactory {
      public countResourceContentByResourceId_argsStandardScheme getScheme() {
        return new countResourceContentByResourceId_argsStandardScheme();
      }
    }

    private static class countResourceContentByResourceId_argsStandardScheme extends StandardScheme<countResourceContentByResourceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countResourceContentByResourceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.resourceId = iprot.readI64();
                struct.setResourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countResourceContentByResourceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RESOURCE_ID_FIELD_DESC);
        oprot.writeI64(struct.resourceId);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countResourceContentByResourceId_argsTupleSchemeFactory implements SchemeFactory {
      public countResourceContentByResourceId_argsTupleScheme getScheme() {
        return new countResourceContentByResourceId_argsTupleScheme();
      }
    }

    private static class countResourceContentByResourceId_argsTupleScheme extends TupleScheme<countResourceContentByResourceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countResourceContentByResourceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResourceId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResourceId()) {
          oprot.writeI64(struct.resourceId);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countResourceContentByResourceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.resourceId = iprot.readI64();
          struct.setResourceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class countResourceContentByResourceId_result implements org.apache.thrift.TBase<countResourceContentByResourceId_result, countResourceContentByResourceId_result._Fields>, java.io.Serializable, Cloneable, Comparable<countResourceContentByResourceId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countResourceContentByResourceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countResourceContentByResourceId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countResourceContentByResourceId_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countResourceContentByResourceId_result.class, metaDataMap);
    }

    public countResourceContentByResourceId_result() {
    }

    public countResourceContentByResourceId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countResourceContentByResourceId_result(countResourceContentByResourceId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countResourceContentByResourceId_result deepCopy() {
      return new countResourceContentByResourceId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countResourceContentByResourceId_result)
        return this.equals((countResourceContentByResourceId_result)that);
      return false;
    }

    public boolean equals(countResourceContentByResourceId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countResourceContentByResourceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countResourceContentByResourceId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countResourceContentByResourceId_resultStandardSchemeFactory implements SchemeFactory {
      public countResourceContentByResourceId_resultStandardScheme getScheme() {
        return new countResourceContentByResourceId_resultStandardScheme();
      }
    }

    private static class countResourceContentByResourceId_resultStandardScheme extends StandardScheme<countResourceContentByResourceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countResourceContentByResourceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countResourceContentByResourceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countResourceContentByResourceId_resultTupleSchemeFactory implements SchemeFactory {
      public countResourceContentByResourceId_resultTupleScheme getScheme() {
        return new countResourceContentByResourceId_resultTupleScheme();
      }
    }

    private static class countResourceContentByResourceId_resultTupleScheme extends TupleScheme<countResourceContentByResourceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countResourceContentByResourceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countResourceContentByResourceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
