/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbc.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-27")
public class TSbcService {

  /**
   * Lesports Quan Mei Ti Content Service Definition.
   * @author ellios
   */
  public interface Iface {

    /**
     * 通过视频id获取视频信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TVideo getTVideoById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过视频id获取视频信息
     * 
     * 
     * @param leecoVid
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TVideo getTVideoByLeecoVid(long leecoVid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过视频id列表获取视频信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TVideo> getTVideoByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据相关信息获取视频列表
     * id 可以是大项id,小项id,赛事id,比赛id,球员id,球队id
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getVideoIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据相关信息获取视频数量
     * id 可以是大项id,小项id,赛事id,比赛id,球员id,球队id
     * 
     * 
     * @param p
     * @param caller
     */
    public long countVideosByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取最新发布的视频id
     * 
     * 
     * @param page
     * @param caller
     */
    public List<Long> getLatestVideoIds(com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取和某视频关联的其他视频id列表
     * 
     * 
     * @param vid
     * @param page
     * @param caller
     */
    public List<Long> getVideoIdsRelatedWithSomeVideo(long vid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取专辑中某视频的索引位置
     * 
     * 
     * @param vid
     * @param aid
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TVideoIndexInfo getIndexOfVideoInAlbum(long vid, long aid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取专辑下面的非正片视频
     * 
     * 
     * @param aid
     * @param page
     * @param caller
     */
    public List<Long> getNonPositiveVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过关联id获取视频列表
     * id 可以是大项id,小项id,赛事id,比赛id,球员id,球队id
     * type 类型: -1:全部 0:回放 1:集锦 2:战报 3:正片 20:其它
     * 正常分页
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TVideoInfo getTVideoInfoByRelatedIdAndType(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取专辑下面的所有录播视频
     * 
     * 
     * @param aid
     * @param page
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TVideo> getRecordVideosInAlbum(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 按照年月获取专辑下面的正片视频
     * 
     * 
     * @param aid
     * @param yearAndMonth
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TFeatureInfo getFeatureVideosByYears(long aid, String yearAndMonth, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取自制节目下视频列表
     * 
     * 
     * @param aid
     * @param page
     * @param caller
     */
    public List<Long> getAlbumVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过新闻id获取新闻信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TNews getTNewsById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过新闻id列表获取新闻信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TNews> getTNewsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据vid获取新闻
     * 
     * 
     * @param vid
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TNews getTNewsByVid(long vid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据相关信息获取新闻列表
     * id 可以是大项id,小项id,赛事id,比赛id,球员id,球队id
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getNewsIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据相关信息获取新闻数量
     * id 可以是大项id,小项id,赛事id,比赛id,球员id,球队id
     * 
     * 
     * @param p
     * @param caller
     */
    public long countNewsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取和某新闻关联的其他新闻Id列表
     * 
     * 
     * @param newsId
     * @param types
     * @param page
     * @param caller
     */
    public List<Long> getNewsIdsRelatedWithSomeNews(long newsId, List<com.lesports.qmt.sbc.api.common.NewsType> types, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取和某新闻关联的其他新闻Id列表
     * 
     * 
     * @param newsId
     * @param type
     * @param caller
     */
    public Map<String,Long> getNewsIdsNearbySomeNews(long newsId, com.lesports.qmt.sbc.api.common.NewsType type, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过专题id获取专题信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TTopic getTTopicById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过专题id列表获取专题信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TTopic> getTTopicsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过专题包id获取专题包信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TTopicItemPackage getTTopicItemPackageById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过专题包id列表获取专题包信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> getTTopicItemPackagesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过专题下的专题包id
     * 
     * 
     * @param topicId
     * @param caller
     */
    public List<Long> getTopicItemPackageIdsByTopicId(long topicId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据专辑id获取专辑信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbc.api.dto.TProgramAlbum getTProgramAlbumById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据专辑id批量获取专辑信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> getTProgramAlbumsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取所有的专辑列表
     * 
     * 
     * @param tagId
     * @param page
     * @param caller
     */
    public List<Long> getTProgramAlbums(long tagId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTVideoById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTVideoByLeecoVid(long leecoVid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTVideoByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVideoIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countVideosByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestVideoIds(com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVideoIdsRelatedWithSomeVideo(long vid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getIndexOfVideoInAlbum(long vid, long aid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNonPositiveVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTVideoInfoByRelatedIdAndType(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecordVideosInAlbum(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFeatureVideosByYears(long aid, String yearAndMonth, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAlbumVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTNewsById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTNewsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTNewsByVid(long vid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewsIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countNewsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewsIdsRelatedWithSomeNews(long newsId, List<com.lesports.qmt.sbc.api.common.NewsType> types, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewsIdsNearbySomeNews(long newsId, com.lesports.qmt.sbc.api.common.NewsType type, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTopicById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTopicsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTopicItemPackageById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTopicItemPackagesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopicItemPackageIdsByTopicId(long topicId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTProgramAlbumById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTProgramAlbumsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTProgramAlbums(long tagId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.lesports.qmt.sbc.api.dto.TVideo getTVideoById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTVideoById(id, caller);
      return recv_getTVideoById();
    }

    public void send_getTVideoById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTVideoById_args args = new getTVideoById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTVideoById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TVideo recv_getTVideoById() throws org.apache.thrift.TException
    {
      getTVideoById_result result = new getTVideoById_result();
      receiveBase(result, "getTVideoById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTVideoById failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TVideo getTVideoByLeecoVid(long leecoVid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTVideoByLeecoVid(leecoVid, caller);
      return recv_getTVideoByLeecoVid();
    }

    public void send_getTVideoByLeecoVid(long leecoVid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTVideoByLeecoVid_args args = new getTVideoByLeecoVid_args();
      args.setLeecoVid(leecoVid);
      args.setCaller(caller);
      sendBase("getTVideoByLeecoVid", args);
    }

    public com.lesports.qmt.sbc.api.dto.TVideo recv_getTVideoByLeecoVid() throws org.apache.thrift.TException
    {
      getTVideoByLeecoVid_result result = new getTVideoByLeecoVid_result();
      receiveBase(result, "getTVideoByLeecoVid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTVideoByLeecoVid failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TVideo> getTVideoByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTVideoByIds(ids, caller);
      return recv_getTVideoByIds();
    }

    public void send_getTVideoByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTVideoByIds_args args = new getTVideoByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTVideoByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TVideo> recv_getTVideoByIds() throws org.apache.thrift.TException
    {
      getTVideoByIds_result result = new getTVideoByIds_result();
      receiveBase(result, "getTVideoByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTVideoByIds failed: unknown result");
    }

    public List<Long> getVideoIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getVideoIdsByRelatedId(p, page, caller);
      return recv_getVideoIdsByRelatedId();
    }

    public void send_getVideoIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getVideoIdsByRelatedId_args args = new getVideoIdsByRelatedId_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getVideoIdsByRelatedId", args);
    }

    public List<Long> recv_getVideoIdsByRelatedId() throws org.apache.thrift.TException
    {
      getVideoIdsByRelatedId_result result = new getVideoIdsByRelatedId_result();
      receiveBase(result, "getVideoIdsByRelatedId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVideoIdsByRelatedId failed: unknown result");
    }

    public long countVideosByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_countVideosByRelatedId(p, caller);
      return recv_countVideosByRelatedId();
    }

    public void send_countVideosByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      countVideosByRelatedId_args args = new countVideosByRelatedId_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("countVideosByRelatedId", args);
    }

    public long recv_countVideosByRelatedId() throws org.apache.thrift.TException
    {
      countVideosByRelatedId_result result = new countVideosByRelatedId_result();
      receiveBase(result, "countVideosByRelatedId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countVideosByRelatedId failed: unknown result");
    }

    public List<Long> getLatestVideoIds(com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getLatestVideoIds(page, caller);
      return recv_getLatestVideoIds();
    }

    public void send_getLatestVideoIds(com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getLatestVideoIds_args args = new getLatestVideoIds_args();
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getLatestVideoIds", args);
    }

    public List<Long> recv_getLatestVideoIds() throws org.apache.thrift.TException
    {
      getLatestVideoIds_result result = new getLatestVideoIds_result();
      receiveBase(result, "getLatestVideoIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestVideoIds failed: unknown result");
    }

    public List<Long> getVideoIdsRelatedWithSomeVideo(long vid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getVideoIdsRelatedWithSomeVideo(vid, page, caller);
      return recv_getVideoIdsRelatedWithSomeVideo();
    }

    public void send_getVideoIdsRelatedWithSomeVideo(long vid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getVideoIdsRelatedWithSomeVideo_args args = new getVideoIdsRelatedWithSomeVideo_args();
      args.setVid(vid);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getVideoIdsRelatedWithSomeVideo", args);
    }

    public List<Long> recv_getVideoIdsRelatedWithSomeVideo() throws org.apache.thrift.TException
    {
      getVideoIdsRelatedWithSomeVideo_result result = new getVideoIdsRelatedWithSomeVideo_result();
      receiveBase(result, "getVideoIdsRelatedWithSomeVideo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVideoIdsRelatedWithSomeVideo failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TVideoIndexInfo getIndexOfVideoInAlbum(long vid, long aid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getIndexOfVideoInAlbum(vid, aid, caller);
      return recv_getIndexOfVideoInAlbum();
    }

    public void send_getIndexOfVideoInAlbum(long vid, long aid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getIndexOfVideoInAlbum_args args = new getIndexOfVideoInAlbum_args();
      args.setVid(vid);
      args.setAid(aid);
      args.setCaller(caller);
      sendBase("getIndexOfVideoInAlbum", args);
    }

    public com.lesports.qmt.sbc.api.dto.TVideoIndexInfo recv_getIndexOfVideoInAlbum() throws org.apache.thrift.TException
    {
      getIndexOfVideoInAlbum_result result = new getIndexOfVideoInAlbum_result();
      receiveBase(result, "getIndexOfVideoInAlbum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getIndexOfVideoInAlbum failed: unknown result");
    }

    public List<Long> getNonPositiveVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getNonPositiveVideosByAid(aid, page, caller);
      return recv_getNonPositiveVideosByAid();
    }

    public void send_getNonPositiveVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getNonPositiveVideosByAid_args args = new getNonPositiveVideosByAid_args();
      args.setAid(aid);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getNonPositiveVideosByAid", args);
    }

    public List<Long> recv_getNonPositiveVideosByAid() throws org.apache.thrift.TException
    {
      getNonPositiveVideosByAid_result result = new getNonPositiveVideosByAid_result();
      receiveBase(result, "getNonPositiveVideosByAid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNonPositiveVideosByAid failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TVideoInfo getTVideoInfoByRelatedIdAndType(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTVideoInfoByRelatedIdAndType(p, page, caller);
      return recv_getTVideoInfoByRelatedIdAndType();
    }

    public void send_getTVideoInfoByRelatedIdAndType(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTVideoInfoByRelatedIdAndType_args args = new getTVideoInfoByRelatedIdAndType_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTVideoInfoByRelatedIdAndType", args);
    }

    public com.lesports.qmt.sbc.api.dto.TVideoInfo recv_getTVideoInfoByRelatedIdAndType() throws org.apache.thrift.TException
    {
      getTVideoInfoByRelatedIdAndType_result result = new getTVideoInfoByRelatedIdAndType_result();
      receiveBase(result, "getTVideoInfoByRelatedIdAndType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTVideoInfoByRelatedIdAndType failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TVideo> getRecordVideosInAlbum(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getRecordVideosInAlbum(aid, page, caller);
      return recv_getRecordVideosInAlbum();
    }

    public void send_getRecordVideosInAlbum(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getRecordVideosInAlbum_args args = new getRecordVideosInAlbum_args();
      args.setAid(aid);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getRecordVideosInAlbum", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TVideo> recv_getRecordVideosInAlbum() throws org.apache.thrift.TException
    {
      getRecordVideosInAlbum_result result = new getRecordVideosInAlbum_result();
      receiveBase(result, "getRecordVideosInAlbum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordVideosInAlbum failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TFeatureInfo getFeatureVideosByYears(long aid, String yearAndMonth, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getFeatureVideosByYears(aid, yearAndMonth, caller);
      return recv_getFeatureVideosByYears();
    }

    public void send_getFeatureVideosByYears(long aid, String yearAndMonth, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getFeatureVideosByYears_args args = new getFeatureVideosByYears_args();
      args.setAid(aid);
      args.setYearAndMonth(yearAndMonth);
      args.setCaller(caller);
      sendBase("getFeatureVideosByYears", args);
    }

    public com.lesports.qmt.sbc.api.dto.TFeatureInfo recv_getFeatureVideosByYears() throws org.apache.thrift.TException
    {
      getFeatureVideosByYears_result result = new getFeatureVideosByYears_result();
      receiveBase(result, "getFeatureVideosByYears");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFeatureVideosByYears failed: unknown result");
    }

    public List<Long> getAlbumVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getAlbumVideosByAid(aid, page, caller);
      return recv_getAlbumVideosByAid();
    }

    public void send_getAlbumVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getAlbumVideosByAid_args args = new getAlbumVideosByAid_args();
      args.setAid(aid);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getAlbumVideosByAid", args);
    }

    public List<Long> recv_getAlbumVideosByAid() throws org.apache.thrift.TException
    {
      getAlbumVideosByAid_result result = new getAlbumVideosByAid_result();
      receiveBase(result, "getAlbumVideosByAid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAlbumVideosByAid failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TNews getTNewsById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTNewsById(id, caller);
      return recv_getTNewsById();
    }

    public void send_getTNewsById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTNewsById_args args = new getTNewsById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTNewsById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TNews recv_getTNewsById() throws org.apache.thrift.TException
    {
      getTNewsById_result result = new getTNewsById_result();
      receiveBase(result, "getTNewsById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTNewsById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TNews> getTNewsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTNewsByIds(ids, caller);
      return recv_getTNewsByIds();
    }

    public void send_getTNewsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTNewsByIds_args args = new getTNewsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTNewsByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TNews> recv_getTNewsByIds() throws org.apache.thrift.TException
    {
      getTNewsByIds_result result = new getTNewsByIds_result();
      receiveBase(result, "getTNewsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTNewsByIds failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TNews getTNewsByVid(long vid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTNewsByVid(vid, caller);
      return recv_getTNewsByVid();
    }

    public void send_getTNewsByVid(long vid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTNewsByVid_args args = new getTNewsByVid_args();
      args.setVid(vid);
      args.setCaller(caller);
      sendBase("getTNewsByVid", args);
    }

    public com.lesports.qmt.sbc.api.dto.TNews recv_getTNewsByVid() throws org.apache.thrift.TException
    {
      getTNewsByVid_result result = new getTNewsByVid_result();
      receiveBase(result, "getTNewsByVid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTNewsByVid failed: unknown result");
    }

    public List<Long> getNewsIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getNewsIdsByRelatedId(p, page, caller);
      return recv_getNewsIdsByRelatedId();
    }

    public void send_getNewsIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getNewsIdsByRelatedId_args args = new getNewsIdsByRelatedId_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getNewsIdsByRelatedId", args);
    }

    public List<Long> recv_getNewsIdsByRelatedId() throws org.apache.thrift.TException
    {
      getNewsIdsByRelatedId_result result = new getNewsIdsByRelatedId_result();
      receiveBase(result, "getNewsIdsByRelatedId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewsIdsByRelatedId failed: unknown result");
    }

    public long countNewsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_countNewsByRelatedId(p, caller);
      return recv_countNewsByRelatedId();
    }

    public void send_countNewsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      countNewsByRelatedId_args args = new countNewsByRelatedId_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("countNewsByRelatedId", args);
    }

    public long recv_countNewsByRelatedId() throws org.apache.thrift.TException
    {
      countNewsByRelatedId_result result = new countNewsByRelatedId_result();
      receiveBase(result, "countNewsByRelatedId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countNewsByRelatedId failed: unknown result");
    }

    public List<Long> getNewsIdsRelatedWithSomeNews(long newsId, List<com.lesports.qmt.sbc.api.common.NewsType> types, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getNewsIdsRelatedWithSomeNews(newsId, types, page, caller);
      return recv_getNewsIdsRelatedWithSomeNews();
    }

    public void send_getNewsIdsRelatedWithSomeNews(long newsId, List<com.lesports.qmt.sbc.api.common.NewsType> types, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getNewsIdsRelatedWithSomeNews_args args = new getNewsIdsRelatedWithSomeNews_args();
      args.setNewsId(newsId);
      args.setTypes(types);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getNewsIdsRelatedWithSomeNews", args);
    }

    public List<Long> recv_getNewsIdsRelatedWithSomeNews() throws org.apache.thrift.TException
    {
      getNewsIdsRelatedWithSomeNews_result result = new getNewsIdsRelatedWithSomeNews_result();
      receiveBase(result, "getNewsIdsRelatedWithSomeNews");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewsIdsRelatedWithSomeNews failed: unknown result");
    }

    public Map<String,Long> getNewsIdsNearbySomeNews(long newsId, com.lesports.qmt.sbc.api.common.NewsType type, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getNewsIdsNearbySomeNews(newsId, type, caller);
      return recv_getNewsIdsNearbySomeNews();
    }

    public void send_getNewsIdsNearbySomeNews(long newsId, com.lesports.qmt.sbc.api.common.NewsType type, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getNewsIdsNearbySomeNews_args args = new getNewsIdsNearbySomeNews_args();
      args.setNewsId(newsId);
      args.setType(type);
      args.setCaller(caller);
      sendBase("getNewsIdsNearbySomeNews", args);
    }

    public Map<String,Long> recv_getNewsIdsNearbySomeNews() throws org.apache.thrift.TException
    {
      getNewsIdsNearbySomeNews_result result = new getNewsIdsNearbySomeNews_result();
      receiveBase(result, "getNewsIdsNearbySomeNews");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewsIdsNearbySomeNews failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TTopic getTTopicById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTopicById(id, caller);
      return recv_getTTopicById();
    }

    public void send_getTTopicById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTopicById_args args = new getTTopicById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTTopicById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TTopic recv_getTTopicById() throws org.apache.thrift.TException
    {
      getTTopicById_result result = new getTTopicById_result();
      receiveBase(result, "getTTopicById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTopicById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TTopic> getTTopicsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTopicsByIds(ids, caller);
      return recv_getTTopicsByIds();
    }

    public void send_getTTopicsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTopicsByIds_args args = new getTTopicsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTTopicsByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TTopic> recv_getTTopicsByIds() throws org.apache.thrift.TException
    {
      getTTopicsByIds_result result = new getTTopicsByIds_result();
      receiveBase(result, "getTTopicsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTopicsByIds failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TTopicItemPackage getTTopicItemPackageById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTopicItemPackageById(id, caller);
      return recv_getTTopicItemPackageById();
    }

    public void send_getTTopicItemPackageById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTopicItemPackageById_args args = new getTTopicItemPackageById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTTopicItemPackageById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TTopicItemPackage recv_getTTopicItemPackageById() throws org.apache.thrift.TException
    {
      getTTopicItemPackageById_result result = new getTTopicItemPackageById_result();
      receiveBase(result, "getTTopicItemPackageById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTopicItemPackageById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> getTTopicItemPackagesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTopicItemPackagesByIds(ids, caller);
      return recv_getTTopicItemPackagesByIds();
    }

    public void send_getTTopicItemPackagesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTopicItemPackagesByIds_args args = new getTTopicItemPackagesByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTTopicItemPackagesByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> recv_getTTopicItemPackagesByIds() throws org.apache.thrift.TException
    {
      getTTopicItemPackagesByIds_result result = new getTTopicItemPackagesByIds_result();
      receiveBase(result, "getTTopicItemPackagesByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTopicItemPackagesByIds failed: unknown result");
    }

    public List<Long> getTopicItemPackageIdsByTopicId(long topicId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTopicItemPackageIdsByTopicId(topicId, caller);
      return recv_getTopicItemPackageIdsByTopicId();
    }

    public void send_getTopicItemPackageIdsByTopicId(long topicId, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTopicItemPackageIdsByTopicId_args args = new getTopicItemPackageIdsByTopicId_args();
      args.setTopicId(topicId);
      args.setCaller(caller);
      sendBase("getTopicItemPackageIdsByTopicId", args);
    }

    public List<Long> recv_getTopicItemPackageIdsByTopicId() throws org.apache.thrift.TException
    {
      getTopicItemPackageIdsByTopicId_result result = new getTopicItemPackageIdsByTopicId_result();
      receiveBase(result, "getTopicItemPackageIdsByTopicId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopicItemPackageIdsByTopicId failed: unknown result");
    }

    public com.lesports.qmt.sbc.api.dto.TProgramAlbum getTProgramAlbumById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTProgramAlbumById(id, caller);
      return recv_getTProgramAlbumById();
    }

    public void send_getTProgramAlbumById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTProgramAlbumById_args args = new getTProgramAlbumById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTProgramAlbumById", args);
    }

    public com.lesports.qmt.sbc.api.dto.TProgramAlbum recv_getTProgramAlbumById() throws org.apache.thrift.TException
    {
      getTProgramAlbumById_result result = new getTProgramAlbumById_result();
      receiveBase(result, "getTProgramAlbumById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTProgramAlbumById failed: unknown result");
    }

    public List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> getTProgramAlbumsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTProgramAlbumsByIds(ids, caller);
      return recv_getTProgramAlbumsByIds();
    }

    public void send_getTProgramAlbumsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTProgramAlbumsByIds_args args = new getTProgramAlbumsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTProgramAlbumsByIds", args);
    }

    public List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> recv_getTProgramAlbumsByIds() throws org.apache.thrift.TException
    {
      getTProgramAlbumsByIds_result result = new getTProgramAlbumsByIds_result();
      receiveBase(result, "getTProgramAlbumsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTProgramAlbumsByIds failed: unknown result");
    }

    public List<Long> getTProgramAlbums(long tagId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTProgramAlbums(tagId, page, caller);
      return recv_getTProgramAlbums();
    }

    public void send_getTProgramAlbums(long tagId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTProgramAlbums_args args = new getTProgramAlbums_args();
      args.setTagId(tagId);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTProgramAlbums", args);
    }

    public List<Long> recv_getTProgramAlbums() throws org.apache.thrift.TException
    {
      getTProgramAlbums_result result = new getTProgramAlbums_result();
      receiveBase(result, "getTProgramAlbums");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTProgramAlbums failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTVideoById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTVideoById_call method_call = new getTVideoById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTVideoById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTVideoById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTVideoById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTVideoById_args args = new getTVideoById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TVideo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTVideoById();
      }
    }

    public void getTVideoByLeecoVid(long leecoVid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTVideoByLeecoVid_call method_call = new getTVideoByLeecoVid_call(leecoVid, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTVideoByLeecoVid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long leecoVid;
      private com.lesports.api.common.CallerParam caller;
      public getTVideoByLeecoVid_call(long leecoVid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.leecoVid = leecoVid;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTVideoByLeecoVid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTVideoByLeecoVid_args args = new getTVideoByLeecoVid_args();
        args.setLeecoVid(leecoVid);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TVideo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTVideoByLeecoVid();
      }
    }

    public void getTVideoByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTVideoByIds_call method_call = new getTVideoByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTVideoByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTVideoByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTVideoByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTVideoByIds_args args = new getTVideoByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TVideo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTVideoByIds();
      }
    }

    public void getVideoIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVideoIdsByRelatedId_call method_call = new getVideoIdsByRelatedId_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVideoIdsByRelatedId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getVideoIdsByRelatedId_call(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVideoIdsByRelatedId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVideoIdsByRelatedId_args args = new getVideoIdsByRelatedId_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVideoIdsByRelatedId();
      }
    }

    public void countVideosByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countVideosByRelatedId_call method_call = new countVideosByRelatedId_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countVideosByRelatedId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p;
      private com.lesports.api.common.CallerParam caller;
      public countVideosByRelatedId_call(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countVideosByRelatedId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countVideosByRelatedId_args args = new countVideosByRelatedId_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countVideosByRelatedId();
      }
    }

    public void getLatestVideoIds(com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestVideoIds_call method_call = new getLatestVideoIds_call(page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestVideoIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getLatestVideoIds_call(com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestVideoIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestVideoIds_args args = new getLatestVideoIds_args();
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestVideoIds();
      }
    }

    public void getVideoIdsRelatedWithSomeVideo(long vid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVideoIdsRelatedWithSomeVideo_call method_call = new getVideoIdsRelatedWithSomeVideo_call(vid, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVideoIdsRelatedWithSomeVideo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long vid;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getVideoIdsRelatedWithSomeVideo_call(long vid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVideoIdsRelatedWithSomeVideo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVideoIdsRelatedWithSomeVideo_args args = new getVideoIdsRelatedWithSomeVideo_args();
        args.setVid(vid);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVideoIdsRelatedWithSomeVideo();
      }
    }

    public void getIndexOfVideoInAlbum(long vid, long aid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getIndexOfVideoInAlbum_call method_call = new getIndexOfVideoInAlbum_call(vid, aid, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getIndexOfVideoInAlbum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long vid;
      private long aid;
      private com.lesports.api.common.CallerParam caller;
      public getIndexOfVideoInAlbum_call(long vid, long aid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
        this.aid = aid;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getIndexOfVideoInAlbum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getIndexOfVideoInAlbum_args args = new getIndexOfVideoInAlbum_args();
        args.setVid(vid);
        args.setAid(aid);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TVideoIndexInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getIndexOfVideoInAlbum();
      }
    }

    public void getNonPositiveVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNonPositiveVideosByAid_call method_call = new getNonPositiveVideosByAid_call(aid, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNonPositiveVideosByAid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long aid;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getNonPositiveVideosByAid_call(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aid = aid;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNonPositiveVideosByAid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNonPositiveVideosByAid_args args = new getNonPositiveVideosByAid_args();
        args.setAid(aid);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNonPositiveVideosByAid();
      }
    }

    public void getTVideoInfoByRelatedIdAndType(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTVideoInfoByRelatedIdAndType_call method_call = new getTVideoInfoByRelatedIdAndType_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTVideoInfoByRelatedIdAndType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTVideoInfoByRelatedIdAndType_call(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTVideoInfoByRelatedIdAndType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTVideoInfoByRelatedIdAndType_args args = new getTVideoInfoByRelatedIdAndType_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TVideoInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTVideoInfoByRelatedIdAndType();
      }
    }

    public void getRecordVideosInAlbum(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordVideosInAlbum_call method_call = new getRecordVideosInAlbum_call(aid, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordVideosInAlbum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long aid;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getRecordVideosInAlbum_call(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aid = aid;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordVideosInAlbum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordVideosInAlbum_args args = new getRecordVideosInAlbum_args();
        args.setAid(aid);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TVideo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordVideosInAlbum();
      }
    }

    public void getFeatureVideosByYears(long aid, String yearAndMonth, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFeatureVideosByYears_call method_call = new getFeatureVideosByYears_call(aid, yearAndMonth, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFeatureVideosByYears_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long aid;
      private String yearAndMonth;
      private com.lesports.api.common.CallerParam caller;
      public getFeatureVideosByYears_call(long aid, String yearAndMonth, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aid = aid;
        this.yearAndMonth = yearAndMonth;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeatureVideosByYears", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFeatureVideosByYears_args args = new getFeatureVideosByYears_args();
        args.setAid(aid);
        args.setYearAndMonth(yearAndMonth);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TFeatureInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFeatureVideosByYears();
      }
    }

    public void getAlbumVideosByAid(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAlbumVideosByAid_call method_call = new getAlbumVideosByAid_call(aid, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAlbumVideosByAid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long aid;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getAlbumVideosByAid_call(long aid, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.aid = aid;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAlbumVideosByAid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAlbumVideosByAid_args args = new getAlbumVideosByAid_args();
        args.setAid(aid);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAlbumVideosByAid();
      }
    }

    public void getTNewsById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTNewsById_call method_call = new getTNewsById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTNewsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTNewsById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTNewsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTNewsById_args args = new getTNewsById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TNews getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTNewsById();
      }
    }

    public void getTNewsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTNewsByIds_call method_call = new getTNewsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTNewsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTNewsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTNewsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTNewsByIds_args args = new getTNewsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TNews> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTNewsByIds();
      }
    }

    public void getTNewsByVid(long vid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTNewsByVid_call method_call = new getTNewsByVid_call(vid, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTNewsByVid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long vid;
      private com.lesports.api.common.CallerParam caller;
      public getTNewsByVid_call(long vid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vid = vid;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTNewsByVid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTNewsByVid_args args = new getTNewsByVid_args();
        args.setVid(vid);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TNews getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTNewsByVid();
      }
    }

    public void getNewsIdsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewsIdsByRelatedId_call method_call = new getNewsIdsByRelatedId_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewsIdsByRelatedId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getNewsIdsByRelatedId_call(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewsIdsByRelatedId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewsIdsByRelatedId_args args = new getNewsIdsByRelatedId_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewsIdsByRelatedId();
      }
    }

    public void countNewsByRelatedId(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countNewsByRelatedId_call method_call = new countNewsByRelatedId_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countNewsByRelatedId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p;
      private com.lesports.api.common.CallerParam caller;
      public countNewsByRelatedId_call(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countNewsByRelatedId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countNewsByRelatedId_args args = new countNewsByRelatedId_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countNewsByRelatedId();
      }
    }

    public void getNewsIdsRelatedWithSomeNews(long newsId, List<com.lesports.qmt.sbc.api.common.NewsType> types, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewsIdsRelatedWithSomeNews_call method_call = new getNewsIdsRelatedWithSomeNews_call(newsId, types, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewsIdsRelatedWithSomeNews_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long newsId;
      private List<com.lesports.qmt.sbc.api.common.NewsType> types;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getNewsIdsRelatedWithSomeNews_call(long newsId, List<com.lesports.qmt.sbc.api.common.NewsType> types, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newsId = newsId;
        this.types = types;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewsIdsRelatedWithSomeNews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewsIdsRelatedWithSomeNews_args args = new getNewsIdsRelatedWithSomeNews_args();
        args.setNewsId(newsId);
        args.setTypes(types);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewsIdsRelatedWithSomeNews();
      }
    }

    public void getNewsIdsNearbySomeNews(long newsId, com.lesports.qmt.sbc.api.common.NewsType type, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewsIdsNearbySomeNews_call method_call = new getNewsIdsNearbySomeNews_call(newsId, type, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewsIdsNearbySomeNews_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long newsId;
      private com.lesports.qmt.sbc.api.common.NewsType type;
      private com.lesports.api.common.CallerParam caller;
      public getNewsIdsNearbySomeNews_call(long newsId, com.lesports.qmt.sbc.api.common.NewsType type, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newsId = newsId;
        this.type = type;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewsIdsNearbySomeNews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewsIdsNearbySomeNews_args args = new getNewsIdsNearbySomeNews_args();
        args.setNewsId(newsId);
        args.setType(type);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewsIdsNearbySomeNews();
      }
    }

    public void getTTopicById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTopicById_call method_call = new getTTopicById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTopicById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTTopicById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTopicById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTopicById_args args = new getTTopicById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TTopic getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTopicById();
      }
    }

    public void getTTopicsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTopicsByIds_call method_call = new getTTopicsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTopicsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTTopicsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTopicsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTopicsByIds_args args = new getTTopicsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TTopic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTopicsByIds();
      }
    }

    public void getTTopicItemPackageById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTopicItemPackageById_call method_call = new getTTopicItemPackageById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTopicItemPackageById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTTopicItemPackageById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTopicItemPackageById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTopicItemPackageById_args args = new getTTopicItemPackageById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TTopicItemPackage getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTopicItemPackageById();
      }
    }

    public void getTTopicItemPackagesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTopicItemPackagesByIds_call method_call = new getTTopicItemPackagesByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTopicItemPackagesByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTTopicItemPackagesByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTopicItemPackagesByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTopicItemPackagesByIds_args args = new getTTopicItemPackagesByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTopicItemPackagesByIds();
      }
    }

    public void getTopicItemPackageIdsByTopicId(long topicId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopicItemPackageIdsByTopicId_call method_call = new getTopicItemPackageIdsByTopicId_call(topicId, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopicItemPackageIdsByTopicId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private com.lesports.api.common.CallerParam caller;
      public getTopicItemPackageIdsByTopicId_call(long topicId, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopicItemPackageIdsByTopicId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopicItemPackageIdsByTopicId_args args = new getTopicItemPackageIdsByTopicId_args();
        args.setTopicId(topicId);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopicItemPackageIdsByTopicId();
      }
    }

    public void getTProgramAlbumById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTProgramAlbumById_call method_call = new getTProgramAlbumById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTProgramAlbumById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTProgramAlbumById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTProgramAlbumById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTProgramAlbumById_args args = new getTProgramAlbumById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbc.api.dto.TProgramAlbum getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTProgramAlbumById();
      }
    }

    public void getTProgramAlbumsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTProgramAlbumsByIds_call method_call = new getTProgramAlbumsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTProgramAlbumsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTProgramAlbumsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTProgramAlbumsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTProgramAlbumsByIds_args args = new getTProgramAlbumsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTProgramAlbumsByIds();
      }
    }

    public void getTProgramAlbums(long tagId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTProgramAlbums_call method_call = new getTProgramAlbums_call(tagId, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTProgramAlbums_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long tagId;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTProgramAlbums_call(long tagId, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagId = tagId;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTProgramAlbums", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTProgramAlbums_args args = new getTProgramAlbums_args();
        args.setTagId(tagId);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTProgramAlbums();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTVideoById", new getTVideoById());
      processMap.put("getTVideoByLeecoVid", new getTVideoByLeecoVid());
      processMap.put("getTVideoByIds", new getTVideoByIds());
      processMap.put("getVideoIdsByRelatedId", new getVideoIdsByRelatedId());
      processMap.put("countVideosByRelatedId", new countVideosByRelatedId());
      processMap.put("getLatestVideoIds", new getLatestVideoIds());
      processMap.put("getVideoIdsRelatedWithSomeVideo", new getVideoIdsRelatedWithSomeVideo());
      processMap.put("getIndexOfVideoInAlbum", new getIndexOfVideoInAlbum());
      processMap.put("getNonPositiveVideosByAid", new getNonPositiveVideosByAid());
      processMap.put("getTVideoInfoByRelatedIdAndType", new getTVideoInfoByRelatedIdAndType());
      processMap.put("getRecordVideosInAlbum", new getRecordVideosInAlbum());
      processMap.put("getFeatureVideosByYears", new getFeatureVideosByYears());
      processMap.put("getAlbumVideosByAid", new getAlbumVideosByAid());
      processMap.put("getTNewsById", new getTNewsById());
      processMap.put("getTNewsByIds", new getTNewsByIds());
      processMap.put("getTNewsByVid", new getTNewsByVid());
      processMap.put("getNewsIdsByRelatedId", new getNewsIdsByRelatedId());
      processMap.put("countNewsByRelatedId", new countNewsByRelatedId());
      processMap.put("getNewsIdsRelatedWithSomeNews", new getNewsIdsRelatedWithSomeNews());
      processMap.put("getNewsIdsNearbySomeNews", new getNewsIdsNearbySomeNews());
      processMap.put("getTTopicById", new getTTopicById());
      processMap.put("getTTopicsByIds", new getTTopicsByIds());
      processMap.put("getTTopicItemPackageById", new getTTopicItemPackageById());
      processMap.put("getTTopicItemPackagesByIds", new getTTopicItemPackagesByIds());
      processMap.put("getTopicItemPackageIdsByTopicId", new getTopicItemPackageIdsByTopicId());
      processMap.put("getTProgramAlbumById", new getTProgramAlbumById());
      processMap.put("getTProgramAlbumsByIds", new getTProgramAlbumsByIds());
      processMap.put("getTProgramAlbums", new getTProgramAlbums());
      return processMap;
    }

    public static class getTVideoById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTVideoById_args> {
      public getTVideoById() {
        super("getTVideoById");
      }

      public getTVideoById_args getEmptyArgsInstance() {
        return new getTVideoById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTVideoById_result getResult(I iface, getTVideoById_args args) throws org.apache.thrift.TException {
        getTVideoById_result result = new getTVideoById_result();
        result.success = iface.getTVideoById(args.id, args.caller);
        return result;
      }
    }

    public static class getTVideoByLeecoVid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTVideoByLeecoVid_args> {
      public getTVideoByLeecoVid() {
        super("getTVideoByLeecoVid");
      }

      public getTVideoByLeecoVid_args getEmptyArgsInstance() {
        return new getTVideoByLeecoVid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTVideoByLeecoVid_result getResult(I iface, getTVideoByLeecoVid_args args) throws org.apache.thrift.TException {
        getTVideoByLeecoVid_result result = new getTVideoByLeecoVid_result();
        result.success = iface.getTVideoByLeecoVid(args.leecoVid, args.caller);
        return result;
      }
    }

    public static class getTVideoByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTVideoByIds_args> {
      public getTVideoByIds() {
        super("getTVideoByIds");
      }

      public getTVideoByIds_args getEmptyArgsInstance() {
        return new getTVideoByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTVideoByIds_result getResult(I iface, getTVideoByIds_args args) throws org.apache.thrift.TException {
        getTVideoByIds_result result = new getTVideoByIds_result();
        result.success = iface.getTVideoByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getVideoIdsByRelatedId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVideoIdsByRelatedId_args> {
      public getVideoIdsByRelatedId() {
        super("getVideoIdsByRelatedId");
      }

      public getVideoIdsByRelatedId_args getEmptyArgsInstance() {
        return new getVideoIdsByRelatedId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVideoIdsByRelatedId_result getResult(I iface, getVideoIdsByRelatedId_args args) throws org.apache.thrift.TException {
        getVideoIdsByRelatedId_result result = new getVideoIdsByRelatedId_result();
        result.success = iface.getVideoIdsByRelatedId(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class countVideosByRelatedId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countVideosByRelatedId_args> {
      public countVideosByRelatedId() {
        super("countVideosByRelatedId");
      }

      public countVideosByRelatedId_args getEmptyArgsInstance() {
        return new countVideosByRelatedId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countVideosByRelatedId_result getResult(I iface, countVideosByRelatedId_args args) throws org.apache.thrift.TException {
        countVideosByRelatedId_result result = new countVideosByRelatedId_result();
        result.success = iface.countVideosByRelatedId(args.p, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getLatestVideoIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestVideoIds_args> {
      public getLatestVideoIds() {
        super("getLatestVideoIds");
      }

      public getLatestVideoIds_args getEmptyArgsInstance() {
        return new getLatestVideoIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestVideoIds_result getResult(I iface, getLatestVideoIds_args args) throws org.apache.thrift.TException {
        getLatestVideoIds_result result = new getLatestVideoIds_result();
        result.success = iface.getLatestVideoIds(args.page, args.caller);
        return result;
      }
    }

    public static class getVideoIdsRelatedWithSomeVideo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVideoIdsRelatedWithSomeVideo_args> {
      public getVideoIdsRelatedWithSomeVideo() {
        super("getVideoIdsRelatedWithSomeVideo");
      }

      public getVideoIdsRelatedWithSomeVideo_args getEmptyArgsInstance() {
        return new getVideoIdsRelatedWithSomeVideo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVideoIdsRelatedWithSomeVideo_result getResult(I iface, getVideoIdsRelatedWithSomeVideo_args args) throws org.apache.thrift.TException {
        getVideoIdsRelatedWithSomeVideo_result result = new getVideoIdsRelatedWithSomeVideo_result();
        result.success = iface.getVideoIdsRelatedWithSomeVideo(args.vid, args.page, args.caller);
        return result;
      }
    }

    public static class getIndexOfVideoInAlbum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getIndexOfVideoInAlbum_args> {
      public getIndexOfVideoInAlbum() {
        super("getIndexOfVideoInAlbum");
      }

      public getIndexOfVideoInAlbum_args getEmptyArgsInstance() {
        return new getIndexOfVideoInAlbum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getIndexOfVideoInAlbum_result getResult(I iface, getIndexOfVideoInAlbum_args args) throws org.apache.thrift.TException {
        getIndexOfVideoInAlbum_result result = new getIndexOfVideoInAlbum_result();
        result.success = iface.getIndexOfVideoInAlbum(args.vid, args.aid, args.caller);
        return result;
      }
    }

    public static class getNonPositiveVideosByAid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNonPositiveVideosByAid_args> {
      public getNonPositiveVideosByAid() {
        super("getNonPositiveVideosByAid");
      }

      public getNonPositiveVideosByAid_args getEmptyArgsInstance() {
        return new getNonPositiveVideosByAid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNonPositiveVideosByAid_result getResult(I iface, getNonPositiveVideosByAid_args args) throws org.apache.thrift.TException {
        getNonPositiveVideosByAid_result result = new getNonPositiveVideosByAid_result();
        result.success = iface.getNonPositiveVideosByAid(args.aid, args.page, args.caller);
        return result;
      }
    }

    public static class getTVideoInfoByRelatedIdAndType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTVideoInfoByRelatedIdAndType_args> {
      public getTVideoInfoByRelatedIdAndType() {
        super("getTVideoInfoByRelatedIdAndType");
      }

      public getTVideoInfoByRelatedIdAndType_args getEmptyArgsInstance() {
        return new getTVideoInfoByRelatedIdAndType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTVideoInfoByRelatedIdAndType_result getResult(I iface, getTVideoInfoByRelatedIdAndType_args args) throws org.apache.thrift.TException {
        getTVideoInfoByRelatedIdAndType_result result = new getTVideoInfoByRelatedIdAndType_result();
        result.success = iface.getTVideoInfoByRelatedIdAndType(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getRecordVideosInAlbum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordVideosInAlbum_args> {
      public getRecordVideosInAlbum() {
        super("getRecordVideosInAlbum");
      }

      public getRecordVideosInAlbum_args getEmptyArgsInstance() {
        return new getRecordVideosInAlbum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecordVideosInAlbum_result getResult(I iface, getRecordVideosInAlbum_args args) throws org.apache.thrift.TException {
        getRecordVideosInAlbum_result result = new getRecordVideosInAlbum_result();
        result.success = iface.getRecordVideosInAlbum(args.aid, args.page, args.caller);
        return result;
      }
    }

    public static class getFeatureVideosByYears<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFeatureVideosByYears_args> {
      public getFeatureVideosByYears() {
        super("getFeatureVideosByYears");
      }

      public getFeatureVideosByYears_args getEmptyArgsInstance() {
        return new getFeatureVideosByYears_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFeatureVideosByYears_result getResult(I iface, getFeatureVideosByYears_args args) throws org.apache.thrift.TException {
        getFeatureVideosByYears_result result = new getFeatureVideosByYears_result();
        result.success = iface.getFeatureVideosByYears(args.aid, args.yearAndMonth, args.caller);
        return result;
      }
    }

    public static class getAlbumVideosByAid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAlbumVideosByAid_args> {
      public getAlbumVideosByAid() {
        super("getAlbumVideosByAid");
      }

      public getAlbumVideosByAid_args getEmptyArgsInstance() {
        return new getAlbumVideosByAid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAlbumVideosByAid_result getResult(I iface, getAlbumVideosByAid_args args) throws org.apache.thrift.TException {
        getAlbumVideosByAid_result result = new getAlbumVideosByAid_result();
        result.success = iface.getAlbumVideosByAid(args.aid, args.page, args.caller);
        return result;
      }
    }

    public static class getTNewsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTNewsById_args> {
      public getTNewsById() {
        super("getTNewsById");
      }

      public getTNewsById_args getEmptyArgsInstance() {
        return new getTNewsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTNewsById_result getResult(I iface, getTNewsById_args args) throws org.apache.thrift.TException {
        getTNewsById_result result = new getTNewsById_result();
        result.success = iface.getTNewsById(args.id, args.caller);
        return result;
      }
    }

    public static class getTNewsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTNewsByIds_args> {
      public getTNewsByIds() {
        super("getTNewsByIds");
      }

      public getTNewsByIds_args getEmptyArgsInstance() {
        return new getTNewsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTNewsByIds_result getResult(I iface, getTNewsByIds_args args) throws org.apache.thrift.TException {
        getTNewsByIds_result result = new getTNewsByIds_result();
        result.success = iface.getTNewsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTNewsByVid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTNewsByVid_args> {
      public getTNewsByVid() {
        super("getTNewsByVid");
      }

      public getTNewsByVid_args getEmptyArgsInstance() {
        return new getTNewsByVid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTNewsByVid_result getResult(I iface, getTNewsByVid_args args) throws org.apache.thrift.TException {
        getTNewsByVid_result result = new getTNewsByVid_result();
        result.success = iface.getTNewsByVid(args.vid, args.caller);
        return result;
      }
    }

    public static class getNewsIdsByRelatedId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewsIdsByRelatedId_args> {
      public getNewsIdsByRelatedId() {
        super("getNewsIdsByRelatedId");
      }

      public getNewsIdsByRelatedId_args getEmptyArgsInstance() {
        return new getNewsIdsByRelatedId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewsIdsByRelatedId_result getResult(I iface, getNewsIdsByRelatedId_args args) throws org.apache.thrift.TException {
        getNewsIdsByRelatedId_result result = new getNewsIdsByRelatedId_result();
        result.success = iface.getNewsIdsByRelatedId(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class countNewsByRelatedId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countNewsByRelatedId_args> {
      public countNewsByRelatedId() {
        super("countNewsByRelatedId");
      }

      public countNewsByRelatedId_args getEmptyArgsInstance() {
        return new countNewsByRelatedId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countNewsByRelatedId_result getResult(I iface, countNewsByRelatedId_args args) throws org.apache.thrift.TException {
        countNewsByRelatedId_result result = new countNewsByRelatedId_result();
        result.success = iface.countNewsByRelatedId(args.p, args.caller);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getNewsIdsRelatedWithSomeNews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewsIdsRelatedWithSomeNews_args> {
      public getNewsIdsRelatedWithSomeNews() {
        super("getNewsIdsRelatedWithSomeNews");
      }

      public getNewsIdsRelatedWithSomeNews_args getEmptyArgsInstance() {
        return new getNewsIdsRelatedWithSomeNews_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewsIdsRelatedWithSomeNews_result getResult(I iface, getNewsIdsRelatedWithSomeNews_args args) throws org.apache.thrift.TException {
        getNewsIdsRelatedWithSomeNews_result result = new getNewsIdsRelatedWithSomeNews_result();
        result.success = iface.getNewsIdsRelatedWithSomeNews(args.newsId, args.types, args.page, args.caller);
        return result;
      }
    }

    public static class getNewsIdsNearbySomeNews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewsIdsNearbySomeNews_args> {
      public getNewsIdsNearbySomeNews() {
        super("getNewsIdsNearbySomeNews");
      }

      public getNewsIdsNearbySomeNews_args getEmptyArgsInstance() {
        return new getNewsIdsNearbySomeNews_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewsIdsNearbySomeNews_result getResult(I iface, getNewsIdsNearbySomeNews_args args) throws org.apache.thrift.TException {
        getNewsIdsNearbySomeNews_result result = new getNewsIdsNearbySomeNews_result();
        result.success = iface.getNewsIdsNearbySomeNews(args.newsId, args.type, args.caller);
        return result;
      }
    }

    public static class getTTopicById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTopicById_args> {
      public getTTopicById() {
        super("getTTopicById");
      }

      public getTTopicById_args getEmptyArgsInstance() {
        return new getTTopicById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTopicById_result getResult(I iface, getTTopicById_args args) throws org.apache.thrift.TException {
        getTTopicById_result result = new getTTopicById_result();
        result.success = iface.getTTopicById(args.id, args.caller);
        return result;
      }
    }

    public static class getTTopicsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTopicsByIds_args> {
      public getTTopicsByIds() {
        super("getTTopicsByIds");
      }

      public getTTopicsByIds_args getEmptyArgsInstance() {
        return new getTTopicsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTopicsByIds_result getResult(I iface, getTTopicsByIds_args args) throws org.apache.thrift.TException {
        getTTopicsByIds_result result = new getTTopicsByIds_result();
        result.success = iface.getTTopicsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTTopicItemPackageById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTopicItemPackageById_args> {
      public getTTopicItemPackageById() {
        super("getTTopicItemPackageById");
      }

      public getTTopicItemPackageById_args getEmptyArgsInstance() {
        return new getTTopicItemPackageById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTopicItemPackageById_result getResult(I iface, getTTopicItemPackageById_args args) throws org.apache.thrift.TException {
        getTTopicItemPackageById_result result = new getTTopicItemPackageById_result();
        result.success = iface.getTTopicItemPackageById(args.id, args.caller);
        return result;
      }
    }

    public static class getTTopicItemPackagesByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTopicItemPackagesByIds_args> {
      public getTTopicItemPackagesByIds() {
        super("getTTopicItemPackagesByIds");
      }

      public getTTopicItemPackagesByIds_args getEmptyArgsInstance() {
        return new getTTopicItemPackagesByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTopicItemPackagesByIds_result getResult(I iface, getTTopicItemPackagesByIds_args args) throws org.apache.thrift.TException {
        getTTopicItemPackagesByIds_result result = new getTTopicItemPackagesByIds_result();
        result.success = iface.getTTopicItemPackagesByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTopicItemPackageIdsByTopicId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopicItemPackageIdsByTopicId_args> {
      public getTopicItemPackageIdsByTopicId() {
        super("getTopicItemPackageIdsByTopicId");
      }

      public getTopicItemPackageIdsByTopicId_args getEmptyArgsInstance() {
        return new getTopicItemPackageIdsByTopicId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopicItemPackageIdsByTopicId_result getResult(I iface, getTopicItemPackageIdsByTopicId_args args) throws org.apache.thrift.TException {
        getTopicItemPackageIdsByTopicId_result result = new getTopicItemPackageIdsByTopicId_result();
        result.success = iface.getTopicItemPackageIdsByTopicId(args.topicId, args.caller);
        return result;
      }
    }

    public static class getTProgramAlbumById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTProgramAlbumById_args> {
      public getTProgramAlbumById() {
        super("getTProgramAlbumById");
      }

      public getTProgramAlbumById_args getEmptyArgsInstance() {
        return new getTProgramAlbumById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTProgramAlbumById_result getResult(I iface, getTProgramAlbumById_args args) throws org.apache.thrift.TException {
        getTProgramAlbumById_result result = new getTProgramAlbumById_result();
        result.success = iface.getTProgramAlbumById(args.id, args.caller);
        return result;
      }
    }

    public static class getTProgramAlbumsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTProgramAlbumsByIds_args> {
      public getTProgramAlbumsByIds() {
        super("getTProgramAlbumsByIds");
      }

      public getTProgramAlbumsByIds_args getEmptyArgsInstance() {
        return new getTProgramAlbumsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTProgramAlbumsByIds_result getResult(I iface, getTProgramAlbumsByIds_args args) throws org.apache.thrift.TException {
        getTProgramAlbumsByIds_result result = new getTProgramAlbumsByIds_result();
        result.success = iface.getTProgramAlbumsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTProgramAlbums<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTProgramAlbums_args> {
      public getTProgramAlbums() {
        super("getTProgramAlbums");
      }

      public getTProgramAlbums_args getEmptyArgsInstance() {
        return new getTProgramAlbums_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTProgramAlbums_result getResult(I iface, getTProgramAlbums_args args) throws org.apache.thrift.TException {
        getTProgramAlbums_result result = new getTProgramAlbums_result();
        result.success = iface.getTProgramAlbums(args.tagId, args.page, args.caller);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTVideoById", new getTVideoById());
      processMap.put("getTVideoByLeecoVid", new getTVideoByLeecoVid());
      processMap.put("getTVideoByIds", new getTVideoByIds());
      processMap.put("getVideoIdsByRelatedId", new getVideoIdsByRelatedId());
      processMap.put("countVideosByRelatedId", new countVideosByRelatedId());
      processMap.put("getLatestVideoIds", new getLatestVideoIds());
      processMap.put("getVideoIdsRelatedWithSomeVideo", new getVideoIdsRelatedWithSomeVideo());
      processMap.put("getIndexOfVideoInAlbum", new getIndexOfVideoInAlbum());
      processMap.put("getNonPositiveVideosByAid", new getNonPositiveVideosByAid());
      processMap.put("getTVideoInfoByRelatedIdAndType", new getTVideoInfoByRelatedIdAndType());
      processMap.put("getRecordVideosInAlbum", new getRecordVideosInAlbum());
      processMap.put("getFeatureVideosByYears", new getFeatureVideosByYears());
      processMap.put("getAlbumVideosByAid", new getAlbumVideosByAid());
      processMap.put("getTNewsById", new getTNewsById());
      processMap.put("getTNewsByIds", new getTNewsByIds());
      processMap.put("getTNewsByVid", new getTNewsByVid());
      processMap.put("getNewsIdsByRelatedId", new getNewsIdsByRelatedId());
      processMap.put("countNewsByRelatedId", new countNewsByRelatedId());
      processMap.put("getNewsIdsRelatedWithSomeNews", new getNewsIdsRelatedWithSomeNews());
      processMap.put("getNewsIdsNearbySomeNews", new getNewsIdsNearbySomeNews());
      processMap.put("getTTopicById", new getTTopicById());
      processMap.put("getTTopicsByIds", new getTTopicsByIds());
      processMap.put("getTTopicItemPackageById", new getTTopicItemPackageById());
      processMap.put("getTTopicItemPackagesByIds", new getTTopicItemPackagesByIds());
      processMap.put("getTopicItemPackageIdsByTopicId", new getTopicItemPackageIdsByTopicId());
      processMap.put("getTProgramAlbumById", new getTProgramAlbumById());
      processMap.put("getTProgramAlbumsByIds", new getTProgramAlbumsByIds());
      processMap.put("getTProgramAlbums", new getTProgramAlbums());
      return processMap;
    }

    public static class getTVideoById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTVideoById_args, com.lesports.qmt.sbc.api.dto.TVideo> {
      public getTVideoById() {
        super("getTVideoById");
      }

      public getTVideoById_args getEmptyArgsInstance() {
        return new getTVideoById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideo>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TVideo o) {
            getTVideoById_result result = new getTVideoById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTVideoById_result result = new getTVideoById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTVideoById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideo> resultHandler) throws TException {
        iface.getTVideoById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTVideoByLeecoVid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTVideoByLeecoVid_args, com.lesports.qmt.sbc.api.dto.TVideo> {
      public getTVideoByLeecoVid() {
        super("getTVideoByLeecoVid");
      }

      public getTVideoByLeecoVid_args getEmptyArgsInstance() {
        return new getTVideoByLeecoVid_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideo>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TVideo o) {
            getTVideoByLeecoVid_result result = new getTVideoByLeecoVid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTVideoByLeecoVid_result result = new getTVideoByLeecoVid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTVideoByLeecoVid_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideo> resultHandler) throws TException {
        iface.getTVideoByLeecoVid(args.leecoVid, args.caller,resultHandler);
      }
    }

    public static class getTVideoByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTVideoByIds_args, List<com.lesports.qmt.sbc.api.dto.TVideo>> {
      public getTVideoByIds() {
        super("getTVideoByIds");
      }

      public getTVideoByIds_args getEmptyArgsInstance() {
        return new getTVideoByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TVideo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TVideo>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TVideo> o) {
            getTVideoByIds_result result = new getTVideoByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTVideoByIds_result result = new getTVideoByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTVideoByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TVideo>> resultHandler) throws TException {
        iface.getTVideoByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getVideoIdsByRelatedId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVideoIdsByRelatedId_args, List<Long>> {
      public getVideoIdsByRelatedId() {
        super("getVideoIdsByRelatedId");
      }

      public getVideoIdsByRelatedId_args getEmptyArgsInstance() {
        return new getVideoIdsByRelatedId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getVideoIdsByRelatedId_result result = new getVideoIdsByRelatedId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVideoIdsByRelatedId_result result = new getVideoIdsByRelatedId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVideoIdsByRelatedId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getVideoIdsByRelatedId(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class countVideosByRelatedId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countVideosByRelatedId_args, Long> {
      public countVideosByRelatedId() {
        super("countVideosByRelatedId");
      }

      public countVideosByRelatedId_args getEmptyArgsInstance() {
        return new countVideosByRelatedId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            countVideosByRelatedId_result result = new countVideosByRelatedId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countVideosByRelatedId_result result = new countVideosByRelatedId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countVideosByRelatedId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.countVideosByRelatedId(args.p, args.caller,resultHandler);
      }
    }

    public static class getLatestVideoIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestVideoIds_args, List<Long>> {
      public getLatestVideoIds() {
        super("getLatestVideoIds");
      }

      public getLatestVideoIds_args getEmptyArgsInstance() {
        return new getLatestVideoIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getLatestVideoIds_result result = new getLatestVideoIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestVideoIds_result result = new getLatestVideoIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestVideoIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getLatestVideoIds(args.page, args.caller,resultHandler);
      }
    }

    public static class getVideoIdsRelatedWithSomeVideo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVideoIdsRelatedWithSomeVideo_args, List<Long>> {
      public getVideoIdsRelatedWithSomeVideo() {
        super("getVideoIdsRelatedWithSomeVideo");
      }

      public getVideoIdsRelatedWithSomeVideo_args getEmptyArgsInstance() {
        return new getVideoIdsRelatedWithSomeVideo_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getVideoIdsRelatedWithSomeVideo_result result = new getVideoIdsRelatedWithSomeVideo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVideoIdsRelatedWithSomeVideo_result result = new getVideoIdsRelatedWithSomeVideo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVideoIdsRelatedWithSomeVideo_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getVideoIdsRelatedWithSomeVideo(args.vid, args.page, args.caller,resultHandler);
      }
    }

    public static class getIndexOfVideoInAlbum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getIndexOfVideoInAlbum_args, com.lesports.qmt.sbc.api.dto.TVideoIndexInfo> {
      public getIndexOfVideoInAlbum() {
        super("getIndexOfVideoInAlbum");
      }

      public getIndexOfVideoInAlbum_args getEmptyArgsInstance() {
        return new getIndexOfVideoInAlbum_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideoIndexInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideoIndexInfo>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TVideoIndexInfo o) {
            getIndexOfVideoInAlbum_result result = new getIndexOfVideoInAlbum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getIndexOfVideoInAlbum_result result = new getIndexOfVideoInAlbum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getIndexOfVideoInAlbum_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideoIndexInfo> resultHandler) throws TException {
        iface.getIndexOfVideoInAlbum(args.vid, args.aid, args.caller,resultHandler);
      }
    }

    public static class getNonPositiveVideosByAid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNonPositiveVideosByAid_args, List<Long>> {
      public getNonPositiveVideosByAid() {
        super("getNonPositiveVideosByAid");
      }

      public getNonPositiveVideosByAid_args getEmptyArgsInstance() {
        return new getNonPositiveVideosByAid_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getNonPositiveVideosByAid_result result = new getNonPositiveVideosByAid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNonPositiveVideosByAid_result result = new getNonPositiveVideosByAid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNonPositiveVideosByAid_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getNonPositiveVideosByAid(args.aid, args.page, args.caller,resultHandler);
      }
    }

    public static class getTVideoInfoByRelatedIdAndType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTVideoInfoByRelatedIdAndType_args, com.lesports.qmt.sbc.api.dto.TVideoInfo> {
      public getTVideoInfoByRelatedIdAndType() {
        super("getTVideoInfoByRelatedIdAndType");
      }

      public getTVideoInfoByRelatedIdAndType_args getEmptyArgsInstance() {
        return new getTVideoInfoByRelatedIdAndType_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideoInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideoInfo>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TVideoInfo o) {
            getTVideoInfoByRelatedIdAndType_result result = new getTVideoInfoByRelatedIdAndType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTVideoInfoByRelatedIdAndType_result result = new getTVideoInfoByRelatedIdAndType_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTVideoInfoByRelatedIdAndType_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TVideoInfo> resultHandler) throws TException {
        iface.getTVideoInfoByRelatedIdAndType(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getRecordVideosInAlbum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecordVideosInAlbum_args, List<com.lesports.qmt.sbc.api.dto.TVideo>> {
      public getRecordVideosInAlbum() {
        super("getRecordVideosInAlbum");
      }

      public getRecordVideosInAlbum_args getEmptyArgsInstance() {
        return new getRecordVideosInAlbum_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TVideo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TVideo>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TVideo> o) {
            getRecordVideosInAlbum_result result = new getRecordVideosInAlbum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecordVideosInAlbum_result result = new getRecordVideosInAlbum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecordVideosInAlbum_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TVideo>> resultHandler) throws TException {
        iface.getRecordVideosInAlbum(args.aid, args.page, args.caller,resultHandler);
      }
    }

    public static class getFeatureVideosByYears<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFeatureVideosByYears_args, com.lesports.qmt.sbc.api.dto.TFeatureInfo> {
      public getFeatureVideosByYears() {
        super("getFeatureVideosByYears");
      }

      public getFeatureVideosByYears_args getEmptyArgsInstance() {
        return new getFeatureVideosByYears_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TFeatureInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TFeatureInfo>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TFeatureInfo o) {
            getFeatureVideosByYears_result result = new getFeatureVideosByYears_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFeatureVideosByYears_result result = new getFeatureVideosByYears_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFeatureVideosByYears_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TFeatureInfo> resultHandler) throws TException {
        iface.getFeatureVideosByYears(args.aid, args.yearAndMonth, args.caller,resultHandler);
      }
    }

    public static class getAlbumVideosByAid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAlbumVideosByAid_args, List<Long>> {
      public getAlbumVideosByAid() {
        super("getAlbumVideosByAid");
      }

      public getAlbumVideosByAid_args getEmptyArgsInstance() {
        return new getAlbumVideosByAid_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getAlbumVideosByAid_result result = new getAlbumVideosByAid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAlbumVideosByAid_result result = new getAlbumVideosByAid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAlbumVideosByAid_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getAlbumVideosByAid(args.aid, args.page, args.caller,resultHandler);
      }
    }

    public static class getTNewsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTNewsById_args, com.lesports.qmt.sbc.api.dto.TNews> {
      public getTNewsById() {
        super("getTNewsById");
      }

      public getTNewsById_args getEmptyArgsInstance() {
        return new getTNewsById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TNews> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TNews>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TNews o) {
            getTNewsById_result result = new getTNewsById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTNewsById_result result = new getTNewsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTNewsById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TNews> resultHandler) throws TException {
        iface.getTNewsById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTNewsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTNewsByIds_args, List<com.lesports.qmt.sbc.api.dto.TNews>> {
      public getTNewsByIds() {
        super("getTNewsByIds");
      }

      public getTNewsByIds_args getEmptyArgsInstance() {
        return new getTNewsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TNews>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TNews>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TNews> o) {
            getTNewsByIds_result result = new getTNewsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTNewsByIds_result result = new getTNewsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTNewsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TNews>> resultHandler) throws TException {
        iface.getTNewsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTNewsByVid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTNewsByVid_args, com.lesports.qmt.sbc.api.dto.TNews> {
      public getTNewsByVid() {
        super("getTNewsByVid");
      }

      public getTNewsByVid_args getEmptyArgsInstance() {
        return new getTNewsByVid_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TNews> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TNews>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TNews o) {
            getTNewsByVid_result result = new getTNewsByVid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTNewsByVid_result result = new getTNewsByVid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTNewsByVid_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TNews> resultHandler) throws TException {
        iface.getTNewsByVid(args.vid, args.caller,resultHandler);
      }
    }

    public static class getNewsIdsByRelatedId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewsIdsByRelatedId_args, List<Long>> {
      public getNewsIdsByRelatedId() {
        super("getNewsIdsByRelatedId");
      }

      public getNewsIdsByRelatedId_args getEmptyArgsInstance() {
        return new getNewsIdsByRelatedId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getNewsIdsByRelatedId_result result = new getNewsIdsByRelatedId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewsIdsByRelatedId_result result = new getNewsIdsByRelatedId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewsIdsByRelatedId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getNewsIdsByRelatedId(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class countNewsByRelatedId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countNewsByRelatedId_args, Long> {
      public countNewsByRelatedId() {
        super("countNewsByRelatedId");
      }

      public countNewsByRelatedId_args getEmptyArgsInstance() {
        return new countNewsByRelatedId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            countNewsByRelatedId_result result = new countNewsByRelatedId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countNewsByRelatedId_result result = new countNewsByRelatedId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countNewsByRelatedId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.countNewsByRelatedId(args.p, args.caller,resultHandler);
      }
    }

    public static class getNewsIdsRelatedWithSomeNews<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewsIdsRelatedWithSomeNews_args, List<Long>> {
      public getNewsIdsRelatedWithSomeNews() {
        super("getNewsIdsRelatedWithSomeNews");
      }

      public getNewsIdsRelatedWithSomeNews_args getEmptyArgsInstance() {
        return new getNewsIdsRelatedWithSomeNews_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getNewsIdsRelatedWithSomeNews_result result = new getNewsIdsRelatedWithSomeNews_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewsIdsRelatedWithSomeNews_result result = new getNewsIdsRelatedWithSomeNews_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewsIdsRelatedWithSomeNews_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getNewsIdsRelatedWithSomeNews(args.newsId, args.types, args.page, args.caller,resultHandler);
      }
    }

    public static class getNewsIdsNearbySomeNews<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewsIdsNearbySomeNews_args, Map<String,Long>> {
      public getNewsIdsNearbySomeNews() {
        super("getNewsIdsNearbySomeNews");
      }

      public getNewsIdsNearbySomeNews_args getEmptyArgsInstance() {
        return new getNewsIdsNearbySomeNews_args();
      }

      public AsyncMethodCallback<Map<String,Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Long>>() { 
          public void onComplete(Map<String,Long> o) {
            getNewsIdsNearbySomeNews_result result = new getNewsIdsNearbySomeNews_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewsIdsNearbySomeNews_result result = new getNewsIdsNearbySomeNews_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewsIdsNearbySomeNews_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Long>> resultHandler) throws TException {
        iface.getNewsIdsNearbySomeNews(args.newsId, args.type, args.caller,resultHandler);
      }
    }

    public static class getTTopicById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTopicById_args, com.lesports.qmt.sbc.api.dto.TTopic> {
      public getTTopicById() {
        super("getTTopicById");
      }

      public getTTopicById_args getEmptyArgsInstance() {
        return new getTTopicById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TTopic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TTopic>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TTopic o) {
            getTTopicById_result result = new getTTopicById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTopicById_result result = new getTTopicById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTopicById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TTopic> resultHandler) throws TException {
        iface.getTTopicById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTTopicsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTopicsByIds_args, List<com.lesports.qmt.sbc.api.dto.TTopic>> {
      public getTTopicsByIds() {
        super("getTTopicsByIds");
      }

      public getTTopicsByIds_args getEmptyArgsInstance() {
        return new getTTopicsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TTopic>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TTopic>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TTopic> o) {
            getTTopicsByIds_result result = new getTTopicsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTopicsByIds_result result = new getTTopicsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTopicsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TTopic>> resultHandler) throws TException {
        iface.getTTopicsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTTopicItemPackageById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTopicItemPackageById_args, com.lesports.qmt.sbc.api.dto.TTopicItemPackage> {
      public getTTopicItemPackageById() {
        super("getTTopicItemPackageById");
      }

      public getTTopicItemPackageById_args getEmptyArgsInstance() {
        return new getTTopicItemPackageById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TTopicItemPackage o) {
            getTTopicItemPackageById_result result = new getTTopicItemPackageById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTopicItemPackageById_result result = new getTTopicItemPackageById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTopicItemPackageById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> resultHandler) throws TException {
        iface.getTTopicItemPackageById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTTopicItemPackagesByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTopicItemPackagesByIds_args, List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>> {
      public getTTopicItemPackagesByIds() {
        super("getTTopicItemPackagesByIds");
      }

      public getTTopicItemPackagesByIds_args getEmptyArgsInstance() {
        return new getTTopicItemPackagesByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> o) {
            getTTopicItemPackagesByIds_result result = new getTTopicItemPackagesByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTopicItemPackagesByIds_result result = new getTTopicItemPackagesByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTopicItemPackagesByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>> resultHandler) throws TException {
        iface.getTTopicItemPackagesByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTopicItemPackageIdsByTopicId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopicItemPackageIdsByTopicId_args, List<Long>> {
      public getTopicItemPackageIdsByTopicId() {
        super("getTopicItemPackageIdsByTopicId");
      }

      public getTopicItemPackageIdsByTopicId_args getEmptyArgsInstance() {
        return new getTopicItemPackageIdsByTopicId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTopicItemPackageIdsByTopicId_result result = new getTopicItemPackageIdsByTopicId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopicItemPackageIdsByTopicId_result result = new getTopicItemPackageIdsByTopicId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopicItemPackageIdsByTopicId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTopicItemPackageIdsByTopicId(args.topicId, args.caller,resultHandler);
      }
    }

    public static class getTProgramAlbumById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTProgramAlbumById_args, com.lesports.qmt.sbc.api.dto.TProgramAlbum> {
      public getTProgramAlbumById() {
        super("getTProgramAlbumById");
      }

      public getTProgramAlbumById_args getEmptyArgsInstance() {
        return new getTProgramAlbumById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TProgramAlbum> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TProgramAlbum>() { 
          public void onComplete(com.lesports.qmt.sbc.api.dto.TProgramAlbum o) {
            getTProgramAlbumById_result result = new getTProgramAlbumById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTProgramAlbumById_result result = new getTProgramAlbumById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTProgramAlbumById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbc.api.dto.TProgramAlbum> resultHandler) throws TException {
        iface.getTProgramAlbumById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTProgramAlbumsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTProgramAlbumsByIds_args, List<com.lesports.qmt.sbc.api.dto.TProgramAlbum>> {
      public getTProgramAlbumsByIds() {
        super("getTProgramAlbumsByIds");
      }

      public getTProgramAlbumsByIds_args getEmptyArgsInstance() {
        return new getTProgramAlbumsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TProgramAlbum>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TProgramAlbum>>() { 
          public void onComplete(List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> o) {
            getTProgramAlbumsByIds_result result = new getTProgramAlbumsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTProgramAlbumsByIds_result result = new getTProgramAlbumsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTProgramAlbumsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbc.api.dto.TProgramAlbum>> resultHandler) throws TException {
        iface.getTProgramAlbumsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTProgramAlbums<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTProgramAlbums_args, List<Long>> {
      public getTProgramAlbums() {
        super("getTProgramAlbums");
      }

      public getTProgramAlbums_args getEmptyArgsInstance() {
        return new getTProgramAlbums_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTProgramAlbums_result result = new getTProgramAlbums_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTProgramAlbums_result result = new getTProgramAlbums_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTProgramAlbums_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTProgramAlbums(args.tagId, args.page, args.caller,resultHandler);
      }
    }

  }

  public static class getTVideoById_args implements org.apache.thrift.TBase<getTVideoById_args, getTVideoById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoById_args.class, metaDataMap);
    }

    public getTVideoById_args() {
    }

    public getTVideoById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoById_args(getTVideoById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTVideoById_args deepCopy() {
      return new getTVideoById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoById_args)
        return this.equals((getTVideoById_args)that);
      return false;
    }

    public boolean equals(getTVideoById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoById_argsStandardSchemeFactory implements SchemeFactory {
      public getTVideoById_argsStandardScheme getScheme() {
        return new getTVideoById_argsStandardScheme();
      }
    }

    private static class getTVideoById_argsStandardScheme extends StandardScheme<getTVideoById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoById_argsTupleSchemeFactory implements SchemeFactory {
      public getTVideoById_argsTupleScheme getScheme() {
        return new getTVideoById_argsTupleScheme();
      }
    }

    private static class getTVideoById_argsTupleScheme extends TupleScheme<getTVideoById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTVideoById_result implements org.apache.thrift.TBase<getTVideoById_result, getTVideoById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TVideo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TVideo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoById_result.class, metaDataMap);
    }

    public getTVideoById_result() {
    }

    public getTVideoById_result(
      com.lesports.qmt.sbc.api.dto.TVideo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoById_result(getTVideoById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TVideo(other.success);
      }
    }

    public getTVideoById_result deepCopy() {
      return new getTVideoById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TVideo getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TVideo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TVideo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoById_result)
        return this.equals((getTVideoById_result)that);
      return false;
    }

    public boolean equals(getTVideoById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoById_resultStandardSchemeFactory implements SchemeFactory {
      public getTVideoById_resultStandardScheme getScheme() {
        return new getTVideoById_resultStandardScheme();
      }
    }

    private static class getTVideoById_resultStandardScheme extends StandardScheme<getTVideoById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TVideo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoById_resultTupleSchemeFactory implements SchemeFactory {
      public getTVideoById_resultTupleScheme getScheme() {
        return new getTVideoById_resultTupleScheme();
      }
    }

    private static class getTVideoById_resultTupleScheme extends TupleScheme<getTVideoById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TVideo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTVideoByLeecoVid_args implements org.apache.thrift.TBase<getTVideoByLeecoVid_args, getTVideoByLeecoVid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoByLeecoVid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoByLeecoVid_args");

    private static final org.apache.thrift.protocol.TField LEECO_VID_FIELD_DESC = new org.apache.thrift.protocol.TField("leecoVid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoByLeecoVid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoByLeecoVid_argsTupleSchemeFactory());
    }

    private long leecoVid; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEECO_VID((short)1, "leecoVid"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEECO_VID
            return LEECO_VID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LEECOVID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEECO_VID, new org.apache.thrift.meta_data.FieldMetaData("leecoVid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoByLeecoVid_args.class, metaDataMap);
    }

    public getTVideoByLeecoVid_args() {
    }

    public getTVideoByLeecoVid_args(
      long leecoVid,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.leecoVid = leecoVid;
      setLeecoVidIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoByLeecoVid_args(getTVideoByLeecoVid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.leecoVid = other.leecoVid;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTVideoByLeecoVid_args deepCopy() {
      return new getTVideoByLeecoVid_args(this);
    }

    @Override
    public void clear() {
      setLeecoVidIsSet(false);
      this.leecoVid = 0;
      this.caller = null;
    }

    public long getLeecoVid() {
      return this.leecoVid;
    }

    public void setLeecoVid(long leecoVid) {
      this.leecoVid = leecoVid;
      setLeecoVidIsSet(true);
    }

    public void unsetLeecoVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEECOVID_ISSET_ID);
    }

    /** Returns true if field leecoVid is set (has been assigned a value) and false otherwise */
    public boolean isSetLeecoVid() {
      return EncodingUtils.testBit(__isset_bitfield, __LEECOVID_ISSET_ID);
    }

    public void setLeecoVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEECOVID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LEECO_VID:
        if (value == null) {
          unsetLeecoVid();
        } else {
          setLeecoVid((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LEECO_VID:
        return Long.valueOf(getLeecoVid());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LEECO_VID:
        return isSetLeecoVid();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoByLeecoVid_args)
        return this.equals((getTVideoByLeecoVid_args)that);
      return false;
    }

    public boolean equals(getTVideoByLeecoVid_args that) {
      if (that == null)
        return false;

      boolean this_present_leecoVid = true;
      boolean that_present_leecoVid = true;
      if (this_present_leecoVid || that_present_leecoVid) {
        if (!(this_present_leecoVid && that_present_leecoVid))
          return false;
        if (this.leecoVid != that.leecoVid)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_leecoVid = true;
      list.add(present_leecoVid);
      if (present_leecoVid)
        list.add(leecoVid);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoByLeecoVid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLeecoVid()).compareTo(other.isSetLeecoVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeecoVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leecoVid, other.leecoVid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoByLeecoVid_args(");
      boolean first = true;

      sb.append("leecoVid:");
      sb.append(this.leecoVid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoByLeecoVid_argsStandardSchemeFactory implements SchemeFactory {
      public getTVideoByLeecoVid_argsStandardScheme getScheme() {
        return new getTVideoByLeecoVid_argsStandardScheme();
      }
    }

    private static class getTVideoByLeecoVid_argsStandardScheme extends StandardScheme<getTVideoByLeecoVid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoByLeecoVid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LEECO_VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.leecoVid = iprot.readI64();
                struct.setLeecoVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoByLeecoVid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LEECO_VID_FIELD_DESC);
        oprot.writeI64(struct.leecoVid);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoByLeecoVid_argsTupleSchemeFactory implements SchemeFactory {
      public getTVideoByLeecoVid_argsTupleScheme getScheme() {
        return new getTVideoByLeecoVid_argsTupleScheme();
      }
    }

    private static class getTVideoByLeecoVid_argsTupleScheme extends TupleScheme<getTVideoByLeecoVid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoByLeecoVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLeecoVid()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLeecoVid()) {
          oprot.writeI64(struct.leecoVid);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoByLeecoVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.leecoVid = iprot.readI64();
          struct.setLeecoVidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTVideoByLeecoVid_result implements org.apache.thrift.TBase<getTVideoByLeecoVid_result, getTVideoByLeecoVid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoByLeecoVid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoByLeecoVid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoByLeecoVid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoByLeecoVid_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TVideo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TVideo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoByLeecoVid_result.class, metaDataMap);
    }

    public getTVideoByLeecoVid_result() {
    }

    public getTVideoByLeecoVid_result(
      com.lesports.qmt.sbc.api.dto.TVideo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoByLeecoVid_result(getTVideoByLeecoVid_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TVideo(other.success);
      }
    }

    public getTVideoByLeecoVid_result deepCopy() {
      return new getTVideoByLeecoVid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TVideo getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TVideo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TVideo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoByLeecoVid_result)
        return this.equals((getTVideoByLeecoVid_result)that);
      return false;
    }

    public boolean equals(getTVideoByLeecoVid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoByLeecoVid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoByLeecoVid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoByLeecoVid_resultStandardSchemeFactory implements SchemeFactory {
      public getTVideoByLeecoVid_resultStandardScheme getScheme() {
        return new getTVideoByLeecoVid_resultStandardScheme();
      }
    }

    private static class getTVideoByLeecoVid_resultStandardScheme extends StandardScheme<getTVideoByLeecoVid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoByLeecoVid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TVideo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoByLeecoVid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoByLeecoVid_resultTupleSchemeFactory implements SchemeFactory {
      public getTVideoByLeecoVid_resultTupleScheme getScheme() {
        return new getTVideoByLeecoVid_resultTupleScheme();
      }
    }

    private static class getTVideoByLeecoVid_resultTupleScheme extends TupleScheme<getTVideoByLeecoVid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoByLeecoVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoByLeecoVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TVideo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTVideoByIds_args implements org.apache.thrift.TBase<getTVideoByIds_args, getTVideoByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoByIds_args.class, metaDataMap);
    }

    public getTVideoByIds_args() {
    }

    public getTVideoByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoByIds_args(getTVideoByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTVideoByIds_args deepCopy() {
      return new getTVideoByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoByIds_args)
        return this.equals((getTVideoByIds_args)that);
      return false;
    }

    public boolean equals(getTVideoByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTVideoByIds_argsStandardScheme getScheme() {
        return new getTVideoByIds_argsStandardScheme();
      }
    }

    private static class getTVideoByIds_argsStandardScheme extends StandardScheme<getTVideoByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list64.size);
                  long _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readI64();
                    struct.ids.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter67 : struct.ids)
            {
              oprot.writeI64(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTVideoByIds_argsTupleScheme getScheme() {
        return new getTVideoByIds_argsTupleScheme();
      }
    }

    private static class getTVideoByIds_argsTupleScheme extends TupleScheme<getTVideoByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter68 : struct.ids)
            {
              oprot.writeI64(_iter68);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list69.size);
            long _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readI64();
              struct.ids.add(_elem70);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTVideoByIds_result implements org.apache.thrift.TBase<getTVideoByIds_result, getTVideoByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TVideo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TVideo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoByIds_result.class, metaDataMap);
    }

    public getTVideoByIds_result() {
    }

    public getTVideoByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TVideo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoByIds_result(getTVideoByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TVideo> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TVideo other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TVideo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTVideoByIds_result deepCopy() {
      return new getTVideoByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TVideo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TVideo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TVideo> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TVideo> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TVideo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoByIds_result)
        return this.equals((getTVideoByIds_result)that);
      return false;
    }

    public boolean equals(getTVideoByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTVideoByIds_resultStandardScheme getScheme() {
        return new getTVideoByIds_resultStandardScheme();
      }
    }

    private static class getTVideoByIds_resultStandardScheme extends StandardScheme<getTVideoByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>(_list72.size);
                  com.lesports.qmt.sbc.api.dto.TVideo _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new com.lesports.qmt.sbc.api.dto.TVideo();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TVideo _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTVideoByIds_resultTupleScheme getScheme() {
        return new getTVideoByIds_resultTupleScheme();
      }
    }

    private static class getTVideoByIds_resultTupleScheme extends TupleScheme<getTVideoByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TVideo _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>(_list77.size);
            com.lesports.qmt.sbc.api.dto.TVideo _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new com.lesports.qmt.sbc.api.dto.TVideo();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVideoIdsByRelatedId_args implements org.apache.thrift.TBase<getVideoIdsByRelatedId_args, getVideoIdsByRelatedId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVideoIdsByRelatedId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVideoIdsByRelatedId_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVideoIdsByRelatedId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVideoIdsByRelatedId_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetRelatedVideosParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVideoIdsByRelatedId_args.class, metaDataMap);
    }

    public getVideoIdsByRelatedId_args() {
    }

    public getVideoIdsByRelatedId_args(
      com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVideoIdsByRelatedId_args(getVideoIdsByRelatedId_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getVideoIdsByRelatedId_args deepCopy() {
      return new getVideoIdsByRelatedId_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetRelatedVideosParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetRelatedVideosParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVideoIdsByRelatedId_args)
        return this.equals((getVideoIdsByRelatedId_args)that);
      return false;
    }

    public boolean equals(getVideoIdsByRelatedId_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVideoIdsByRelatedId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVideoIdsByRelatedId_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVideoIdsByRelatedId_argsStandardSchemeFactory implements SchemeFactory {
      public getVideoIdsByRelatedId_argsStandardScheme getScheme() {
        return new getVideoIdsByRelatedId_argsStandardScheme();
      }
    }

    private static class getVideoIdsByRelatedId_argsStandardScheme extends StandardScheme<getVideoIdsByRelatedId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVideoIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVideoIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVideoIdsByRelatedId_argsTupleSchemeFactory implements SchemeFactory {
      public getVideoIdsByRelatedId_argsTupleScheme getScheme() {
        return new getVideoIdsByRelatedId_argsTupleScheme();
      }
    }

    private static class getVideoIdsByRelatedId_argsTupleScheme extends TupleScheme<getVideoIdsByRelatedId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVideoIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVideoIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getVideoIdsByRelatedId_result implements org.apache.thrift.TBase<getVideoIdsByRelatedId_result, getVideoIdsByRelatedId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVideoIdsByRelatedId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVideoIdsByRelatedId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVideoIdsByRelatedId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVideoIdsByRelatedId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVideoIdsByRelatedId_result.class, metaDataMap);
    }

    public getVideoIdsByRelatedId_result() {
    }

    public getVideoIdsByRelatedId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVideoIdsByRelatedId_result(getVideoIdsByRelatedId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getVideoIdsByRelatedId_result deepCopy() {
      return new getVideoIdsByRelatedId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVideoIdsByRelatedId_result)
        return this.equals((getVideoIdsByRelatedId_result)that);
      return false;
    }

    public boolean equals(getVideoIdsByRelatedId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVideoIdsByRelatedId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVideoIdsByRelatedId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVideoIdsByRelatedId_resultStandardSchemeFactory implements SchemeFactory {
      public getVideoIdsByRelatedId_resultStandardScheme getScheme() {
        return new getVideoIdsByRelatedId_resultStandardScheme();
      }
    }

    private static class getVideoIdsByRelatedId_resultStandardScheme extends StandardScheme<getVideoIdsByRelatedId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVideoIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list80.size);
                  long _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readI64();
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVideoIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter83 : struct.success)
            {
              oprot.writeI64(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVideoIdsByRelatedId_resultTupleSchemeFactory implements SchemeFactory {
      public getVideoIdsByRelatedId_resultTupleScheme getScheme() {
        return new getVideoIdsByRelatedId_resultTupleScheme();
      }
    }

    private static class getVideoIdsByRelatedId_resultTupleScheme extends TupleScheme<getVideoIdsByRelatedId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVideoIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter84 : struct.success)
            {
              oprot.writeI64(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVideoIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list85.size);
            long _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = iprot.readI64();
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countVideosByRelatedId_args implements org.apache.thrift.TBase<countVideosByRelatedId_args, countVideosByRelatedId_args._Fields>, java.io.Serializable, Cloneable, Comparable<countVideosByRelatedId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countVideosByRelatedId_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countVideosByRelatedId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countVideosByRelatedId_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetRelatedVideosParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countVideosByRelatedId_args.class, metaDataMap);
    }

    public countVideosByRelatedId_args() {
    }

    public countVideosByRelatedId_args(
      com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countVideosByRelatedId_args(countVideosByRelatedId_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public countVideosByRelatedId_args deepCopy() {
      return new countVideosByRelatedId_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetRelatedVideosParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetRelatedVideosParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countVideosByRelatedId_args)
        return this.equals((countVideosByRelatedId_args)that);
      return false;
    }

    public boolean equals(countVideosByRelatedId_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(countVideosByRelatedId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countVideosByRelatedId_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countVideosByRelatedId_argsStandardSchemeFactory implements SchemeFactory {
      public countVideosByRelatedId_argsStandardScheme getScheme() {
        return new countVideosByRelatedId_argsStandardScheme();
      }
    }

    private static class countVideosByRelatedId_argsStandardScheme extends StandardScheme<countVideosByRelatedId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countVideosByRelatedId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countVideosByRelatedId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countVideosByRelatedId_argsTupleSchemeFactory implements SchemeFactory {
      public countVideosByRelatedId_argsTupleScheme getScheme() {
        return new countVideosByRelatedId_argsTupleScheme();
      }
    }

    private static class countVideosByRelatedId_argsTupleScheme extends TupleScheme<countVideosByRelatedId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countVideosByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countVideosByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class countVideosByRelatedId_result implements org.apache.thrift.TBase<countVideosByRelatedId_result, countVideosByRelatedId_result._Fields>, java.io.Serializable, Cloneable, Comparable<countVideosByRelatedId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countVideosByRelatedId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countVideosByRelatedId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countVideosByRelatedId_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countVideosByRelatedId_result.class, metaDataMap);
    }

    public countVideosByRelatedId_result() {
    }

    public countVideosByRelatedId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countVideosByRelatedId_result(countVideosByRelatedId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countVideosByRelatedId_result deepCopy() {
      return new countVideosByRelatedId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countVideosByRelatedId_result)
        return this.equals((countVideosByRelatedId_result)that);
      return false;
    }

    public boolean equals(countVideosByRelatedId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countVideosByRelatedId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countVideosByRelatedId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countVideosByRelatedId_resultStandardSchemeFactory implements SchemeFactory {
      public countVideosByRelatedId_resultStandardScheme getScheme() {
        return new countVideosByRelatedId_resultStandardScheme();
      }
    }

    private static class countVideosByRelatedId_resultStandardScheme extends StandardScheme<countVideosByRelatedId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countVideosByRelatedId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countVideosByRelatedId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countVideosByRelatedId_resultTupleSchemeFactory implements SchemeFactory {
      public countVideosByRelatedId_resultTupleScheme getScheme() {
        return new countVideosByRelatedId_resultTupleScheme();
      }
    }

    private static class countVideosByRelatedId_resultTupleScheme extends TupleScheme<countVideosByRelatedId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countVideosByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countVideosByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLatestVideoIds_args implements org.apache.thrift.TBase<getLatestVideoIds_args, getLatestVideoIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestVideoIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestVideoIds_args");

    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestVideoIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestVideoIds_argsTupleSchemeFactory());
    }

    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGE((short)1, "page"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGE
            return PAGE;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestVideoIds_args.class, metaDataMap);
    }

    public getLatestVideoIds_args() {
    }

    public getLatestVideoIds_args(
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestVideoIds_args(getLatestVideoIds_args other) {
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getLatestVideoIds_args deepCopy() {
      return new getLatestVideoIds_args(this);
    }

    @Override
    public void clear() {
      this.page = null;
      this.caller = null;
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestVideoIds_args)
        return this.equals((getLatestVideoIds_args)that);
      return false;
    }

    public boolean equals(getLatestVideoIds_args that) {
      if (that == null)
        return false;

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLatestVideoIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestVideoIds_args(");
      boolean first = true;

      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestVideoIds_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestVideoIds_argsStandardScheme getScheme() {
        return new getLatestVideoIds_argsStandardScheme();
      }
    }

    private static class getLatestVideoIds_argsStandardScheme extends StandardScheme<getLatestVideoIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestVideoIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestVideoIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestVideoIds_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestVideoIds_argsTupleScheme getScheme() {
        return new getLatestVideoIds_argsTupleScheme();
      }
    }

    private static class getLatestVideoIds_argsTupleScheme extends TupleScheme<getLatestVideoIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestVideoIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPage()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestVideoIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getLatestVideoIds_result implements org.apache.thrift.TBase<getLatestVideoIds_result, getLatestVideoIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestVideoIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestVideoIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestVideoIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestVideoIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestVideoIds_result.class, metaDataMap);
    }

    public getLatestVideoIds_result() {
    }

    public getLatestVideoIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestVideoIds_result(getLatestVideoIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getLatestVideoIds_result deepCopy() {
      return new getLatestVideoIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestVideoIds_result)
        return this.equals((getLatestVideoIds_result)that);
      return false;
    }

    public boolean equals(getLatestVideoIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLatestVideoIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestVideoIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestVideoIds_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestVideoIds_resultStandardScheme getScheme() {
        return new getLatestVideoIds_resultStandardScheme();
      }
    }

    private static class getLatestVideoIds_resultStandardScheme extends StandardScheme<getLatestVideoIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestVideoIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list88.size);
                  long _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI64();
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestVideoIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter91 : struct.success)
            {
              oprot.writeI64(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestVideoIds_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestVideoIds_resultTupleScheme getScheme() {
        return new getLatestVideoIds_resultTupleScheme();
      }
    }

    private static class getLatestVideoIds_resultTupleScheme extends TupleScheme<getLatestVideoIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestVideoIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter92 : struct.success)
            {
              oprot.writeI64(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestVideoIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list93.size);
            long _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readI64();
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVideoIdsRelatedWithSomeVideo_args implements org.apache.thrift.TBase<getVideoIdsRelatedWithSomeVideo_args, getVideoIdsRelatedWithSomeVideo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVideoIdsRelatedWithSomeVideo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVideoIdsRelatedWithSomeVideo_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVideoIdsRelatedWithSomeVideo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVideoIdsRelatedWithSomeVideo_argsTupleSchemeFactory());
    }

    private long vid; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVideoIdsRelatedWithSomeVideo_args.class, metaDataMap);
    }

    public getVideoIdsRelatedWithSomeVideo_args() {
    }

    public getVideoIdsRelatedWithSomeVideo_args(
      long vid,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVideoIdsRelatedWithSomeVideo_args(getVideoIdsRelatedWithSomeVideo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getVideoIdsRelatedWithSomeVideo_args deepCopy() {
      return new getVideoIdsRelatedWithSomeVideo_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
      this.page = null;
      this.caller = null;
    }

    public long getVid() {
      return this.vid;
    }

    public void setVid(long vid) {
      this.vid = vid;
      setVidIsSet(true);
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Long.valueOf(getVid());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVideoIdsRelatedWithSomeVideo_args)
        return this.equals((getVideoIdsRelatedWithSomeVideo_args)that);
      return false;
    }

    public boolean equals(getVideoIdsRelatedWithSomeVideo_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVideoIdsRelatedWithSomeVideo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVideoIdsRelatedWithSomeVideo_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVideoIdsRelatedWithSomeVideo_argsStandardSchemeFactory implements SchemeFactory {
      public getVideoIdsRelatedWithSomeVideo_argsStandardScheme getScheme() {
        return new getVideoIdsRelatedWithSomeVideo_argsStandardScheme();
      }
    }

    private static class getVideoIdsRelatedWithSomeVideo_argsStandardScheme extends StandardScheme<getVideoIdsRelatedWithSomeVideo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVideoIdsRelatedWithSomeVideo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.vid = iprot.readI64();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVideoIdsRelatedWithSomeVideo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVideoIdsRelatedWithSomeVideo_argsTupleSchemeFactory implements SchemeFactory {
      public getVideoIdsRelatedWithSomeVideo_argsTupleScheme getScheme() {
        return new getVideoIdsRelatedWithSomeVideo_argsTupleScheme();
      }
    }

    private static class getVideoIdsRelatedWithSomeVideo_argsTupleScheme extends TupleScheme<getVideoIdsRelatedWithSomeVideo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVideoIdsRelatedWithSomeVideo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVid()) {
          oprot.writeI64(struct.vid);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVideoIdsRelatedWithSomeVideo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vid = iprot.readI64();
          struct.setVidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getVideoIdsRelatedWithSomeVideo_result implements org.apache.thrift.TBase<getVideoIdsRelatedWithSomeVideo_result, getVideoIdsRelatedWithSomeVideo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVideoIdsRelatedWithSomeVideo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVideoIdsRelatedWithSomeVideo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVideoIdsRelatedWithSomeVideo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVideoIdsRelatedWithSomeVideo_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVideoIdsRelatedWithSomeVideo_result.class, metaDataMap);
    }

    public getVideoIdsRelatedWithSomeVideo_result() {
    }

    public getVideoIdsRelatedWithSomeVideo_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVideoIdsRelatedWithSomeVideo_result(getVideoIdsRelatedWithSomeVideo_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getVideoIdsRelatedWithSomeVideo_result deepCopy() {
      return new getVideoIdsRelatedWithSomeVideo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVideoIdsRelatedWithSomeVideo_result)
        return this.equals((getVideoIdsRelatedWithSomeVideo_result)that);
      return false;
    }

    public boolean equals(getVideoIdsRelatedWithSomeVideo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getVideoIdsRelatedWithSomeVideo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVideoIdsRelatedWithSomeVideo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVideoIdsRelatedWithSomeVideo_resultStandardSchemeFactory implements SchemeFactory {
      public getVideoIdsRelatedWithSomeVideo_resultStandardScheme getScheme() {
        return new getVideoIdsRelatedWithSomeVideo_resultStandardScheme();
      }
    }

    private static class getVideoIdsRelatedWithSomeVideo_resultStandardScheme extends StandardScheme<getVideoIdsRelatedWithSomeVideo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVideoIdsRelatedWithSomeVideo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list96.size);
                  long _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readI64();
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVideoIdsRelatedWithSomeVideo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter99 : struct.success)
            {
              oprot.writeI64(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVideoIdsRelatedWithSomeVideo_resultTupleSchemeFactory implements SchemeFactory {
      public getVideoIdsRelatedWithSomeVideo_resultTupleScheme getScheme() {
        return new getVideoIdsRelatedWithSomeVideo_resultTupleScheme();
      }
    }

    private static class getVideoIdsRelatedWithSomeVideo_resultTupleScheme extends TupleScheme<getVideoIdsRelatedWithSomeVideo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVideoIdsRelatedWithSomeVideo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter100 : struct.success)
            {
              oprot.writeI64(_iter100);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVideoIdsRelatedWithSomeVideo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list101.size);
            long _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI64();
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getIndexOfVideoInAlbum_args implements org.apache.thrift.TBase<getIndexOfVideoInAlbum_args, getIndexOfVideoInAlbum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getIndexOfVideoInAlbum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIndexOfVideoInAlbum_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIndexOfVideoInAlbum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIndexOfVideoInAlbum_argsTupleSchemeFactory());
    }

    private long vid; // required
    private long aid; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid"),
      AID((short)2, "aid"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          case 2: // AID
            return AID;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private static final int __AID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIndexOfVideoInAlbum_args.class, metaDataMap);
    }

    public getIndexOfVideoInAlbum_args() {
    }

    public getIndexOfVideoInAlbum_args(
      long vid,
      long aid,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
      this.aid = aid;
      setAidIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIndexOfVideoInAlbum_args(getIndexOfVideoInAlbum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
      this.aid = other.aid;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getIndexOfVideoInAlbum_args deepCopy() {
      return new getIndexOfVideoInAlbum_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
      setAidIsSet(false);
      this.aid = 0;
      this.caller = null;
    }

    public long getVid() {
      return this.vid;
    }

    public void setVid(long vid) {
      this.vid = vid;
      setVidIsSet(true);
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public long getAid() {
      return this.aid;
    }

    public void setAid(long aid) {
      this.aid = aid;
      setAidIsSet(true);
    }

    public void unsetAid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Long)value);
        }
        break;

      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Long.valueOf(getVid());

      case AID:
        return Long.valueOf(getAid());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      case AID:
        return isSetAid();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIndexOfVideoInAlbum_args)
        return this.equals((getIndexOfVideoInAlbum_args)that);
      return false;
    }

    public boolean equals(getIndexOfVideoInAlbum_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      boolean present_aid = true;
      list.add(present_aid);
      if (present_aid)
        list.add(aid);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIndexOfVideoInAlbum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIndexOfVideoInAlbum_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIndexOfVideoInAlbum_argsStandardSchemeFactory implements SchemeFactory {
      public getIndexOfVideoInAlbum_argsStandardScheme getScheme() {
        return new getIndexOfVideoInAlbum_argsStandardScheme();
      }
    }

    private static class getIndexOfVideoInAlbum_argsStandardScheme extends StandardScheme<getIndexOfVideoInAlbum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIndexOfVideoInAlbum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.vid = iprot.readI64();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.aid = iprot.readI64();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIndexOfVideoInAlbum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIndexOfVideoInAlbum_argsTupleSchemeFactory implements SchemeFactory {
      public getIndexOfVideoInAlbum_argsTupleScheme getScheme() {
        return new getIndexOfVideoInAlbum_argsTupleScheme();
      }
    }

    private static class getIndexOfVideoInAlbum_argsTupleScheme extends TupleScheme<getIndexOfVideoInAlbum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIndexOfVideoInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        if (struct.isSetAid()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVid()) {
          oprot.writeI64(struct.vid);
        }
        if (struct.isSetAid()) {
          oprot.writeI64(struct.aid);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIndexOfVideoInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vid = iprot.readI64();
          struct.setVidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.aid = iprot.readI64();
          struct.setAidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getIndexOfVideoInAlbum_result implements org.apache.thrift.TBase<getIndexOfVideoInAlbum_result, getIndexOfVideoInAlbum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getIndexOfVideoInAlbum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getIndexOfVideoInAlbum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getIndexOfVideoInAlbum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getIndexOfVideoInAlbum_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TVideoIndexInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TVideoIndexInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getIndexOfVideoInAlbum_result.class, metaDataMap);
    }

    public getIndexOfVideoInAlbum_result() {
    }

    public getIndexOfVideoInAlbum_result(
      com.lesports.qmt.sbc.api.dto.TVideoIndexInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIndexOfVideoInAlbum_result(getIndexOfVideoInAlbum_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TVideoIndexInfo(other.success);
      }
    }

    public getIndexOfVideoInAlbum_result deepCopy() {
      return new getIndexOfVideoInAlbum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TVideoIndexInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TVideoIndexInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TVideoIndexInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIndexOfVideoInAlbum_result)
        return this.equals((getIndexOfVideoInAlbum_result)that);
      return false;
    }

    public boolean equals(getIndexOfVideoInAlbum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getIndexOfVideoInAlbum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getIndexOfVideoInAlbum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getIndexOfVideoInAlbum_resultStandardSchemeFactory implements SchemeFactory {
      public getIndexOfVideoInAlbum_resultStandardScheme getScheme() {
        return new getIndexOfVideoInAlbum_resultStandardScheme();
      }
    }

    private static class getIndexOfVideoInAlbum_resultStandardScheme extends StandardScheme<getIndexOfVideoInAlbum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getIndexOfVideoInAlbum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TVideoIndexInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getIndexOfVideoInAlbum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getIndexOfVideoInAlbum_resultTupleSchemeFactory implements SchemeFactory {
      public getIndexOfVideoInAlbum_resultTupleScheme getScheme() {
        return new getIndexOfVideoInAlbum_resultTupleScheme();
      }
    }

    private static class getIndexOfVideoInAlbum_resultTupleScheme extends TupleScheme<getIndexOfVideoInAlbum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getIndexOfVideoInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getIndexOfVideoInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TVideoIndexInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNonPositiveVideosByAid_args implements org.apache.thrift.TBase<getNonPositiveVideosByAid_args, getNonPositiveVideosByAid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNonPositiveVideosByAid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNonPositiveVideosByAid_args");

    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNonPositiveVideosByAid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNonPositiveVideosByAid_argsTupleSchemeFactory());
    }

    private long aid; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AID((short)1, "aid"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AID
            return AID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNonPositiveVideosByAid_args.class, metaDataMap);
    }

    public getNonPositiveVideosByAid_args() {
    }

    public getNonPositiveVideosByAid_args(
      long aid,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.aid = aid;
      setAidIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNonPositiveVideosByAid_args(getNonPositiveVideosByAid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.aid = other.aid;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getNonPositiveVideosByAid_args deepCopy() {
      return new getNonPositiveVideosByAid_args(this);
    }

    @Override
    public void clear() {
      setAidIsSet(false);
      this.aid = 0;
      this.page = null;
      this.caller = null;
    }

    public long getAid() {
      return this.aid;
    }

    public void setAid(long aid) {
      this.aid = aid;
      setAidIsSet(true);
    }

    public void unsetAid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AID:
        return Long.valueOf(getAid());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AID:
        return isSetAid();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNonPositiveVideosByAid_args)
        return this.equals((getNonPositiveVideosByAid_args)that);
      return false;
    }

    public boolean equals(getNonPositiveVideosByAid_args that) {
      if (that == null)
        return false;

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_aid = true;
      list.add(present_aid);
      if (present_aid)
        list.add(aid);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNonPositiveVideosByAid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNonPositiveVideosByAid_args(");
      boolean first = true;

      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNonPositiveVideosByAid_argsStandardSchemeFactory implements SchemeFactory {
      public getNonPositiveVideosByAid_argsStandardScheme getScheme() {
        return new getNonPositiveVideosByAid_argsStandardScheme();
      }
    }

    private static class getNonPositiveVideosByAid_argsStandardScheme extends StandardScheme<getNonPositiveVideosByAid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNonPositiveVideosByAid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.aid = iprot.readI64();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNonPositiveVideosByAid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNonPositiveVideosByAid_argsTupleSchemeFactory implements SchemeFactory {
      public getNonPositiveVideosByAid_argsTupleScheme getScheme() {
        return new getNonPositiveVideosByAid_argsTupleScheme();
      }
    }

    private static class getNonPositiveVideosByAid_argsTupleScheme extends TupleScheme<getNonPositiveVideosByAid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNonPositiveVideosByAid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAid()) {
          oprot.writeI64(struct.aid);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNonPositiveVideosByAid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.aid = iprot.readI64();
          struct.setAidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getNonPositiveVideosByAid_result implements org.apache.thrift.TBase<getNonPositiveVideosByAid_result, getNonPositiveVideosByAid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNonPositiveVideosByAid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNonPositiveVideosByAid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNonPositiveVideosByAid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNonPositiveVideosByAid_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNonPositiveVideosByAid_result.class, metaDataMap);
    }

    public getNonPositiveVideosByAid_result() {
    }

    public getNonPositiveVideosByAid_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNonPositiveVideosByAid_result(getNonPositiveVideosByAid_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getNonPositiveVideosByAid_result deepCopy() {
      return new getNonPositiveVideosByAid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNonPositiveVideosByAid_result)
        return this.equals((getNonPositiveVideosByAid_result)that);
      return false;
    }

    public boolean equals(getNonPositiveVideosByAid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNonPositiveVideosByAid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNonPositiveVideosByAid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNonPositiveVideosByAid_resultStandardSchemeFactory implements SchemeFactory {
      public getNonPositiveVideosByAid_resultStandardScheme getScheme() {
        return new getNonPositiveVideosByAid_resultStandardScheme();
      }
    }

    private static class getNonPositiveVideosByAid_resultStandardScheme extends StandardScheme<getNonPositiveVideosByAid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNonPositiveVideosByAid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list104.size);
                  long _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readI64();
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNonPositiveVideosByAid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter107 : struct.success)
            {
              oprot.writeI64(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNonPositiveVideosByAid_resultTupleSchemeFactory implements SchemeFactory {
      public getNonPositiveVideosByAid_resultTupleScheme getScheme() {
        return new getNonPositiveVideosByAid_resultTupleScheme();
      }
    }

    private static class getNonPositiveVideosByAid_resultTupleScheme extends TupleScheme<getNonPositiveVideosByAid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNonPositiveVideosByAid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter108 : struct.success)
            {
              oprot.writeI64(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNonPositiveVideosByAid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list109.size);
            long _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readI64();
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTVideoInfoByRelatedIdAndType_args implements org.apache.thrift.TBase<getTVideoInfoByRelatedIdAndType_args, getTVideoInfoByRelatedIdAndType_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoInfoByRelatedIdAndType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoInfoByRelatedIdAndType_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoInfoByRelatedIdAndType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoInfoByRelatedIdAndType_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetRelatedVideosParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoInfoByRelatedIdAndType_args.class, metaDataMap);
    }

    public getTVideoInfoByRelatedIdAndType_args() {
    }

    public getTVideoInfoByRelatedIdAndType_args(
      com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoInfoByRelatedIdAndType_args(getTVideoInfoByRelatedIdAndType_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTVideoInfoByRelatedIdAndType_args deepCopy() {
      return new getTVideoInfoByRelatedIdAndType_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetRelatedVideosParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetRelatedVideosParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetRelatedVideosParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoInfoByRelatedIdAndType_args)
        return this.equals((getTVideoInfoByRelatedIdAndType_args)that);
      return false;
    }

    public boolean equals(getTVideoInfoByRelatedIdAndType_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoInfoByRelatedIdAndType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoInfoByRelatedIdAndType_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoInfoByRelatedIdAndType_argsStandardSchemeFactory implements SchemeFactory {
      public getTVideoInfoByRelatedIdAndType_argsStandardScheme getScheme() {
        return new getTVideoInfoByRelatedIdAndType_argsStandardScheme();
      }
    }

    private static class getTVideoInfoByRelatedIdAndType_argsStandardScheme extends StandardScheme<getTVideoInfoByRelatedIdAndType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoInfoByRelatedIdAndType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoInfoByRelatedIdAndType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoInfoByRelatedIdAndType_argsTupleSchemeFactory implements SchemeFactory {
      public getTVideoInfoByRelatedIdAndType_argsTupleScheme getScheme() {
        return new getTVideoInfoByRelatedIdAndType_argsTupleScheme();
      }
    }

    private static class getTVideoInfoByRelatedIdAndType_argsTupleScheme extends TupleScheme<getTVideoInfoByRelatedIdAndType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoInfoByRelatedIdAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoInfoByRelatedIdAndType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedVideosParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTVideoInfoByRelatedIdAndType_result implements org.apache.thrift.TBase<getTVideoInfoByRelatedIdAndType_result, getTVideoInfoByRelatedIdAndType_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTVideoInfoByRelatedIdAndType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTVideoInfoByRelatedIdAndType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTVideoInfoByRelatedIdAndType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTVideoInfoByRelatedIdAndType_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TVideoInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TVideoInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTVideoInfoByRelatedIdAndType_result.class, metaDataMap);
    }

    public getTVideoInfoByRelatedIdAndType_result() {
    }

    public getTVideoInfoByRelatedIdAndType_result(
      com.lesports.qmt.sbc.api.dto.TVideoInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTVideoInfoByRelatedIdAndType_result(getTVideoInfoByRelatedIdAndType_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TVideoInfo(other.success);
      }
    }

    public getTVideoInfoByRelatedIdAndType_result deepCopy() {
      return new getTVideoInfoByRelatedIdAndType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TVideoInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TVideoInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TVideoInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTVideoInfoByRelatedIdAndType_result)
        return this.equals((getTVideoInfoByRelatedIdAndType_result)that);
      return false;
    }

    public boolean equals(getTVideoInfoByRelatedIdAndType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTVideoInfoByRelatedIdAndType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTVideoInfoByRelatedIdAndType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTVideoInfoByRelatedIdAndType_resultStandardSchemeFactory implements SchemeFactory {
      public getTVideoInfoByRelatedIdAndType_resultStandardScheme getScheme() {
        return new getTVideoInfoByRelatedIdAndType_resultStandardScheme();
      }
    }

    private static class getTVideoInfoByRelatedIdAndType_resultStandardScheme extends StandardScheme<getTVideoInfoByRelatedIdAndType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTVideoInfoByRelatedIdAndType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TVideoInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTVideoInfoByRelatedIdAndType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTVideoInfoByRelatedIdAndType_resultTupleSchemeFactory implements SchemeFactory {
      public getTVideoInfoByRelatedIdAndType_resultTupleScheme getScheme() {
        return new getTVideoInfoByRelatedIdAndType_resultTupleScheme();
      }
    }

    private static class getTVideoInfoByRelatedIdAndType_resultTupleScheme extends TupleScheme<getTVideoInfoByRelatedIdAndType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTVideoInfoByRelatedIdAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTVideoInfoByRelatedIdAndType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TVideoInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecordVideosInAlbum_args implements org.apache.thrift.TBase<getRecordVideosInAlbum_args, getRecordVideosInAlbum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordVideosInAlbum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordVideosInAlbum_args");

    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordVideosInAlbum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordVideosInAlbum_argsTupleSchemeFactory());
    }

    private long aid; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AID((short)1, "aid"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AID
            return AID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordVideosInAlbum_args.class, metaDataMap);
    }

    public getRecordVideosInAlbum_args() {
    }

    public getRecordVideosInAlbum_args(
      long aid,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.aid = aid;
      setAidIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordVideosInAlbum_args(getRecordVideosInAlbum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.aid = other.aid;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getRecordVideosInAlbum_args deepCopy() {
      return new getRecordVideosInAlbum_args(this);
    }

    @Override
    public void clear() {
      setAidIsSet(false);
      this.aid = 0;
      this.page = null;
      this.caller = null;
    }

    public long getAid() {
      return this.aid;
    }

    public void setAid(long aid) {
      this.aid = aid;
      setAidIsSet(true);
    }

    public void unsetAid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AID:
        return Long.valueOf(getAid());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AID:
        return isSetAid();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordVideosInAlbum_args)
        return this.equals((getRecordVideosInAlbum_args)that);
      return false;
    }

    public boolean equals(getRecordVideosInAlbum_args that) {
      if (that == null)
        return false;

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_aid = true;
      list.add(present_aid);
      if (present_aid)
        list.add(aid);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordVideosInAlbum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordVideosInAlbum_args(");
      boolean first = true;

      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordVideosInAlbum_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordVideosInAlbum_argsStandardScheme getScheme() {
        return new getRecordVideosInAlbum_argsStandardScheme();
      }
    }

    private static class getRecordVideosInAlbum_argsStandardScheme extends StandardScheme<getRecordVideosInAlbum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordVideosInAlbum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.aid = iprot.readI64();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordVideosInAlbum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordVideosInAlbum_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordVideosInAlbum_argsTupleScheme getScheme() {
        return new getRecordVideosInAlbum_argsTupleScheme();
      }
    }

    private static class getRecordVideosInAlbum_argsTupleScheme extends TupleScheme<getRecordVideosInAlbum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordVideosInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAid()) {
          oprot.writeI64(struct.aid);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordVideosInAlbum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.aid = iprot.readI64();
          struct.setAidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getRecordVideosInAlbum_result implements org.apache.thrift.TBase<getRecordVideosInAlbum_result, getRecordVideosInAlbum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecordVideosInAlbum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordVideosInAlbum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordVideosInAlbum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordVideosInAlbum_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TVideo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TVideo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordVideosInAlbum_result.class, metaDataMap);
    }

    public getRecordVideosInAlbum_result() {
    }

    public getRecordVideosInAlbum_result(
      List<com.lesports.qmt.sbc.api.dto.TVideo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordVideosInAlbum_result(getRecordVideosInAlbum_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TVideo> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TVideo other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TVideo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRecordVideosInAlbum_result deepCopy() {
      return new getRecordVideosInAlbum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TVideo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TVideo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TVideo> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TVideo> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TVideo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordVideosInAlbum_result)
        return this.equals((getRecordVideosInAlbum_result)that);
      return false;
    }

    public boolean equals(getRecordVideosInAlbum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecordVideosInAlbum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordVideosInAlbum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordVideosInAlbum_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordVideosInAlbum_resultStandardScheme getScheme() {
        return new getRecordVideosInAlbum_resultStandardScheme();
      }
    }

    private static class getRecordVideosInAlbum_resultStandardScheme extends StandardScheme<getRecordVideosInAlbum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordVideosInAlbum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>(_list112.size);
                  com.lesports.qmt.sbc.api.dto.TVideo _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.lesports.qmt.sbc.api.dto.TVideo();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordVideosInAlbum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TVideo _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordVideosInAlbum_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordVideosInAlbum_resultTupleScheme getScheme() {
        return new getRecordVideosInAlbum_resultTupleScheme();
      }
    }

    private static class getRecordVideosInAlbum_resultTupleScheme extends TupleScheme<getRecordVideosInAlbum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordVideosInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TVideo _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordVideosInAlbum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TVideo>(_list117.size);
            com.lesports.qmt.sbc.api.dto.TVideo _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.lesports.qmt.sbc.api.dto.TVideo();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFeatureVideosByYears_args implements org.apache.thrift.TBase<getFeatureVideosByYears_args, getFeatureVideosByYears_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFeatureVideosByYears_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeatureVideosByYears_args");

    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField YEAR_AND_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("yearAndMonth", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFeatureVideosByYears_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFeatureVideosByYears_argsTupleSchemeFactory());
    }

    private long aid; // required
    private String yearAndMonth; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AID((short)1, "aid"),
      YEAR_AND_MONTH((short)2, "yearAndMonth"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AID
            return AID;
          case 2: // YEAR_AND_MONTH
            return YEAR_AND_MONTH;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.YEAR_AND_MONTH, new org.apache.thrift.meta_data.FieldMetaData("yearAndMonth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeatureVideosByYears_args.class, metaDataMap);
    }

    public getFeatureVideosByYears_args() {
    }

    public getFeatureVideosByYears_args(
      long aid,
      String yearAndMonth,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.aid = aid;
      setAidIsSet(true);
      this.yearAndMonth = yearAndMonth;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeatureVideosByYears_args(getFeatureVideosByYears_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.aid = other.aid;
      if (other.isSetYearAndMonth()) {
        this.yearAndMonth = other.yearAndMonth;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getFeatureVideosByYears_args deepCopy() {
      return new getFeatureVideosByYears_args(this);
    }

    @Override
    public void clear() {
      setAidIsSet(false);
      this.aid = 0;
      this.yearAndMonth = null;
      this.caller = null;
    }

    public long getAid() {
      return this.aid;
    }

    public void setAid(long aid) {
      this.aid = aid;
      setAidIsSet(true);
    }

    public void unsetAid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    public String getYearAndMonth() {
      return this.yearAndMonth;
    }

    public void setYearAndMonth(String yearAndMonth) {
      this.yearAndMonth = yearAndMonth;
    }

    public void unsetYearAndMonth() {
      this.yearAndMonth = null;
    }

    /** Returns true if field yearAndMonth is set (has been assigned a value) and false otherwise */
    public boolean isSetYearAndMonth() {
      return this.yearAndMonth != null;
    }

    public void setYearAndMonthIsSet(boolean value) {
      if (!value) {
        this.yearAndMonth = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Long)value);
        }
        break;

      case YEAR_AND_MONTH:
        if (value == null) {
          unsetYearAndMonth();
        } else {
          setYearAndMonth((String)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AID:
        return Long.valueOf(getAid());

      case YEAR_AND_MONTH:
        return getYearAndMonth();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AID:
        return isSetAid();
      case YEAR_AND_MONTH:
        return isSetYearAndMonth();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeatureVideosByYears_args)
        return this.equals((getFeatureVideosByYears_args)that);
      return false;
    }

    public boolean equals(getFeatureVideosByYears_args that) {
      if (that == null)
        return false;

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      boolean this_present_yearAndMonth = true && this.isSetYearAndMonth();
      boolean that_present_yearAndMonth = true && that.isSetYearAndMonth();
      if (this_present_yearAndMonth || that_present_yearAndMonth) {
        if (!(this_present_yearAndMonth && that_present_yearAndMonth))
          return false;
        if (!this.yearAndMonth.equals(that.yearAndMonth))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_aid = true;
      list.add(present_aid);
      if (present_aid)
        list.add(aid);

      boolean present_yearAndMonth = true && (isSetYearAndMonth());
      list.add(present_yearAndMonth);
      if (present_yearAndMonth)
        list.add(yearAndMonth);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFeatureVideosByYears_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetYearAndMonth()).compareTo(other.isSetYearAndMonth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetYearAndMonth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearAndMonth, other.yearAndMonth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeatureVideosByYears_args(");
      boolean first = true;

      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("yearAndMonth:");
      if (this.yearAndMonth == null) {
        sb.append("null");
      } else {
        sb.append(this.yearAndMonth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeatureVideosByYears_argsStandardSchemeFactory implements SchemeFactory {
      public getFeatureVideosByYears_argsStandardScheme getScheme() {
        return new getFeatureVideosByYears_argsStandardScheme();
      }
    }

    private static class getFeatureVideosByYears_argsStandardScheme extends StandardScheme<getFeatureVideosByYears_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeatureVideosByYears_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.aid = iprot.readI64();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // YEAR_AND_MONTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.yearAndMonth = iprot.readString();
                struct.setYearAndMonthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeatureVideosByYears_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
        if (struct.yearAndMonth != null) {
          oprot.writeFieldBegin(YEAR_AND_MONTH_FIELD_DESC);
          oprot.writeString(struct.yearAndMonth);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeatureVideosByYears_argsTupleSchemeFactory implements SchemeFactory {
      public getFeatureVideosByYears_argsTupleScheme getScheme() {
        return new getFeatureVideosByYears_argsTupleScheme();
      }
    }

    private static class getFeatureVideosByYears_argsTupleScheme extends TupleScheme<getFeatureVideosByYears_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeatureVideosByYears_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAid()) {
          optionals.set(0);
        }
        if (struct.isSetYearAndMonth()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAid()) {
          oprot.writeI64(struct.aid);
        }
        if (struct.isSetYearAndMonth()) {
          oprot.writeString(struct.yearAndMonth);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeatureVideosByYears_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.aid = iprot.readI64();
          struct.setAidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.yearAndMonth = iprot.readString();
          struct.setYearAndMonthIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getFeatureVideosByYears_result implements org.apache.thrift.TBase<getFeatureVideosByYears_result, getFeatureVideosByYears_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFeatureVideosByYears_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeatureVideosByYears_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFeatureVideosByYears_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFeatureVideosByYears_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TFeatureInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TFeatureInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeatureVideosByYears_result.class, metaDataMap);
    }

    public getFeatureVideosByYears_result() {
    }

    public getFeatureVideosByYears_result(
      com.lesports.qmt.sbc.api.dto.TFeatureInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeatureVideosByYears_result(getFeatureVideosByYears_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TFeatureInfo(other.success);
      }
    }

    public getFeatureVideosByYears_result deepCopy() {
      return new getFeatureVideosByYears_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TFeatureInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TFeatureInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TFeatureInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeatureVideosByYears_result)
        return this.equals((getFeatureVideosByYears_result)that);
      return false;
    }

    public boolean equals(getFeatureVideosByYears_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFeatureVideosByYears_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFeatureVideosByYears_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeatureVideosByYears_resultStandardSchemeFactory implements SchemeFactory {
      public getFeatureVideosByYears_resultStandardScheme getScheme() {
        return new getFeatureVideosByYears_resultStandardScheme();
      }
    }

    private static class getFeatureVideosByYears_resultStandardScheme extends StandardScheme<getFeatureVideosByYears_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeatureVideosByYears_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TFeatureInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeatureVideosByYears_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeatureVideosByYears_resultTupleSchemeFactory implements SchemeFactory {
      public getFeatureVideosByYears_resultTupleScheme getScheme() {
        return new getFeatureVideosByYears_resultTupleScheme();
      }
    }

    private static class getFeatureVideosByYears_resultTupleScheme extends TupleScheme<getFeatureVideosByYears_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeatureVideosByYears_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeatureVideosByYears_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TFeatureInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAlbumVideosByAid_args implements org.apache.thrift.TBase<getAlbumVideosByAid_args, getAlbumVideosByAid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAlbumVideosByAid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAlbumVideosByAid_args");

    private static final org.apache.thrift.protocol.TField AID_FIELD_DESC = new org.apache.thrift.protocol.TField("aid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAlbumVideosByAid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAlbumVideosByAid_argsTupleSchemeFactory());
    }

    private long aid; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AID((short)1, "aid"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AID
            return AID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AID, new org.apache.thrift.meta_data.FieldMetaData("aid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAlbumVideosByAid_args.class, metaDataMap);
    }

    public getAlbumVideosByAid_args() {
    }

    public getAlbumVideosByAid_args(
      long aid,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.aid = aid;
      setAidIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAlbumVideosByAid_args(getAlbumVideosByAid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.aid = other.aid;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getAlbumVideosByAid_args deepCopy() {
      return new getAlbumVideosByAid_args(this);
    }

    @Override
    public void clear() {
      setAidIsSet(false);
      this.aid = 0;
      this.page = null;
      this.caller = null;
    }

    public long getAid() {
      return this.aid;
    }

    public void setAid(long aid) {
      this.aid = aid;
      setAidIsSet(true);
    }

    public void unsetAid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AID_ISSET_ID);
    }

    /** Returns true if field aid is set (has been assigned a value) and false otherwise */
    public boolean isSetAid() {
      return EncodingUtils.testBit(__isset_bitfield, __AID_ISSET_ID);
    }

    public void setAidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AID:
        if (value == null) {
          unsetAid();
        } else {
          setAid((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AID:
        return Long.valueOf(getAid());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AID:
        return isSetAid();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAlbumVideosByAid_args)
        return this.equals((getAlbumVideosByAid_args)that);
      return false;
    }

    public boolean equals(getAlbumVideosByAid_args that) {
      if (that == null)
        return false;

      boolean this_present_aid = true;
      boolean that_present_aid = true;
      if (this_present_aid || that_present_aid) {
        if (!(this_present_aid && that_present_aid))
          return false;
        if (this.aid != that.aid)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_aid = true;
      list.add(present_aid);
      if (present_aid)
        list.add(aid);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAlbumVideosByAid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAid()).compareTo(other.isSetAid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aid, other.aid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAlbumVideosByAid_args(");
      boolean first = true;

      sb.append("aid:");
      sb.append(this.aid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAlbumVideosByAid_argsStandardSchemeFactory implements SchemeFactory {
      public getAlbumVideosByAid_argsStandardScheme getScheme() {
        return new getAlbumVideosByAid_argsStandardScheme();
      }
    }

    private static class getAlbumVideosByAid_argsStandardScheme extends StandardScheme<getAlbumVideosByAid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAlbumVideosByAid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.aid = iprot.readI64();
                struct.setAidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAlbumVideosByAid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(AID_FIELD_DESC);
        oprot.writeI64(struct.aid);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAlbumVideosByAid_argsTupleSchemeFactory implements SchemeFactory {
      public getAlbumVideosByAid_argsTupleScheme getScheme() {
        return new getAlbumVideosByAid_argsTupleScheme();
      }
    }

    private static class getAlbumVideosByAid_argsTupleScheme extends TupleScheme<getAlbumVideosByAid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAlbumVideosByAid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAid()) {
          oprot.writeI64(struct.aid);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAlbumVideosByAid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.aid = iprot.readI64();
          struct.setAidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getAlbumVideosByAid_result implements org.apache.thrift.TBase<getAlbumVideosByAid_result, getAlbumVideosByAid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAlbumVideosByAid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAlbumVideosByAid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAlbumVideosByAid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAlbumVideosByAid_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAlbumVideosByAid_result.class, metaDataMap);
    }

    public getAlbumVideosByAid_result() {
    }

    public getAlbumVideosByAid_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAlbumVideosByAid_result(getAlbumVideosByAid_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getAlbumVideosByAid_result deepCopy() {
      return new getAlbumVideosByAid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAlbumVideosByAid_result)
        return this.equals((getAlbumVideosByAid_result)that);
      return false;
    }

    public boolean equals(getAlbumVideosByAid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAlbumVideosByAid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAlbumVideosByAid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAlbumVideosByAid_resultStandardSchemeFactory implements SchemeFactory {
      public getAlbumVideosByAid_resultStandardScheme getScheme() {
        return new getAlbumVideosByAid_resultStandardScheme();
      }
    }

    private static class getAlbumVideosByAid_resultStandardScheme extends StandardScheme<getAlbumVideosByAid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAlbumVideosByAid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list120.size);
                  long _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readI64();
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAlbumVideosByAid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter123 : struct.success)
            {
              oprot.writeI64(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAlbumVideosByAid_resultTupleSchemeFactory implements SchemeFactory {
      public getAlbumVideosByAid_resultTupleScheme getScheme() {
        return new getAlbumVideosByAid_resultTupleScheme();
      }
    }

    private static class getAlbumVideosByAid_resultTupleScheme extends TupleScheme<getAlbumVideosByAid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAlbumVideosByAid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter124 : struct.success)
            {
              oprot.writeI64(_iter124);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAlbumVideosByAid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list125.size);
            long _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = iprot.readI64();
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTNewsById_args implements org.apache.thrift.TBase<getTNewsById_args, getTNewsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTNewsById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTNewsById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTNewsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTNewsById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTNewsById_args.class, metaDataMap);
    }

    public getTNewsById_args() {
    }

    public getTNewsById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTNewsById_args(getTNewsById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTNewsById_args deepCopy() {
      return new getTNewsById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTNewsById_args)
        return this.equals((getTNewsById_args)that);
      return false;
    }

    public boolean equals(getTNewsById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTNewsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTNewsById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTNewsById_argsStandardSchemeFactory implements SchemeFactory {
      public getTNewsById_argsStandardScheme getScheme() {
        return new getTNewsById_argsStandardScheme();
      }
    }

    private static class getTNewsById_argsStandardScheme extends StandardScheme<getTNewsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTNewsById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTNewsById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTNewsById_argsTupleSchemeFactory implements SchemeFactory {
      public getTNewsById_argsTupleScheme getScheme() {
        return new getTNewsById_argsTupleScheme();
      }
    }

    private static class getTNewsById_argsTupleScheme extends TupleScheme<getTNewsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTNewsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTNewsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTNewsById_result implements org.apache.thrift.TBase<getTNewsById_result, getTNewsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTNewsById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTNewsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTNewsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTNewsById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TNews success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TNews.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTNewsById_result.class, metaDataMap);
    }

    public getTNewsById_result() {
    }

    public getTNewsById_result(
      com.lesports.qmt.sbc.api.dto.TNews success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTNewsById_result(getTNewsById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TNews(other.success);
      }
    }

    public getTNewsById_result deepCopy() {
      return new getTNewsById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TNews getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TNews success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TNews)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTNewsById_result)
        return this.equals((getTNewsById_result)that);
      return false;
    }

    public boolean equals(getTNewsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTNewsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTNewsById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTNewsById_resultStandardSchemeFactory implements SchemeFactory {
      public getTNewsById_resultStandardScheme getScheme() {
        return new getTNewsById_resultStandardScheme();
      }
    }

    private static class getTNewsById_resultStandardScheme extends StandardScheme<getTNewsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTNewsById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TNews();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTNewsById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTNewsById_resultTupleSchemeFactory implements SchemeFactory {
      public getTNewsById_resultTupleScheme getScheme() {
        return new getTNewsById_resultTupleScheme();
      }
    }

    private static class getTNewsById_resultTupleScheme extends TupleScheme<getTNewsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTNewsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTNewsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TNews();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTNewsByIds_args implements org.apache.thrift.TBase<getTNewsByIds_args, getTNewsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTNewsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTNewsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTNewsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTNewsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTNewsByIds_args.class, metaDataMap);
    }

    public getTNewsByIds_args() {
    }

    public getTNewsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTNewsByIds_args(getTNewsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTNewsByIds_args deepCopy() {
      return new getTNewsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTNewsByIds_args)
        return this.equals((getTNewsByIds_args)that);
      return false;
    }

    public boolean equals(getTNewsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTNewsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTNewsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTNewsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTNewsByIds_argsStandardScheme getScheme() {
        return new getTNewsByIds_argsStandardScheme();
      }
    }

    private static class getTNewsByIds_argsStandardScheme extends StandardScheme<getTNewsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTNewsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list128.size);
                  long _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = iprot.readI64();
                    struct.ids.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTNewsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter131 : struct.ids)
            {
              oprot.writeI64(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTNewsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTNewsByIds_argsTupleScheme getScheme() {
        return new getTNewsByIds_argsTupleScheme();
      }
    }

    private static class getTNewsByIds_argsTupleScheme extends TupleScheme<getTNewsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTNewsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter132 : struct.ids)
            {
              oprot.writeI64(_iter132);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTNewsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list133.size);
            long _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = iprot.readI64();
              struct.ids.add(_elem134);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTNewsByIds_result implements org.apache.thrift.TBase<getTNewsByIds_result, getTNewsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTNewsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTNewsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTNewsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTNewsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TNews> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TNews.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTNewsByIds_result.class, metaDataMap);
    }

    public getTNewsByIds_result() {
    }

    public getTNewsByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TNews> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTNewsByIds_result(getTNewsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TNews> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TNews>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TNews other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TNews(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTNewsByIds_result deepCopy() {
      return new getTNewsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TNews> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TNews elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TNews>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TNews> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TNews> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TNews>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTNewsByIds_result)
        return this.equals((getTNewsByIds_result)that);
      return false;
    }

    public boolean equals(getTNewsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTNewsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTNewsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTNewsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTNewsByIds_resultStandardScheme getScheme() {
        return new getTNewsByIds_resultStandardScheme();
      }
    }

    private static class getTNewsByIds_resultStandardScheme extends StandardScheme<getTNewsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTNewsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TNews>(_list136.size);
                  com.lesports.qmt.sbc.api.dto.TNews _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new com.lesports.qmt.sbc.api.dto.TNews();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTNewsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TNews _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTNewsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTNewsByIds_resultTupleScheme getScheme() {
        return new getTNewsByIds_resultTupleScheme();
      }
    }

    private static class getTNewsByIds_resultTupleScheme extends TupleScheme<getTNewsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTNewsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TNews _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTNewsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TNews>(_list141.size);
            com.lesports.qmt.sbc.api.dto.TNews _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new com.lesports.qmt.sbc.api.dto.TNews();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTNewsByVid_args implements org.apache.thrift.TBase<getTNewsByVid_args, getTNewsByVid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTNewsByVid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTNewsByVid_args");

    private static final org.apache.thrift.protocol.TField VID_FIELD_DESC = new org.apache.thrift.protocol.TField("vid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTNewsByVid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTNewsByVid_argsTupleSchemeFactory());
    }

    private long vid; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VID((short)1, "vid"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VID
            return VID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VID, new org.apache.thrift.meta_data.FieldMetaData("vid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTNewsByVid_args.class, metaDataMap);
    }

    public getTNewsByVid_args() {
    }

    public getTNewsByVid_args(
      long vid,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.vid = vid;
      setVidIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTNewsByVid_args(getTNewsByVid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vid = other.vid;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTNewsByVid_args deepCopy() {
      return new getTNewsByVid_args(this);
    }

    @Override
    public void clear() {
      setVidIsSet(false);
      this.vid = 0;
      this.caller = null;
    }

    public long getVid() {
      return this.vid;
    }

    public void setVid(long vid) {
      this.vid = vid;
      setVidIsSet(true);
    }

    public void unsetVid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VID_ISSET_ID);
    }

    /** Returns true if field vid is set (has been assigned a value) and false otherwise */
    public boolean isSetVid() {
      return EncodingUtils.testBit(__isset_bitfield, __VID_ISSET_ID);
    }

    public void setVidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VID:
        if (value == null) {
          unsetVid();
        } else {
          setVid((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VID:
        return Long.valueOf(getVid());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VID:
        return isSetVid();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTNewsByVid_args)
        return this.equals((getTNewsByVid_args)that);
      return false;
    }

    public boolean equals(getTNewsByVid_args that) {
      if (that == null)
        return false;

      boolean this_present_vid = true;
      boolean that_present_vid = true;
      if (this_present_vid || that_present_vid) {
        if (!(this_present_vid && that_present_vid))
          return false;
        if (this.vid != that.vid)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vid = true;
      list.add(present_vid);
      if (present_vid)
        list.add(vid);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTNewsByVid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVid()).compareTo(other.isSetVid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vid, other.vid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTNewsByVid_args(");
      boolean first = true;

      sb.append("vid:");
      sb.append(this.vid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTNewsByVid_argsStandardSchemeFactory implements SchemeFactory {
      public getTNewsByVid_argsStandardScheme getScheme() {
        return new getTNewsByVid_argsStandardScheme();
      }
    }

    private static class getTNewsByVid_argsStandardScheme extends StandardScheme<getTNewsByVid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTNewsByVid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.vid = iprot.readI64();
                struct.setVidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTNewsByVid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VID_FIELD_DESC);
        oprot.writeI64(struct.vid);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTNewsByVid_argsTupleSchemeFactory implements SchemeFactory {
      public getTNewsByVid_argsTupleScheme getScheme() {
        return new getTNewsByVid_argsTupleScheme();
      }
    }

    private static class getTNewsByVid_argsTupleScheme extends TupleScheme<getTNewsByVid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTNewsByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVid()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVid()) {
          oprot.writeI64(struct.vid);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTNewsByVid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vid = iprot.readI64();
          struct.setVidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTNewsByVid_result implements org.apache.thrift.TBase<getTNewsByVid_result, getTNewsByVid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTNewsByVid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTNewsByVid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTNewsByVid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTNewsByVid_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TNews success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TNews.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTNewsByVid_result.class, metaDataMap);
    }

    public getTNewsByVid_result() {
    }

    public getTNewsByVid_result(
      com.lesports.qmt.sbc.api.dto.TNews success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTNewsByVid_result(getTNewsByVid_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TNews(other.success);
      }
    }

    public getTNewsByVid_result deepCopy() {
      return new getTNewsByVid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TNews getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TNews success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TNews)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTNewsByVid_result)
        return this.equals((getTNewsByVid_result)that);
      return false;
    }

    public boolean equals(getTNewsByVid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTNewsByVid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTNewsByVid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTNewsByVid_resultStandardSchemeFactory implements SchemeFactory {
      public getTNewsByVid_resultStandardScheme getScheme() {
        return new getTNewsByVid_resultStandardScheme();
      }
    }

    private static class getTNewsByVid_resultStandardScheme extends StandardScheme<getTNewsByVid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTNewsByVid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TNews();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTNewsByVid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTNewsByVid_resultTupleSchemeFactory implements SchemeFactory {
      public getTNewsByVid_resultTupleScheme getScheme() {
        return new getTNewsByVid_resultTupleScheme();
      }
    }

    private static class getTNewsByVid_resultTupleScheme extends TupleScheme<getTNewsByVid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTNewsByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTNewsByVid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TNews();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNewsIdsByRelatedId_args implements org.apache.thrift.TBase<getNewsIdsByRelatedId_args, getNewsIdsByRelatedId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsIdsByRelatedId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsIdsByRelatedId_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsIdsByRelatedId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsIdsByRelatedId_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetRelatedNewsParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsIdsByRelatedId_args.class, metaDataMap);
    }

    public getNewsIdsByRelatedId_args() {
    }

    public getNewsIdsByRelatedId_args(
      com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsIdsByRelatedId_args(getNewsIdsByRelatedId_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetRelatedNewsParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getNewsIdsByRelatedId_args deepCopy() {
      return new getNewsIdsByRelatedId_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetRelatedNewsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetRelatedNewsParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsIdsByRelatedId_args)
        return this.equals((getNewsIdsByRelatedId_args)that);
      return false;
    }

    public boolean equals(getNewsIdsByRelatedId_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsIdsByRelatedId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsIdsByRelatedId_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewsIdsByRelatedId_argsStandardSchemeFactory implements SchemeFactory {
      public getNewsIdsByRelatedId_argsStandardScheme getScheme() {
        return new getNewsIdsByRelatedId_argsStandardScheme();
      }
    }

    private static class getNewsIdsByRelatedId_argsStandardScheme extends StandardScheme<getNewsIdsByRelatedId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedNewsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsIdsByRelatedId_argsTupleSchemeFactory implements SchemeFactory {
      public getNewsIdsByRelatedId_argsTupleScheme getScheme() {
        return new getNewsIdsByRelatedId_argsTupleScheme();
      }
    }

    private static class getNewsIdsByRelatedId_argsTupleScheme extends TupleScheme<getNewsIdsByRelatedId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsIdsByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedNewsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getNewsIdsByRelatedId_result implements org.apache.thrift.TBase<getNewsIdsByRelatedId_result, getNewsIdsByRelatedId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsIdsByRelatedId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsIdsByRelatedId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsIdsByRelatedId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsIdsByRelatedId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsIdsByRelatedId_result.class, metaDataMap);
    }

    public getNewsIdsByRelatedId_result() {
    }

    public getNewsIdsByRelatedId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsIdsByRelatedId_result(getNewsIdsByRelatedId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getNewsIdsByRelatedId_result deepCopy() {
      return new getNewsIdsByRelatedId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsIdsByRelatedId_result)
        return this.equals((getNewsIdsByRelatedId_result)that);
      return false;
    }

    public boolean equals(getNewsIdsByRelatedId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsIdsByRelatedId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsIdsByRelatedId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewsIdsByRelatedId_resultStandardSchemeFactory implements SchemeFactory {
      public getNewsIdsByRelatedId_resultStandardScheme getScheme() {
        return new getNewsIdsByRelatedId_resultStandardScheme();
      }
    }

    private static class getNewsIdsByRelatedId_resultStandardScheme extends StandardScheme<getNewsIdsByRelatedId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list144.size);
                  long _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = iprot.readI64();
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter147 : struct.success)
            {
              oprot.writeI64(_iter147);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsIdsByRelatedId_resultTupleSchemeFactory implements SchemeFactory {
      public getNewsIdsByRelatedId_resultTupleScheme getScheme() {
        return new getNewsIdsByRelatedId_resultTupleScheme();
      }
    }

    private static class getNewsIdsByRelatedId_resultTupleScheme extends TupleScheme<getNewsIdsByRelatedId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter148 : struct.success)
            {
              oprot.writeI64(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsIdsByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list149.size);
            long _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readI64();
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countNewsByRelatedId_args implements org.apache.thrift.TBase<countNewsByRelatedId_args, countNewsByRelatedId_args._Fields>, java.io.Serializable, Cloneable, Comparable<countNewsByRelatedId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countNewsByRelatedId_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countNewsByRelatedId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countNewsByRelatedId_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.service.GetRelatedNewsParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countNewsByRelatedId_args.class, metaDataMap);
    }

    public countNewsByRelatedId_args() {
    }

    public countNewsByRelatedId_args(
      com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countNewsByRelatedId_args(countNewsByRelatedId_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbc.api.service.GetRelatedNewsParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public countNewsByRelatedId_args deepCopy() {
      return new countNewsByRelatedId_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbc.api.service.GetRelatedNewsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbc.api.service.GetRelatedNewsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbc.api.service.GetRelatedNewsParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countNewsByRelatedId_args)
        return this.equals((countNewsByRelatedId_args)that);
      return false;
    }

    public boolean equals(countNewsByRelatedId_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(countNewsByRelatedId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countNewsByRelatedId_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countNewsByRelatedId_argsStandardSchemeFactory implements SchemeFactory {
      public countNewsByRelatedId_argsStandardScheme getScheme() {
        return new countNewsByRelatedId_argsStandardScheme();
      }
    }

    private static class countNewsByRelatedId_argsStandardScheme extends StandardScheme<countNewsByRelatedId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countNewsByRelatedId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedNewsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countNewsByRelatedId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countNewsByRelatedId_argsTupleSchemeFactory implements SchemeFactory {
      public countNewsByRelatedId_argsTupleScheme getScheme() {
        return new countNewsByRelatedId_argsTupleScheme();
      }
    }

    private static class countNewsByRelatedId_argsTupleScheme extends TupleScheme<countNewsByRelatedId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countNewsByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countNewsByRelatedId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbc.api.service.GetRelatedNewsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class countNewsByRelatedId_result implements org.apache.thrift.TBase<countNewsByRelatedId_result, countNewsByRelatedId_result._Fields>, java.io.Serializable, Cloneable, Comparable<countNewsByRelatedId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countNewsByRelatedId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countNewsByRelatedId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countNewsByRelatedId_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countNewsByRelatedId_result.class, metaDataMap);
    }

    public countNewsByRelatedId_result() {
    }

    public countNewsByRelatedId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countNewsByRelatedId_result(countNewsByRelatedId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countNewsByRelatedId_result deepCopy() {
      return new countNewsByRelatedId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countNewsByRelatedId_result)
        return this.equals((countNewsByRelatedId_result)that);
      return false;
    }

    public boolean equals(countNewsByRelatedId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countNewsByRelatedId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countNewsByRelatedId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countNewsByRelatedId_resultStandardSchemeFactory implements SchemeFactory {
      public countNewsByRelatedId_resultStandardScheme getScheme() {
        return new countNewsByRelatedId_resultStandardScheme();
      }
    }

    private static class countNewsByRelatedId_resultStandardScheme extends StandardScheme<countNewsByRelatedId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countNewsByRelatedId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countNewsByRelatedId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countNewsByRelatedId_resultTupleSchemeFactory implements SchemeFactory {
      public countNewsByRelatedId_resultTupleScheme getScheme() {
        return new countNewsByRelatedId_resultTupleScheme();
      }
    }

    private static class countNewsByRelatedId_resultTupleScheme extends TupleScheme<countNewsByRelatedId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countNewsByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countNewsByRelatedId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNewsIdsRelatedWithSomeNews_args implements org.apache.thrift.TBase<getNewsIdsRelatedWithSomeNews_args, getNewsIdsRelatedWithSomeNews_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsIdsRelatedWithSomeNews_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsIdsRelatedWithSomeNews_args");

    private static final org.apache.thrift.protocol.TField NEWS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsIdsRelatedWithSomeNews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsIdsRelatedWithSomeNews_argsTupleSchemeFactory());
    }

    private long newsId; // required
    private List<com.lesports.qmt.sbc.api.common.NewsType> types; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEWS_ID((short)1, "newsId"),
      TYPES((short)2, "types"),
      PAGE((short)3, "page"),
      CALLER((short)4, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEWS_ID
            return NEWS_ID;
          case 2: // TYPES
            return TYPES;
          case 3: // PAGE
            return PAGE;
          case 4: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWSID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEWS_ID, new org.apache.thrift.meta_data.FieldMetaData("newsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.NewsType.class))));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsIdsRelatedWithSomeNews_args.class, metaDataMap);
    }

    public getNewsIdsRelatedWithSomeNews_args() {
    }

    public getNewsIdsRelatedWithSomeNews_args(
      long newsId,
      List<com.lesports.qmt.sbc.api.common.NewsType> types,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.newsId = newsId;
      setNewsIdIsSet(true);
      this.types = types;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsIdsRelatedWithSomeNews_args(getNewsIdsRelatedWithSomeNews_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.newsId = other.newsId;
      if (other.isSetTypes()) {
        List<com.lesports.qmt.sbc.api.common.NewsType> __this__types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>(other.types.size());
        for (com.lesports.qmt.sbc.api.common.NewsType other_element : other.types) {
          __this__types.add(other_element);
        }
        this.types = __this__types;
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getNewsIdsRelatedWithSomeNews_args deepCopy() {
      return new getNewsIdsRelatedWithSomeNews_args(this);
    }

    @Override
    public void clear() {
      setNewsIdIsSet(false);
      this.newsId = 0;
      this.types = null;
      this.page = null;
      this.caller = null;
    }

    public long getNewsId() {
      return this.newsId;
    }

    public void setNewsId(long newsId) {
      this.newsId = newsId;
      setNewsIdIsSet(true);
    }

    public void unsetNewsId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSID_ISSET_ID);
    }

    /** Returns true if field newsId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewsId() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSID_ISSET_ID);
    }

    public void setNewsIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSID_ISSET_ID, value);
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.common.NewsType> getTypesIterator() {
      return (this.types == null) ? null : this.types.iterator();
    }

    public void addToTypes(com.lesports.qmt.sbc.api.common.NewsType elem) {
      if (this.types == null) {
        this.types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>();
      }
      this.types.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.common.NewsType> getTypes() {
      return this.types;
    }

    public void setTypes(List<com.lesports.qmt.sbc.api.common.NewsType> types) {
      this.types = types;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEWS_ID:
        if (value == null) {
          unsetNewsId();
        } else {
          setNewsId((Long)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((List<com.lesports.qmt.sbc.api.common.NewsType>)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEWS_ID:
        return Long.valueOf(getNewsId());

      case TYPES:
        return getTypes();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEWS_ID:
        return isSetNewsId();
      case TYPES:
        return isSetTypes();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsIdsRelatedWithSomeNews_args)
        return this.equals((getNewsIdsRelatedWithSomeNews_args)that);
      return false;
    }

    public boolean equals(getNewsIdsRelatedWithSomeNews_args that) {
      if (that == null)
        return false;

      boolean this_present_newsId = true;
      boolean that_present_newsId = true;
      if (this_present_newsId || that_present_newsId) {
        if (!(this_present_newsId && that_present_newsId))
          return false;
        if (this.newsId != that.newsId)
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newsId = true;
      list.add(present_newsId);
      if (present_newsId)
        list.add(newsId);

      boolean present_types = true && (isSetTypes());
      list.add(present_types);
      if (present_types)
        list.add(types);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsIdsRelatedWithSomeNews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewsId()).compareTo(other.isSetNewsId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewsId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsId, other.newsId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsIdsRelatedWithSomeNews_args(");
      boolean first = true;

      sb.append("newsId:");
      sb.append(this.newsId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewsIdsRelatedWithSomeNews_argsStandardSchemeFactory implements SchemeFactory {
      public getNewsIdsRelatedWithSomeNews_argsStandardScheme getScheme() {
        return new getNewsIdsRelatedWithSomeNews_argsStandardScheme();
      }
    }

    private static class getNewsIdsRelatedWithSomeNews_argsStandardScheme extends StandardScheme<getNewsIdsRelatedWithSomeNews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsIdsRelatedWithSomeNews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEWS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.newsId = iprot.readI64();
                struct.setNewsIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>(_list152.size);
                  com.lesports.qmt.sbc.api.common.NewsType _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
                    struct.types.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsIdsRelatedWithSomeNews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEWS_ID_FIELD_DESC);
        oprot.writeI64(struct.newsId);
        oprot.writeFieldEnd();
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.types.size()));
            for (com.lesports.qmt.sbc.api.common.NewsType _iter155 : struct.types)
            {
              oprot.writeI32(_iter155.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsIdsRelatedWithSomeNews_argsTupleSchemeFactory implements SchemeFactory {
      public getNewsIdsRelatedWithSomeNews_argsTupleScheme getScheme() {
        return new getNewsIdsRelatedWithSomeNews_argsTupleScheme();
      }
    }

    private static class getNewsIdsRelatedWithSomeNews_argsTupleScheme extends TupleScheme<getNewsIdsRelatedWithSomeNews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsIdsRelatedWithSomeNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewsId()) {
          optionals.set(0);
        }
        if (struct.isSetTypes()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetCaller()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNewsId()) {
          oprot.writeI64(struct.newsId);
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (com.lesports.qmt.sbc.api.common.NewsType _iter156 : struct.types)
            {
              oprot.writeI32(_iter156.getValue());
            }
          }
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsIdsRelatedWithSomeNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.newsId = iprot.readI64();
          struct.setNewsIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.types = new ArrayList<com.lesports.qmt.sbc.api.common.NewsType>(_list157.size);
            com.lesports.qmt.sbc.api.common.NewsType _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
              struct.types.add(_elem158);
            }
          }
          struct.setTypesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getNewsIdsRelatedWithSomeNews_result implements org.apache.thrift.TBase<getNewsIdsRelatedWithSomeNews_result, getNewsIdsRelatedWithSomeNews_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsIdsRelatedWithSomeNews_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsIdsRelatedWithSomeNews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsIdsRelatedWithSomeNews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsIdsRelatedWithSomeNews_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsIdsRelatedWithSomeNews_result.class, metaDataMap);
    }

    public getNewsIdsRelatedWithSomeNews_result() {
    }

    public getNewsIdsRelatedWithSomeNews_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsIdsRelatedWithSomeNews_result(getNewsIdsRelatedWithSomeNews_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getNewsIdsRelatedWithSomeNews_result deepCopy() {
      return new getNewsIdsRelatedWithSomeNews_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsIdsRelatedWithSomeNews_result)
        return this.equals((getNewsIdsRelatedWithSomeNews_result)that);
      return false;
    }

    public boolean equals(getNewsIdsRelatedWithSomeNews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsIdsRelatedWithSomeNews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsIdsRelatedWithSomeNews_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewsIdsRelatedWithSomeNews_resultStandardSchemeFactory implements SchemeFactory {
      public getNewsIdsRelatedWithSomeNews_resultStandardScheme getScheme() {
        return new getNewsIdsRelatedWithSomeNews_resultStandardScheme();
      }
    }

    private static class getNewsIdsRelatedWithSomeNews_resultStandardScheme extends StandardScheme<getNewsIdsRelatedWithSomeNews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsIdsRelatedWithSomeNews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list160.size);
                  long _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = iprot.readI64();
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsIdsRelatedWithSomeNews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter163 : struct.success)
            {
              oprot.writeI64(_iter163);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsIdsRelatedWithSomeNews_resultTupleSchemeFactory implements SchemeFactory {
      public getNewsIdsRelatedWithSomeNews_resultTupleScheme getScheme() {
        return new getNewsIdsRelatedWithSomeNews_resultTupleScheme();
      }
    }

    private static class getNewsIdsRelatedWithSomeNews_resultTupleScheme extends TupleScheme<getNewsIdsRelatedWithSomeNews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsIdsRelatedWithSomeNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter164 : struct.success)
            {
              oprot.writeI64(_iter164);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsIdsRelatedWithSomeNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list165.size);
            long _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = iprot.readI64();
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNewsIdsNearbySomeNews_args implements org.apache.thrift.TBase<getNewsIdsNearbySomeNews_args, getNewsIdsNearbySomeNews_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsIdsNearbySomeNews_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsIdsNearbySomeNews_args");

    private static final org.apache.thrift.protocol.TField NEWS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newsId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsIdsNearbySomeNews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsIdsNearbySomeNews_argsTupleSchemeFactory());
    }

    private long newsId; // required
    private com.lesports.qmt.sbc.api.common.NewsType type; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEWS_ID((short)1, "newsId"),
      /**
       * 
       * @see com.lesports.qmt.sbc.api.common.NewsType
       */
      TYPE((short)2, "type"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEWS_ID
            return NEWS_ID;
          case 2: // TYPE
            return TYPE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWSID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEWS_ID, new org.apache.thrift.meta_data.FieldMetaData("newsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbc.api.common.NewsType.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsIdsNearbySomeNews_args.class, metaDataMap);
    }

    public getNewsIdsNearbySomeNews_args() {
    }

    public getNewsIdsNearbySomeNews_args(
      long newsId,
      com.lesports.qmt.sbc.api.common.NewsType type,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.newsId = newsId;
      setNewsIdIsSet(true);
      this.type = type;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsIdsNearbySomeNews_args(getNewsIdsNearbySomeNews_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.newsId = other.newsId;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getNewsIdsNearbySomeNews_args deepCopy() {
      return new getNewsIdsNearbySomeNews_args(this);
    }

    @Override
    public void clear() {
      setNewsIdIsSet(false);
      this.newsId = 0;
      this.type = null;
      this.caller = null;
    }

    public long getNewsId() {
      return this.newsId;
    }

    public void setNewsId(long newsId) {
      this.newsId = newsId;
      setNewsIdIsSet(true);
    }

    public void unsetNewsId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWSID_ISSET_ID);
    }

    /** Returns true if field newsId is set (has been assigned a value) and false otherwise */
    public boolean isSetNewsId() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWSID_ISSET_ID);
    }

    public void setNewsIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWSID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.NewsType
     */
    public com.lesports.qmt.sbc.api.common.NewsType getType() {
      return this.type;
    }

    /**
     * 
     * @see com.lesports.qmt.sbc.api.common.NewsType
     */
    public void setType(com.lesports.qmt.sbc.api.common.NewsType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEWS_ID:
        if (value == null) {
          unsetNewsId();
        } else {
          setNewsId((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((com.lesports.qmt.sbc.api.common.NewsType)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEWS_ID:
        return Long.valueOf(getNewsId());

      case TYPE:
        return getType();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEWS_ID:
        return isSetNewsId();
      case TYPE:
        return isSetType();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsIdsNearbySomeNews_args)
        return this.equals((getNewsIdsNearbySomeNews_args)that);
      return false;
    }

    public boolean equals(getNewsIdsNearbySomeNews_args that) {
      if (that == null)
        return false;

      boolean this_present_newsId = true;
      boolean that_present_newsId = true;
      if (this_present_newsId || that_present_newsId) {
        if (!(this_present_newsId && that_present_newsId))
          return false;
        if (this.newsId != that.newsId)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newsId = true;
      list.add(present_newsId);
      if (present_newsId)
        list.add(newsId);

      boolean present_type = true && (isSetType());
      list.add(present_type);
      if (present_type)
        list.add(type.getValue());

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsIdsNearbySomeNews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewsId()).compareTo(other.isSetNewsId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewsId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsId, other.newsId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsIdsNearbySomeNews_args(");
      boolean first = true;

      sb.append("newsId:");
      sb.append(this.newsId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewsIdsNearbySomeNews_argsStandardSchemeFactory implements SchemeFactory {
      public getNewsIdsNearbySomeNews_argsStandardScheme getScheme() {
        return new getNewsIdsNearbySomeNews_argsStandardScheme();
      }
    }

    private static class getNewsIdsNearbySomeNews_argsStandardScheme extends StandardScheme<getNewsIdsNearbySomeNews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsIdsNearbySomeNews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEWS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.newsId = iprot.readI64();
                struct.setNewsIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsIdsNearbySomeNews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEWS_ID_FIELD_DESC);
        oprot.writeI64(struct.newsId);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsIdsNearbySomeNews_argsTupleSchemeFactory implements SchemeFactory {
      public getNewsIdsNearbySomeNews_argsTupleScheme getScheme() {
        return new getNewsIdsNearbySomeNews_argsTupleScheme();
      }
    }

    private static class getNewsIdsNearbySomeNews_argsTupleScheme extends TupleScheme<getNewsIdsNearbySomeNews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsIdsNearbySomeNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewsId()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNewsId()) {
          oprot.writeI64(struct.newsId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsIdsNearbySomeNews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.newsId = iprot.readI64();
          struct.setNewsIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = com.lesports.qmt.sbc.api.common.NewsType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getNewsIdsNearbySomeNews_result implements org.apache.thrift.TBase<getNewsIdsNearbySomeNews_result, getNewsIdsNearbySomeNews_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewsIdsNearbySomeNews_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewsIdsNearbySomeNews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewsIdsNearbySomeNews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewsIdsNearbySomeNews_resultTupleSchemeFactory());
    }

    private Map<String,Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewsIdsNearbySomeNews_result.class, metaDataMap);
    }

    public getNewsIdsNearbySomeNews_result() {
    }

    public getNewsIdsNearbySomeNews_result(
      Map<String,Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewsIdsNearbySomeNews_result(getNewsIdsNearbySomeNews_result other) {
      if (other.isSetSuccess()) {
        Map<String,Long> __this__success = new HashMap<String,Long>(other.success);
        this.success = __this__success;
      }
    }

    public getNewsIdsNearbySomeNews_result deepCopy() {
      return new getNewsIdsNearbySomeNews_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, long val) {
      if (this.success == null) {
        this.success = new HashMap<String,Long>();
      }
      this.success.put(key, val);
    }

    public Map<String,Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewsIdsNearbySomeNews_result)
        return this.equals((getNewsIdsNearbySomeNews_result)that);
      return false;
    }

    public boolean equals(getNewsIdsNearbySomeNews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNewsIdsNearbySomeNews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewsIdsNearbySomeNews_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewsIdsNearbySomeNews_resultStandardSchemeFactory implements SchemeFactory {
      public getNewsIdsNearbySomeNews_resultStandardScheme getScheme() {
        return new getNewsIdsNearbySomeNews_resultStandardScheme();
      }
    }

    private static class getNewsIdsNearbySomeNews_resultStandardScheme extends StandardScheme<getNewsIdsNearbySomeNews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewsIdsNearbySomeNews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Long>(2*_map168.size);
                  String _key169;
                  long _val170;
                  for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                  {
                    _key169 = iprot.readString();
                    _val170 = iprot.readI64();
                    struct.success.put(_key169, _val170);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewsIdsNearbySomeNews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (Map.Entry<String, Long> _iter172 : struct.success.entrySet())
            {
              oprot.writeString(_iter172.getKey());
              oprot.writeI64(_iter172.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewsIdsNearbySomeNews_resultTupleSchemeFactory implements SchemeFactory {
      public getNewsIdsNearbySomeNews_resultTupleScheme getScheme() {
        return new getNewsIdsNearbySomeNews_resultTupleScheme();
      }
    }

    private static class getNewsIdsNearbySomeNews_resultTupleScheme extends TupleScheme<getNewsIdsNearbySomeNews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewsIdsNearbySomeNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Long> _iter173 : struct.success.entrySet())
            {
              oprot.writeString(_iter173.getKey());
              oprot.writeI64(_iter173.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewsIdsNearbySomeNews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map174 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashMap<String,Long>(2*_map174.size);
            String _key175;
            long _val176;
            for (int _i177 = 0; _i177 < _map174.size; ++_i177)
            {
              _key175 = iprot.readString();
              _val176 = iprot.readI64();
              struct.success.put(_key175, _val176);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTopicById_args implements org.apache.thrift.TBase<getTTopicById_args, getTTopicById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicById_args.class, metaDataMap);
    }

    public getTTopicById_args() {
    }

    public getTTopicById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicById_args(getTTopicById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTopicById_args deepCopy() {
      return new getTTopicById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicById_args)
        return this.equals((getTTopicById_args)that);
      return false;
    }

    public boolean equals(getTTopicById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicById_argsStandardSchemeFactory implements SchemeFactory {
      public getTTopicById_argsStandardScheme getScheme() {
        return new getTTopicById_argsStandardScheme();
      }
    }

    private static class getTTopicById_argsStandardScheme extends StandardScheme<getTTopicById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicById_argsTupleSchemeFactory implements SchemeFactory {
      public getTTopicById_argsTupleScheme getScheme() {
        return new getTTopicById_argsTupleScheme();
      }
    }

    private static class getTTopicById_argsTupleScheme extends TupleScheme<getTTopicById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTopicById_result implements org.apache.thrift.TBase<getTTopicById_result, getTTopicById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TTopic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TTopic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicById_result.class, metaDataMap);
    }

    public getTTopicById_result() {
    }

    public getTTopicById_result(
      com.lesports.qmt.sbc.api.dto.TTopic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicById_result(getTTopicById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TTopic(other.success);
      }
    }

    public getTTopicById_result deepCopy() {
      return new getTTopicById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TTopic getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TTopic success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TTopic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicById_result)
        return this.equals((getTTopicById_result)that);
      return false;
    }

    public boolean equals(getTTopicById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicById_resultStandardSchemeFactory implements SchemeFactory {
      public getTTopicById_resultStandardScheme getScheme() {
        return new getTTopicById_resultStandardScheme();
      }
    }

    private static class getTTopicById_resultStandardScheme extends StandardScheme<getTTopicById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TTopic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicById_resultTupleSchemeFactory implements SchemeFactory {
      public getTTopicById_resultTupleScheme getScheme() {
        return new getTTopicById_resultTupleScheme();
      }
    }

    private static class getTTopicById_resultTupleScheme extends TupleScheme<getTTopicById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TTopic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTopicsByIds_args implements org.apache.thrift.TBase<getTTopicsByIds_args, getTTopicsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicsByIds_args.class, metaDataMap);
    }

    public getTTopicsByIds_args() {
    }

    public getTTopicsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicsByIds_args(getTTopicsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTopicsByIds_args deepCopy() {
      return new getTTopicsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicsByIds_args)
        return this.equals((getTTopicsByIds_args)that);
      return false;
    }

    public boolean equals(getTTopicsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTTopicsByIds_argsStandardScheme getScheme() {
        return new getTTopicsByIds_argsStandardScheme();
      }
    }

    private static class getTTopicsByIds_argsStandardScheme extends StandardScheme<getTTopicsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list178.size);
                  long _elem179;
                  for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                  {
                    _elem179 = iprot.readI64();
                    struct.ids.add(_elem179);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter181 : struct.ids)
            {
              oprot.writeI64(_iter181);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTTopicsByIds_argsTupleScheme getScheme() {
        return new getTTopicsByIds_argsTupleScheme();
      }
    }

    private static class getTTopicsByIds_argsTupleScheme extends TupleScheme<getTTopicsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter182 : struct.ids)
            {
              oprot.writeI64(_iter182);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list183.size);
            long _elem184;
            for (int _i185 = 0; _i185 < _list183.size; ++_i185)
            {
              _elem184 = iprot.readI64();
              struct.ids.add(_elem184);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTopicsByIds_result implements org.apache.thrift.TBase<getTTopicsByIds_result, getTTopicsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TTopic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TTopic.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicsByIds_result.class, metaDataMap);
    }

    public getTTopicsByIds_result() {
    }

    public getTTopicsByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TTopic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicsByIds_result(getTTopicsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TTopic> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopic>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TTopic other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TTopic(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTTopicsByIds_result deepCopy() {
      return new getTTopicsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TTopic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TTopic elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopic>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TTopic> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TTopic> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TTopic>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicsByIds_result)
        return this.equals((getTTopicsByIds_result)that);
      return false;
    }

    public boolean equals(getTTopicsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTTopicsByIds_resultStandardScheme getScheme() {
        return new getTTopicsByIds_resultStandardScheme();
      }
    }

    private static class getTTopicsByIds_resultStandardScheme extends StandardScheme<getTTopicsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopic>(_list186.size);
                  com.lesports.qmt.sbc.api.dto.TTopic _elem187;
                  for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                  {
                    _elem187 = new com.lesports.qmt.sbc.api.dto.TTopic();
                    _elem187.read(iprot);
                    struct.success.add(_elem187);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TTopic _iter189 : struct.success)
            {
              _iter189.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTTopicsByIds_resultTupleScheme getScheme() {
        return new getTTopicsByIds_resultTupleScheme();
      }
    }

    private static class getTTopicsByIds_resultTupleScheme extends TupleScheme<getTTopicsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TTopic _iter190 : struct.success)
            {
              _iter190.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopic>(_list191.size);
            com.lesports.qmt.sbc.api.dto.TTopic _elem192;
            for (int _i193 = 0; _i193 < _list191.size; ++_i193)
            {
              _elem192 = new com.lesports.qmt.sbc.api.dto.TTopic();
              _elem192.read(iprot);
              struct.success.add(_elem192);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTopicItemPackageById_args implements org.apache.thrift.TBase<getTTopicItemPackageById_args, getTTopicItemPackageById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicItemPackageById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicItemPackageById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicItemPackageById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicItemPackageById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicItemPackageById_args.class, metaDataMap);
    }

    public getTTopicItemPackageById_args() {
    }

    public getTTopicItemPackageById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicItemPackageById_args(getTTopicItemPackageById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTopicItemPackageById_args deepCopy() {
      return new getTTopicItemPackageById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicItemPackageById_args)
        return this.equals((getTTopicItemPackageById_args)that);
      return false;
    }

    public boolean equals(getTTopicItemPackageById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicItemPackageById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicItemPackageById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicItemPackageById_argsStandardSchemeFactory implements SchemeFactory {
      public getTTopicItemPackageById_argsStandardScheme getScheme() {
        return new getTTopicItemPackageById_argsStandardScheme();
      }
    }

    private static class getTTopicItemPackageById_argsStandardScheme extends StandardScheme<getTTopicItemPackageById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicItemPackageById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicItemPackageById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicItemPackageById_argsTupleSchemeFactory implements SchemeFactory {
      public getTTopicItemPackageById_argsTupleScheme getScheme() {
        return new getTTopicItemPackageById_argsTupleScheme();
      }
    }

    private static class getTTopicItemPackageById_argsTupleScheme extends TupleScheme<getTTopicItemPackageById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackageById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackageById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTopicItemPackageById_result implements org.apache.thrift.TBase<getTTopicItemPackageById_result, getTTopicItemPackageById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicItemPackageById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicItemPackageById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicItemPackageById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicItemPackageById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TTopicItemPackage success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TTopicItemPackage.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicItemPackageById_result.class, metaDataMap);
    }

    public getTTopicItemPackageById_result() {
    }

    public getTTopicItemPackageById_result(
      com.lesports.qmt.sbc.api.dto.TTopicItemPackage success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicItemPackageById_result(getTTopicItemPackageById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TTopicItemPackage(other.success);
      }
    }

    public getTTopicItemPackageById_result deepCopy() {
      return new getTTopicItemPackageById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TTopicItemPackage getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TTopicItemPackage success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TTopicItemPackage)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicItemPackageById_result)
        return this.equals((getTTopicItemPackageById_result)that);
      return false;
    }

    public boolean equals(getTTopicItemPackageById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicItemPackageById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicItemPackageById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicItemPackageById_resultStandardSchemeFactory implements SchemeFactory {
      public getTTopicItemPackageById_resultStandardScheme getScheme() {
        return new getTTopicItemPackageById_resultStandardScheme();
      }
    }

    private static class getTTopicItemPackageById_resultStandardScheme extends StandardScheme<getTTopicItemPackageById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicItemPackageById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TTopicItemPackage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicItemPackageById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicItemPackageById_resultTupleSchemeFactory implements SchemeFactory {
      public getTTopicItemPackageById_resultTupleScheme getScheme() {
        return new getTTopicItemPackageById_resultTupleScheme();
      }
    }

    private static class getTTopicItemPackageById_resultTupleScheme extends TupleScheme<getTTopicItemPackageById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackageById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackageById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TTopicItemPackage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTopicItemPackagesByIds_args implements org.apache.thrift.TBase<getTTopicItemPackagesByIds_args, getTTopicItemPackagesByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicItemPackagesByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicItemPackagesByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicItemPackagesByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicItemPackagesByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicItemPackagesByIds_args.class, metaDataMap);
    }

    public getTTopicItemPackagesByIds_args() {
    }

    public getTTopicItemPackagesByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicItemPackagesByIds_args(getTTopicItemPackagesByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTopicItemPackagesByIds_args deepCopy() {
      return new getTTopicItemPackagesByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicItemPackagesByIds_args)
        return this.equals((getTTopicItemPackagesByIds_args)that);
      return false;
    }

    public boolean equals(getTTopicItemPackagesByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicItemPackagesByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicItemPackagesByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicItemPackagesByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTTopicItemPackagesByIds_argsStandardScheme getScheme() {
        return new getTTopicItemPackagesByIds_argsStandardScheme();
      }
    }

    private static class getTTopicItemPackagesByIds_argsStandardScheme extends StandardScheme<getTTopicItemPackagesByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicItemPackagesByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list194.size);
                  long _elem195;
                  for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                  {
                    _elem195 = iprot.readI64();
                    struct.ids.add(_elem195);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicItemPackagesByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter197 : struct.ids)
            {
              oprot.writeI64(_iter197);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicItemPackagesByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTTopicItemPackagesByIds_argsTupleScheme getScheme() {
        return new getTTopicItemPackagesByIds_argsTupleScheme();
      }
    }

    private static class getTTopicItemPackagesByIds_argsTupleScheme extends TupleScheme<getTTopicItemPackagesByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackagesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter198 : struct.ids)
            {
              oprot.writeI64(_iter198);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackagesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list199.size);
            long _elem200;
            for (int _i201 = 0; _i201 < _list199.size; ++_i201)
            {
              _elem200 = iprot.readI64();
              struct.ids.add(_elem200);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTopicItemPackagesByIds_result implements org.apache.thrift.TBase<getTTopicItemPackagesByIds_result, getTTopicItemPackagesByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopicItemPackagesByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopicItemPackagesByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopicItemPackagesByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopicItemPackagesByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TTopicItemPackage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopicItemPackagesByIds_result.class, metaDataMap);
    }

    public getTTopicItemPackagesByIds_result() {
    }

    public getTTopicItemPackagesByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopicItemPackagesByIds_result(getTTopicItemPackagesByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TTopicItemPackage other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TTopicItemPackage(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTTopicItemPackagesByIds_result deepCopy() {
      return new getTTopicItemPackagesByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TTopicItemPackage elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopicItemPackagesByIds_result)
        return this.equals((getTTopicItemPackagesByIds_result)that);
      return false;
    }

    public boolean equals(getTTopicItemPackagesByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopicItemPackagesByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopicItemPackagesByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopicItemPackagesByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTTopicItemPackagesByIds_resultStandardScheme getScheme() {
        return new getTTopicItemPackagesByIds_resultStandardScheme();
      }
    }

    private static class getTTopicItemPackagesByIds_resultStandardScheme extends StandardScheme<getTTopicItemPackagesByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopicItemPackagesByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>(_list202.size);
                  com.lesports.qmt.sbc.api.dto.TTopicItemPackage _elem203;
                  for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                  {
                    _elem203 = new com.lesports.qmt.sbc.api.dto.TTopicItemPackage();
                    _elem203.read(iprot);
                    struct.success.add(_elem203);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopicItemPackagesByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TTopicItemPackage _iter205 : struct.success)
            {
              _iter205.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopicItemPackagesByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTTopicItemPackagesByIds_resultTupleScheme getScheme() {
        return new getTTopicItemPackagesByIds_resultTupleScheme();
      }
    }

    private static class getTTopicItemPackagesByIds_resultTupleScheme extends TupleScheme<getTTopicItemPackagesByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackagesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TTopicItemPackage _iter206 : struct.success)
            {
              _iter206.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopicItemPackagesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TTopicItemPackage>(_list207.size);
            com.lesports.qmt.sbc.api.dto.TTopicItemPackage _elem208;
            for (int _i209 = 0; _i209 < _list207.size; ++_i209)
            {
              _elem208 = new com.lesports.qmt.sbc.api.dto.TTopicItemPackage();
              _elem208.read(iprot);
              struct.success.add(_elem208);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTopicItemPackageIdsByTopicId_args implements org.apache.thrift.TBase<getTopicItemPackageIdsByTopicId_args, getTopicItemPackageIdsByTopicId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicItemPackageIdsByTopicId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicItemPackageIdsByTopicId_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopicItemPackageIdsByTopicId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopicItemPackageIdsByTopicId_argsTupleSchemeFactory());
    }

    private long topicId; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicItemPackageIdsByTopicId_args.class, metaDataMap);
    }

    public getTopicItemPackageIdsByTopicId_args() {
    }

    public getTopicItemPackageIdsByTopicId_args(
      long topicId,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopicItemPackageIdsByTopicId_args(getTopicItemPackageIdsByTopicId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTopicItemPackageIdsByTopicId_args deepCopy() {
      return new getTopicItemPackageIdsByTopicId_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      this.caller = null;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public void setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopicItemPackageIdsByTopicId_args)
        return this.equals((getTopicItemPackageIdsByTopicId_args)that);
      return false;
    }

    public boolean equals(getTopicItemPackageIdsByTopicId_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_topicId = true;
      list.add(present_topicId);
      if (present_topicId)
        list.add(topicId);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTopicItemPackageIdsByTopicId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopicItemPackageIdsByTopicId_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopicItemPackageIdsByTopicId_argsStandardSchemeFactory implements SchemeFactory {
      public getTopicItemPackageIdsByTopicId_argsStandardScheme getScheme() {
        return new getTopicItemPackageIdsByTopicId_argsStandardScheme();
      }
    }

    private static class getTopicItemPackageIdsByTopicId_argsStandardScheme extends StandardScheme<getTopicItemPackageIdsByTopicId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicItemPackageIdsByTopicId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicItemPackageIdsByTopicId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopicItemPackageIdsByTopicId_argsTupleSchemeFactory implements SchemeFactory {
      public getTopicItemPackageIdsByTopicId_argsTupleScheme getScheme() {
        return new getTopicItemPackageIdsByTopicId_argsTupleScheme();
      }
    }

    private static class getTopicItemPackageIdsByTopicId_argsTupleScheme extends TupleScheme<getTopicItemPackageIdsByTopicId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopicItemPackageIdsByTopicId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopicItemPackageIdsByTopicId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTopicItemPackageIdsByTopicId_result implements org.apache.thrift.TBase<getTopicItemPackageIdsByTopicId_result, getTopicItemPackageIdsByTopicId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopicItemPackageIdsByTopicId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopicItemPackageIdsByTopicId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopicItemPackageIdsByTopicId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopicItemPackageIdsByTopicId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopicItemPackageIdsByTopicId_result.class, metaDataMap);
    }

    public getTopicItemPackageIdsByTopicId_result() {
    }

    public getTopicItemPackageIdsByTopicId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopicItemPackageIdsByTopicId_result(getTopicItemPackageIdsByTopicId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTopicItemPackageIdsByTopicId_result deepCopy() {
      return new getTopicItemPackageIdsByTopicId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopicItemPackageIdsByTopicId_result)
        return this.equals((getTopicItemPackageIdsByTopicId_result)that);
      return false;
    }

    public boolean equals(getTopicItemPackageIdsByTopicId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTopicItemPackageIdsByTopicId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopicItemPackageIdsByTopicId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopicItemPackageIdsByTopicId_resultStandardSchemeFactory implements SchemeFactory {
      public getTopicItemPackageIdsByTopicId_resultStandardScheme getScheme() {
        return new getTopicItemPackageIdsByTopicId_resultStandardScheme();
      }
    }

    private static class getTopicItemPackageIdsByTopicId_resultStandardScheme extends StandardScheme<getTopicItemPackageIdsByTopicId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopicItemPackageIdsByTopicId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list210.size);
                  long _elem211;
                  for (int _i212 = 0; _i212 < _list210.size; ++_i212)
                  {
                    _elem211 = iprot.readI64();
                    struct.success.add(_elem211);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopicItemPackageIdsByTopicId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter213 : struct.success)
            {
              oprot.writeI64(_iter213);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopicItemPackageIdsByTopicId_resultTupleSchemeFactory implements SchemeFactory {
      public getTopicItemPackageIdsByTopicId_resultTupleScheme getScheme() {
        return new getTopicItemPackageIdsByTopicId_resultTupleScheme();
      }
    }

    private static class getTopicItemPackageIdsByTopicId_resultTupleScheme extends TupleScheme<getTopicItemPackageIdsByTopicId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopicItemPackageIdsByTopicId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter214 : struct.success)
            {
              oprot.writeI64(_iter214);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopicItemPackageIdsByTopicId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list215 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list215.size);
            long _elem216;
            for (int _i217 = 0; _i217 < _list215.size; ++_i217)
            {
              _elem216 = iprot.readI64();
              struct.success.add(_elem216);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTProgramAlbumById_args implements org.apache.thrift.TBase<getTProgramAlbumById_args, getTProgramAlbumById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTProgramAlbumById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTProgramAlbumById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTProgramAlbumById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTProgramAlbumById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTProgramAlbumById_args.class, metaDataMap);
    }

    public getTProgramAlbumById_args() {
    }

    public getTProgramAlbumById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTProgramAlbumById_args(getTProgramAlbumById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTProgramAlbumById_args deepCopy() {
      return new getTProgramAlbumById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTProgramAlbumById_args)
        return this.equals((getTProgramAlbumById_args)that);
      return false;
    }

    public boolean equals(getTProgramAlbumById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTProgramAlbumById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTProgramAlbumById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTProgramAlbumById_argsStandardSchemeFactory implements SchemeFactory {
      public getTProgramAlbumById_argsStandardScheme getScheme() {
        return new getTProgramAlbumById_argsStandardScheme();
      }
    }

    private static class getTProgramAlbumById_argsStandardScheme extends StandardScheme<getTProgramAlbumById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTProgramAlbumById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTProgramAlbumById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTProgramAlbumById_argsTupleSchemeFactory implements SchemeFactory {
      public getTProgramAlbumById_argsTupleScheme getScheme() {
        return new getTProgramAlbumById_argsTupleScheme();
      }
    }

    private static class getTProgramAlbumById_argsTupleScheme extends TupleScheme<getTProgramAlbumById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTProgramAlbumById_result implements org.apache.thrift.TBase<getTProgramAlbumById_result, getTProgramAlbumById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTProgramAlbumById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTProgramAlbumById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTProgramAlbumById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTProgramAlbumById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbc.api.dto.TProgramAlbum success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TProgramAlbum.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTProgramAlbumById_result.class, metaDataMap);
    }

    public getTProgramAlbumById_result() {
    }

    public getTProgramAlbumById_result(
      com.lesports.qmt.sbc.api.dto.TProgramAlbum success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTProgramAlbumById_result(getTProgramAlbumById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbc.api.dto.TProgramAlbum(other.success);
      }
    }

    public getTProgramAlbumById_result deepCopy() {
      return new getTProgramAlbumById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbc.api.dto.TProgramAlbum getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbc.api.dto.TProgramAlbum success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbc.api.dto.TProgramAlbum)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTProgramAlbumById_result)
        return this.equals((getTProgramAlbumById_result)that);
      return false;
    }

    public boolean equals(getTProgramAlbumById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTProgramAlbumById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTProgramAlbumById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTProgramAlbumById_resultStandardSchemeFactory implements SchemeFactory {
      public getTProgramAlbumById_resultStandardScheme getScheme() {
        return new getTProgramAlbumById_resultStandardScheme();
      }
    }

    private static class getTProgramAlbumById_resultStandardScheme extends StandardScheme<getTProgramAlbumById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTProgramAlbumById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbc.api.dto.TProgramAlbum();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTProgramAlbumById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTProgramAlbumById_resultTupleSchemeFactory implements SchemeFactory {
      public getTProgramAlbumById_resultTupleScheme getScheme() {
        return new getTProgramAlbumById_resultTupleScheme();
      }
    }

    private static class getTProgramAlbumById_resultTupleScheme extends TupleScheme<getTProgramAlbumById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbc.api.dto.TProgramAlbum();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTProgramAlbumsByIds_args implements org.apache.thrift.TBase<getTProgramAlbumsByIds_args, getTProgramAlbumsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTProgramAlbumsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTProgramAlbumsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTProgramAlbumsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTProgramAlbumsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTProgramAlbumsByIds_args.class, metaDataMap);
    }

    public getTProgramAlbumsByIds_args() {
    }

    public getTProgramAlbumsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTProgramAlbumsByIds_args(getTProgramAlbumsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTProgramAlbumsByIds_args deepCopy() {
      return new getTProgramAlbumsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTProgramAlbumsByIds_args)
        return this.equals((getTProgramAlbumsByIds_args)that);
      return false;
    }

    public boolean equals(getTProgramAlbumsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTProgramAlbumsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTProgramAlbumsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTProgramAlbumsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTProgramAlbumsByIds_argsStandardScheme getScheme() {
        return new getTProgramAlbumsByIds_argsStandardScheme();
      }
    }

    private static class getTProgramAlbumsByIds_argsStandardScheme extends StandardScheme<getTProgramAlbumsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTProgramAlbumsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list218.size);
                  long _elem219;
                  for (int _i220 = 0; _i220 < _list218.size; ++_i220)
                  {
                    _elem219 = iprot.readI64();
                    struct.ids.add(_elem219);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTProgramAlbumsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter221 : struct.ids)
            {
              oprot.writeI64(_iter221);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTProgramAlbumsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTProgramAlbumsByIds_argsTupleScheme getScheme() {
        return new getTProgramAlbumsByIds_argsTupleScheme();
      }
    }

    private static class getTProgramAlbumsByIds_argsTupleScheme extends TupleScheme<getTProgramAlbumsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter222 : struct.ids)
            {
              oprot.writeI64(_iter222);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list223 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list223.size);
            long _elem224;
            for (int _i225 = 0; _i225 < _list223.size; ++_i225)
            {
              _elem224 = iprot.readI64();
              struct.ids.add(_elem224);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTProgramAlbumsByIds_result implements org.apache.thrift.TBase<getTProgramAlbumsByIds_result, getTProgramAlbumsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTProgramAlbumsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTProgramAlbumsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTProgramAlbumsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTProgramAlbumsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbc.api.dto.TProgramAlbum.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTProgramAlbumsByIds_result.class, metaDataMap);
    }

    public getTProgramAlbumsByIds_result() {
    }

    public getTProgramAlbumsByIds_result(
      List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTProgramAlbumsByIds_result(getTProgramAlbumsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> __this__success = new ArrayList<com.lesports.qmt.sbc.api.dto.TProgramAlbum>(other.success.size());
        for (com.lesports.qmt.sbc.api.dto.TProgramAlbum other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbc.api.dto.TProgramAlbum(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTProgramAlbumsByIds_result deepCopy() {
      return new getTProgramAlbumsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbc.api.dto.TProgramAlbum> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbc.api.dto.TProgramAlbum elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TProgramAlbum>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbc.api.dto.TProgramAlbum> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbc.api.dto.TProgramAlbum>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTProgramAlbumsByIds_result)
        return this.equals((getTProgramAlbumsByIds_result)that);
      return false;
    }

    public boolean equals(getTProgramAlbumsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTProgramAlbumsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTProgramAlbumsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTProgramAlbumsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTProgramAlbumsByIds_resultStandardScheme getScheme() {
        return new getTProgramAlbumsByIds_resultStandardScheme();
      }
    }

    private static class getTProgramAlbumsByIds_resultStandardScheme extends StandardScheme<getTProgramAlbumsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTProgramAlbumsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TProgramAlbum>(_list226.size);
                  com.lesports.qmt.sbc.api.dto.TProgramAlbum _elem227;
                  for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                  {
                    _elem227 = new com.lesports.qmt.sbc.api.dto.TProgramAlbum();
                    _elem227.read(iprot);
                    struct.success.add(_elem227);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTProgramAlbumsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbc.api.dto.TProgramAlbum _iter229 : struct.success)
            {
              _iter229.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTProgramAlbumsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTProgramAlbumsByIds_resultTupleScheme getScheme() {
        return new getTProgramAlbumsByIds_resultTupleScheme();
      }
    }

    private static class getTProgramAlbumsByIds_resultTupleScheme extends TupleScheme<getTProgramAlbumsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbc.api.dto.TProgramAlbum _iter230 : struct.success)
            {
              _iter230.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbumsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list231 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbc.api.dto.TProgramAlbum>(_list231.size);
            com.lesports.qmt.sbc.api.dto.TProgramAlbum _elem232;
            for (int _i233 = 0; _i233 < _list231.size; ++_i233)
            {
              _elem232 = new com.lesports.qmt.sbc.api.dto.TProgramAlbum();
              _elem232.read(iprot);
              struct.success.add(_elem232);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTProgramAlbums_args implements org.apache.thrift.TBase<getTProgramAlbums_args, getTProgramAlbums_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTProgramAlbums_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTProgramAlbums_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTProgramAlbums_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTProgramAlbums_argsTupleSchemeFactory());
    }

    private long tagId; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tagId"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TAGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTProgramAlbums_args.class, metaDataMap);
    }

    public getTProgramAlbums_args() {
    }

    public getTProgramAlbums_args(
      long tagId,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.tagId = tagId;
      setTagIdIsSet(true);
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTProgramAlbums_args(getTProgramAlbums_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tagId = other.tagId;
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTProgramAlbums_args deepCopy() {
      return new getTProgramAlbums_args(this);
    }

    @Override
    public void clear() {
      setTagIdIsSet(false);
      this.tagId = 0;
      this.page = null;
      this.caller = null;
    }

    public long getTagId() {
      return this.tagId;
    }

    public void setTagId(long tagId) {
      this.tagId = tagId;
      setTagIdIsSet(true);
    }

    public void unsetTagId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAGID_ISSET_ID);
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return EncodingUtils.testBit(__isset_bitfield, __TAGID_ISSET_ID);
    }

    public void setTagIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAGID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((Long)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return Long.valueOf(getTagId());

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTagId();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTProgramAlbums_args)
        return this.equals((getTProgramAlbums_args)that);
      return false;
    }

    public boolean equals(getTProgramAlbums_args that) {
      if (that == null)
        return false;

      boolean this_present_tagId = true;
      boolean that_present_tagId = true;
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (this.tagId != that.tagId)
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagId = true;
      list.add(present_tagId);
      if (present_tagId)
        list.add(tagId);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTProgramAlbums_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(other.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, other.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTProgramAlbums_args(");
      boolean first = true;

      sb.append("tagId:");
      sb.append(this.tagId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTProgramAlbums_argsStandardSchemeFactory implements SchemeFactory {
      public getTProgramAlbums_argsStandardScheme getScheme() {
        return new getTProgramAlbums_argsStandardScheme();
      }
    }

    private static class getTProgramAlbums_argsStandardScheme extends StandardScheme<getTProgramAlbums_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTProgramAlbums_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tagId = iprot.readI64();
                struct.setTagIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTProgramAlbums_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeI64(struct.tagId);
        oprot.writeFieldEnd();
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTProgramAlbums_argsTupleSchemeFactory implements SchemeFactory {
      public getTProgramAlbums_argsTupleScheme getScheme() {
        return new getTProgramAlbums_argsTupleScheme();
      }
    }

    private static class getTProgramAlbums_argsTupleScheme extends TupleScheme<getTProgramAlbums_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTagId()) {
          oprot.writeI64(struct.tagId);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbums_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tagId = iprot.readI64();
          struct.setTagIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTProgramAlbums_result implements org.apache.thrift.TBase<getTProgramAlbums_result, getTProgramAlbums_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTProgramAlbums_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTProgramAlbums_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTProgramAlbums_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTProgramAlbums_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTProgramAlbums_result.class, metaDataMap);
    }

    public getTProgramAlbums_result() {
    }

    public getTProgramAlbums_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTProgramAlbums_result(getTProgramAlbums_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTProgramAlbums_result deepCopy() {
      return new getTProgramAlbums_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTProgramAlbums_result)
        return this.equals((getTProgramAlbums_result)that);
      return false;
    }

    public boolean equals(getTProgramAlbums_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTProgramAlbums_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTProgramAlbums_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTProgramAlbums_resultStandardSchemeFactory implements SchemeFactory {
      public getTProgramAlbums_resultStandardScheme getScheme() {
        return new getTProgramAlbums_resultStandardScheme();
      }
    }

    private static class getTProgramAlbums_resultStandardScheme extends StandardScheme<getTProgramAlbums_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTProgramAlbums_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list234 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list234.size);
                  long _elem235;
                  for (int _i236 = 0; _i236 < _list234.size; ++_i236)
                  {
                    _elem235 = iprot.readI64();
                    struct.success.add(_elem235);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTProgramAlbums_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter237 : struct.success)
            {
              oprot.writeI64(_iter237);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTProgramAlbums_resultTupleSchemeFactory implements SchemeFactory {
      public getTProgramAlbums_resultTupleScheme getScheme() {
        return new getTProgramAlbums_resultTupleScheme();
      }
    }

    private static class getTProgramAlbums_resultTupleScheme extends TupleScheme<getTProgramAlbums_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter238 : struct.success)
            {
              oprot.writeI64(_iter238);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTProgramAlbums_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list239.size);
            long _elem240;
            for (int _i241 = 0; _i241 < _list239.size; ++_i241)
            {
              _elem240 = iprot.readI64();
              struct.success.add(_elem240);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
