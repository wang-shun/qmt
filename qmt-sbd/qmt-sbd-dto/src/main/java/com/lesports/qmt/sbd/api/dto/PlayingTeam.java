/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class PlayingTeam implements org.apache.thrift.TBase<PlayingTeam, PlayingTeam._Fields>, java.io.Serializable, Cloneable, Comparable<PlayingTeam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlayingTeam");

  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TEAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MULTI_COUN_LOGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiCounLogos", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENT_CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentCsid", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlayingTeamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlayingTeamTupleSchemeFactory());
  }

  private long teamId; // required
  private String name; // required
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private int number; // required
  private String logo; // required
  private int teamType; // optional
  private List<com.lesports.api.common.CounString> multiCounLogos; // optional
  private long currentCsid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEAM_ID((short)1, "teamId"),
    NAME((short)2, "name"),
    MULTI_LANG_NAMES((short)3, "multiLangNames"),
    NUMBER((short)4, "number"),
    LOGO((short)5, "logo"),
    TEAM_TYPE((short)6, "teamType"),
    MULTI_COUN_LOGOS((short)7, "multiCounLogos"),
    CURRENT_CSID((short)8, "currentCsid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEAM_ID
          return TEAM_ID;
        case 2: // NAME
          return NAME;
        case 3: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 4: // NUMBER
          return NUMBER;
        case 5: // LOGO
          return LOGO;
        case 6: // TEAM_TYPE
          return TEAM_TYPE;
        case 7: // MULTI_COUN_LOGOS
          return MULTI_COUN_LOGOS;
        case 8: // CURRENT_CSID
          return CURRENT_CSID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEAMID_ISSET_ID = 0;
  private static final int __NUMBER_ISSET_ID = 1;
  private static final int __TEAMTYPE_ISSET_ID = 2;
  private static final int __CURRENTCSID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MULTI_LANG_NAMES,_Fields.TEAM_TYPE,_Fields.MULTI_COUN_LOGOS,_Fields.CURRENT_CSID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("teamType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTI_COUN_LOGOS, new org.apache.thrift.meta_data.FieldMetaData("multiCounLogos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CounString.class))));
    tmpMap.put(_Fields.CURRENT_CSID, new org.apache.thrift.meta_data.FieldMetaData("currentCsid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlayingTeam.class, metaDataMap);
  }

  public PlayingTeam() {
  }

  public PlayingTeam(
    long teamId,
    String name,
    int number,
    String logo)
  {
    this();
    this.teamId = teamId;
    setTeamIdIsSet(true);
    this.name = name;
    this.number = number;
    setNumberIsSet(true);
    this.logo = logo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlayingTeam(PlayingTeam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.teamId = other.teamId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    this.number = other.number;
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    this.teamType = other.teamType;
    if (other.isSetMultiCounLogos()) {
      List<com.lesports.api.common.CounString> __this__multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(other.multiCounLogos.size());
      for (com.lesports.api.common.CounString other_element : other.multiCounLogos) {
        __this__multiCounLogos.add(new com.lesports.api.common.CounString(other_element));
      }
      this.multiCounLogos = __this__multiCounLogos;
    }
    this.currentCsid = other.currentCsid;
  }

  public PlayingTeam deepCopy() {
    return new PlayingTeam(this);
  }

  @Override
  public void clear() {
    setTeamIdIsSet(false);
    this.teamId = 0;
    this.name = null;
    this.multiLangNames = null;
    setNumberIsSet(false);
    this.number = 0;
    this.logo = null;
    setTeamTypeIsSet(false);
    this.teamType = 0;
    this.multiCounLogos = null;
    setCurrentCsidIsSet(false);
    this.currentCsid = 0;
  }

  public long getTeamId() {
    return this.teamId;
  }

  public void setTeamId(long teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
  }

  public void unsetTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public String getLogo() {
    return this.logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  public int getTeamType() {
    return this.teamType;
  }

  public void setTeamType(int teamType) {
    this.teamType = teamType;
    setTeamTypeIsSet(true);
  }

  public void unsetTeamType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  /** Returns true if field teamType is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamType() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  public void setTeamTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMTYPE_ISSET_ID, value);
  }

  public int getMultiCounLogosSize() {
    return (this.multiCounLogos == null) ? 0 : this.multiCounLogos.size();
  }

  public java.util.Iterator<com.lesports.api.common.CounString> getMultiCounLogosIterator() {
    return (this.multiCounLogos == null) ? null : this.multiCounLogos.iterator();
  }

  public void addToMultiCounLogos(com.lesports.api.common.CounString elem) {
    if (this.multiCounLogos == null) {
      this.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>();
    }
    this.multiCounLogos.add(elem);
  }

  public List<com.lesports.api.common.CounString> getMultiCounLogos() {
    return this.multiCounLogos;
  }

  public void setMultiCounLogos(List<com.lesports.api.common.CounString> multiCounLogos) {
    this.multiCounLogos = multiCounLogos;
  }

  public void unsetMultiCounLogos() {
    this.multiCounLogos = null;
  }

  /** Returns true if field multiCounLogos is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiCounLogos() {
    return this.multiCounLogos != null;
  }

  public void setMultiCounLogosIsSet(boolean value) {
    if (!value) {
      this.multiCounLogos = null;
    }
  }

  public long getCurrentCsid() {
    return this.currentCsid;
  }

  public void setCurrentCsid(long currentCsid) {
    this.currentCsid = currentCsid;
    setCurrentCsidIsSet(true);
  }

  public void unsetCurrentCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTCSID_ISSET_ID);
  }

  /** Returns true if field currentCsid is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTCSID_ISSET_ID);
  }

  public void setCurrentCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTCSID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    case TEAM_TYPE:
      if (value == null) {
        unsetTeamType();
      } else {
        setTeamType((Integer)value);
      }
      break;

    case MULTI_COUN_LOGOS:
      if (value == null) {
        unsetMultiCounLogos();
      } else {
        setMultiCounLogos((List<com.lesports.api.common.CounString>)value);
      }
      break;

    case CURRENT_CSID:
      if (value == null) {
        unsetCurrentCsid();
      } else {
        setCurrentCsid((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEAM_ID:
      return Long.valueOf(getTeamId());

    case NAME:
      return getName();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case LOGO:
      return getLogo();

    case TEAM_TYPE:
      return Integer.valueOf(getTeamType());

    case MULTI_COUN_LOGOS:
      return getMultiCounLogos();

    case CURRENT_CSID:
      return Long.valueOf(getCurrentCsid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEAM_ID:
      return isSetTeamId();
    case NAME:
      return isSetName();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case NUMBER:
      return isSetNumber();
    case LOGO:
      return isSetLogo();
    case TEAM_TYPE:
      return isSetTeamType();
    case MULTI_COUN_LOGOS:
      return isSetMultiCounLogos();
    case CURRENT_CSID:
      return isSetCurrentCsid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlayingTeam)
      return this.equals((PlayingTeam)that);
    return false;
  }

  public boolean equals(PlayingTeam that) {
    if (that == null)
      return false;

    boolean this_present_teamId = true;
    boolean that_present_teamId = true;
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_teamType = true && this.isSetTeamType();
    boolean that_present_teamType = true && that.isSetTeamType();
    if (this_present_teamType || that_present_teamType) {
      if (!(this_present_teamType && that_present_teamType))
        return false;
      if (this.teamType != that.teamType)
        return false;
    }

    boolean this_present_multiCounLogos = true && this.isSetMultiCounLogos();
    boolean that_present_multiCounLogos = true && that.isSetMultiCounLogos();
    if (this_present_multiCounLogos || that_present_multiCounLogos) {
      if (!(this_present_multiCounLogos && that_present_multiCounLogos))
        return false;
      if (!this.multiCounLogos.equals(that.multiCounLogos))
        return false;
    }

    boolean this_present_currentCsid = true && this.isSetCurrentCsid();
    boolean that_present_currentCsid = true && that.isSetCurrentCsid();
    if (this_present_currentCsid || that_present_currentCsid) {
      if (!(this_present_currentCsid && that_present_currentCsid))
        return false;
      if (this.currentCsid != that.currentCsid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_teamId = true;
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_number = true;
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    boolean present_teamType = true && (isSetTeamType());
    list.add(present_teamType);
    if (present_teamType)
      list.add(teamType);

    boolean present_multiCounLogos = true && (isSetMultiCounLogos());
    list.add(present_multiCounLogos);
    if (present_multiCounLogos)
      list.add(multiCounLogos);

    boolean present_currentCsid = true && (isSetCurrentCsid());
    list.add(present_currentCsid);
    if (present_currentCsid)
      list.add(currentCsid);

    return list.hashCode();
  }

  @Override
  public int compareTo(PlayingTeam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamType()).compareTo(other.isSetTeamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamType, other.teamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiCounLogos()).compareTo(other.isSetMultiCounLogos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiCounLogos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiCounLogos, other.multiCounLogos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentCsid()).compareTo(other.isSetCurrentCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentCsid, other.currentCsid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlayingTeam(");
    boolean first = true;

    sb.append("teamId:");
    sb.append(this.teamId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("logo:");
    if (this.logo == null) {
      sb.append("null");
    } else {
      sb.append(this.logo);
    }
    first = false;
    if (isSetTeamType()) {
      if (!first) sb.append(", ");
      sb.append("teamType:");
      sb.append(this.teamType);
      first = false;
    }
    if (isSetMultiCounLogos()) {
      if (!first) sb.append(", ");
      sb.append("multiCounLogos:");
      if (this.multiCounLogos == null) {
        sb.append("null");
      } else {
        sb.append(this.multiCounLogos);
      }
      first = false;
    }
    if (isSetCurrentCsid()) {
      if (!first) sb.append(", ");
      sb.append("currentCsid:");
      sb.append(this.currentCsid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlayingTeamStandardSchemeFactory implements SchemeFactory {
    public PlayingTeamStandardScheme getScheme() {
      return new PlayingTeamStandardScheme();
    }
  }

  private static class PlayingTeamStandardScheme extends StandardScheme<PlayingTeam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlayingTeam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.teamId = iprot.readI64();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list80.size);
                com.lesports.api.common.LangString _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new com.lesports.api.common.LangString();
                  _elem81.read(iprot);
                  struct.multiLangNames.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teamType = iprot.readI32();
              struct.setTeamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MULTI_COUN_LOGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list83.size);
                com.lesports.api.common.CounString _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = new com.lesports.api.common.CounString();
                  _elem84.read(iprot);
                  struct.multiCounLogos.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setMultiCounLogosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURRENT_CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentCsid = iprot.readI64();
              struct.setCurrentCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlayingTeam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
      oprot.writeI64(struct.teamId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter86 : struct.multiLangNames)
            {
              _iter86.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI32(struct.number);
      oprot.writeFieldEnd();
      if (struct.logo != null) {
        oprot.writeFieldBegin(LOGO_FIELD_DESC);
        oprot.writeString(struct.logo);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTeamType()) {
        oprot.writeFieldBegin(TEAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.teamType);
        oprot.writeFieldEnd();
      }
      if (struct.multiCounLogos != null) {
        if (struct.isSetMultiCounLogos()) {
          oprot.writeFieldBegin(MULTI_COUN_LOGOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiCounLogos.size()));
            for (com.lesports.api.common.CounString _iter87 : struct.multiCounLogos)
            {
              _iter87.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurrentCsid()) {
        oprot.writeFieldBegin(CURRENT_CSID_FIELD_DESC);
        oprot.writeI64(struct.currentCsid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlayingTeamTupleSchemeFactory implements SchemeFactory {
    public PlayingTeamTupleScheme getScheme() {
      return new PlayingTeamTupleScheme();
    }
  }

  private static class PlayingTeamTupleScheme extends TupleScheme<PlayingTeam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlayingTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTeamId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(2);
      }
      if (struct.isSetNumber()) {
        optionals.set(3);
      }
      if (struct.isSetLogo()) {
        optionals.set(4);
      }
      if (struct.isSetTeamType()) {
        optionals.set(5);
      }
      if (struct.isSetMultiCounLogos()) {
        optionals.set(6);
      }
      if (struct.isSetCurrentCsid()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTeamId()) {
        oprot.writeI64(struct.teamId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter88 : struct.multiLangNames)
          {
            _iter88.write(oprot);
          }
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetTeamType()) {
        oprot.writeI32(struct.teamType);
      }
      if (struct.isSetMultiCounLogos()) {
        {
          oprot.writeI32(struct.multiCounLogos.size());
          for (com.lesports.api.common.CounString _iter89 : struct.multiCounLogos)
          {
            _iter89.write(oprot);
          }
        }
      }
      if (struct.isSetCurrentCsid()) {
        oprot.writeI64(struct.currentCsid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlayingTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.teamId = iprot.readI64();
        struct.setTeamIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list90.size);
          com.lesports.api.common.LangString _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new com.lesports.api.common.LangString();
            _elem91.read(iprot);
            struct.multiLangNames.add(_elem91);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.teamType = iprot.readI32();
        struct.setTeamTypeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list93.size);
          com.lesports.api.common.CounString _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new com.lesports.api.common.CounString();
            _elem94.read(iprot);
            struct.multiCounLogos.add(_elem94);
          }
        }
        struct.setMultiCounLogosIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currentCsid = iprot.readI64();
        struct.setCurrentCsidIsSet(true);
      }
    }
  }

}

