/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TCompetition implements org.apache.thrift.TBase<TCompetition, TCompetition._Fields>, java.io.Serializable, Cloneable, Comparable<TCompetition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompetition");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VS_FIELD_DESC = new org.apache.thrift.protocol.TField("vs", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GAME_FNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GAME_SNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MATCH_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("matchSystem", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("abbreviation", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField CONTINENT_FIELD_DESC = new org.apache.thrift.protocol.TField("continent", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NATION_FIELD_DESC = new org.apache.thrift.protocol.TField("nation", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("introduction", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField BOLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boleId", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_ABBRS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangAbbrs", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GAME_FNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGameFNames", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GAME_SNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGameSNames", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CONTS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangConts", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNations", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_INTROS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangIntros", org.apache.thrift.protocol.TType.LIST, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCompetitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCompetitionTupleSchemeFactory());
  }

  private long id; // required
  private long gameFType; // required
  private long gameSType; // required
  private String startTime; // optional
  private String name; // optional
  private boolean vs; // optional
  private String logoUrl; // optional
  private String gameFName; // optional
  private String gameSName; // optional
  private com.lesports.qmt.sbd.api.common.MatchSystem matchSystem; // optional
  private String abbreviation; // optional
  private List<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private String continent; // optional
  private String nation; // optional
  private String introduction; // optional
  private long boleId; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangAbbrs; // optional
  private List<com.lesports.api.common.LangString> multiLangGameFNames; // optional
  private List<com.lesports.api.common.LangString> multiLangGameSNames; // optional
  private List<com.lesports.api.common.LangString> multiLangConts; // optional
  private List<com.lesports.api.common.LangString> multiLangNations; // optional
  private List<com.lesports.api.common.LangString> multiLangIntros; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    GAME_FTYPE((short)2, "gameFType"),
    GAME_STYPE((short)3, "gameSType"),
    START_TIME((short)4, "startTime"),
    NAME((short)5, "name"),
    VS((short)6, "vs"),
    LOGO_URL((short)7, "logoUrl"),
    GAME_FNAME((short)8, "gameFName"),
    GAME_SNAME((short)9, "gameSName"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.MatchSystem
     */
    MATCH_SYSTEM((short)10, "matchSystem"),
    ABBREVIATION((short)11, "abbreviation"),
    TAGS((short)12, "tags"),
    CONTINENT((short)13, "continent"),
    NATION((short)14, "nation"),
    INTRODUCTION((short)15, "introduction"),
    BOLE_ID((short)16, "boleId"),
    MULTI_LANG_NAMES((short)17, "multiLangNames"),
    MULTI_LANG_ABBRS((short)18, "multiLangAbbrs"),
    MULTI_LANG_GAME_FNAMES((short)19, "multiLangGameFNames"),
    MULTI_LANG_GAME_SNAMES((short)20, "multiLangGameSNames"),
    MULTI_LANG_CONTS((short)21, "multiLangConts"),
    MULTI_LANG_NATIONS((short)22, "multiLangNations"),
    MULTI_LANG_INTROS((short)23, "multiLangIntros");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // GAME_FTYPE
          return GAME_FTYPE;
        case 3: // GAME_STYPE
          return GAME_STYPE;
        case 4: // START_TIME
          return START_TIME;
        case 5: // NAME
          return NAME;
        case 6: // VS
          return VS;
        case 7: // LOGO_URL
          return LOGO_URL;
        case 8: // GAME_FNAME
          return GAME_FNAME;
        case 9: // GAME_SNAME
          return GAME_SNAME;
        case 10: // MATCH_SYSTEM
          return MATCH_SYSTEM;
        case 11: // ABBREVIATION
          return ABBREVIATION;
        case 12: // TAGS
          return TAGS;
        case 13: // CONTINENT
          return CONTINENT;
        case 14: // NATION
          return NATION;
        case 15: // INTRODUCTION
          return INTRODUCTION;
        case 16: // BOLE_ID
          return BOLE_ID;
        case 17: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 18: // MULTI_LANG_ABBRS
          return MULTI_LANG_ABBRS;
        case 19: // MULTI_LANG_GAME_FNAMES
          return MULTI_LANG_GAME_FNAMES;
        case 20: // MULTI_LANG_GAME_SNAMES
          return MULTI_LANG_GAME_SNAMES;
        case 21: // MULTI_LANG_CONTS
          return MULTI_LANG_CONTS;
        case 22: // MULTI_LANG_NATIONS
          return MULTI_LANG_NATIONS;
        case 23: // MULTI_LANG_INTROS
          return MULTI_LANG_INTROS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GAMEFTYPE_ISSET_ID = 1;
  private static final int __GAMESTYPE_ISSET_ID = 2;
  private static final int __VS_ISSET_ID = 3;
  private static final int __BOLEID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START_TIME,_Fields.NAME,_Fields.VS,_Fields.LOGO_URL,_Fields.GAME_FNAME,_Fields.GAME_SNAME,_Fields.MATCH_SYSTEM,_Fields.ABBREVIATION,_Fields.TAGS,_Fields.CONTINENT,_Fields.NATION,_Fields.INTRODUCTION,_Fields.BOLE_ID,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_ABBRS,_Fields.MULTI_LANG_GAME_FNAMES,_Fields.MULTI_LANG_GAME_SNAMES,_Fields.MULTI_LANG_CONTS,_Fields.MULTI_LANG_NATIONS,_Fields.MULTI_LANG_INTROS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VS, new org.apache.thrift.meta_data.FieldMetaData("vs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_FNAME, new org.apache.thrift.meta_data.FieldMetaData("gameFName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_SNAME, new org.apache.thrift.meta_data.FieldMetaData("gameSName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("matchSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.MatchSystem.class)));
    tmpMap.put(_Fields.ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("abbreviation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.CONTINENT, new org.apache.thrift.meta_data.FieldMetaData("continent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATION, new org.apache.thrift.meta_data.FieldMetaData("nation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("introduction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOLE_ID, new org.apache.thrift.meta_data.FieldMetaData("boleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_ABBRS, new org.apache.thrift.meta_data.FieldMetaData("multiLangAbbrs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_GAME_FNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangGameFNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_GAME_SNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangGameSNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_CONTS, new org.apache.thrift.meta_data.FieldMetaData("multiLangConts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_NATIONS, new org.apache.thrift.meta_data.FieldMetaData("multiLangNations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_INTROS, new org.apache.thrift.meta_data.FieldMetaData("multiLangIntros", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompetition.class, metaDataMap);
  }

  public TCompetition() {
  }

  public TCompetition(
    long id,
    long gameFType,
    long gameSType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompetition(TCompetition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.gameFType = other.gameFType;
    this.gameSType = other.gameSType;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.vs = other.vs;
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetGameFName()) {
      this.gameFName = other.gameFName;
    }
    if (other.isSetGameSName()) {
      this.gameSName = other.gameSName;
    }
    if (other.isSetMatchSystem()) {
      this.matchSystem = other.matchSystem;
    }
    if (other.isSetAbbreviation()) {
      this.abbreviation = other.abbreviation;
    }
    if (other.isSetTags()) {
      List<com.lesports.qmt.config.api.dto.TTag> __this__tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    if (other.isSetContinent()) {
      this.continent = other.continent;
    }
    if (other.isSetNation()) {
      this.nation = other.nation;
    }
    if (other.isSetIntroduction()) {
      this.introduction = other.introduction;
    }
    this.boleId = other.boleId;
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangAbbrs()) {
      List<com.lesports.api.common.LangString> __this__multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(other.multiLangAbbrs.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangAbbrs) {
        __this__multiLangAbbrs.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangAbbrs = __this__multiLangAbbrs;
    }
    if (other.isSetMultiLangGameFNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGameFNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGameFNames) {
        __this__multiLangGameFNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGameFNames = __this__multiLangGameFNames;
    }
    if (other.isSetMultiLangGameSNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGameSNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGameSNames) {
        __this__multiLangGameSNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGameSNames = __this__multiLangGameSNames;
    }
    if (other.isSetMultiLangConts()) {
      List<com.lesports.api.common.LangString> __this__multiLangConts = new ArrayList<com.lesports.api.common.LangString>(other.multiLangConts.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangConts) {
        __this__multiLangConts.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangConts = __this__multiLangConts;
    }
    if (other.isSetMultiLangNations()) {
      List<com.lesports.api.common.LangString> __this__multiLangNations = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNations.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNations) {
        __this__multiLangNations.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNations = __this__multiLangNations;
    }
    if (other.isSetMultiLangIntros()) {
      List<com.lesports.api.common.LangString> __this__multiLangIntros = new ArrayList<com.lesports.api.common.LangString>(other.multiLangIntros.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangIntros) {
        __this__multiLangIntros.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangIntros = __this__multiLangIntros;
    }
  }

  public TCompetition deepCopy() {
    return new TCompetition(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setGameFTypeIsSet(false);
    this.gameFType = 0;
    setGameSTypeIsSet(false);
    this.gameSType = 0;
    this.startTime = null;
    this.name = null;
    setVsIsSet(false);
    this.vs = false;
    this.logoUrl = null;
    this.gameFName = null;
    this.gameSName = null;
    this.matchSystem = null;
    this.abbreviation = null;
    this.tags = null;
    this.continent = null;
    this.nation = null;
    this.introduction = null;
    setBoleIdIsSet(false);
    this.boleId = 0;
    this.multiLangNames = null;
    this.multiLangAbbrs = null;
    this.multiLangGameFNames = null;
    this.multiLangGameSNames = null;
    this.multiLangConts = null;
    this.multiLangNations = null;
    this.multiLangIntros = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(long gameFType) {
    this.gameFType = gameFType;
    setGameFTypeIsSet(true);
  }

  public void unsetGameFType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID);
  }

  public void setGameFTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPE_ISSET_ID, value);
  }

  public long getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(long gameSType) {
    this.gameSType = gameSType;
    setGameSTypeIsSet(true);
  }

  public void unsetGameSType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMESTYPE_ISSET_ID);
  }

  public void setGameSTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMESTYPE_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isVs() {
    return this.vs;
  }

  public void setVs(boolean vs) {
    this.vs = vs;
    setVsIsSet(true);
  }

  public void unsetVs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VS_ISSET_ID);
  }

  /** Returns true if field vs is set (has been assigned a value) and false otherwise */
  public boolean isSetVs() {
    return EncodingUtils.testBit(__isset_bitfield, __VS_ISSET_ID);
  }

  public void setVsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VS_ISSET_ID, value);
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getGameFName() {
    return this.gameFName;
  }

  public void setGameFName(String gameFName) {
    this.gameFName = gameFName;
  }

  public void unsetGameFName() {
    this.gameFName = null;
  }

  /** Returns true if field gameFName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFName() {
    return this.gameFName != null;
  }

  public void setGameFNameIsSet(boolean value) {
    if (!value) {
      this.gameFName = null;
    }
  }

  public String getGameSName() {
    return this.gameSName;
  }

  public void setGameSName(String gameSName) {
    this.gameSName = gameSName;
  }

  public void unsetGameSName() {
    this.gameSName = null;
  }

  /** Returns true if field gameSName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSName() {
    return this.gameSName != null;
  }

  public void setGameSNameIsSet(boolean value) {
    if (!value) {
      this.gameSName = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchSystem
   */
  public com.lesports.qmt.sbd.api.common.MatchSystem getMatchSystem() {
    return this.matchSystem;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.MatchSystem
   */
  public void setMatchSystem(com.lesports.qmt.sbd.api.common.MatchSystem matchSystem) {
    this.matchSystem = matchSystem;
  }

  public void unsetMatchSystem() {
    this.matchSystem = null;
  }

  /** Returns true if field matchSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchSystem() {
    return this.matchSystem != null;
  }

  public void setMatchSystemIsSet(boolean value) {
    if (!value) {
      this.matchSystem = null;
    }
  }

  public String getAbbreviation() {
    return this.abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }

  public void unsetAbbreviation() {
    this.abbreviation = null;
  }

  /** Returns true if field abbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetAbbreviation() {
    return this.abbreviation != null;
  }

  public void setAbbreviationIsSet(boolean value) {
    if (!value) {
      this.abbreviation = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public List<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getContinent() {
    return this.continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }

  public void unsetContinent() {
    this.continent = null;
  }

  /** Returns true if field continent is set (has been assigned a value) and false otherwise */
  public boolean isSetContinent() {
    return this.continent != null;
  }

  public void setContinentIsSet(boolean value) {
    if (!value) {
      this.continent = null;
    }
  }

  public String getNation() {
    return this.nation;
  }

  public void setNation(String nation) {
    this.nation = nation;
  }

  public void unsetNation() {
    this.nation = null;
  }

  /** Returns true if field nation is set (has been assigned a value) and false otherwise */
  public boolean isSetNation() {
    return this.nation != null;
  }

  public void setNationIsSet(boolean value) {
    if (!value) {
      this.nation = null;
    }
  }

  public String getIntroduction() {
    return this.introduction;
  }

  public void setIntroduction(String introduction) {
    this.introduction = introduction;
  }

  public void unsetIntroduction() {
    this.introduction = null;
  }

  /** Returns true if field introduction is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduction() {
    return this.introduction != null;
  }

  public void setIntroductionIsSet(boolean value) {
    if (!value) {
      this.introduction = null;
    }
  }

  public long getBoleId() {
    return this.boleId;
  }

  public void setBoleId(long boleId) {
    this.boleId = boleId;
    setBoleIdIsSet(true);
  }

  public void unsetBoleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  /** Returns true if field boleId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoleId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  public void setBoleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOLEID_ISSET_ID, value);
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangAbbrsSize() {
    return (this.multiLangAbbrs == null) ? 0 : this.multiLangAbbrs.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangAbbrsIterator() {
    return (this.multiLangAbbrs == null) ? null : this.multiLangAbbrs.iterator();
  }

  public void addToMultiLangAbbrs(com.lesports.api.common.LangString elem) {
    if (this.multiLangAbbrs == null) {
      this.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangAbbrs.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangAbbrs() {
    return this.multiLangAbbrs;
  }

  public void setMultiLangAbbrs(List<com.lesports.api.common.LangString> multiLangAbbrs) {
    this.multiLangAbbrs = multiLangAbbrs;
  }

  public void unsetMultiLangAbbrs() {
    this.multiLangAbbrs = null;
  }

  /** Returns true if field multiLangAbbrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangAbbrs() {
    return this.multiLangAbbrs != null;
  }

  public void setMultiLangAbbrsIsSet(boolean value) {
    if (!value) {
      this.multiLangAbbrs = null;
    }
  }

  public int getMultiLangGameFNamesSize() {
    return (this.multiLangGameFNames == null) ? 0 : this.multiLangGameFNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGameFNamesIterator() {
    return (this.multiLangGameFNames == null) ? null : this.multiLangGameFNames.iterator();
  }

  public void addToMultiLangGameFNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangGameFNames == null) {
      this.multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGameFNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGameFNames() {
    return this.multiLangGameFNames;
  }

  public void setMultiLangGameFNames(List<com.lesports.api.common.LangString> multiLangGameFNames) {
    this.multiLangGameFNames = multiLangGameFNames;
  }

  public void unsetMultiLangGameFNames() {
    this.multiLangGameFNames = null;
  }

  /** Returns true if field multiLangGameFNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGameFNames() {
    return this.multiLangGameFNames != null;
  }

  public void setMultiLangGameFNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangGameFNames = null;
    }
  }

  public int getMultiLangGameSNamesSize() {
    return (this.multiLangGameSNames == null) ? 0 : this.multiLangGameSNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGameSNamesIterator() {
    return (this.multiLangGameSNames == null) ? null : this.multiLangGameSNames.iterator();
  }

  public void addToMultiLangGameSNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangGameSNames == null) {
      this.multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGameSNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGameSNames() {
    return this.multiLangGameSNames;
  }

  public void setMultiLangGameSNames(List<com.lesports.api.common.LangString> multiLangGameSNames) {
    this.multiLangGameSNames = multiLangGameSNames;
  }

  public void unsetMultiLangGameSNames() {
    this.multiLangGameSNames = null;
  }

  /** Returns true if field multiLangGameSNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGameSNames() {
    return this.multiLangGameSNames != null;
  }

  public void setMultiLangGameSNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangGameSNames = null;
    }
  }

  public int getMultiLangContsSize() {
    return (this.multiLangConts == null) ? 0 : this.multiLangConts.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangContsIterator() {
    return (this.multiLangConts == null) ? null : this.multiLangConts.iterator();
  }

  public void addToMultiLangConts(com.lesports.api.common.LangString elem) {
    if (this.multiLangConts == null) {
      this.multiLangConts = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangConts.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangConts() {
    return this.multiLangConts;
  }

  public void setMultiLangConts(List<com.lesports.api.common.LangString> multiLangConts) {
    this.multiLangConts = multiLangConts;
  }

  public void unsetMultiLangConts() {
    this.multiLangConts = null;
  }

  /** Returns true if field multiLangConts is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangConts() {
    return this.multiLangConts != null;
  }

  public void setMultiLangContsIsSet(boolean value) {
    if (!value) {
      this.multiLangConts = null;
    }
  }

  public int getMultiLangNationsSize() {
    return (this.multiLangNations == null) ? 0 : this.multiLangNations.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNationsIterator() {
    return (this.multiLangNations == null) ? null : this.multiLangNations.iterator();
  }

  public void addToMultiLangNations(com.lesports.api.common.LangString elem) {
    if (this.multiLangNations == null) {
      this.multiLangNations = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNations.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNations() {
    return this.multiLangNations;
  }

  public void setMultiLangNations(List<com.lesports.api.common.LangString> multiLangNations) {
    this.multiLangNations = multiLangNations;
  }

  public void unsetMultiLangNations() {
    this.multiLangNations = null;
  }

  /** Returns true if field multiLangNations is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNations() {
    return this.multiLangNations != null;
  }

  public void setMultiLangNationsIsSet(boolean value) {
    if (!value) {
      this.multiLangNations = null;
    }
  }

  public int getMultiLangIntrosSize() {
    return (this.multiLangIntros == null) ? 0 : this.multiLangIntros.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangIntrosIterator() {
    return (this.multiLangIntros == null) ? null : this.multiLangIntros.iterator();
  }

  public void addToMultiLangIntros(com.lesports.api.common.LangString elem) {
    if (this.multiLangIntros == null) {
      this.multiLangIntros = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangIntros.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangIntros() {
    return this.multiLangIntros;
  }

  public void setMultiLangIntros(List<com.lesports.api.common.LangString> multiLangIntros) {
    this.multiLangIntros = multiLangIntros;
  }

  public void unsetMultiLangIntros() {
    this.multiLangIntros = null;
  }

  /** Returns true if field multiLangIntros is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangIntros() {
    return this.multiLangIntros != null;
  }

  public void setMultiLangIntrosIsSet(boolean value) {
    if (!value) {
      this.multiLangIntros = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((Long)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case VS:
      if (value == null) {
        unsetVs();
      } else {
        setVs((Boolean)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case GAME_FNAME:
      if (value == null) {
        unsetGameFName();
      } else {
        setGameFName((String)value);
      }
      break;

    case GAME_SNAME:
      if (value == null) {
        unsetGameSName();
      } else {
        setGameSName((String)value);
      }
      break;

    case MATCH_SYSTEM:
      if (value == null) {
        unsetMatchSystem();
      } else {
        setMatchSystem((com.lesports.qmt.sbd.api.common.MatchSystem)value);
      }
      break;

    case ABBREVIATION:
      if (value == null) {
        unsetAbbreviation();
      } else {
        setAbbreviation((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case CONTINENT:
      if (value == null) {
        unsetContinent();
      } else {
        setContinent((String)value);
      }
      break;

    case NATION:
      if (value == null) {
        unsetNation();
      } else {
        setNation((String)value);
      }
      break;

    case INTRODUCTION:
      if (value == null) {
        unsetIntroduction();
      } else {
        setIntroduction((String)value);
      }
      break;

    case BOLE_ID:
      if (value == null) {
        unsetBoleId();
      } else {
        setBoleId((Long)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_ABBRS:
      if (value == null) {
        unsetMultiLangAbbrs();
      } else {
        setMultiLangAbbrs((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_GAME_FNAMES:
      if (value == null) {
        unsetMultiLangGameFNames();
      } else {
        setMultiLangGameFNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_GAME_SNAMES:
      if (value == null) {
        unsetMultiLangGameSNames();
      } else {
        setMultiLangGameSNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_CONTS:
      if (value == null) {
        unsetMultiLangConts();
      } else {
        setMultiLangConts((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_NATIONS:
      if (value == null) {
        unsetMultiLangNations();
      } else {
        setMultiLangNations((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_INTROS:
      if (value == null) {
        unsetMultiLangIntros();
      } else {
        setMultiLangIntros((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case GAME_FTYPE:
      return Long.valueOf(getGameFType());

    case GAME_STYPE:
      return Long.valueOf(getGameSType());

    case START_TIME:
      return getStartTime();

    case NAME:
      return getName();

    case VS:
      return Boolean.valueOf(isVs());

    case LOGO_URL:
      return getLogoUrl();

    case GAME_FNAME:
      return getGameFName();

    case GAME_SNAME:
      return getGameSName();

    case MATCH_SYSTEM:
      return getMatchSystem();

    case ABBREVIATION:
      return getAbbreviation();

    case TAGS:
      return getTags();

    case CONTINENT:
      return getContinent();

    case NATION:
      return getNation();

    case INTRODUCTION:
      return getIntroduction();

    case BOLE_ID:
      return Long.valueOf(getBoleId());

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_ABBRS:
      return getMultiLangAbbrs();

    case MULTI_LANG_GAME_FNAMES:
      return getMultiLangGameFNames();

    case MULTI_LANG_GAME_SNAMES:
      return getMultiLangGameSNames();

    case MULTI_LANG_CONTS:
      return getMultiLangConts();

    case MULTI_LANG_NATIONS:
      return getMultiLangNations();

    case MULTI_LANG_INTROS:
      return getMultiLangIntros();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case GAME_FTYPE:
      return isSetGameFType();
    case GAME_STYPE:
      return isSetGameSType();
    case START_TIME:
      return isSetStartTime();
    case NAME:
      return isSetName();
    case VS:
      return isSetVs();
    case LOGO_URL:
      return isSetLogoUrl();
    case GAME_FNAME:
      return isSetGameFName();
    case GAME_SNAME:
      return isSetGameSName();
    case MATCH_SYSTEM:
      return isSetMatchSystem();
    case ABBREVIATION:
      return isSetAbbreviation();
    case TAGS:
      return isSetTags();
    case CONTINENT:
      return isSetContinent();
    case NATION:
      return isSetNation();
    case INTRODUCTION:
      return isSetIntroduction();
    case BOLE_ID:
      return isSetBoleId();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_ABBRS:
      return isSetMultiLangAbbrs();
    case MULTI_LANG_GAME_FNAMES:
      return isSetMultiLangGameFNames();
    case MULTI_LANG_GAME_SNAMES:
      return isSetMultiLangGameSNames();
    case MULTI_LANG_CONTS:
      return isSetMultiLangConts();
    case MULTI_LANG_NATIONS:
      return isSetMultiLangNations();
    case MULTI_LANG_INTROS:
      return isSetMultiLangIntros();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCompetition)
      return this.equals((TCompetition)that);
    return false;
  }

  public boolean equals(TCompetition that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_gameFType = true;
    boolean that_present_gameFType = true;
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (this.gameFType != that.gameFType)
        return false;
    }

    boolean this_present_gameSType = true;
    boolean that_present_gameSType = true;
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (this.gameSType != that.gameSType)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_vs = true && this.isSetVs();
    boolean that_present_vs = true && that.isSetVs();
    if (this_present_vs || that_present_vs) {
      if (!(this_present_vs && that_present_vs))
        return false;
      if (this.vs != that.vs)
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_gameFName = true && this.isSetGameFName();
    boolean that_present_gameFName = true && that.isSetGameFName();
    if (this_present_gameFName || that_present_gameFName) {
      if (!(this_present_gameFName && that_present_gameFName))
        return false;
      if (!this.gameFName.equals(that.gameFName))
        return false;
    }

    boolean this_present_gameSName = true && this.isSetGameSName();
    boolean that_present_gameSName = true && that.isSetGameSName();
    if (this_present_gameSName || that_present_gameSName) {
      if (!(this_present_gameSName && that_present_gameSName))
        return false;
      if (!this.gameSName.equals(that.gameSName))
        return false;
    }

    boolean this_present_matchSystem = true && this.isSetMatchSystem();
    boolean that_present_matchSystem = true && that.isSetMatchSystem();
    if (this_present_matchSystem || that_present_matchSystem) {
      if (!(this_present_matchSystem && that_present_matchSystem))
        return false;
      if (!this.matchSystem.equals(that.matchSystem))
        return false;
    }

    boolean this_present_abbreviation = true && this.isSetAbbreviation();
    boolean that_present_abbreviation = true && that.isSetAbbreviation();
    if (this_present_abbreviation || that_present_abbreviation) {
      if (!(this_present_abbreviation && that_present_abbreviation))
        return false;
      if (!this.abbreviation.equals(that.abbreviation))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_continent = true && this.isSetContinent();
    boolean that_present_continent = true && that.isSetContinent();
    if (this_present_continent || that_present_continent) {
      if (!(this_present_continent && that_present_continent))
        return false;
      if (!this.continent.equals(that.continent))
        return false;
    }

    boolean this_present_nation = true && this.isSetNation();
    boolean that_present_nation = true && that.isSetNation();
    if (this_present_nation || that_present_nation) {
      if (!(this_present_nation && that_present_nation))
        return false;
      if (!this.nation.equals(that.nation))
        return false;
    }

    boolean this_present_introduction = true && this.isSetIntroduction();
    boolean that_present_introduction = true && that.isSetIntroduction();
    if (this_present_introduction || that_present_introduction) {
      if (!(this_present_introduction && that_present_introduction))
        return false;
      if (!this.introduction.equals(that.introduction))
        return false;
    }

    boolean this_present_boleId = true && this.isSetBoleId();
    boolean that_present_boleId = true && that.isSetBoleId();
    if (this_present_boleId || that_present_boleId) {
      if (!(this_present_boleId && that_present_boleId))
        return false;
      if (this.boleId != that.boleId)
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangAbbrs = true && this.isSetMultiLangAbbrs();
    boolean that_present_multiLangAbbrs = true && that.isSetMultiLangAbbrs();
    if (this_present_multiLangAbbrs || that_present_multiLangAbbrs) {
      if (!(this_present_multiLangAbbrs && that_present_multiLangAbbrs))
        return false;
      if (!this.multiLangAbbrs.equals(that.multiLangAbbrs))
        return false;
    }

    boolean this_present_multiLangGameFNames = true && this.isSetMultiLangGameFNames();
    boolean that_present_multiLangGameFNames = true && that.isSetMultiLangGameFNames();
    if (this_present_multiLangGameFNames || that_present_multiLangGameFNames) {
      if (!(this_present_multiLangGameFNames && that_present_multiLangGameFNames))
        return false;
      if (!this.multiLangGameFNames.equals(that.multiLangGameFNames))
        return false;
    }

    boolean this_present_multiLangGameSNames = true && this.isSetMultiLangGameSNames();
    boolean that_present_multiLangGameSNames = true && that.isSetMultiLangGameSNames();
    if (this_present_multiLangGameSNames || that_present_multiLangGameSNames) {
      if (!(this_present_multiLangGameSNames && that_present_multiLangGameSNames))
        return false;
      if (!this.multiLangGameSNames.equals(that.multiLangGameSNames))
        return false;
    }

    boolean this_present_multiLangConts = true && this.isSetMultiLangConts();
    boolean that_present_multiLangConts = true && that.isSetMultiLangConts();
    if (this_present_multiLangConts || that_present_multiLangConts) {
      if (!(this_present_multiLangConts && that_present_multiLangConts))
        return false;
      if (!this.multiLangConts.equals(that.multiLangConts))
        return false;
    }

    boolean this_present_multiLangNations = true && this.isSetMultiLangNations();
    boolean that_present_multiLangNations = true && that.isSetMultiLangNations();
    if (this_present_multiLangNations || that_present_multiLangNations) {
      if (!(this_present_multiLangNations && that_present_multiLangNations))
        return false;
      if (!this.multiLangNations.equals(that.multiLangNations))
        return false;
    }

    boolean this_present_multiLangIntros = true && this.isSetMultiLangIntros();
    boolean that_present_multiLangIntros = true && that.isSetMultiLangIntros();
    if (this_present_multiLangIntros || that_present_multiLangIntros) {
      if (!(this_present_multiLangIntros && that_present_multiLangIntros))
        return false;
      if (!this.multiLangIntros.equals(that.multiLangIntros))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_gameFType = true;
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_gameSType = true;
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_vs = true && (isSetVs());
    list.add(present_vs);
    if (present_vs)
      list.add(vs);

    boolean present_logoUrl = true && (isSetLogoUrl());
    list.add(present_logoUrl);
    if (present_logoUrl)
      list.add(logoUrl);

    boolean present_gameFName = true && (isSetGameFName());
    list.add(present_gameFName);
    if (present_gameFName)
      list.add(gameFName);

    boolean present_gameSName = true && (isSetGameSName());
    list.add(present_gameSName);
    if (present_gameSName)
      list.add(gameSName);

    boolean present_matchSystem = true && (isSetMatchSystem());
    list.add(present_matchSystem);
    if (present_matchSystem)
      list.add(matchSystem.getValue());

    boolean present_abbreviation = true && (isSetAbbreviation());
    list.add(present_abbreviation);
    if (present_abbreviation)
      list.add(abbreviation);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_continent = true && (isSetContinent());
    list.add(present_continent);
    if (present_continent)
      list.add(continent);

    boolean present_nation = true && (isSetNation());
    list.add(present_nation);
    if (present_nation)
      list.add(nation);

    boolean present_introduction = true && (isSetIntroduction());
    list.add(present_introduction);
    if (present_introduction)
      list.add(introduction);

    boolean present_boleId = true && (isSetBoleId());
    list.add(present_boleId);
    if (present_boleId)
      list.add(boleId);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangAbbrs = true && (isSetMultiLangAbbrs());
    list.add(present_multiLangAbbrs);
    if (present_multiLangAbbrs)
      list.add(multiLangAbbrs);

    boolean present_multiLangGameFNames = true && (isSetMultiLangGameFNames());
    list.add(present_multiLangGameFNames);
    if (present_multiLangGameFNames)
      list.add(multiLangGameFNames);

    boolean present_multiLangGameSNames = true && (isSetMultiLangGameSNames());
    list.add(present_multiLangGameSNames);
    if (present_multiLangGameSNames)
      list.add(multiLangGameSNames);

    boolean present_multiLangConts = true && (isSetMultiLangConts());
    list.add(present_multiLangConts);
    if (present_multiLangConts)
      list.add(multiLangConts);

    boolean present_multiLangNations = true && (isSetMultiLangNations());
    list.add(present_multiLangNations);
    if (present_multiLangNations)
      list.add(multiLangNations);

    boolean present_multiLangIntros = true && (isSetMultiLangIntros());
    list.add(present_multiLangIntros);
    if (present_multiLangIntros)
      list.add(multiLangIntros);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCompetition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVs()).compareTo(other.isSetVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vs, other.vs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFName()).compareTo(other.isSetGameFName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFName, other.gameFName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSName()).compareTo(other.isSetGameSName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSName, other.gameSName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchSystem()).compareTo(other.isSetMatchSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchSystem, other.matchSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbbreviation()).compareTo(other.isSetAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbreviation, other.abbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContinent()).compareTo(other.isSetContinent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continent, other.continent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNation()).compareTo(other.isSetNation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nation, other.nation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduction()).compareTo(other.isSetIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduction, other.introduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoleId()).compareTo(other.isSetBoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boleId, other.boleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangAbbrs()).compareTo(other.isSetMultiLangAbbrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangAbbrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangAbbrs, other.multiLangAbbrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGameFNames()).compareTo(other.isSetMultiLangGameFNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGameFNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGameFNames, other.multiLangGameFNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGameSNames()).compareTo(other.isSetMultiLangGameSNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGameSNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGameSNames, other.multiLangGameSNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangConts()).compareTo(other.isSetMultiLangConts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangConts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangConts, other.multiLangConts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNations()).compareTo(other.isSetMultiLangNations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNations, other.multiLangNations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangIntros()).compareTo(other.isSetMultiLangIntros());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangIntros()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangIntros, other.multiLangIntros);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCompetition(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameFType:");
    sb.append(this.gameFType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gameSType:");
    sb.append(this.gameSType);
    first = false;
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetVs()) {
      if (!first) sb.append(", ");
      sb.append("vs:");
      sb.append(this.vs);
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetGameFName()) {
      if (!first) sb.append(", ");
      sb.append("gameFName:");
      if (this.gameFName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameFName);
      }
      first = false;
    }
    if (isSetGameSName()) {
      if (!first) sb.append(", ");
      sb.append("gameSName:");
      if (this.gameSName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameSName);
      }
      first = false;
    }
    if (isSetMatchSystem()) {
      if (!first) sb.append(", ");
      sb.append("matchSystem:");
      if (this.matchSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.matchSystem);
      }
      first = false;
    }
    if (isSetAbbreviation()) {
      if (!first) sb.append(", ");
      sb.append("abbreviation:");
      if (this.abbreviation == null) {
        sb.append("null");
      } else {
        sb.append(this.abbreviation);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetContinent()) {
      if (!first) sb.append(", ");
      sb.append("continent:");
      if (this.continent == null) {
        sb.append("null");
      } else {
        sb.append(this.continent);
      }
      first = false;
    }
    if (isSetNation()) {
      if (!first) sb.append(", ");
      sb.append("nation:");
      if (this.nation == null) {
        sb.append("null");
      } else {
        sb.append(this.nation);
      }
      first = false;
    }
    if (isSetIntroduction()) {
      if (!first) sb.append(", ");
      sb.append("introduction:");
      if (this.introduction == null) {
        sb.append("null");
      } else {
        sb.append(this.introduction);
      }
      first = false;
    }
    if (isSetBoleId()) {
      if (!first) sb.append(", ");
      sb.append("boleId:");
      sb.append(this.boleId);
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangAbbrs()) {
      if (!first) sb.append(", ");
      sb.append("multiLangAbbrs:");
      if (this.multiLangAbbrs == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangAbbrs);
      }
      first = false;
    }
    if (isSetMultiLangGameFNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGameFNames:");
      if (this.multiLangGameFNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGameFNames);
      }
      first = false;
    }
    if (isSetMultiLangGameSNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGameSNames:");
      if (this.multiLangGameSNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGameSNames);
      }
      first = false;
    }
    if (isSetMultiLangConts()) {
      if (!first) sb.append(", ");
      sb.append("multiLangConts:");
      if (this.multiLangConts == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangConts);
      }
      first = false;
    }
    if (isSetMultiLangNations()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNations:");
      if (this.multiLangNations == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNations);
      }
      first = false;
    }
    if (isSetMultiLangIntros()) {
      if (!first) sb.append(", ");
      sb.append("multiLangIntros:");
      if (this.multiLangIntros == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangIntros);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompetitionStandardSchemeFactory implements SchemeFactory {
    public TCompetitionStandardScheme getScheme() {
      return new TCompetitionStandardScheme();
    }
  }

  private static class TCompetitionStandardScheme extends StandardScheme<TCompetition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompetition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFType = iprot.readI64();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameSType = iprot.readI64();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vs = iprot.readBool();
              struct.setVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GAME_FNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameFName = iprot.readString();
              struct.setGameFNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GAME_SNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameSName = iprot.readString();
              struct.setGameSNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MATCH_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.matchSystem = com.lesports.qmt.sbd.api.common.MatchSystem.findByValue(iprot.readI32());
              struct.setMatchSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abbreviation = iprot.readString();
              struct.setAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list0.size);
                com.lesports.qmt.config.api.dto.TTag _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem1.read(iprot);
                  struct.tags.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONTINENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.continent = iprot.readString();
              struct.setContinentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nation = iprot.readString();
              struct.setNationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduction = iprot.readString();
              struct.setIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BOLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.boleId = iprot.readI64();
              struct.setBoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list3.size);
                com.lesports.api.common.LangString _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.lesports.api.common.LangString();
                  _elem4.read(iprot);
                  struct.multiLangNames.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MULTI_LANG_ABBRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(_list6.size);
                com.lesports.api.common.LangString _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.lesports.api.common.LangString();
                  _elem7.read(iprot);
                  struct.multiLangAbbrs.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangAbbrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MULTI_LANG_GAME_FNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>(_list9.size);
                com.lesports.api.common.LangString _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new com.lesports.api.common.LangString();
                  _elem10.read(iprot);
                  struct.multiLangGameFNames.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGameFNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MULTI_LANG_GAME_SNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>(_list12.size);
                com.lesports.api.common.LangString _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new com.lesports.api.common.LangString();
                  _elem13.read(iprot);
                  struct.multiLangGameSNames.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGameSNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MULTI_LANG_CONTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.multiLangConts = new ArrayList<com.lesports.api.common.LangString>(_list15.size);
                com.lesports.api.common.LangString _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new com.lesports.api.common.LangString();
                  _elem16.read(iprot);
                  struct.multiLangConts.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangContsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MULTI_LANG_NATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.multiLangNations = new ArrayList<com.lesports.api.common.LangString>(_list18.size);
                com.lesports.api.common.LangString _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new com.lesports.api.common.LangString();
                  _elem19.read(iprot);
                  struct.multiLangNations.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MULTI_LANG_INTROS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.multiLangIntros = new ArrayList<com.lesports.api.common.LangString>(_list21.size);
                com.lesports.api.common.LangString _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new com.lesports.api.common.LangString();
                  _elem22.read(iprot);
                  struct.multiLangIntros.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangIntrosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompetition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
      oprot.writeI64(struct.gameFType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
      oprot.writeI64(struct.gameSType);
      oprot.writeFieldEnd();
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVs()) {
        oprot.writeFieldBegin(VS_FIELD_DESC);
        oprot.writeBool(struct.vs);
        oprot.writeFieldEnd();
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameFName != null) {
        if (struct.isSetGameFName()) {
          oprot.writeFieldBegin(GAME_FNAME_FIELD_DESC);
          oprot.writeString(struct.gameFName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameSName != null) {
        if (struct.isSetGameSName()) {
          oprot.writeFieldBegin(GAME_SNAME_FIELD_DESC);
          oprot.writeString(struct.gameSName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchSystem != null) {
        if (struct.isSetMatchSystem()) {
          oprot.writeFieldBegin(MATCH_SYSTEM_FIELD_DESC);
          oprot.writeI32(struct.matchSystem.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.abbreviation != null) {
        if (struct.isSetAbbreviation()) {
          oprot.writeFieldBegin(ABBREVIATION_FIELD_DESC);
          oprot.writeString(struct.abbreviation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter24 : struct.tags)
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.continent != null) {
        if (struct.isSetContinent()) {
          oprot.writeFieldBegin(CONTINENT_FIELD_DESC);
          oprot.writeString(struct.continent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nation != null) {
        if (struct.isSetNation()) {
          oprot.writeFieldBegin(NATION_FIELD_DESC);
          oprot.writeString(struct.nation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.introduction != null) {
        if (struct.isSetIntroduction()) {
          oprot.writeFieldBegin(INTRODUCTION_FIELD_DESC);
          oprot.writeString(struct.introduction);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBoleId()) {
        oprot.writeFieldBegin(BOLE_ID_FIELD_DESC);
        oprot.writeI64(struct.boleId);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter25 : struct.multiLangNames)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangAbbrs != null) {
        if (struct.isSetMultiLangAbbrs()) {
          oprot.writeFieldBegin(MULTI_LANG_ABBRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangAbbrs.size()));
            for (com.lesports.api.common.LangString _iter26 : struct.multiLangAbbrs)
            {
              _iter26.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangGameFNames != null) {
        if (struct.isSetMultiLangGameFNames()) {
          oprot.writeFieldBegin(MULTI_LANG_GAME_FNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGameFNames.size()));
            for (com.lesports.api.common.LangString _iter27 : struct.multiLangGameFNames)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangGameSNames != null) {
        if (struct.isSetMultiLangGameSNames()) {
          oprot.writeFieldBegin(MULTI_LANG_GAME_SNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGameSNames.size()));
            for (com.lesports.api.common.LangString _iter28 : struct.multiLangGameSNames)
            {
              _iter28.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangConts != null) {
        if (struct.isSetMultiLangConts()) {
          oprot.writeFieldBegin(MULTI_LANG_CONTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangConts.size()));
            for (com.lesports.api.common.LangString _iter29 : struct.multiLangConts)
            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNations != null) {
        if (struct.isSetMultiLangNations()) {
          oprot.writeFieldBegin(MULTI_LANG_NATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNations.size()));
            for (com.lesports.api.common.LangString _iter30 : struct.multiLangNations)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangIntros != null) {
        if (struct.isSetMultiLangIntros()) {
          oprot.writeFieldBegin(MULTI_LANG_INTROS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangIntros.size()));
            for (com.lesports.api.common.LangString _iter31 : struct.multiLangIntros)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompetitionTupleSchemeFactory implements SchemeFactory {
    public TCompetitionTupleScheme getScheme() {
      return new TCompetitionTupleScheme();
    }
  }

  private static class TCompetitionTupleScheme extends TupleScheme<TCompetition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompetition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetGameFType()) {
        optionals.set(1);
      }
      if (struct.isSetGameSType()) {
        optionals.set(2);
      }
      if (struct.isSetStartTime()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetVs()) {
        optionals.set(5);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(6);
      }
      if (struct.isSetGameFName()) {
        optionals.set(7);
      }
      if (struct.isSetGameSName()) {
        optionals.set(8);
      }
      if (struct.isSetMatchSystem()) {
        optionals.set(9);
      }
      if (struct.isSetAbbreviation()) {
        optionals.set(10);
      }
      if (struct.isSetTags()) {
        optionals.set(11);
      }
      if (struct.isSetContinent()) {
        optionals.set(12);
      }
      if (struct.isSetNation()) {
        optionals.set(13);
      }
      if (struct.isSetIntroduction()) {
        optionals.set(14);
      }
      if (struct.isSetBoleId()) {
        optionals.set(15);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(16);
      }
      if (struct.isSetMultiLangAbbrs()) {
        optionals.set(17);
      }
      if (struct.isSetMultiLangGameFNames()) {
        optionals.set(18);
      }
      if (struct.isSetMultiLangGameSNames()) {
        optionals.set(19);
      }
      if (struct.isSetMultiLangConts()) {
        optionals.set(20);
      }
      if (struct.isSetMultiLangNations()) {
        optionals.set(21);
      }
      if (struct.isSetMultiLangIntros()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetGameFType()) {
        oprot.writeI64(struct.gameFType);
      }
      if (struct.isSetGameSType()) {
        oprot.writeI64(struct.gameSType);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetVs()) {
        oprot.writeBool(struct.vs);
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetGameFName()) {
        oprot.writeString(struct.gameFName);
      }
      if (struct.isSetGameSName()) {
        oprot.writeString(struct.gameSName);
      }
      if (struct.isSetMatchSystem()) {
        oprot.writeI32(struct.matchSystem.getValue());
      }
      if (struct.isSetAbbreviation()) {
        oprot.writeString(struct.abbreviation);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter32 : struct.tags)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetContinent()) {
        oprot.writeString(struct.continent);
      }
      if (struct.isSetNation()) {
        oprot.writeString(struct.nation);
      }
      if (struct.isSetIntroduction()) {
        oprot.writeString(struct.introduction);
      }
      if (struct.isSetBoleId()) {
        oprot.writeI64(struct.boleId);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter33 : struct.multiLangNames)
          {
            _iter33.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangAbbrs()) {
        {
          oprot.writeI32(struct.multiLangAbbrs.size());
          for (com.lesports.api.common.LangString _iter34 : struct.multiLangAbbrs)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangGameFNames()) {
        {
          oprot.writeI32(struct.multiLangGameFNames.size());
          for (com.lesports.api.common.LangString _iter35 : struct.multiLangGameFNames)
          {
            _iter35.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangGameSNames()) {
        {
          oprot.writeI32(struct.multiLangGameSNames.size());
          for (com.lesports.api.common.LangString _iter36 : struct.multiLangGameSNames)
          {
            _iter36.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangConts()) {
        {
          oprot.writeI32(struct.multiLangConts.size());
          for (com.lesports.api.common.LangString _iter37 : struct.multiLangConts)
          {
            _iter37.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangNations()) {
        {
          oprot.writeI32(struct.multiLangNations.size());
          for (com.lesports.api.common.LangString _iter38 : struct.multiLangNations)
          {
            _iter38.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangIntros()) {
        {
          oprot.writeI32(struct.multiLangIntros.size());
          for (com.lesports.api.common.LangString _iter39 : struct.multiLangIntros)
          {
            _iter39.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompetition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameFType = iprot.readI64();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gameSType = iprot.readI64();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vs = iprot.readBool();
        struct.setVsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.gameFName = iprot.readString();
        struct.setGameFNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.gameSName = iprot.readString();
        struct.setGameSNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.matchSystem = com.lesports.qmt.sbd.api.common.MatchSystem.findByValue(iprot.readI32());
        struct.setMatchSystemIsSet(true);
      }
      if (incoming.get(10)) {
        struct.abbreviation = iprot.readString();
        struct.setAbbreviationIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list40 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list40.size);
          com.lesports.qmt.config.api.dto.TTag _elem41;
          for (int _i42 = 0; _i42 < _list40.size; ++_i42)
          {
            _elem41 = new com.lesports.qmt.config.api.dto.TTag();
            _elem41.read(iprot);
            struct.tags.add(_elem41);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.continent = iprot.readString();
        struct.setContinentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.nation = iprot.readString();
        struct.setNationIsSet(true);
      }
      if (incoming.get(14)) {
        struct.introduction = iprot.readString();
        struct.setIntroductionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.boleId = iprot.readI64();
        struct.setBoleIdIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list43 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list43.size);
          com.lesports.api.common.LangString _elem44;
          for (int _i45 = 0; _i45 < _list43.size; ++_i45)
          {
            _elem44 = new com.lesports.api.common.LangString();
            _elem44.read(iprot);
            struct.multiLangNames.add(_elem44);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(_list46.size);
          com.lesports.api.common.LangString _elem47;
          for (int _i48 = 0; _i48 < _list46.size; ++_i48)
          {
            _elem47 = new com.lesports.api.common.LangString();
            _elem47.read(iprot);
            struct.multiLangAbbrs.add(_elem47);
          }
        }
        struct.setMultiLangAbbrsIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGameFNames = new ArrayList<com.lesports.api.common.LangString>(_list49.size);
          com.lesports.api.common.LangString _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = new com.lesports.api.common.LangString();
            _elem50.read(iprot);
            struct.multiLangGameFNames.add(_elem50);
          }
        }
        struct.setMultiLangGameFNamesIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGameSNames = new ArrayList<com.lesports.api.common.LangString>(_list52.size);
          com.lesports.api.common.LangString _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = new com.lesports.api.common.LangString();
            _elem53.read(iprot);
            struct.multiLangGameSNames.add(_elem53);
          }
        }
        struct.setMultiLangGameSNamesIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangConts = new ArrayList<com.lesports.api.common.LangString>(_list55.size);
          com.lesports.api.common.LangString _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new com.lesports.api.common.LangString();
            _elem56.read(iprot);
            struct.multiLangConts.add(_elem56);
          }
        }
        struct.setMultiLangContsIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNations = new ArrayList<com.lesports.api.common.LangString>(_list58.size);
          com.lesports.api.common.LangString _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new com.lesports.api.common.LangString();
            _elem59.read(iprot);
            struct.multiLangNations.add(_elem59);
          }
        }
        struct.setMultiLangNationsIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangIntros = new ArrayList<com.lesports.api.common.LangString>(_list61.size);
          com.lesports.api.common.LangString _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new com.lesports.api.common.LangString();
            _elem62.read(iprot);
            struct.multiLangIntros.add(_elem62);
          }
        }
        struct.setMultiLangIntrosIsSet(true);
      }
    }
  }

}

