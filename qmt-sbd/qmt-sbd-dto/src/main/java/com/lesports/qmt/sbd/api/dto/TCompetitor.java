/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TCompetitor implements org.apache.thrift.TBase<TCompetitor, TCompetitor._Fields>, java.io.Serializable, Cloneable, Comparable<TCompetitor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompetitor");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPETITOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FINAL_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("finalResult", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("camp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField GROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ground", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SHORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shortName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SECTION_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionResults", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField PNG_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("pngLogo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BG_WEB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("bgWebUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField IS_FOCUSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isFocused", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_SHORT_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangShortNames", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField CAMP_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("campEntity", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField EXTEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendInfos", org.apache.thrift.protocol.TType.MAP, (short)18);
  private static final org.apache.thrift.protocol.TField COUNTRY_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("countryImgUrl", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField COMPETITOR_COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorCountryId", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField IS_FOCUSED_COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("isFocusedCountries", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField MULTI_COUN_LOGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiCounLogos", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField OFFICIAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_OFFICIAL_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangOfficialNames", org.apache.thrift.protocol.TType.LIST, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCompetitorStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCompetitorTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private com.lesports.qmt.sbd.api.common.CompetitorType competitorType; // optional
  private String logoUrl; // optional
  private String finalResult; // optional
  private int camp; // optional
  private com.lesports.qmt.sbd.api.common.GroundType ground; // optional
  private int order; // optional
  private String shortName; // optional
  private List<TSectionResult> sectionResults; // optional
  private long leId; // optional
  private String pngLogo; // optional
  private String bgWebUrl; // optional
  private boolean isFocused; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangShortNames; // optional
  private com.lesports.qmt.sbd.api.common.Camp campEntity; // optional
  private Map<String,String> extendInfos; // optional
  private String countryImgUrl; // optional
  private long competitorCountryId; // optional
  private List<com.lesports.api.common.CountryCode> isFocusedCountries; // optional
  private List<com.lesports.api.common.CounString> multiCounLogos; // optional
  private String officialName; // optional
  private List<com.lesports.api.common.LangString> multiLangOfficialNames; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CompetitorType
     */
    COMPETITOR_TYPE((short)3, "competitorType"),
    LOGO_URL((short)4, "logoUrl"),
    FINAL_RESULT((short)5, "finalResult"),
    CAMP((short)6, "camp"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.GroundType
     */
    GROUND((short)7, "ground"),
    ORDER((short)8, "order"),
    SHORT_NAME((short)9, "shortName"),
    SECTION_RESULTS((short)10, "sectionResults"),
    LE_ID((short)11, "leId"),
    PNG_LOGO((short)12, "pngLogo"),
    BG_WEB_URL((short)13, "bgWebUrl"),
    IS_FOCUSED((short)14, "isFocused"),
    MULTI_LANG_NAMES((short)15, "multiLangNames"),
    MULTI_LANG_SHORT_NAMES((short)16, "multiLangShortNames"),
    CAMP_ENTITY((short)17, "campEntity"),
    EXTEND_INFOS((short)18, "extendInfos"),
    COUNTRY_IMG_URL((short)19, "countryImgUrl"),
    COMPETITOR_COUNTRY_ID((short)20, "competitorCountryId"),
    IS_FOCUSED_COUNTRIES((short)21, "isFocusedCountries"),
    MULTI_COUN_LOGOS((short)22, "multiCounLogos"),
    OFFICIAL_NAME((short)23, "officialName"),
    MULTI_LANG_OFFICIAL_NAMES((short)24, "multiLangOfficialNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // COMPETITOR_TYPE
          return COMPETITOR_TYPE;
        case 4: // LOGO_URL
          return LOGO_URL;
        case 5: // FINAL_RESULT
          return FINAL_RESULT;
        case 6: // CAMP
          return CAMP;
        case 7: // GROUND
          return GROUND;
        case 8: // ORDER
          return ORDER;
        case 9: // SHORT_NAME
          return SHORT_NAME;
        case 10: // SECTION_RESULTS
          return SECTION_RESULTS;
        case 11: // LE_ID
          return LE_ID;
        case 12: // PNG_LOGO
          return PNG_LOGO;
        case 13: // BG_WEB_URL
          return BG_WEB_URL;
        case 14: // IS_FOCUSED
          return IS_FOCUSED;
        case 15: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 16: // MULTI_LANG_SHORT_NAMES
          return MULTI_LANG_SHORT_NAMES;
        case 17: // CAMP_ENTITY
          return CAMP_ENTITY;
        case 18: // EXTEND_INFOS
          return EXTEND_INFOS;
        case 19: // COUNTRY_IMG_URL
          return COUNTRY_IMG_URL;
        case 20: // COMPETITOR_COUNTRY_ID
          return COMPETITOR_COUNTRY_ID;
        case 21: // IS_FOCUSED_COUNTRIES
          return IS_FOCUSED_COUNTRIES;
        case 22: // MULTI_COUN_LOGOS
          return MULTI_COUN_LOGOS;
        case 23: // OFFICIAL_NAME
          return OFFICIAL_NAME;
        case 24: // MULTI_LANG_OFFICIAL_NAMES
          return MULTI_LANG_OFFICIAL_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CAMP_ISSET_ID = 1;
  private static final int __ORDER_ISSET_ID = 2;
  private static final int __LEID_ISSET_ID = 3;
  private static final int __ISFOCUSED_ISSET_ID = 4;
  private static final int __COMPETITORCOUNTRYID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPETITOR_TYPE,_Fields.LOGO_URL,_Fields.FINAL_RESULT,_Fields.CAMP,_Fields.GROUND,_Fields.ORDER,_Fields.SHORT_NAME,_Fields.SECTION_RESULTS,_Fields.LE_ID,_Fields.PNG_LOGO,_Fields.BG_WEB_URL,_Fields.IS_FOCUSED,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_SHORT_NAMES,_Fields.CAMP_ENTITY,_Fields.EXTEND_INFOS,_Fields.COUNTRY_IMG_URL,_Fields.COMPETITOR_COUNTRY_ID,_Fields.IS_FOCUSED_COUNTRIES,_Fields.MULTI_COUN_LOGOS,_Fields.OFFICIAL_NAME,_Fields.MULTI_LANG_OFFICIAL_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("competitorType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CompetitorType.class)));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINAL_RESULT, new org.apache.thrift.meta_data.FieldMetaData("finalResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAMP, new org.apache.thrift.meta_data.FieldMetaData("camp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUND, new org.apache.thrift.meta_data.FieldMetaData("ground", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.GroundType.class)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("shortName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECTION_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("sectionResults", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSectionResult.class))));
    tmpMap.put(_Fields.LE_ID, new org.apache.thrift.meta_data.FieldMetaData("leId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PNG_LOGO, new org.apache.thrift.meta_data.FieldMetaData("pngLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BG_WEB_URL, new org.apache.thrift.meta_data.FieldMetaData("bgWebUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FOCUSED, new org.apache.thrift.meta_data.FieldMetaData("isFocused", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_SHORT_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangShortNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CAMP_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("campEntity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.common.Camp.class)));
    tmpMap.put(_Fields.EXTEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extendInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COUNTRY_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("countryImgUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITOR_COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorCountryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_FOCUSED_COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("isFocusedCountries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.CountryCode.class))));
    tmpMap.put(_Fields.MULTI_COUN_LOGOS, new org.apache.thrift.meta_data.FieldMetaData("multiCounLogos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CounString.class))));
    tmpMap.put(_Fields.OFFICIAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("officialName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_OFFICIAL_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangOfficialNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompetitor.class, metaDataMap);
  }

  public TCompetitor() {
  }

  public TCompetitor(
    long id,
    String name)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompetitor(TCompetitor other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCompetitorType()) {
      this.competitorType = other.competitorType;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetFinalResult()) {
      this.finalResult = other.finalResult;
    }
    this.camp = other.camp;
    if (other.isSetGround()) {
      this.ground = other.ground;
    }
    this.order = other.order;
    if (other.isSetShortName()) {
      this.shortName = other.shortName;
    }
    if (other.isSetSectionResults()) {
      List<TSectionResult> __this__sectionResults = new ArrayList<TSectionResult>(other.sectionResults.size());
      for (TSectionResult other_element : other.sectionResults) {
        __this__sectionResults.add(new TSectionResult(other_element));
      }
      this.sectionResults = __this__sectionResults;
    }
    this.leId = other.leId;
    if (other.isSetPngLogo()) {
      this.pngLogo = other.pngLogo;
    }
    if (other.isSetBgWebUrl()) {
      this.bgWebUrl = other.bgWebUrl;
    }
    this.isFocused = other.isFocused;
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangShortNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangShortNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangShortNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangShortNames) {
        __this__multiLangShortNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangShortNames = __this__multiLangShortNames;
    }
    if (other.isSetCampEntity()) {
      this.campEntity = new com.lesports.qmt.sbd.api.common.Camp(other.campEntity);
    }
    if (other.isSetExtendInfos()) {
      Map<String,String> __this__extendInfos = new HashMap<String,String>(other.extendInfos);
      this.extendInfos = __this__extendInfos;
    }
    if (other.isSetCountryImgUrl()) {
      this.countryImgUrl = other.countryImgUrl;
    }
    this.competitorCountryId = other.competitorCountryId;
    if (other.isSetIsFocusedCountries()) {
      List<com.lesports.api.common.CountryCode> __this__isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>(other.isFocusedCountries.size());
      for (com.lesports.api.common.CountryCode other_element : other.isFocusedCountries) {
        __this__isFocusedCountries.add(other_element);
      }
      this.isFocusedCountries = __this__isFocusedCountries;
    }
    if (other.isSetMultiCounLogos()) {
      List<com.lesports.api.common.CounString> __this__multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(other.multiCounLogos.size());
      for (com.lesports.api.common.CounString other_element : other.multiCounLogos) {
        __this__multiCounLogos.add(new com.lesports.api.common.CounString(other_element));
      }
      this.multiCounLogos = __this__multiCounLogos;
    }
    if (other.isSetOfficialName()) {
      this.officialName = other.officialName;
    }
    if (other.isSetMultiLangOfficialNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangOfficialNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangOfficialNames) {
        __this__multiLangOfficialNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangOfficialNames = __this__multiLangOfficialNames;
    }
  }

  public TCompetitor deepCopy() {
    return new TCompetitor(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.competitorType = null;
    this.logoUrl = null;
    this.finalResult = null;
    setCampIsSet(false);
    this.camp = 0;
    this.ground = null;
    setOrderIsSet(false);
    this.order = 0;
    this.shortName = null;
    this.sectionResults = null;
    setLeIdIsSet(false);
    this.leId = 0;
    this.pngLogo = null;
    this.bgWebUrl = null;
    setIsFocusedIsSet(false);
    this.isFocused = false;
    this.multiLangNames = null;
    this.multiLangShortNames = null;
    this.campEntity = null;
    this.extendInfos = null;
    this.countryImgUrl = null;
    setCompetitorCountryIdIsSet(false);
    this.competitorCountryId = 0;
    this.isFocusedCountries = null;
    this.multiCounLogos = null;
    this.officialName = null;
    this.multiLangOfficialNames = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public com.lesports.qmt.sbd.api.common.CompetitorType getCompetitorType() {
    return this.competitorType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public void setCompetitorType(com.lesports.qmt.sbd.api.common.CompetitorType competitorType) {
    this.competitorType = competitorType;
  }

  public void unsetCompetitorType() {
    this.competitorType = null;
  }

  /** Returns true if field competitorType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorType() {
    return this.competitorType != null;
  }

  public void setCompetitorTypeIsSet(boolean value) {
    if (!value) {
      this.competitorType = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getFinalResult() {
    return this.finalResult;
  }

  public void setFinalResult(String finalResult) {
    this.finalResult = finalResult;
  }

  public void unsetFinalResult() {
    this.finalResult = null;
  }

  /** Returns true if field finalResult is set (has been assigned a value) and false otherwise */
  public boolean isSetFinalResult() {
    return this.finalResult != null;
  }

  public void setFinalResultIsSet(boolean value) {
    if (!value) {
      this.finalResult = null;
    }
  }

  public int getCamp() {
    return this.camp;
  }

  public void setCamp(int camp) {
    this.camp = camp;
    setCampIsSet(true);
  }

  public void unsetCamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMP_ISSET_ID);
  }

  /** Returns true if field camp is set (has been assigned a value) and false otherwise */
  public boolean isSetCamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMP_ISSET_ID);
  }

  public void setCampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.GroundType
   */
  public com.lesports.qmt.sbd.api.common.GroundType getGround() {
    return this.ground;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.GroundType
   */
  public void setGround(com.lesports.qmt.sbd.api.common.GroundType ground) {
    this.ground = ground;
  }

  public void unsetGround() {
    this.ground = null;
  }

  /** Returns true if field ground is set (has been assigned a value) and false otherwise */
  public boolean isSetGround() {
    return this.ground != null;
  }

  public void setGroundIsSet(boolean value) {
    if (!value) {
      this.ground = null;
    }
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public String getShortName() {
    return this.shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }

  public void unsetShortName() {
    this.shortName = null;
  }

  /** Returns true if field shortName is set (has been assigned a value) and false otherwise */
  public boolean isSetShortName() {
    return this.shortName != null;
  }

  public void setShortNameIsSet(boolean value) {
    if (!value) {
      this.shortName = null;
    }
  }

  public int getSectionResultsSize() {
    return (this.sectionResults == null) ? 0 : this.sectionResults.size();
  }

  public java.util.Iterator<TSectionResult> getSectionResultsIterator() {
    return (this.sectionResults == null) ? null : this.sectionResults.iterator();
  }

  public void addToSectionResults(TSectionResult elem) {
    if (this.sectionResults == null) {
      this.sectionResults = new ArrayList<TSectionResult>();
    }
    this.sectionResults.add(elem);
  }

  public List<TSectionResult> getSectionResults() {
    return this.sectionResults;
  }

  public void setSectionResults(List<TSectionResult> sectionResults) {
    this.sectionResults = sectionResults;
  }

  public void unsetSectionResults() {
    this.sectionResults = null;
  }

  /** Returns true if field sectionResults is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionResults() {
    return this.sectionResults != null;
  }

  public void setSectionResultsIsSet(boolean value) {
    if (!value) {
      this.sectionResults = null;
    }
  }

  public long getLeId() {
    return this.leId;
  }

  public void setLeId(long leId) {
    this.leId = leId;
    setLeIdIsSet(true);
  }

  public void unsetLeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEID_ISSET_ID);
  }

  /** Returns true if field leId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEID_ISSET_ID);
  }

  public void setLeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEID_ISSET_ID, value);
  }

  public String getPngLogo() {
    return this.pngLogo;
  }

  public void setPngLogo(String pngLogo) {
    this.pngLogo = pngLogo;
  }

  public void unsetPngLogo() {
    this.pngLogo = null;
  }

  /** Returns true if field pngLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetPngLogo() {
    return this.pngLogo != null;
  }

  public void setPngLogoIsSet(boolean value) {
    if (!value) {
      this.pngLogo = null;
    }
  }

  public String getBgWebUrl() {
    return this.bgWebUrl;
  }

  public void setBgWebUrl(String bgWebUrl) {
    this.bgWebUrl = bgWebUrl;
  }

  public void unsetBgWebUrl() {
    this.bgWebUrl = null;
  }

  /** Returns true if field bgWebUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetBgWebUrl() {
    return this.bgWebUrl != null;
  }

  public void setBgWebUrlIsSet(boolean value) {
    if (!value) {
      this.bgWebUrl = null;
    }
  }

  public boolean isIsFocused() {
    return this.isFocused;
  }

  public void setIsFocused(boolean isFocused) {
    this.isFocused = isFocused;
    setIsFocusedIsSet(true);
  }

  public void unsetIsFocused() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOCUSED_ISSET_ID);
  }

  /** Returns true if field isFocused is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFocused() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOCUSED_ISSET_ID);
  }

  public void setIsFocusedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOCUSED_ISSET_ID, value);
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangShortNamesSize() {
    return (this.multiLangShortNames == null) ? 0 : this.multiLangShortNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangShortNamesIterator() {
    return (this.multiLangShortNames == null) ? null : this.multiLangShortNames.iterator();
  }

  public void addToMultiLangShortNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangShortNames == null) {
      this.multiLangShortNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangShortNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangShortNames() {
    return this.multiLangShortNames;
  }

  public void setMultiLangShortNames(List<com.lesports.api.common.LangString> multiLangShortNames) {
    this.multiLangShortNames = multiLangShortNames;
  }

  public void unsetMultiLangShortNames() {
    this.multiLangShortNames = null;
  }

  /** Returns true if field multiLangShortNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangShortNames() {
    return this.multiLangShortNames != null;
  }

  public void setMultiLangShortNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangShortNames = null;
    }
  }

  public com.lesports.qmt.sbd.api.common.Camp getCampEntity() {
    return this.campEntity;
  }

  public void setCampEntity(com.lesports.qmt.sbd.api.common.Camp campEntity) {
    this.campEntity = campEntity;
  }

  public void unsetCampEntity() {
    this.campEntity = null;
  }

  /** Returns true if field campEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetCampEntity() {
    return this.campEntity != null;
  }

  public void setCampEntityIsSet(boolean value) {
    if (!value) {
      this.campEntity = null;
    }
  }

  public int getExtendInfosSize() {
    return (this.extendInfos == null) ? 0 : this.extendInfos.size();
  }

  public void putToExtendInfos(String key, String val) {
    if (this.extendInfos == null) {
      this.extendInfos = new HashMap<String,String>();
    }
    this.extendInfos.put(key, val);
  }

  public Map<String,String> getExtendInfos() {
    return this.extendInfos;
  }

  public void setExtendInfos(Map<String,String> extendInfos) {
    this.extendInfos = extendInfos;
  }

  public void unsetExtendInfos() {
    this.extendInfos = null;
  }

  /** Returns true if field extendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendInfos() {
    return this.extendInfos != null;
  }

  public void setExtendInfosIsSet(boolean value) {
    if (!value) {
      this.extendInfos = null;
    }
  }

  public String getCountryImgUrl() {
    return this.countryImgUrl;
  }

  public void setCountryImgUrl(String countryImgUrl) {
    this.countryImgUrl = countryImgUrl;
  }

  public void unsetCountryImgUrl() {
    this.countryImgUrl = null;
  }

  /** Returns true if field countryImgUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryImgUrl() {
    return this.countryImgUrl != null;
  }

  public void setCountryImgUrlIsSet(boolean value) {
    if (!value) {
      this.countryImgUrl = null;
    }
  }

  public long getCompetitorCountryId() {
    return this.competitorCountryId;
  }

  public void setCompetitorCountryId(long competitorCountryId) {
    this.competitorCountryId = competitorCountryId;
    setCompetitorCountryIdIsSet(true);
  }

  public void unsetCompetitorCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORCOUNTRYID_ISSET_ID);
  }

  /** Returns true if field competitorCountryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITORCOUNTRYID_ISSET_ID);
  }

  public void setCompetitorCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORCOUNTRYID_ISSET_ID, value);
  }

  public int getIsFocusedCountriesSize() {
    return (this.isFocusedCountries == null) ? 0 : this.isFocusedCountries.size();
  }

  public java.util.Iterator<com.lesports.api.common.CountryCode> getIsFocusedCountriesIterator() {
    return (this.isFocusedCountries == null) ? null : this.isFocusedCountries.iterator();
  }

  public void addToIsFocusedCountries(com.lesports.api.common.CountryCode elem) {
    if (this.isFocusedCountries == null) {
      this.isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>();
    }
    this.isFocusedCountries.add(elem);
  }

  public List<com.lesports.api.common.CountryCode> getIsFocusedCountries() {
    return this.isFocusedCountries;
  }

  public void setIsFocusedCountries(List<com.lesports.api.common.CountryCode> isFocusedCountries) {
    this.isFocusedCountries = isFocusedCountries;
  }

  public void unsetIsFocusedCountries() {
    this.isFocusedCountries = null;
  }

  /** Returns true if field isFocusedCountries is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFocusedCountries() {
    return this.isFocusedCountries != null;
  }

  public void setIsFocusedCountriesIsSet(boolean value) {
    if (!value) {
      this.isFocusedCountries = null;
    }
  }

  public int getMultiCounLogosSize() {
    return (this.multiCounLogos == null) ? 0 : this.multiCounLogos.size();
  }

  public java.util.Iterator<com.lesports.api.common.CounString> getMultiCounLogosIterator() {
    return (this.multiCounLogos == null) ? null : this.multiCounLogos.iterator();
  }

  public void addToMultiCounLogos(com.lesports.api.common.CounString elem) {
    if (this.multiCounLogos == null) {
      this.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>();
    }
    this.multiCounLogos.add(elem);
  }

  public List<com.lesports.api.common.CounString> getMultiCounLogos() {
    return this.multiCounLogos;
  }

  public void setMultiCounLogos(List<com.lesports.api.common.CounString> multiCounLogos) {
    this.multiCounLogos = multiCounLogos;
  }

  public void unsetMultiCounLogos() {
    this.multiCounLogos = null;
  }

  /** Returns true if field multiCounLogos is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiCounLogos() {
    return this.multiCounLogos != null;
  }

  public void setMultiCounLogosIsSet(boolean value) {
    if (!value) {
      this.multiCounLogos = null;
    }
  }

  public String getOfficialName() {
    return this.officialName;
  }

  public void setOfficialName(String officialName) {
    this.officialName = officialName;
  }

  public void unsetOfficialName() {
    this.officialName = null;
  }

  /** Returns true if field officialName is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialName() {
    return this.officialName != null;
  }

  public void setOfficialNameIsSet(boolean value) {
    if (!value) {
      this.officialName = null;
    }
  }

  public int getMultiLangOfficialNamesSize() {
    return (this.multiLangOfficialNames == null) ? 0 : this.multiLangOfficialNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangOfficialNamesIterator() {
    return (this.multiLangOfficialNames == null) ? null : this.multiLangOfficialNames.iterator();
  }

  public void addToMultiLangOfficialNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangOfficialNames == null) {
      this.multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangOfficialNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangOfficialNames() {
    return this.multiLangOfficialNames;
  }

  public void setMultiLangOfficialNames(List<com.lesports.api.common.LangString> multiLangOfficialNames) {
    this.multiLangOfficialNames = multiLangOfficialNames;
  }

  public void unsetMultiLangOfficialNames() {
    this.multiLangOfficialNames = null;
  }

  /** Returns true if field multiLangOfficialNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangOfficialNames() {
    return this.multiLangOfficialNames != null;
  }

  public void setMultiLangOfficialNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangOfficialNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case COMPETITOR_TYPE:
      if (value == null) {
        unsetCompetitorType();
      } else {
        setCompetitorType((com.lesports.qmt.sbd.api.common.CompetitorType)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case FINAL_RESULT:
      if (value == null) {
        unsetFinalResult();
      } else {
        setFinalResult((String)value);
      }
      break;

    case CAMP:
      if (value == null) {
        unsetCamp();
      } else {
        setCamp((Integer)value);
      }
      break;

    case GROUND:
      if (value == null) {
        unsetGround();
      } else {
        setGround((com.lesports.qmt.sbd.api.common.GroundType)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case SHORT_NAME:
      if (value == null) {
        unsetShortName();
      } else {
        setShortName((String)value);
      }
      break;

    case SECTION_RESULTS:
      if (value == null) {
        unsetSectionResults();
      } else {
        setSectionResults((List<TSectionResult>)value);
      }
      break;

    case LE_ID:
      if (value == null) {
        unsetLeId();
      } else {
        setLeId((Long)value);
      }
      break;

    case PNG_LOGO:
      if (value == null) {
        unsetPngLogo();
      } else {
        setPngLogo((String)value);
      }
      break;

    case BG_WEB_URL:
      if (value == null) {
        unsetBgWebUrl();
      } else {
        setBgWebUrl((String)value);
      }
      break;

    case IS_FOCUSED:
      if (value == null) {
        unsetIsFocused();
      } else {
        setIsFocused((Boolean)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_SHORT_NAMES:
      if (value == null) {
        unsetMultiLangShortNames();
      } else {
        setMultiLangShortNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CAMP_ENTITY:
      if (value == null) {
        unsetCampEntity();
      } else {
        setCampEntity((com.lesports.qmt.sbd.api.common.Camp)value);
      }
      break;

    case EXTEND_INFOS:
      if (value == null) {
        unsetExtendInfos();
      } else {
        setExtendInfos((Map<String,String>)value);
      }
      break;

    case COUNTRY_IMG_URL:
      if (value == null) {
        unsetCountryImgUrl();
      } else {
        setCountryImgUrl((String)value);
      }
      break;

    case COMPETITOR_COUNTRY_ID:
      if (value == null) {
        unsetCompetitorCountryId();
      } else {
        setCompetitorCountryId((Long)value);
      }
      break;

    case IS_FOCUSED_COUNTRIES:
      if (value == null) {
        unsetIsFocusedCountries();
      } else {
        setIsFocusedCountries((List<com.lesports.api.common.CountryCode>)value);
      }
      break;

    case MULTI_COUN_LOGOS:
      if (value == null) {
        unsetMultiCounLogos();
      } else {
        setMultiCounLogos((List<com.lesports.api.common.CounString>)value);
      }
      break;

    case OFFICIAL_NAME:
      if (value == null) {
        unsetOfficialName();
      } else {
        setOfficialName((String)value);
      }
      break;

    case MULTI_LANG_OFFICIAL_NAMES:
      if (value == null) {
        unsetMultiLangOfficialNames();
      } else {
        setMultiLangOfficialNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case COMPETITOR_TYPE:
      return getCompetitorType();

    case LOGO_URL:
      return getLogoUrl();

    case FINAL_RESULT:
      return getFinalResult();

    case CAMP:
      return Integer.valueOf(getCamp());

    case GROUND:
      return getGround();

    case ORDER:
      return Integer.valueOf(getOrder());

    case SHORT_NAME:
      return getShortName();

    case SECTION_RESULTS:
      return getSectionResults();

    case LE_ID:
      return Long.valueOf(getLeId());

    case PNG_LOGO:
      return getPngLogo();

    case BG_WEB_URL:
      return getBgWebUrl();

    case IS_FOCUSED:
      return Boolean.valueOf(isIsFocused());

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_SHORT_NAMES:
      return getMultiLangShortNames();

    case CAMP_ENTITY:
      return getCampEntity();

    case EXTEND_INFOS:
      return getExtendInfos();

    case COUNTRY_IMG_URL:
      return getCountryImgUrl();

    case COMPETITOR_COUNTRY_ID:
      return Long.valueOf(getCompetitorCountryId());

    case IS_FOCUSED_COUNTRIES:
      return getIsFocusedCountries();

    case MULTI_COUN_LOGOS:
      return getMultiCounLogos();

    case OFFICIAL_NAME:
      return getOfficialName();

    case MULTI_LANG_OFFICIAL_NAMES:
      return getMultiLangOfficialNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case COMPETITOR_TYPE:
      return isSetCompetitorType();
    case LOGO_URL:
      return isSetLogoUrl();
    case FINAL_RESULT:
      return isSetFinalResult();
    case CAMP:
      return isSetCamp();
    case GROUND:
      return isSetGround();
    case ORDER:
      return isSetOrder();
    case SHORT_NAME:
      return isSetShortName();
    case SECTION_RESULTS:
      return isSetSectionResults();
    case LE_ID:
      return isSetLeId();
    case PNG_LOGO:
      return isSetPngLogo();
    case BG_WEB_URL:
      return isSetBgWebUrl();
    case IS_FOCUSED:
      return isSetIsFocused();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_SHORT_NAMES:
      return isSetMultiLangShortNames();
    case CAMP_ENTITY:
      return isSetCampEntity();
    case EXTEND_INFOS:
      return isSetExtendInfos();
    case COUNTRY_IMG_URL:
      return isSetCountryImgUrl();
    case COMPETITOR_COUNTRY_ID:
      return isSetCompetitorCountryId();
    case IS_FOCUSED_COUNTRIES:
      return isSetIsFocusedCountries();
    case MULTI_COUN_LOGOS:
      return isSetMultiCounLogos();
    case OFFICIAL_NAME:
      return isSetOfficialName();
    case MULTI_LANG_OFFICIAL_NAMES:
      return isSetMultiLangOfficialNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCompetitor)
      return this.equals((TCompetitor)that);
    return false;
  }

  public boolean equals(TCompetitor that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_competitorType = true && this.isSetCompetitorType();
    boolean that_present_competitorType = true && that.isSetCompetitorType();
    if (this_present_competitorType || that_present_competitorType) {
      if (!(this_present_competitorType && that_present_competitorType))
        return false;
      if (!this.competitorType.equals(that.competitorType))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_finalResult = true && this.isSetFinalResult();
    boolean that_present_finalResult = true && that.isSetFinalResult();
    if (this_present_finalResult || that_present_finalResult) {
      if (!(this_present_finalResult && that_present_finalResult))
        return false;
      if (!this.finalResult.equals(that.finalResult))
        return false;
    }

    boolean this_present_camp = true && this.isSetCamp();
    boolean that_present_camp = true && that.isSetCamp();
    if (this_present_camp || that_present_camp) {
      if (!(this_present_camp && that_present_camp))
        return false;
      if (this.camp != that.camp)
        return false;
    }

    boolean this_present_ground = true && this.isSetGround();
    boolean that_present_ground = true && that.isSetGround();
    if (this_present_ground || that_present_ground) {
      if (!(this_present_ground && that_present_ground))
        return false;
      if (!this.ground.equals(that.ground))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_shortName = true && this.isSetShortName();
    boolean that_present_shortName = true && that.isSetShortName();
    if (this_present_shortName || that_present_shortName) {
      if (!(this_present_shortName && that_present_shortName))
        return false;
      if (!this.shortName.equals(that.shortName))
        return false;
    }

    boolean this_present_sectionResults = true && this.isSetSectionResults();
    boolean that_present_sectionResults = true && that.isSetSectionResults();
    if (this_present_sectionResults || that_present_sectionResults) {
      if (!(this_present_sectionResults && that_present_sectionResults))
        return false;
      if (!this.sectionResults.equals(that.sectionResults))
        return false;
    }

    boolean this_present_leId = true && this.isSetLeId();
    boolean that_present_leId = true && that.isSetLeId();
    if (this_present_leId || that_present_leId) {
      if (!(this_present_leId && that_present_leId))
        return false;
      if (this.leId != that.leId)
        return false;
    }

    boolean this_present_pngLogo = true && this.isSetPngLogo();
    boolean that_present_pngLogo = true && that.isSetPngLogo();
    if (this_present_pngLogo || that_present_pngLogo) {
      if (!(this_present_pngLogo && that_present_pngLogo))
        return false;
      if (!this.pngLogo.equals(that.pngLogo))
        return false;
    }

    boolean this_present_bgWebUrl = true && this.isSetBgWebUrl();
    boolean that_present_bgWebUrl = true && that.isSetBgWebUrl();
    if (this_present_bgWebUrl || that_present_bgWebUrl) {
      if (!(this_present_bgWebUrl && that_present_bgWebUrl))
        return false;
      if (!this.bgWebUrl.equals(that.bgWebUrl))
        return false;
    }

    boolean this_present_isFocused = true && this.isSetIsFocused();
    boolean that_present_isFocused = true && that.isSetIsFocused();
    if (this_present_isFocused || that_present_isFocused) {
      if (!(this_present_isFocused && that_present_isFocused))
        return false;
      if (this.isFocused != that.isFocused)
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangShortNames = true && this.isSetMultiLangShortNames();
    boolean that_present_multiLangShortNames = true && that.isSetMultiLangShortNames();
    if (this_present_multiLangShortNames || that_present_multiLangShortNames) {
      if (!(this_present_multiLangShortNames && that_present_multiLangShortNames))
        return false;
      if (!this.multiLangShortNames.equals(that.multiLangShortNames))
        return false;
    }

    boolean this_present_campEntity = true && this.isSetCampEntity();
    boolean that_present_campEntity = true && that.isSetCampEntity();
    if (this_present_campEntity || that_present_campEntity) {
      if (!(this_present_campEntity && that_present_campEntity))
        return false;
      if (!this.campEntity.equals(that.campEntity))
        return false;
    }

    boolean this_present_extendInfos = true && this.isSetExtendInfos();
    boolean that_present_extendInfos = true && that.isSetExtendInfos();
    if (this_present_extendInfos || that_present_extendInfos) {
      if (!(this_present_extendInfos && that_present_extendInfos))
        return false;
      if (!this.extendInfos.equals(that.extendInfos))
        return false;
    }

    boolean this_present_countryImgUrl = true && this.isSetCountryImgUrl();
    boolean that_present_countryImgUrl = true && that.isSetCountryImgUrl();
    if (this_present_countryImgUrl || that_present_countryImgUrl) {
      if (!(this_present_countryImgUrl && that_present_countryImgUrl))
        return false;
      if (!this.countryImgUrl.equals(that.countryImgUrl))
        return false;
    }

    boolean this_present_competitorCountryId = true && this.isSetCompetitorCountryId();
    boolean that_present_competitorCountryId = true && that.isSetCompetitorCountryId();
    if (this_present_competitorCountryId || that_present_competitorCountryId) {
      if (!(this_present_competitorCountryId && that_present_competitorCountryId))
        return false;
      if (this.competitorCountryId != that.competitorCountryId)
        return false;
    }

    boolean this_present_isFocusedCountries = true && this.isSetIsFocusedCountries();
    boolean that_present_isFocusedCountries = true && that.isSetIsFocusedCountries();
    if (this_present_isFocusedCountries || that_present_isFocusedCountries) {
      if (!(this_present_isFocusedCountries && that_present_isFocusedCountries))
        return false;
      if (!this.isFocusedCountries.equals(that.isFocusedCountries))
        return false;
    }

    boolean this_present_multiCounLogos = true && this.isSetMultiCounLogos();
    boolean that_present_multiCounLogos = true && that.isSetMultiCounLogos();
    if (this_present_multiCounLogos || that_present_multiCounLogos) {
      if (!(this_present_multiCounLogos && that_present_multiCounLogos))
        return false;
      if (!this.multiCounLogos.equals(that.multiCounLogos))
        return false;
    }

    boolean this_present_officialName = true && this.isSetOfficialName();
    boolean that_present_officialName = true && that.isSetOfficialName();
    if (this_present_officialName || that_present_officialName) {
      if (!(this_present_officialName && that_present_officialName))
        return false;
      if (!this.officialName.equals(that.officialName))
        return false;
    }

    boolean this_present_multiLangOfficialNames = true && this.isSetMultiLangOfficialNames();
    boolean that_present_multiLangOfficialNames = true && that.isSetMultiLangOfficialNames();
    if (this_present_multiLangOfficialNames || that_present_multiLangOfficialNames) {
      if (!(this_present_multiLangOfficialNames && that_present_multiLangOfficialNames))
        return false;
      if (!this.multiLangOfficialNames.equals(that.multiLangOfficialNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_competitorType = true && (isSetCompetitorType());
    list.add(present_competitorType);
    if (present_competitorType)
      list.add(competitorType.getValue());

    boolean present_logoUrl = true && (isSetLogoUrl());
    list.add(present_logoUrl);
    if (present_logoUrl)
      list.add(logoUrl);

    boolean present_finalResult = true && (isSetFinalResult());
    list.add(present_finalResult);
    if (present_finalResult)
      list.add(finalResult);

    boolean present_camp = true && (isSetCamp());
    list.add(present_camp);
    if (present_camp)
      list.add(camp);

    boolean present_ground = true && (isSetGround());
    list.add(present_ground);
    if (present_ground)
      list.add(ground.getValue());

    boolean present_order = true && (isSetOrder());
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_shortName = true && (isSetShortName());
    list.add(present_shortName);
    if (present_shortName)
      list.add(shortName);

    boolean present_sectionResults = true && (isSetSectionResults());
    list.add(present_sectionResults);
    if (present_sectionResults)
      list.add(sectionResults);

    boolean present_leId = true && (isSetLeId());
    list.add(present_leId);
    if (present_leId)
      list.add(leId);

    boolean present_pngLogo = true && (isSetPngLogo());
    list.add(present_pngLogo);
    if (present_pngLogo)
      list.add(pngLogo);

    boolean present_bgWebUrl = true && (isSetBgWebUrl());
    list.add(present_bgWebUrl);
    if (present_bgWebUrl)
      list.add(bgWebUrl);

    boolean present_isFocused = true && (isSetIsFocused());
    list.add(present_isFocused);
    if (present_isFocused)
      list.add(isFocused);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangShortNames = true && (isSetMultiLangShortNames());
    list.add(present_multiLangShortNames);
    if (present_multiLangShortNames)
      list.add(multiLangShortNames);

    boolean present_campEntity = true && (isSetCampEntity());
    list.add(present_campEntity);
    if (present_campEntity)
      list.add(campEntity);

    boolean present_extendInfos = true && (isSetExtendInfos());
    list.add(present_extendInfos);
    if (present_extendInfos)
      list.add(extendInfos);

    boolean present_countryImgUrl = true && (isSetCountryImgUrl());
    list.add(present_countryImgUrl);
    if (present_countryImgUrl)
      list.add(countryImgUrl);

    boolean present_competitorCountryId = true && (isSetCompetitorCountryId());
    list.add(present_competitorCountryId);
    if (present_competitorCountryId)
      list.add(competitorCountryId);

    boolean present_isFocusedCountries = true && (isSetIsFocusedCountries());
    list.add(present_isFocusedCountries);
    if (present_isFocusedCountries)
      list.add(isFocusedCountries);

    boolean present_multiCounLogos = true && (isSetMultiCounLogos());
    list.add(present_multiCounLogos);
    if (present_multiCounLogos)
      list.add(multiCounLogos);

    boolean present_officialName = true && (isSetOfficialName());
    list.add(present_officialName);
    if (present_officialName)
      list.add(officialName);

    boolean present_multiLangOfficialNames = true && (isSetMultiLangOfficialNames());
    list.add(present_multiLangOfficialNames);
    if (present_multiLangOfficialNames)
      list.add(multiLangOfficialNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCompetitor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorType()).compareTo(other.isSetCompetitorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorType, other.competitorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinalResult()).compareTo(other.isSetFinalResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinalResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finalResult, other.finalResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCamp()).compareTo(other.isSetCamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.camp, other.camp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGround()).compareTo(other.isSetGround());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGround()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ground, other.ground);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortName()).compareTo(other.isSetShortName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortName, other.shortName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSectionResults()).compareTo(other.isSetSectionResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionResults, other.sectionResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeId()).compareTo(other.isSetLeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leId, other.leId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPngLogo()).compareTo(other.isSetPngLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPngLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pngLogo, other.pngLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBgWebUrl()).compareTo(other.isSetBgWebUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBgWebUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bgWebUrl, other.bgWebUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFocused()).compareTo(other.isSetIsFocused());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFocused()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFocused, other.isFocused);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangShortNames()).compareTo(other.isSetMultiLangShortNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangShortNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangShortNames, other.multiLangShortNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampEntity()).compareTo(other.isSetCampEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campEntity, other.campEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendInfos()).compareTo(other.isSetExtendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendInfos, other.extendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryImgUrl()).compareTo(other.isSetCountryImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryImgUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryImgUrl, other.countryImgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorCountryId()).compareTo(other.isSetCompetitorCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorCountryId, other.competitorCountryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFocusedCountries()).compareTo(other.isSetIsFocusedCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFocusedCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFocusedCountries, other.isFocusedCountries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiCounLogos()).compareTo(other.isSetMultiCounLogos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiCounLogos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiCounLogos, other.multiCounLogos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialName()).compareTo(other.isSetOfficialName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialName, other.officialName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangOfficialNames()).compareTo(other.isSetMultiLangOfficialNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangOfficialNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangOfficialNames, other.multiLangOfficialNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCompetitor(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetCompetitorType()) {
      if (!first) sb.append(", ");
      sb.append("competitorType:");
      if (this.competitorType == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorType);
      }
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetFinalResult()) {
      if (!first) sb.append(", ");
      sb.append("finalResult:");
      if (this.finalResult == null) {
        sb.append("null");
      } else {
        sb.append(this.finalResult);
      }
      first = false;
    }
    if (isSetCamp()) {
      if (!first) sb.append(", ");
      sb.append("camp:");
      sb.append(this.camp);
      first = false;
    }
    if (isSetGround()) {
      if (!first) sb.append(", ");
      sb.append("ground:");
      if (this.ground == null) {
        sb.append("null");
      } else {
        sb.append(this.ground);
      }
      first = false;
    }
    if (isSetOrder()) {
      if (!first) sb.append(", ");
      sb.append("order:");
      sb.append(this.order);
      first = false;
    }
    if (isSetShortName()) {
      if (!first) sb.append(", ");
      sb.append("shortName:");
      if (this.shortName == null) {
        sb.append("null");
      } else {
        sb.append(this.shortName);
      }
      first = false;
    }
    if (isSetSectionResults()) {
      if (!first) sb.append(", ");
      sb.append("sectionResults:");
      if (this.sectionResults == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionResults);
      }
      first = false;
    }
    if (isSetLeId()) {
      if (!first) sb.append(", ");
      sb.append("leId:");
      sb.append(this.leId);
      first = false;
    }
    if (isSetPngLogo()) {
      if (!first) sb.append(", ");
      sb.append("pngLogo:");
      if (this.pngLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.pngLogo);
      }
      first = false;
    }
    if (isSetBgWebUrl()) {
      if (!first) sb.append(", ");
      sb.append("bgWebUrl:");
      if (this.bgWebUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.bgWebUrl);
      }
      first = false;
    }
    if (isSetIsFocused()) {
      if (!first) sb.append(", ");
      sb.append("isFocused:");
      sb.append(this.isFocused);
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangShortNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangShortNames:");
      if (this.multiLangShortNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangShortNames);
      }
      first = false;
    }
    if (isSetCampEntity()) {
      if (!first) sb.append(", ");
      sb.append("campEntity:");
      if (this.campEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.campEntity);
      }
      first = false;
    }
    if (isSetExtendInfos()) {
      if (!first) sb.append(", ");
      sb.append("extendInfos:");
      if (this.extendInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extendInfos);
      }
      first = false;
    }
    if (isSetCountryImgUrl()) {
      if (!first) sb.append(", ");
      sb.append("countryImgUrl:");
      if (this.countryImgUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.countryImgUrl);
      }
      first = false;
    }
    if (isSetCompetitorCountryId()) {
      if (!first) sb.append(", ");
      sb.append("competitorCountryId:");
      sb.append(this.competitorCountryId);
      first = false;
    }
    if (isSetIsFocusedCountries()) {
      if (!first) sb.append(", ");
      sb.append("isFocusedCountries:");
      if (this.isFocusedCountries == null) {
        sb.append("null");
      } else {
        sb.append(this.isFocusedCountries);
      }
      first = false;
    }
    if (isSetMultiCounLogos()) {
      if (!first) sb.append(", ");
      sb.append("multiCounLogos:");
      if (this.multiCounLogos == null) {
        sb.append("null");
      } else {
        sb.append(this.multiCounLogos);
      }
      first = false;
    }
    if (isSetOfficialName()) {
      if (!first) sb.append(", ");
      sb.append("officialName:");
      if (this.officialName == null) {
        sb.append("null");
      } else {
        sb.append(this.officialName);
      }
      first = false;
    }
    if (isSetMultiLangOfficialNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangOfficialNames:");
      if (this.multiLangOfficialNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangOfficialNames);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (campEntity != null) {
      campEntity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompetitorStandardSchemeFactory implements SchemeFactory {
    public TCompetitorStandardScheme getScheme() {
      return new TCompetitorStandardScheme();
    }
  }

  private static class TCompetitorStandardScheme extends StandardScheme<TCompetitor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompetitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPETITOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
              struct.setCompetitorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FINAL_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finalResult = iprot.readString();
              struct.setFinalResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.camp = iprot.readI32();
              struct.setCampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ground = com.lesports.qmt.sbd.api.common.GroundType.findByValue(iprot.readI32());
              struct.setGroundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shortName = iprot.readString();
              struct.setShortNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SECTION_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.sectionResults = new ArrayList<TSectionResult>(_list16.size);
                TSectionResult _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new TSectionResult();
                  _elem17.read(iprot);
                  struct.sectionResults.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setSectionResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.leId = iprot.readI64();
              struct.setLeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PNG_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pngLogo = iprot.readString();
              struct.setPngLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BG_WEB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bgWebUrl = iprot.readString();
              struct.setBgWebUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_FOCUSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFocused = iprot.readBool();
              struct.setIsFocusedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list19.size);
                com.lesports.api.common.LangString _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new com.lesports.api.common.LangString();
                  _elem20.read(iprot);
                  struct.multiLangNames.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MULTI_LANG_SHORT_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.multiLangShortNames = new ArrayList<com.lesports.api.common.LangString>(_list22.size);
                com.lesports.api.common.LangString _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new com.lesports.api.common.LangString();
                  _elem23.read(iprot);
                  struct.multiLangShortNames.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangShortNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CAMP_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.campEntity = new com.lesports.qmt.sbd.api.common.Camp();
              struct.campEntity.read(iprot);
              struct.setCampEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXTEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map25 = iprot.readMapBegin();
                struct.extendInfos = new HashMap<String,String>(2*_map25.size);
                String _key26;
                String _val27;
                for (int _i28 = 0; _i28 < _map25.size; ++_i28)
                {
                  _key26 = iprot.readString();
                  _val27 = iprot.readString();
                  struct.extendInfos.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setExtendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COUNTRY_IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryImgUrl = iprot.readString();
              struct.setCountryImgUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COMPETITOR_COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitorCountryId = iprot.readI64();
              struct.setCompetitorCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // IS_FOCUSED_COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>(_list29.size);
                com.lesports.api.common.CountryCode _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
                  struct.isFocusedCountries.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setIsFocusedCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MULTI_COUN_LOGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list32.size);
                com.lesports.api.common.CounString _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new com.lesports.api.common.CounString();
                  _elem33.read(iprot);
                  struct.multiCounLogos.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setMultiCounLogosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OFFICIAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officialName = iprot.readString();
              struct.setOfficialNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MULTI_LANG_OFFICIAL_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>(_list35.size);
                com.lesports.api.common.LangString _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new com.lesports.api.common.LangString();
                  _elem36.read(iprot);
                  struct.multiLangOfficialNames.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangOfficialNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompetitor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.competitorType != null) {
        if (struct.isSetCompetitorType()) {
          oprot.writeFieldBegin(COMPETITOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.competitorType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.finalResult != null) {
        if (struct.isSetFinalResult()) {
          oprot.writeFieldBegin(FINAL_RESULT_FIELD_DESC);
          oprot.writeString(struct.finalResult);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCamp()) {
        oprot.writeFieldBegin(CAMP_FIELD_DESC);
        oprot.writeI32(struct.camp);
        oprot.writeFieldEnd();
      }
      if (struct.ground != null) {
        if (struct.isSetGround()) {
          oprot.writeFieldBegin(GROUND_FIELD_DESC);
          oprot.writeI32(struct.ground.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrder()) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeI32(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.shortName != null) {
        if (struct.isSetShortName()) {
          oprot.writeFieldBegin(SHORT_NAME_FIELD_DESC);
          oprot.writeString(struct.shortName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sectionResults != null) {
        if (struct.isSetSectionResults()) {
          oprot.writeFieldBegin(SECTION_RESULTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sectionResults.size()));
            for (TSectionResult _iter38 : struct.sectionResults)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLeId()) {
        oprot.writeFieldBegin(LE_ID_FIELD_DESC);
        oprot.writeI64(struct.leId);
        oprot.writeFieldEnd();
      }
      if (struct.pngLogo != null) {
        if (struct.isSetPngLogo()) {
          oprot.writeFieldBegin(PNG_LOGO_FIELD_DESC);
          oprot.writeString(struct.pngLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bgWebUrl != null) {
        if (struct.isSetBgWebUrl()) {
          oprot.writeFieldBegin(BG_WEB_URL_FIELD_DESC);
          oprot.writeString(struct.bgWebUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsFocused()) {
        oprot.writeFieldBegin(IS_FOCUSED_FIELD_DESC);
        oprot.writeBool(struct.isFocused);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter39 : struct.multiLangNames)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangShortNames != null) {
        if (struct.isSetMultiLangShortNames()) {
          oprot.writeFieldBegin(MULTI_LANG_SHORT_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangShortNames.size()));
            for (com.lesports.api.common.LangString _iter40 : struct.multiLangShortNames)
            {
              _iter40.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.campEntity != null) {
        if (struct.isSetCampEntity()) {
          oprot.writeFieldBegin(CAMP_ENTITY_FIELD_DESC);
          struct.campEntity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extendInfos != null) {
        if (struct.isSetExtendInfos()) {
          oprot.writeFieldBegin(EXTEND_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendInfos.size()));
            for (Map.Entry<String, String> _iter41 : struct.extendInfos.entrySet())
            {
              oprot.writeString(_iter41.getKey());
              oprot.writeString(_iter41.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryImgUrl != null) {
        if (struct.isSetCountryImgUrl()) {
          oprot.writeFieldBegin(COUNTRY_IMG_URL_FIELD_DESC);
          oprot.writeString(struct.countryImgUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompetitorCountryId()) {
        oprot.writeFieldBegin(COMPETITOR_COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorCountryId);
        oprot.writeFieldEnd();
      }
      if (struct.isFocusedCountries != null) {
        if (struct.isSetIsFocusedCountries()) {
          oprot.writeFieldBegin(IS_FOCUSED_COUNTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.isFocusedCountries.size()));
            for (com.lesports.api.common.CountryCode _iter42 : struct.isFocusedCountries)
            {
              oprot.writeI32(_iter42.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiCounLogos != null) {
        if (struct.isSetMultiCounLogos()) {
          oprot.writeFieldBegin(MULTI_COUN_LOGOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiCounLogos.size()));
            for (com.lesports.api.common.CounString _iter43 : struct.multiCounLogos)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.officialName != null) {
        if (struct.isSetOfficialName()) {
          oprot.writeFieldBegin(OFFICIAL_NAME_FIELD_DESC);
          oprot.writeString(struct.officialName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangOfficialNames != null) {
        if (struct.isSetMultiLangOfficialNames()) {
          oprot.writeFieldBegin(MULTI_LANG_OFFICIAL_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangOfficialNames.size()));
            for (com.lesports.api.common.LangString _iter44 : struct.multiLangOfficialNames)
            {
              _iter44.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompetitorTupleSchemeFactory implements SchemeFactory {
    public TCompetitorTupleScheme getScheme() {
      return new TCompetitorTupleScheme();
    }
  }

  private static class TCompetitorTupleScheme extends TupleScheme<TCompetitor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompetitor struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCompetitorType()) {
        optionals.set(2);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(3);
      }
      if (struct.isSetFinalResult()) {
        optionals.set(4);
      }
      if (struct.isSetCamp()) {
        optionals.set(5);
      }
      if (struct.isSetGround()) {
        optionals.set(6);
      }
      if (struct.isSetOrder()) {
        optionals.set(7);
      }
      if (struct.isSetShortName()) {
        optionals.set(8);
      }
      if (struct.isSetSectionResults()) {
        optionals.set(9);
      }
      if (struct.isSetLeId()) {
        optionals.set(10);
      }
      if (struct.isSetPngLogo()) {
        optionals.set(11);
      }
      if (struct.isSetBgWebUrl()) {
        optionals.set(12);
      }
      if (struct.isSetIsFocused()) {
        optionals.set(13);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(14);
      }
      if (struct.isSetMultiLangShortNames()) {
        optionals.set(15);
      }
      if (struct.isSetCampEntity()) {
        optionals.set(16);
      }
      if (struct.isSetExtendInfos()) {
        optionals.set(17);
      }
      if (struct.isSetCountryImgUrl()) {
        optionals.set(18);
      }
      if (struct.isSetCompetitorCountryId()) {
        optionals.set(19);
      }
      if (struct.isSetIsFocusedCountries()) {
        optionals.set(20);
      }
      if (struct.isSetMultiCounLogos()) {
        optionals.set(21);
      }
      if (struct.isSetOfficialName()) {
        optionals.set(22);
      }
      if (struct.isSetMultiLangOfficialNames()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCompetitorType()) {
        oprot.writeI32(struct.competitorType.getValue());
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetFinalResult()) {
        oprot.writeString(struct.finalResult);
      }
      if (struct.isSetCamp()) {
        oprot.writeI32(struct.camp);
      }
      if (struct.isSetGround()) {
        oprot.writeI32(struct.ground.getValue());
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetShortName()) {
        oprot.writeString(struct.shortName);
      }
      if (struct.isSetSectionResults()) {
        {
          oprot.writeI32(struct.sectionResults.size());
          for (TSectionResult _iter45 : struct.sectionResults)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetLeId()) {
        oprot.writeI64(struct.leId);
      }
      if (struct.isSetPngLogo()) {
        oprot.writeString(struct.pngLogo);
      }
      if (struct.isSetBgWebUrl()) {
        oprot.writeString(struct.bgWebUrl);
      }
      if (struct.isSetIsFocused()) {
        oprot.writeBool(struct.isFocused);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter46 : struct.multiLangNames)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangShortNames()) {
        {
          oprot.writeI32(struct.multiLangShortNames.size());
          for (com.lesports.api.common.LangString _iter47 : struct.multiLangShortNames)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetCampEntity()) {
        struct.campEntity.write(oprot);
      }
      if (struct.isSetExtendInfos()) {
        {
          oprot.writeI32(struct.extendInfos.size());
          for (Map.Entry<String, String> _iter48 : struct.extendInfos.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            oprot.writeString(_iter48.getValue());
          }
        }
      }
      if (struct.isSetCountryImgUrl()) {
        oprot.writeString(struct.countryImgUrl);
      }
      if (struct.isSetCompetitorCountryId()) {
        oprot.writeI64(struct.competitorCountryId);
      }
      if (struct.isSetIsFocusedCountries()) {
        {
          oprot.writeI32(struct.isFocusedCountries.size());
          for (com.lesports.api.common.CountryCode _iter49 : struct.isFocusedCountries)
          {
            oprot.writeI32(_iter49.getValue());
          }
        }
      }
      if (struct.isSetMultiCounLogos()) {
        {
          oprot.writeI32(struct.multiCounLogos.size());
          for (com.lesports.api.common.CounString _iter50 : struct.multiCounLogos)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetOfficialName()) {
        oprot.writeString(struct.officialName);
      }
      if (struct.isSetMultiLangOfficialNames()) {
        {
          oprot.writeI32(struct.multiLangOfficialNames.size());
          for (com.lesports.api.common.LangString _iter51 : struct.multiLangOfficialNames)
          {
            _iter51.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompetitor struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
        struct.setCompetitorTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.finalResult = iprot.readString();
        struct.setFinalResultIsSet(true);
      }
      if (incoming.get(5)) {
        struct.camp = iprot.readI32();
        struct.setCampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ground = com.lesports.qmt.sbd.api.common.GroundType.findByValue(iprot.readI32());
        struct.setGroundIsSet(true);
      }
      if (incoming.get(7)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shortName = iprot.readString();
        struct.setShortNameIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sectionResults = new ArrayList<TSectionResult>(_list52.size);
          TSectionResult _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = new TSectionResult();
            _elem53.read(iprot);
            struct.sectionResults.add(_elem53);
          }
        }
        struct.setSectionResultsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.leId = iprot.readI64();
        struct.setLeIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pngLogo = iprot.readString();
        struct.setPngLogoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.bgWebUrl = iprot.readString();
        struct.setBgWebUrlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isFocused = iprot.readBool();
        struct.setIsFocusedIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list55.size);
          com.lesports.api.common.LangString _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new com.lesports.api.common.LangString();
            _elem56.read(iprot);
            struct.multiLangNames.add(_elem56);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangShortNames = new ArrayList<com.lesports.api.common.LangString>(_list58.size);
          com.lesports.api.common.LangString _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new com.lesports.api.common.LangString();
            _elem59.read(iprot);
            struct.multiLangShortNames.add(_elem59);
          }
        }
        struct.setMultiLangShortNamesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.campEntity = new com.lesports.qmt.sbd.api.common.Camp();
        struct.campEntity.read(iprot);
        struct.setCampEntityIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map61 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extendInfos = new HashMap<String,String>(2*_map61.size);
          String _key62;
          String _val63;
          for (int _i64 = 0; _i64 < _map61.size; ++_i64)
          {
            _key62 = iprot.readString();
            _val63 = iprot.readString();
            struct.extendInfos.put(_key62, _val63);
          }
        }
        struct.setExtendInfosIsSet(true);
      }
      if (incoming.get(18)) {
        struct.countryImgUrl = iprot.readString();
        struct.setCountryImgUrlIsSet(true);
      }
      if (incoming.get(19)) {
        struct.competitorCountryId = iprot.readI64();
        struct.setCompetitorCountryIdIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>(_list65.size);
          com.lesports.api.common.CountryCode _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
            struct.isFocusedCountries.add(_elem66);
          }
        }
        struct.setIsFocusedCountriesIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list68.size);
          com.lesports.api.common.CounString _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new com.lesports.api.common.CounString();
            _elem69.read(iprot);
            struct.multiCounLogos.add(_elem69);
          }
        }
        struct.setMultiCounLogosIsSet(true);
      }
      if (incoming.get(22)) {
        struct.officialName = iprot.readString();
        struct.setOfficialNameIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>(_list71.size);
          com.lesports.api.common.LangString _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new com.lesports.api.common.LangString();
            _elem72.read(iprot);
            struct.multiLangOfficialNames.add(_elem72);
          }
        }
        struct.setMultiLangOfficialNamesIsSet(true);
      }
    }
  }

}

