/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TCompetitorStat implements org.apache.thrift.TBase<TCompetitorStat, TCompetitorStat._Fields>, java.io.Serializable, Cloneable, Comparable<TCompetitorStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCompetitorStat");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField COMPETITOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TEAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SECTION_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionStats", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TEAM_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTeamNames", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PLAYER_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("playerStats", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCompetitorStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCompetitorStatTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private Map<String,String> stats; // optional
  private com.lesports.qmt.sbd.api.common.CompetitorType competitorType; // optional
  private long tid; // required
  private String teamName; // required
  private int order; // required
  private List<TCompetitorSectionStat> sectionStats; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangTeamNames; // optional
  private List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> playerStats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    STATS((short)3, "stats"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CompetitorType
     */
    COMPETITOR_TYPE((short)4, "competitorType"),
    TID((short)5, "tid"),
    TEAM_NAME((short)6, "teamName"),
    ORDER((short)7, "order"),
    SECTION_STATS((short)8, "sectionStats"),
    MULTI_LANG_NAMES((short)9, "multiLangNames"),
    MULTI_LANG_TEAM_NAMES((short)10, "multiLangTeamNames"),
    PLAYER_STATS((short)11, "playerStats");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // STATS
          return STATS;
        case 4: // COMPETITOR_TYPE
          return COMPETITOR_TYPE;
        case 5: // TID
          return TID;
        case 6: // TEAM_NAME
          return TEAM_NAME;
        case 7: // ORDER
          return ORDER;
        case 8: // SECTION_STATS
          return SECTION_STATS;
        case 9: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 10: // MULTI_LANG_TEAM_NAMES
          return MULTI_LANG_TEAM_NAMES;
        case 11: // PLAYER_STATS
          return PLAYER_STATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TID_ISSET_ID = 1;
  private static final int __ORDER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATS,_Fields.COMPETITOR_TYPE,_Fields.SECTION_STATS,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_TEAM_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPETITOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("competitorType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CompetitorType.class)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECTION_STATS, new org.apache.thrift.meta_data.FieldMetaData("sectionStats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompetitorSectionStat.class))));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_TEAM_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTeamNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.PLAYER_STATS, new org.apache.thrift.meta_data.FieldMetaData("playerStats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TSimplePlayer.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCompetitorStat.class, metaDataMap);
  }

  public TCompetitorStat() {
  }

  public TCompetitorStat(
    long id,
    String name,
    long tid,
    String teamName,
    int order,
    List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> playerStats)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.tid = tid;
    setTidIsSet(true);
    this.teamName = teamName;
    this.order = order;
    setOrderIsSet(true);
    this.playerStats = playerStats;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCompetitorStat(TCompetitorStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    if (other.isSetCompetitorType()) {
      this.competitorType = other.competitorType;
    }
    this.tid = other.tid;
    if (other.isSetTeamName()) {
      this.teamName = other.teamName;
    }
    this.order = other.order;
    if (other.isSetSectionStats()) {
      List<TCompetitorSectionStat> __this__sectionStats = new ArrayList<TCompetitorSectionStat>(other.sectionStats.size());
      for (TCompetitorSectionStat other_element : other.sectionStats) {
        __this__sectionStats.add(new TCompetitorSectionStat(other_element));
      }
      this.sectionStats = __this__sectionStats;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangTeamNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTeamNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTeamNames) {
        __this__multiLangTeamNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTeamNames = __this__multiLangTeamNames;
    }
    if (other.isSetPlayerStats()) {
      List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> __this__playerStats = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(other.playerStats.size());
      for (com.lesports.qmt.sbd.api.dto.TSimplePlayer other_element : other.playerStats) {
        __this__playerStats.add(new com.lesports.qmt.sbd.api.dto.TSimplePlayer(other_element));
      }
      this.playerStats = __this__playerStats;
    }
  }

  public TCompetitorStat deepCopy() {
    return new TCompetitorStat(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.stats = null;
    this.competitorType = null;
    setTidIsSet(false);
    this.tid = 0;
    this.teamName = null;
    setOrderIsSet(false);
    this.order = 0;
    this.sectionStats = null;
    this.multiLangNames = null;
    this.multiLangTeamNames = null;
    this.playerStats = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public com.lesports.qmt.sbd.api.common.CompetitorType getCompetitorType() {
    return this.competitorType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public void setCompetitorType(com.lesports.qmt.sbd.api.common.CompetitorType competitorType) {
    this.competitorType = competitorType;
  }

  public void unsetCompetitorType() {
    this.competitorType = null;
  }

  /** Returns true if field competitorType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorType() {
    return this.competitorType != null;
  }

  public void setCompetitorTypeIsSet(boolean value) {
    if (!value) {
      this.competitorType = null;
    }
  }

  public long getTid() {
    return this.tid;
  }

  public void setTid(long tid) {
    this.tid = tid;
    setTidIsSet(true);
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public String getTeamName() {
    return this.teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }

  public void unsetTeamName() {
    this.teamName = null;
  }

  /** Returns true if field teamName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamName() {
    return this.teamName != null;
  }

  public void setTeamNameIsSet(boolean value) {
    if (!value) {
      this.teamName = null;
    }
  }

  public int getOrder() {
    return this.order;
  }

  public void setOrder(int order) {
    this.order = order;
    setOrderIsSet(true);
  }

  public void unsetOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDER_ISSET_ID);
  }

  public void setOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDER_ISSET_ID, value);
  }

  public int getSectionStatsSize() {
    return (this.sectionStats == null) ? 0 : this.sectionStats.size();
  }

  public java.util.Iterator<TCompetitorSectionStat> getSectionStatsIterator() {
    return (this.sectionStats == null) ? null : this.sectionStats.iterator();
  }

  public void addToSectionStats(TCompetitorSectionStat elem) {
    if (this.sectionStats == null) {
      this.sectionStats = new ArrayList<TCompetitorSectionStat>();
    }
    this.sectionStats.add(elem);
  }

  public List<TCompetitorSectionStat> getSectionStats() {
    return this.sectionStats;
  }

  public void setSectionStats(List<TCompetitorSectionStat> sectionStats) {
    this.sectionStats = sectionStats;
  }

  public void unsetSectionStats() {
    this.sectionStats = null;
  }

  /** Returns true if field sectionStats is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionStats() {
    return this.sectionStats != null;
  }

  public void setSectionStatsIsSet(boolean value) {
    if (!value) {
      this.sectionStats = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangTeamNamesSize() {
    return (this.multiLangTeamNames == null) ? 0 : this.multiLangTeamNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTeamNamesIterator() {
    return (this.multiLangTeamNames == null) ? null : this.multiLangTeamNames.iterator();
  }

  public void addToMultiLangTeamNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangTeamNames == null) {
      this.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTeamNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTeamNames() {
    return this.multiLangTeamNames;
  }

  public void setMultiLangTeamNames(List<com.lesports.api.common.LangString> multiLangTeamNames) {
    this.multiLangTeamNames = multiLangTeamNames;
  }

  public void unsetMultiLangTeamNames() {
    this.multiLangTeamNames = null;
  }

  /** Returns true if field multiLangTeamNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTeamNames() {
    return this.multiLangTeamNames != null;
  }

  public void setMultiLangTeamNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangTeamNames = null;
    }
  }

  public int getPlayerStatsSize() {
    return (this.playerStats == null) ? 0 : this.playerStats.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TSimplePlayer> getPlayerStatsIterator() {
    return (this.playerStats == null) ? null : this.playerStats.iterator();
  }

  public void addToPlayerStats(com.lesports.qmt.sbd.api.dto.TSimplePlayer elem) {
    if (this.playerStats == null) {
      this.playerStats = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>();
    }
    this.playerStats.add(elem);
  }

  public List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> getPlayerStats() {
    return this.playerStats;
  }

  public void setPlayerStats(List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> playerStats) {
    this.playerStats = playerStats;
  }

  public void unsetPlayerStats() {
    this.playerStats = null;
  }

  /** Returns true if field playerStats is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerStats() {
    return this.playerStats != null;
  }

  public void setPlayerStatsIsSet(boolean value) {
    if (!value) {
      this.playerStats = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case COMPETITOR_TYPE:
      if (value == null) {
        unsetCompetitorType();
      } else {
        setCompetitorType((com.lesports.qmt.sbd.api.common.CompetitorType)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Long)value);
      }
      break;

    case TEAM_NAME:
      if (value == null) {
        unsetTeamName();
      } else {
        setTeamName((String)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((Integer)value);
      }
      break;

    case SECTION_STATS:
      if (value == null) {
        unsetSectionStats();
      } else {
        setSectionStats((List<TCompetitorSectionStat>)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_TEAM_NAMES:
      if (value == null) {
        unsetMultiLangTeamNames();
      } else {
        setMultiLangTeamNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case PLAYER_STATS:
      if (value == null) {
        unsetPlayerStats();
      } else {
        setPlayerStats((List<com.lesports.qmt.sbd.api.dto.TSimplePlayer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case STATS:
      return getStats();

    case COMPETITOR_TYPE:
      return getCompetitorType();

    case TID:
      return Long.valueOf(getTid());

    case TEAM_NAME:
      return getTeamName();

    case ORDER:
      return Integer.valueOf(getOrder());

    case SECTION_STATS:
      return getSectionStats();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_TEAM_NAMES:
      return getMultiLangTeamNames();

    case PLAYER_STATS:
      return getPlayerStats();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case STATS:
      return isSetStats();
    case COMPETITOR_TYPE:
      return isSetCompetitorType();
    case TID:
      return isSetTid();
    case TEAM_NAME:
      return isSetTeamName();
    case ORDER:
      return isSetOrder();
    case SECTION_STATS:
      return isSetSectionStats();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_TEAM_NAMES:
      return isSetMultiLangTeamNames();
    case PLAYER_STATS:
      return isSetPlayerStats();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCompetitorStat)
      return this.equals((TCompetitorStat)that);
    return false;
  }

  public boolean equals(TCompetitorStat that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_competitorType = true && this.isSetCompetitorType();
    boolean that_present_competitorType = true && that.isSetCompetitorType();
    if (this_present_competitorType || that_present_competitorType) {
      if (!(this_present_competitorType && that_present_competitorType))
        return false;
      if (!this.competitorType.equals(that.competitorType))
        return false;
    }

    boolean this_present_tid = true;
    boolean that_present_tid = true;
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_teamName = true && this.isSetTeamName();
    boolean that_present_teamName = true && that.isSetTeamName();
    if (this_present_teamName || that_present_teamName) {
      if (!(this_present_teamName && that_present_teamName))
        return false;
      if (!this.teamName.equals(that.teamName))
        return false;
    }

    boolean this_present_order = true;
    boolean that_present_order = true;
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (this.order != that.order)
        return false;
    }

    boolean this_present_sectionStats = true && this.isSetSectionStats();
    boolean that_present_sectionStats = true && that.isSetSectionStats();
    if (this_present_sectionStats || that_present_sectionStats) {
      if (!(this_present_sectionStats && that_present_sectionStats))
        return false;
      if (!this.sectionStats.equals(that.sectionStats))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangTeamNames = true && this.isSetMultiLangTeamNames();
    boolean that_present_multiLangTeamNames = true && that.isSetMultiLangTeamNames();
    if (this_present_multiLangTeamNames || that_present_multiLangTeamNames) {
      if (!(this_present_multiLangTeamNames && that_present_multiLangTeamNames))
        return false;
      if (!this.multiLangTeamNames.equals(that.multiLangTeamNames))
        return false;
    }

    boolean this_present_playerStats = true && this.isSetPlayerStats();
    boolean that_present_playerStats = true && that.isSetPlayerStats();
    if (this_present_playerStats || that_present_playerStats) {
      if (!(this_present_playerStats && that_present_playerStats))
        return false;
      if (!this.playerStats.equals(that.playerStats))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_competitorType = true && (isSetCompetitorType());
    list.add(present_competitorType);
    if (present_competitorType)
      list.add(competitorType.getValue());

    boolean present_tid = true;
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_teamName = true && (isSetTeamName());
    list.add(present_teamName);
    if (present_teamName)
      list.add(teamName);

    boolean present_order = true;
    list.add(present_order);
    if (present_order)
      list.add(order);

    boolean present_sectionStats = true && (isSetSectionStats());
    list.add(present_sectionStats);
    if (present_sectionStats)
      list.add(sectionStats);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangTeamNames = true && (isSetMultiLangTeamNames());
    list.add(present_multiLangTeamNames);
    if (present_multiLangTeamNames)
      list.add(multiLangTeamNames);

    boolean present_playerStats = true && (isSetPlayerStats());
    list.add(present_playerStats);
    if (present_playerStats)
      list.add(playerStats);

    return list.hashCode();
  }

  @Override
  public int compareTo(TCompetitorStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorType()).compareTo(other.isSetCompetitorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorType, other.competitorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamName()).compareTo(other.isSetTeamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamName, other.teamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSectionStats()).compareTo(other.isSetSectionStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionStats, other.sectionStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTeamNames()).compareTo(other.isSetMultiLangTeamNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTeamNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTeamNames, other.multiLangTeamNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerStats()).compareTo(other.isSetPlayerStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerStats, other.playerStats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCompetitorStat(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetCompetitorType()) {
      if (!first) sb.append(", ");
      sb.append("competitorType:");
      if (this.competitorType == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("tid:");
    sb.append(this.tid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamName:");
    if (this.teamName == null) {
      sb.append("null");
    } else {
      sb.append(this.teamName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    sb.append(this.order);
    first = false;
    if (isSetSectionStats()) {
      if (!first) sb.append(", ");
      sb.append("sectionStats:");
      if (this.sectionStats == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionStats);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangTeamNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTeamNames:");
      if (this.multiLangTeamNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTeamNames);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("playerStats:");
    if (this.playerStats == null) {
      sb.append("null");
    } else {
      sb.append(this.playerStats);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCompetitorStatStandardSchemeFactory implements SchemeFactory {
    public TCompetitorStatStandardScheme getScheme() {
      return new TCompetitorStatStandardScheme();
    }
  }

  private static class TCompetitorStatStandardScheme extends StandardScheme<TCompetitorStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCompetitorStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map84.size);
                String _key85;
                String _val86;
                for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                {
                  _key85 = iprot.readString();
                  _val86 = iprot.readString();
                  struct.stats.put(_key85, _val86);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPETITOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
              struct.setCompetitorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tid = iprot.readI64();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamName = iprot.readString();
              struct.setTeamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.order = iprot.readI32();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SECTION_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.sectionStats = new ArrayList<TCompetitorSectionStat>(_list88.size);
                TCompetitorSectionStat _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = new TCompetitorSectionStat();
                  _elem89.read(iprot);
                  struct.sectionStats.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setSectionStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list91.size);
                com.lesports.api.common.LangString _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = new com.lesports.api.common.LangString();
                  _elem92.read(iprot);
                  struct.multiLangNames.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MULTI_LANG_TEAM_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list94.size);
                com.lesports.api.common.LangString _elem95;
                for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                {
                  _elem95 = new com.lesports.api.common.LangString();
                  _elem95.read(iprot);
                  struct.multiLangTeamNames.add(_elem95);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTeamNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAYER_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                struct.playerStats = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(_list97.size);
                com.lesports.qmt.sbd.api.dto.TSimplePlayer _elem98;
                for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                {
                  _elem98 = new com.lesports.qmt.sbd.api.dto.TSimplePlayer();
                  _elem98.read(iprot);
                  struct.playerStats.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setPlayerStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCompetitorStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter100 : struct.stats.entrySet())
            {
              oprot.writeString(_iter100.getKey());
              oprot.writeString(_iter100.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitorType != null) {
        if (struct.isSetCompetitorType()) {
          oprot.writeFieldBegin(COMPETITOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.competitorType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TID_FIELD_DESC);
      oprot.writeI64(struct.tid);
      oprot.writeFieldEnd();
      if (struct.teamName != null) {
        oprot.writeFieldBegin(TEAM_NAME_FIELD_DESC);
        oprot.writeString(struct.teamName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_FIELD_DESC);
      oprot.writeI32(struct.order);
      oprot.writeFieldEnd();
      if (struct.sectionStats != null) {
        if (struct.isSetSectionStats()) {
          oprot.writeFieldBegin(SECTION_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sectionStats.size()));
            for (TCompetitorSectionStat _iter101 : struct.sectionStats)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter102 : struct.multiLangNames)
            {
              _iter102.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTeamNames != null) {
        if (struct.isSetMultiLangTeamNames()) {
          oprot.writeFieldBegin(MULTI_LANG_TEAM_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTeamNames.size()));
            for (com.lesports.api.common.LangString _iter103 : struct.multiLangTeamNames)
            {
              _iter103.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerStats != null) {
        oprot.writeFieldBegin(PLAYER_STATS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.playerStats.size()));
          for (com.lesports.qmt.sbd.api.dto.TSimplePlayer _iter104 : struct.playerStats)
          {
            _iter104.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCompetitorStatTupleSchemeFactory implements SchemeFactory {
    public TCompetitorStatTupleScheme getScheme() {
      return new TCompetitorStatTupleScheme();
    }
  }

  private static class TCompetitorStatTupleScheme extends TupleScheme<TCompetitorStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCompetitorStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetStats()) {
        optionals.set(2);
      }
      if (struct.isSetCompetitorType()) {
        optionals.set(3);
      }
      if (struct.isSetTid()) {
        optionals.set(4);
      }
      if (struct.isSetTeamName()) {
        optionals.set(5);
      }
      if (struct.isSetOrder()) {
        optionals.set(6);
      }
      if (struct.isSetSectionStats()) {
        optionals.set(7);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(8);
      }
      if (struct.isSetMultiLangTeamNames()) {
        optionals.set(9);
      }
      if (struct.isSetPlayerStats()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter105 : struct.stats.entrySet())
          {
            oprot.writeString(_iter105.getKey());
            oprot.writeString(_iter105.getValue());
          }
        }
      }
      if (struct.isSetCompetitorType()) {
        oprot.writeI32(struct.competitorType.getValue());
      }
      if (struct.isSetTid()) {
        oprot.writeI64(struct.tid);
      }
      if (struct.isSetTeamName()) {
        oprot.writeString(struct.teamName);
      }
      if (struct.isSetOrder()) {
        oprot.writeI32(struct.order);
      }
      if (struct.isSetSectionStats()) {
        {
          oprot.writeI32(struct.sectionStats.size());
          for (TCompetitorSectionStat _iter106 : struct.sectionStats)
          {
            _iter106.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter107 : struct.multiLangNames)
          {
            _iter107.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangTeamNames()) {
        {
          oprot.writeI32(struct.multiLangTeamNames.size());
          for (com.lesports.api.common.LangString _iter108 : struct.multiLangTeamNames)
          {
            _iter108.write(oprot);
          }
        }
      }
      if (struct.isSetPlayerStats()) {
        {
          oprot.writeI32(struct.playerStats.size());
          for (com.lesports.qmt.sbd.api.dto.TSimplePlayer _iter109 : struct.playerStats)
          {
            _iter109.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCompetitorStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map110 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map110.size);
          String _key111;
          String _val112;
          for (int _i113 = 0; _i113 < _map110.size; ++_i113)
          {
            _key111 = iprot.readString();
            _val112 = iprot.readString();
            struct.stats.put(_key111, _val112);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
        struct.setCompetitorTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tid = iprot.readI64();
        struct.setTidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.teamName = iprot.readString();
        struct.setTeamNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.order = iprot.readI32();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sectionStats = new ArrayList<TCompetitorSectionStat>(_list114.size);
          TCompetitorSectionStat _elem115;
          for (int _i116 = 0; _i116 < _list114.size; ++_i116)
          {
            _elem115 = new TCompetitorSectionStat();
            _elem115.read(iprot);
            struct.sectionStats.add(_elem115);
          }
        }
        struct.setSectionStatsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list117.size);
          com.lesports.api.common.LangString _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new com.lesports.api.common.LangString();
            _elem118.read(iprot);
            struct.multiLangNames.add(_elem118);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list120 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list120.size);
          com.lesports.api.common.LangString _elem121;
          for (int _i122 = 0; _i122 < _list120.size; ++_i122)
          {
            _elem121 = new com.lesports.api.common.LangString();
            _elem121.read(iprot);
            struct.multiLangTeamNames.add(_elem121);
          }
        }
        struct.setMultiLangTeamNamesIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.playerStats = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(_list123.size);
          com.lesports.qmt.sbd.api.dto.TSimplePlayer _elem124;
          for (int _i125 = 0; _i125 < _list123.size; ++_i125)
          {
            _elem124 = new com.lesports.qmt.sbd.api.dto.TSimplePlayer();
            _elem124.read(iprot);
            struct.playerStats.add(_elem124);
          }
        }
        struct.setPlayerStatsIsSet(true);
      }
    }
  }

}

