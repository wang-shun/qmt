/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TMatch implements org.apache.thrift.TBase<TMatch, TMatch._Fields>, java.io.Serializable, Cloneable, Comparable<TMatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMatch");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VENUE_FIELD_DESC = new org.apache.thrift.protocol.TField("venue", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("stage", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("round", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SUBSTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("substation", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField COMPETITORS_FIELD_DESC = new org.apache.thrift.protocol.TField("competitors", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField MOMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("moment", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField IS_OCTOPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("isOctopus", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField OCTOPUS_MATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("octopusMatchId", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField BOLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boleId", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_VENUES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangVenues", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_MOMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangMoments", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField EIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("eids", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField IS_SYNC_TO_CLOUD_FIELD_DESC = new org.apache.thrift.protocol.TField("isSyncToCloud", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField THE_ROAD_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("theRoadOrder", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField VS_FIELD_DESC = new org.apache.thrift.protocol.TField("vs", org.apache.thrift.protocol.TType.BOOL, (short)29);
  private static final org.apache.thrift.protocol.TField EXTEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendInfos", org.apache.thrift.protocol.TType.MAP, (short)30);
  private static final org.apache.thrift.protocol.TField CURRENT_MOMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMoment", org.apache.thrift.protocol.TType.STRUCT, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMatchStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMatchTupleSchemeFactory());
  }

  private long id; // required
  private String name; // required
  private long cid; // optional
  private long csid; // optional
  private String startTime; // optional
  private String endTime; // optional
  private String venue; // optional
  private com.lesports.api.common.MatchStatus status; // required
  private String stage; // optional
  private String round; // optional
  private String group; // optional
  private String substation; // optional
  private int number; // optional
  private List<TCompetitor> competitors; // optional
  private long eid; // optional
  private String moment; // optional
  private List<com.lesports.qmt.config.api.dto.TTag> tags; // optional
  private boolean isOctopus; // optional
  private long octopusMatchId; // optional
  private long boleId; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<com.lesports.api.common.LangString> multiLangVenues; // optional
  private List<com.lesports.api.common.LangString> multiLangMoments; // optional
  private List<com.lesports.api.common.CountryLangId> eids; // optional
  private boolean isSyncToCloud; // optional
  private int theRoadOrder; // optional
  private boolean vs; // optional
  private Map<String,String> extendInfos; // optional
  private TCurrentMoment currentMoment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    CID((short)3, "cid"),
    CSID((short)4, "csid"),
    START_TIME((short)5, "startTime"),
    END_TIME((short)6, "endTime"),
    VENUE((short)7, "venue"),
    /**
     * 
     * @see com.lesports.api.common.MatchStatus
     */
    STATUS((short)8, "status"),
    STAGE((short)9, "stage"),
    ROUND((short)10, "round"),
    GROUP((short)11, "group"),
    SUBSTATION((short)13, "substation"),
    NUMBER((short)14, "number"),
    COMPETITORS((short)15, "competitors"),
    EID((short)17, "eid"),
    MOMENT((short)18, "moment"),
    TAGS((short)19, "tags"),
    IS_OCTOPUS((short)20, "isOctopus"),
    OCTOPUS_MATCH_ID((short)21, "octopusMatchId"),
    BOLE_ID((short)22, "boleId"),
    MULTI_LANG_NAMES((short)23, "multiLangNames"),
    MULTI_LANG_VENUES((short)24, "multiLangVenues"),
    MULTI_LANG_MOMENTS((short)25, "multiLangMoments"),
    EIDS((short)26, "eids"),
    IS_SYNC_TO_CLOUD((short)27, "isSyncToCloud"),
    THE_ROAD_ORDER((short)28, "theRoadOrder"),
    VS((short)29, "vs"),
    EXTEND_INFOS((short)30, "extendInfos"),
    CURRENT_MOMENT((short)31, "currentMoment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // CID
          return CID;
        case 4: // CSID
          return CSID;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // VENUE
          return VENUE;
        case 8: // STATUS
          return STATUS;
        case 9: // STAGE
          return STAGE;
        case 10: // ROUND
          return ROUND;
        case 11: // GROUP
          return GROUP;
        case 13: // SUBSTATION
          return SUBSTATION;
        case 14: // NUMBER
          return NUMBER;
        case 15: // COMPETITORS
          return COMPETITORS;
        case 17: // EID
          return EID;
        case 18: // MOMENT
          return MOMENT;
        case 19: // TAGS
          return TAGS;
        case 20: // IS_OCTOPUS
          return IS_OCTOPUS;
        case 21: // OCTOPUS_MATCH_ID
          return OCTOPUS_MATCH_ID;
        case 22: // BOLE_ID
          return BOLE_ID;
        case 23: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 24: // MULTI_LANG_VENUES
          return MULTI_LANG_VENUES;
        case 25: // MULTI_LANG_MOMENTS
          return MULTI_LANG_MOMENTS;
        case 26: // EIDS
          return EIDS;
        case 27: // IS_SYNC_TO_CLOUD
          return IS_SYNC_TO_CLOUD;
        case 28: // THE_ROAD_ORDER
          return THE_ROAD_ORDER;
        case 29: // VS
          return VS;
        case 30: // EXTEND_INFOS
          return EXTEND_INFOS;
        case 31: // CURRENT_MOMENT
          return CURRENT_MOMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CID_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private static final int __NUMBER_ISSET_ID = 3;
  private static final int __EID_ISSET_ID = 4;
  private static final int __ISOCTOPUS_ISSET_ID = 5;
  private static final int __OCTOPUSMATCHID_ISSET_ID = 6;
  private static final int __BOLEID_ISSET_ID = 7;
  private static final int __ISSYNCTOCLOUD_ISSET_ID = 8;
  private static final int __THEROADORDER_ISSET_ID = 9;
  private static final int __VS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CID,_Fields.CSID,_Fields.START_TIME,_Fields.END_TIME,_Fields.VENUE,_Fields.STAGE,_Fields.ROUND,_Fields.GROUP,_Fields.SUBSTATION,_Fields.NUMBER,_Fields.COMPETITORS,_Fields.EID,_Fields.MOMENT,_Fields.TAGS,_Fields.IS_OCTOPUS,_Fields.OCTOPUS_MATCH_ID,_Fields.BOLE_ID,_Fields.MULTI_LANG_NAMES,_Fields.MULTI_LANG_VENUES,_Fields.MULTI_LANG_MOMENTS,_Fields.EIDS,_Fields.IS_SYNC_TO_CLOUD,_Fields.THE_ROAD_ORDER,_Fields.VS,_Fields.EXTEND_INFOS,_Fields.CURRENT_MOMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENUE, new org.apache.thrift.meta_data.FieldMetaData("venue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.MatchStatus.class)));
    tmpMap.put(_Fields.STAGE, new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUND, new org.apache.thrift.meta_data.FieldMetaData("round", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBSTATION, new org.apache.thrift.meta_data.FieldMetaData("substation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPETITORS, new org.apache.thrift.meta_data.FieldMetaData("competitors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompetitor.class))));
    tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MOMENT, new org.apache.thrift.meta_data.FieldMetaData("moment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.config.api.dto.TTag.class))));
    tmpMap.put(_Fields.IS_OCTOPUS, new org.apache.thrift.meta_data.FieldMetaData("isOctopus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OCTOPUS_MATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("octopusMatchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BOLE_ID, new org.apache.thrift.meta_data.FieldMetaData("boleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_VENUES, new org.apache.thrift.meta_data.FieldMetaData("multiLangVenues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_MOMENTS, new org.apache.thrift.meta_data.FieldMetaData("multiLangMoments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.EIDS, new org.apache.thrift.meta_data.FieldMetaData("eids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CountryLangId.class))));
    tmpMap.put(_Fields.IS_SYNC_TO_CLOUD, new org.apache.thrift.meta_data.FieldMetaData("isSyncToCloud", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.THE_ROAD_ORDER, new org.apache.thrift.meta_data.FieldMetaData("theRoadOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VS, new org.apache.thrift.meta_data.FieldMetaData("vs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extendInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CURRENT_MOMENT, new org.apache.thrift.meta_data.FieldMetaData("currentMoment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCurrentMoment.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMatch.class, metaDataMap);
  }

  public TMatch() {
  }

  public TMatch(
    long id,
    String name,
    com.lesports.api.common.MatchStatus status)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name = name;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMatch(TMatch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.cid = other.cid;
    this.csid = other.csid;
    if (other.isSetStartTime()) {
      this.startTime = other.startTime;
    }
    if (other.isSetEndTime()) {
      this.endTime = other.endTime;
    }
    if (other.isSetVenue()) {
      this.venue = other.venue;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetStage()) {
      this.stage = other.stage;
    }
    if (other.isSetRound()) {
      this.round = other.round;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetSubstation()) {
      this.substation = other.substation;
    }
    this.number = other.number;
    if (other.isSetCompetitors()) {
      List<TCompetitor> __this__competitors = new ArrayList<TCompetitor>(other.competitors.size());
      for (TCompetitor other_element : other.competitors) {
        __this__competitors.add(new TCompetitor(other_element));
      }
      this.competitors = __this__competitors;
    }
    this.eid = other.eid;
    if (other.isSetMoment()) {
      this.moment = other.moment;
    }
    if (other.isSetTags()) {
      List<com.lesports.qmt.config.api.dto.TTag> __this__tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(other.tags.size());
      for (com.lesports.qmt.config.api.dto.TTag other_element : other.tags) {
        __this__tags.add(new com.lesports.qmt.config.api.dto.TTag(other_element));
      }
      this.tags = __this__tags;
    }
    this.isOctopus = other.isOctopus;
    this.octopusMatchId = other.octopusMatchId;
    this.boleId = other.boleId;
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetMultiLangVenues()) {
      List<com.lesports.api.common.LangString> __this__multiLangVenues = new ArrayList<com.lesports.api.common.LangString>(other.multiLangVenues.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangVenues) {
        __this__multiLangVenues.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangVenues = __this__multiLangVenues;
    }
    if (other.isSetMultiLangMoments()) {
      List<com.lesports.api.common.LangString> __this__multiLangMoments = new ArrayList<com.lesports.api.common.LangString>(other.multiLangMoments.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangMoments) {
        __this__multiLangMoments.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangMoments = __this__multiLangMoments;
    }
    if (other.isSetEids()) {
      List<com.lesports.api.common.CountryLangId> __this__eids = new ArrayList<com.lesports.api.common.CountryLangId>(other.eids.size());
      for (com.lesports.api.common.CountryLangId other_element : other.eids) {
        __this__eids.add(new com.lesports.api.common.CountryLangId(other_element));
      }
      this.eids = __this__eids;
    }
    this.isSyncToCloud = other.isSyncToCloud;
    this.theRoadOrder = other.theRoadOrder;
    this.vs = other.vs;
    if (other.isSetExtendInfos()) {
      Map<String,String> __this__extendInfos = new HashMap<String,String>(other.extendInfos);
      this.extendInfos = __this__extendInfos;
    }
    if (other.isSetCurrentMoment()) {
      this.currentMoment = new TCurrentMoment(other.currentMoment);
    }
  }

  public TMatch deepCopy() {
    return new TMatch(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setCidIsSet(false);
    this.cid = 0;
    setCsidIsSet(false);
    this.csid = 0;
    this.startTime = null;
    this.endTime = null;
    this.venue = null;
    this.status = null;
    this.stage = null;
    this.round = null;
    this.group = null;
    this.substation = null;
    setNumberIsSet(false);
    this.number = 0;
    this.competitors = null;
    setEidIsSet(false);
    this.eid = 0;
    this.moment = null;
    this.tags = null;
    setIsOctopusIsSet(false);
    this.isOctopus = false;
    setOctopusMatchIdIsSet(false);
    this.octopusMatchId = 0;
    setBoleIdIsSet(false);
    this.boleId = 0;
    this.multiLangNames = null;
    this.multiLangVenues = null;
    this.multiLangMoments = null;
    this.eids = null;
    setIsSyncToCloudIsSet(false);
    this.isSyncToCloud = false;
    setTheRoadOrderIsSet(false);
    this.theRoadOrder = 0;
    setVsIsSet(false);
    this.vs = false;
    this.extendInfos = null;
    this.currentMoment = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getCid() {
    return this.cid;
  }

  public void setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public String getStartTime() {
    return this.startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  public String getEndTime() {
    return this.endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public String getVenue() {
    return this.venue;
  }

  public void setVenue(String venue) {
    this.venue = venue;
  }

  public void unsetVenue() {
    this.venue = null;
  }

  /** Returns true if field venue is set (has been assigned a value) and false otherwise */
  public boolean isSetVenue() {
    return this.venue != null;
  }

  public void setVenueIsSet(boolean value) {
    if (!value) {
      this.venue = null;
    }
  }

  /**
   * 
   * @see com.lesports.api.common.MatchStatus
   */
  public com.lesports.api.common.MatchStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.lesports.api.common.MatchStatus
   */
  public void setStatus(com.lesports.api.common.MatchStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStage() {
    return this.stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }

  public void unsetStage() {
    this.stage = null;
  }

  /** Returns true if field stage is set (has been assigned a value) and false otherwise */
  public boolean isSetStage() {
    return this.stage != null;
  }

  public void setStageIsSet(boolean value) {
    if (!value) {
      this.stage = null;
    }
  }

  public String getRound() {
    return this.round;
  }

  public void setRound(String round) {
    this.round = round;
  }

  public void unsetRound() {
    this.round = null;
  }

  /** Returns true if field round is set (has been assigned a value) and false otherwise */
  public boolean isSetRound() {
    return this.round != null;
  }

  public void setRoundIsSet(boolean value) {
    if (!value) {
      this.round = null;
    }
  }

  public String getGroup() {
    return this.group;
  }

  public void setGroup(String group) {
    this.group = group;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public String getSubstation() {
    return this.substation;
  }

  public void setSubstation(String substation) {
    this.substation = substation;
  }

  public void unsetSubstation() {
    this.substation = null;
  }

  /** Returns true if field substation is set (has been assigned a value) and false otherwise */
  public boolean isSetSubstation() {
    return this.substation != null;
  }

  public void setSubstationIsSet(boolean value) {
    if (!value) {
      this.substation = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public int getCompetitorsSize() {
    return (this.competitors == null) ? 0 : this.competitors.size();
  }

  public java.util.Iterator<TCompetitor> getCompetitorsIterator() {
    return (this.competitors == null) ? null : this.competitors.iterator();
  }

  public void addToCompetitors(TCompetitor elem) {
    if (this.competitors == null) {
      this.competitors = new ArrayList<TCompetitor>();
    }
    this.competitors.add(elem);
  }

  public List<TCompetitor> getCompetitors() {
    return this.competitors;
  }

  public void setCompetitors(List<TCompetitor> competitors) {
    this.competitors = competitors;
  }

  public void unsetCompetitors() {
    this.competitors = null;
  }

  /** Returns true if field competitors is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitors() {
    return this.competitors != null;
  }

  public void setCompetitorsIsSet(boolean value) {
    if (!value) {
      this.competitors = null;
    }
  }

  public long getEid() {
    return this.eid;
  }

  public void setEid(long eid) {
    this.eid = eid;
    setEidIsSet(true);
  }

  public void unsetEid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
  }

  /** Returns true if field eid is set (has been assigned a value) and false otherwise */
  public boolean isSetEid() {
    return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
  }

  public void setEidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
  }

  public String getMoment() {
    return this.moment;
  }

  public void setMoment(String moment) {
    this.moment = moment;
  }

  public void unsetMoment() {
    this.moment = null;
  }

  /** Returns true if field moment is set (has been assigned a value) and false otherwise */
  public boolean isSetMoment() {
    return this.moment != null;
  }

  public void setMomentIsSet(boolean value) {
    if (!value) {
      this.moment = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<com.lesports.qmt.config.api.dto.TTag> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(com.lesports.qmt.config.api.dto.TTag elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>();
    }
    this.tags.add(elem);
  }

  public List<com.lesports.qmt.config.api.dto.TTag> getTags() {
    return this.tags;
  }

  public void setTags(List<com.lesports.qmt.config.api.dto.TTag> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public boolean isIsOctopus() {
    return this.isOctopus;
  }

  public void setIsOctopus(boolean isOctopus) {
    this.isOctopus = isOctopus;
    setIsOctopusIsSet(true);
  }

  public void unsetIsOctopus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISOCTOPUS_ISSET_ID);
  }

  /** Returns true if field isOctopus is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOctopus() {
    return EncodingUtils.testBit(__isset_bitfield, __ISOCTOPUS_ISSET_ID);
  }

  public void setIsOctopusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISOCTOPUS_ISSET_ID, value);
  }

  public long getOctopusMatchId() {
    return this.octopusMatchId;
  }

  public void setOctopusMatchId(long octopusMatchId) {
    this.octopusMatchId = octopusMatchId;
    setOctopusMatchIdIsSet(true);
  }

  public void unsetOctopusMatchId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCTOPUSMATCHID_ISSET_ID);
  }

  /** Returns true if field octopusMatchId is set (has been assigned a value) and false otherwise */
  public boolean isSetOctopusMatchId() {
    return EncodingUtils.testBit(__isset_bitfield, __OCTOPUSMATCHID_ISSET_ID);
  }

  public void setOctopusMatchIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCTOPUSMATCHID_ISSET_ID, value);
  }

  public long getBoleId() {
    return this.boleId;
  }

  public void setBoleId(long boleId) {
    this.boleId = boleId;
    setBoleIdIsSet(true);
  }

  public void unsetBoleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  /** Returns true if field boleId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoleId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  public void setBoleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOLEID_ISSET_ID, value);
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getMultiLangVenuesSize() {
    return (this.multiLangVenues == null) ? 0 : this.multiLangVenues.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangVenuesIterator() {
    return (this.multiLangVenues == null) ? null : this.multiLangVenues.iterator();
  }

  public void addToMultiLangVenues(com.lesports.api.common.LangString elem) {
    if (this.multiLangVenues == null) {
      this.multiLangVenues = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangVenues.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangVenues() {
    return this.multiLangVenues;
  }

  public void setMultiLangVenues(List<com.lesports.api.common.LangString> multiLangVenues) {
    this.multiLangVenues = multiLangVenues;
  }

  public void unsetMultiLangVenues() {
    this.multiLangVenues = null;
  }

  /** Returns true if field multiLangVenues is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangVenues() {
    return this.multiLangVenues != null;
  }

  public void setMultiLangVenuesIsSet(boolean value) {
    if (!value) {
      this.multiLangVenues = null;
    }
  }

  public int getMultiLangMomentsSize() {
    return (this.multiLangMoments == null) ? 0 : this.multiLangMoments.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangMomentsIterator() {
    return (this.multiLangMoments == null) ? null : this.multiLangMoments.iterator();
  }

  public void addToMultiLangMoments(com.lesports.api.common.LangString elem) {
    if (this.multiLangMoments == null) {
      this.multiLangMoments = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangMoments.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangMoments() {
    return this.multiLangMoments;
  }

  public void setMultiLangMoments(List<com.lesports.api.common.LangString> multiLangMoments) {
    this.multiLangMoments = multiLangMoments;
  }

  public void unsetMultiLangMoments() {
    this.multiLangMoments = null;
  }

  /** Returns true if field multiLangMoments is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangMoments() {
    return this.multiLangMoments != null;
  }

  public void setMultiLangMomentsIsSet(boolean value) {
    if (!value) {
      this.multiLangMoments = null;
    }
  }

  public int getEidsSize() {
    return (this.eids == null) ? 0 : this.eids.size();
  }

  public java.util.Iterator<com.lesports.api.common.CountryLangId> getEidsIterator() {
    return (this.eids == null) ? null : this.eids.iterator();
  }

  public void addToEids(com.lesports.api.common.CountryLangId elem) {
    if (this.eids == null) {
      this.eids = new ArrayList<com.lesports.api.common.CountryLangId>();
    }
    this.eids.add(elem);
  }

  public List<com.lesports.api.common.CountryLangId> getEids() {
    return this.eids;
  }

  public void setEids(List<com.lesports.api.common.CountryLangId> eids) {
    this.eids = eids;
  }

  public void unsetEids() {
    this.eids = null;
  }

  /** Returns true if field eids is set (has been assigned a value) and false otherwise */
  public boolean isSetEids() {
    return this.eids != null;
  }

  public void setEidsIsSet(boolean value) {
    if (!value) {
      this.eids = null;
    }
  }

  public boolean isIsSyncToCloud() {
    return this.isSyncToCloud;
  }

  public void setIsSyncToCloud(boolean isSyncToCloud) {
    this.isSyncToCloud = isSyncToCloud;
    setIsSyncToCloudIsSet(true);
  }

  public void unsetIsSyncToCloud() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSYNCTOCLOUD_ISSET_ID);
  }

  /** Returns true if field isSyncToCloud is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSyncToCloud() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSYNCTOCLOUD_ISSET_ID);
  }

  public void setIsSyncToCloudIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSYNCTOCLOUD_ISSET_ID, value);
  }

  public int getTheRoadOrder() {
    return this.theRoadOrder;
  }

  public void setTheRoadOrder(int theRoadOrder) {
    this.theRoadOrder = theRoadOrder;
    setTheRoadOrderIsSet(true);
  }

  public void unsetTheRoadOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THEROADORDER_ISSET_ID);
  }

  /** Returns true if field theRoadOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetTheRoadOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __THEROADORDER_ISSET_ID);
  }

  public void setTheRoadOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THEROADORDER_ISSET_ID, value);
  }

  public boolean isVs() {
    return this.vs;
  }

  public void setVs(boolean vs) {
    this.vs = vs;
    setVsIsSet(true);
  }

  public void unsetVs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VS_ISSET_ID);
  }

  /** Returns true if field vs is set (has been assigned a value) and false otherwise */
  public boolean isSetVs() {
    return EncodingUtils.testBit(__isset_bitfield, __VS_ISSET_ID);
  }

  public void setVsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VS_ISSET_ID, value);
  }

  public int getExtendInfosSize() {
    return (this.extendInfos == null) ? 0 : this.extendInfos.size();
  }

  public void putToExtendInfos(String key, String val) {
    if (this.extendInfos == null) {
      this.extendInfos = new HashMap<String,String>();
    }
    this.extendInfos.put(key, val);
  }

  public Map<String,String> getExtendInfos() {
    return this.extendInfos;
  }

  public void setExtendInfos(Map<String,String> extendInfos) {
    this.extendInfos = extendInfos;
  }

  public void unsetExtendInfos() {
    this.extendInfos = null;
  }

  /** Returns true if field extendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendInfos() {
    return this.extendInfos != null;
  }

  public void setExtendInfosIsSet(boolean value) {
    if (!value) {
      this.extendInfos = null;
    }
  }

  public TCurrentMoment getCurrentMoment() {
    return this.currentMoment;
  }

  public void setCurrentMoment(TCurrentMoment currentMoment) {
    this.currentMoment = currentMoment;
  }

  public void unsetCurrentMoment() {
    this.currentMoment = null;
  }

  /** Returns true if field currentMoment is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMoment() {
    return this.currentMoment != null;
  }

  public void setCurrentMomentIsSet(boolean value) {
    if (!value) {
      this.currentMoment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((String)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((String)value);
      }
      break;

    case VENUE:
      if (value == null) {
        unsetVenue();
      } else {
        setVenue((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.lesports.api.common.MatchStatus)value);
      }
      break;

    case STAGE:
      if (value == null) {
        unsetStage();
      } else {
        setStage((String)value);
      }
      break;

    case ROUND:
      if (value == null) {
        unsetRound();
      } else {
        setRound((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case SUBSTATION:
      if (value == null) {
        unsetSubstation();
      } else {
        setSubstation((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case COMPETITORS:
      if (value == null) {
        unsetCompetitors();
      } else {
        setCompetitors((List<TCompetitor>)value);
      }
      break;

    case EID:
      if (value == null) {
        unsetEid();
      } else {
        setEid((Long)value);
      }
      break;

    case MOMENT:
      if (value == null) {
        unsetMoment();
      } else {
        setMoment((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<com.lesports.qmt.config.api.dto.TTag>)value);
      }
      break;

    case IS_OCTOPUS:
      if (value == null) {
        unsetIsOctopus();
      } else {
        setIsOctopus((Boolean)value);
      }
      break;

    case OCTOPUS_MATCH_ID:
      if (value == null) {
        unsetOctopusMatchId();
      } else {
        setOctopusMatchId((Long)value);
      }
      break;

    case BOLE_ID:
      if (value == null) {
        unsetBoleId();
      } else {
        setBoleId((Long)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_VENUES:
      if (value == null) {
        unsetMultiLangVenues();
      } else {
        setMultiLangVenues((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_MOMENTS:
      if (value == null) {
        unsetMultiLangMoments();
      } else {
        setMultiLangMoments((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case EIDS:
      if (value == null) {
        unsetEids();
      } else {
        setEids((List<com.lesports.api.common.CountryLangId>)value);
      }
      break;

    case IS_SYNC_TO_CLOUD:
      if (value == null) {
        unsetIsSyncToCloud();
      } else {
        setIsSyncToCloud((Boolean)value);
      }
      break;

    case THE_ROAD_ORDER:
      if (value == null) {
        unsetTheRoadOrder();
      } else {
        setTheRoadOrder((Integer)value);
      }
      break;

    case VS:
      if (value == null) {
        unsetVs();
      } else {
        setVs((Boolean)value);
      }
      break;

    case EXTEND_INFOS:
      if (value == null) {
        unsetExtendInfos();
      } else {
        setExtendInfos((Map<String,String>)value);
      }
      break;

    case CURRENT_MOMENT:
      if (value == null) {
        unsetCurrentMoment();
      } else {
        setCurrentMoment((TCurrentMoment)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case CID:
      return Long.valueOf(getCid());

    case CSID:
      return Long.valueOf(getCsid());

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case VENUE:
      return getVenue();

    case STATUS:
      return getStatus();

    case STAGE:
      return getStage();

    case ROUND:
      return getRound();

    case GROUP:
      return getGroup();

    case SUBSTATION:
      return getSubstation();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case COMPETITORS:
      return getCompetitors();

    case EID:
      return Long.valueOf(getEid());

    case MOMENT:
      return getMoment();

    case TAGS:
      return getTags();

    case IS_OCTOPUS:
      return Boolean.valueOf(isIsOctopus());

    case OCTOPUS_MATCH_ID:
      return Long.valueOf(getOctopusMatchId());

    case BOLE_ID:
      return Long.valueOf(getBoleId());

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case MULTI_LANG_VENUES:
      return getMultiLangVenues();

    case MULTI_LANG_MOMENTS:
      return getMultiLangMoments();

    case EIDS:
      return getEids();

    case IS_SYNC_TO_CLOUD:
      return Boolean.valueOf(isIsSyncToCloud());

    case THE_ROAD_ORDER:
      return Integer.valueOf(getTheRoadOrder());

    case VS:
      return Boolean.valueOf(isVs());

    case EXTEND_INFOS:
      return getExtendInfos();

    case CURRENT_MOMENT:
      return getCurrentMoment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case CID:
      return isSetCid();
    case CSID:
      return isSetCsid();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case VENUE:
      return isSetVenue();
    case STATUS:
      return isSetStatus();
    case STAGE:
      return isSetStage();
    case ROUND:
      return isSetRound();
    case GROUP:
      return isSetGroup();
    case SUBSTATION:
      return isSetSubstation();
    case NUMBER:
      return isSetNumber();
    case COMPETITORS:
      return isSetCompetitors();
    case EID:
      return isSetEid();
    case MOMENT:
      return isSetMoment();
    case TAGS:
      return isSetTags();
    case IS_OCTOPUS:
      return isSetIsOctopus();
    case OCTOPUS_MATCH_ID:
      return isSetOctopusMatchId();
    case BOLE_ID:
      return isSetBoleId();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case MULTI_LANG_VENUES:
      return isSetMultiLangVenues();
    case MULTI_LANG_MOMENTS:
      return isSetMultiLangMoments();
    case EIDS:
      return isSetEids();
    case IS_SYNC_TO_CLOUD:
      return isSetIsSyncToCloud();
    case THE_ROAD_ORDER:
      return isSetTheRoadOrder();
    case VS:
      return isSetVs();
    case EXTEND_INFOS:
      return isSetExtendInfos();
    case CURRENT_MOMENT:
      return isSetCurrentMoment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMatch)
      return this.equals((TMatch)that);
    return false;
  }

  public boolean equals(TMatch that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_csid = true && this.isSetCsid();
    boolean that_present_csid = true && that.isSetCsid();
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_venue = true && this.isSetVenue();
    boolean that_present_venue = true && that.isSetVenue();
    if (this_present_venue || that_present_venue) {
      if (!(this_present_venue && that_present_venue))
        return false;
      if (!this.venue.equals(that.venue))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_stage = true && this.isSetStage();
    boolean that_present_stage = true && that.isSetStage();
    if (this_present_stage || that_present_stage) {
      if (!(this_present_stage && that_present_stage))
        return false;
      if (!this.stage.equals(that.stage))
        return false;
    }

    boolean this_present_round = true && this.isSetRound();
    boolean that_present_round = true && that.isSetRound();
    if (this_present_round || that_present_round) {
      if (!(this_present_round && that_present_round))
        return false;
      if (!this.round.equals(that.round))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_substation = true && this.isSetSubstation();
    boolean that_present_substation = true && that.isSetSubstation();
    if (this_present_substation || that_present_substation) {
      if (!(this_present_substation && that_present_substation))
        return false;
      if (!this.substation.equals(that.substation))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_competitors = true && this.isSetCompetitors();
    boolean that_present_competitors = true && that.isSetCompetitors();
    if (this_present_competitors || that_present_competitors) {
      if (!(this_present_competitors && that_present_competitors))
        return false;
      if (!this.competitors.equals(that.competitors))
        return false;
    }

    boolean this_present_eid = true && this.isSetEid();
    boolean that_present_eid = true && that.isSetEid();
    if (this_present_eid || that_present_eid) {
      if (!(this_present_eid && that_present_eid))
        return false;
      if (this.eid != that.eid)
        return false;
    }

    boolean this_present_moment = true && this.isSetMoment();
    boolean that_present_moment = true && that.isSetMoment();
    if (this_present_moment || that_present_moment) {
      if (!(this_present_moment && that_present_moment))
        return false;
      if (!this.moment.equals(that.moment))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_isOctopus = true && this.isSetIsOctopus();
    boolean that_present_isOctopus = true && that.isSetIsOctopus();
    if (this_present_isOctopus || that_present_isOctopus) {
      if (!(this_present_isOctopus && that_present_isOctopus))
        return false;
      if (this.isOctopus != that.isOctopus)
        return false;
    }

    boolean this_present_octopusMatchId = true && this.isSetOctopusMatchId();
    boolean that_present_octopusMatchId = true && that.isSetOctopusMatchId();
    if (this_present_octopusMatchId || that_present_octopusMatchId) {
      if (!(this_present_octopusMatchId && that_present_octopusMatchId))
        return false;
      if (this.octopusMatchId != that.octopusMatchId)
        return false;
    }

    boolean this_present_boleId = true && this.isSetBoleId();
    boolean that_present_boleId = true && that.isSetBoleId();
    if (this_present_boleId || that_present_boleId) {
      if (!(this_present_boleId && that_present_boleId))
        return false;
      if (this.boleId != that.boleId)
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_multiLangVenues = true && this.isSetMultiLangVenues();
    boolean that_present_multiLangVenues = true && that.isSetMultiLangVenues();
    if (this_present_multiLangVenues || that_present_multiLangVenues) {
      if (!(this_present_multiLangVenues && that_present_multiLangVenues))
        return false;
      if (!this.multiLangVenues.equals(that.multiLangVenues))
        return false;
    }

    boolean this_present_multiLangMoments = true && this.isSetMultiLangMoments();
    boolean that_present_multiLangMoments = true && that.isSetMultiLangMoments();
    if (this_present_multiLangMoments || that_present_multiLangMoments) {
      if (!(this_present_multiLangMoments && that_present_multiLangMoments))
        return false;
      if (!this.multiLangMoments.equals(that.multiLangMoments))
        return false;
    }

    boolean this_present_eids = true && this.isSetEids();
    boolean that_present_eids = true && that.isSetEids();
    if (this_present_eids || that_present_eids) {
      if (!(this_present_eids && that_present_eids))
        return false;
      if (!this.eids.equals(that.eids))
        return false;
    }

    boolean this_present_isSyncToCloud = true && this.isSetIsSyncToCloud();
    boolean that_present_isSyncToCloud = true && that.isSetIsSyncToCloud();
    if (this_present_isSyncToCloud || that_present_isSyncToCloud) {
      if (!(this_present_isSyncToCloud && that_present_isSyncToCloud))
        return false;
      if (this.isSyncToCloud != that.isSyncToCloud)
        return false;
    }

    boolean this_present_theRoadOrder = true && this.isSetTheRoadOrder();
    boolean that_present_theRoadOrder = true && that.isSetTheRoadOrder();
    if (this_present_theRoadOrder || that_present_theRoadOrder) {
      if (!(this_present_theRoadOrder && that_present_theRoadOrder))
        return false;
      if (this.theRoadOrder != that.theRoadOrder)
        return false;
    }

    boolean this_present_vs = true && this.isSetVs();
    boolean that_present_vs = true && that.isSetVs();
    if (this_present_vs || that_present_vs) {
      if (!(this_present_vs && that_present_vs))
        return false;
      if (this.vs != that.vs)
        return false;
    }

    boolean this_present_extendInfos = true && this.isSetExtendInfos();
    boolean that_present_extendInfos = true && that.isSetExtendInfos();
    if (this_present_extendInfos || that_present_extendInfos) {
      if (!(this_present_extendInfos && that_present_extendInfos))
        return false;
      if (!this.extendInfos.equals(that.extendInfos))
        return false;
    }

    boolean this_present_currentMoment = true && this.isSetCurrentMoment();
    boolean that_present_currentMoment = true && that.isSetCurrentMoment();
    if (this_present_currentMoment || that_present_currentMoment) {
      if (!(this_present_currentMoment && that_present_currentMoment))
        return false;
      if (!this.currentMoment.equals(that.currentMoment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_cid = true && (isSetCid());
    list.add(present_cid);
    if (present_cid)
      list.add(cid);

    boolean present_csid = true && (isSetCsid());
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_venue = true && (isSetVenue());
    list.add(present_venue);
    if (present_venue)
      list.add(venue);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_stage = true && (isSetStage());
    list.add(present_stage);
    if (present_stage)
      list.add(stage);

    boolean present_round = true && (isSetRound());
    list.add(present_round);
    if (present_round)
      list.add(round);

    boolean present_group = true && (isSetGroup());
    list.add(present_group);
    if (present_group)
      list.add(group);

    boolean present_substation = true && (isSetSubstation());
    list.add(present_substation);
    if (present_substation)
      list.add(substation);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_competitors = true && (isSetCompetitors());
    list.add(present_competitors);
    if (present_competitors)
      list.add(competitors);

    boolean present_eid = true && (isSetEid());
    list.add(present_eid);
    if (present_eid)
      list.add(eid);

    boolean present_moment = true && (isSetMoment());
    list.add(present_moment);
    if (present_moment)
      list.add(moment);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_isOctopus = true && (isSetIsOctopus());
    list.add(present_isOctopus);
    if (present_isOctopus)
      list.add(isOctopus);

    boolean present_octopusMatchId = true && (isSetOctopusMatchId());
    list.add(present_octopusMatchId);
    if (present_octopusMatchId)
      list.add(octopusMatchId);

    boolean present_boleId = true && (isSetBoleId());
    list.add(present_boleId);
    if (present_boleId)
      list.add(boleId);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_multiLangVenues = true && (isSetMultiLangVenues());
    list.add(present_multiLangVenues);
    if (present_multiLangVenues)
      list.add(multiLangVenues);

    boolean present_multiLangMoments = true && (isSetMultiLangMoments());
    list.add(present_multiLangMoments);
    if (present_multiLangMoments)
      list.add(multiLangMoments);

    boolean present_eids = true && (isSetEids());
    list.add(present_eids);
    if (present_eids)
      list.add(eids);

    boolean present_isSyncToCloud = true && (isSetIsSyncToCloud());
    list.add(present_isSyncToCloud);
    if (present_isSyncToCloud)
      list.add(isSyncToCloud);

    boolean present_theRoadOrder = true && (isSetTheRoadOrder());
    list.add(present_theRoadOrder);
    if (present_theRoadOrder)
      list.add(theRoadOrder);

    boolean present_vs = true && (isSetVs());
    list.add(present_vs);
    if (present_vs)
      list.add(vs);

    boolean present_extendInfos = true && (isSetExtendInfos());
    list.add(present_extendInfos);
    if (present_extendInfos)
      list.add(extendInfos);

    boolean present_currentMoment = true && (isSetCurrentMoment());
    list.add(present_currentMoment);
    if (present_currentMoment)
      list.add(currentMoment);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVenue()).compareTo(other.isSetVenue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venue, other.venue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRound()).compareTo(other.isSetRound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.round, other.round);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubstation()).compareTo(other.isSetSubstation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubstation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.substation, other.substation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitors()).compareTo(other.isSetCompetitors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitors, other.competitors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoment()).compareTo(other.isSetMoment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moment, other.moment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOctopus()).compareTo(other.isSetIsOctopus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOctopus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOctopus, other.isOctopus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOctopusMatchId()).compareTo(other.isSetOctopusMatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOctopusMatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.octopusMatchId, other.octopusMatchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoleId()).compareTo(other.isSetBoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boleId, other.boleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangVenues()).compareTo(other.isSetMultiLangVenues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangVenues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangVenues, other.multiLangVenues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangMoments()).compareTo(other.isSetMultiLangMoments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangMoments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangMoments, other.multiLangMoments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEids()).compareTo(other.isSetEids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eids, other.eids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSyncToCloud()).compareTo(other.isSetIsSyncToCloud());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSyncToCloud()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSyncToCloud, other.isSyncToCloud);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTheRoadOrder()).compareTo(other.isSetTheRoadOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTheRoadOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.theRoadOrder, other.theRoadOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVs()).compareTo(other.isSetVs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vs, other.vs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendInfos()).compareTo(other.isSetExtendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendInfos, other.extendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMoment()).compareTo(other.isSetCurrentMoment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMoment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMoment, other.currentMoment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMatch(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetCsid()) {
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      if (this.startTime == null) {
        sb.append("null");
      } else {
        sb.append(this.startTime);
      }
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
    }
    if (isSetVenue()) {
      if (!first) sb.append(", ");
      sb.append("venue:");
      if (this.venue == null) {
        sb.append("null");
      } else {
        sb.append(this.venue);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetStage()) {
      if (!first) sb.append(", ");
      sb.append("stage:");
      if (this.stage == null) {
        sb.append("null");
      } else {
        sb.append(this.stage);
      }
      first = false;
    }
    if (isSetRound()) {
      if (!first) sb.append(", ");
      sb.append("round:");
      if (this.round == null) {
        sb.append("null");
      } else {
        sb.append(this.round);
      }
      first = false;
    }
    if (isSetGroup()) {
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
    }
    if (isSetSubstation()) {
      if (!first) sb.append(", ");
      sb.append("substation:");
      if (this.substation == null) {
        sb.append("null");
      } else {
        sb.append(this.substation);
      }
      first = false;
    }
    if (isSetNumber()) {
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (isSetCompetitors()) {
      if (!first) sb.append(", ");
      sb.append("competitors:");
      if (this.competitors == null) {
        sb.append("null");
      } else {
        sb.append(this.competitors);
      }
      first = false;
    }
    if (isSetEid()) {
      if (!first) sb.append(", ");
      sb.append("eid:");
      sb.append(this.eid);
      first = false;
    }
    if (isSetMoment()) {
      if (!first) sb.append(", ");
      sb.append("moment:");
      if (this.moment == null) {
        sb.append("null");
      } else {
        sb.append(this.moment);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (isSetIsOctopus()) {
      if (!first) sb.append(", ");
      sb.append("isOctopus:");
      sb.append(this.isOctopus);
      first = false;
    }
    if (isSetOctopusMatchId()) {
      if (!first) sb.append(", ");
      sb.append("octopusMatchId:");
      sb.append(this.octopusMatchId);
      first = false;
    }
    if (isSetBoleId()) {
      if (!first) sb.append(", ");
      sb.append("boleId:");
      sb.append(this.boleId);
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetMultiLangVenues()) {
      if (!first) sb.append(", ");
      sb.append("multiLangVenues:");
      if (this.multiLangVenues == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangVenues);
      }
      first = false;
    }
    if (isSetMultiLangMoments()) {
      if (!first) sb.append(", ");
      sb.append("multiLangMoments:");
      if (this.multiLangMoments == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangMoments);
      }
      first = false;
    }
    if (isSetEids()) {
      if (!first) sb.append(", ");
      sb.append("eids:");
      if (this.eids == null) {
        sb.append("null");
      } else {
        sb.append(this.eids);
      }
      first = false;
    }
    if (isSetIsSyncToCloud()) {
      if (!first) sb.append(", ");
      sb.append("isSyncToCloud:");
      sb.append(this.isSyncToCloud);
      first = false;
    }
    if (isSetTheRoadOrder()) {
      if (!first) sb.append(", ");
      sb.append("theRoadOrder:");
      sb.append(this.theRoadOrder);
      first = false;
    }
    if (isSetVs()) {
      if (!first) sb.append(", ");
      sb.append("vs:");
      sb.append(this.vs);
      first = false;
    }
    if (isSetExtendInfos()) {
      if (!first) sb.append(", ");
      sb.append("extendInfos:");
      if (this.extendInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extendInfos);
      }
      first = false;
    }
    if (isSetCurrentMoment()) {
      if (!first) sb.append(", ");
      sb.append("currentMoment:");
      if (this.currentMoment == null) {
        sb.append("null");
      } else {
        sb.append(this.currentMoment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (currentMoment != null) {
      currentMoment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMatchStandardSchemeFactory implements SchemeFactory {
    public TMatchStandardScheme getScheme() {
      return new TMatchStandardScheme();
    }
  }

  private static class TMatchStandardScheme extends StandardScheme<TMatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTime = iprot.readString();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTime = iprot.readString();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VENUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.venue = iprot.readString();
              struct.setVenueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stage = iprot.readString();
              struct.setStageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.round = iprot.readString();
              struct.setRoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SUBSTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.substation = iprot.readString();
              struct.setSubstationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMPETITORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.competitors = new ArrayList<TCompetitor>(_list150.size);
                TCompetitor _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = new TCompetitor();
                  _elem151.read(iprot);
                  struct.competitors.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setCompetitorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eid = iprot.readI64();
              struct.setEidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MOMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moment = iprot.readString();
              struct.setMomentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list153 = iprot.readListBegin();
                struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list153.size);
                com.lesports.qmt.config.api.dto.TTag _elem154;
                for (int _i155 = 0; _i155 < _list153.size; ++_i155)
                {
                  _elem154 = new com.lesports.qmt.config.api.dto.TTag();
                  _elem154.read(iprot);
                  struct.tags.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_OCTOPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOctopus = iprot.readBool();
              struct.setIsOctopusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OCTOPUS_MATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.octopusMatchId = iprot.readI64();
              struct.setOctopusMatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BOLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.boleId = iprot.readI64();
              struct.setBoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list156.size);
                com.lesports.api.common.LangString _elem157;
                for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                {
                  _elem157 = new com.lesports.api.common.LangString();
                  _elem157.read(iprot);
                  struct.multiLangNames.add(_elem157);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MULTI_LANG_VENUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list159 = iprot.readListBegin();
                struct.multiLangVenues = new ArrayList<com.lesports.api.common.LangString>(_list159.size);
                com.lesports.api.common.LangString _elem160;
                for (int _i161 = 0; _i161 < _list159.size; ++_i161)
                {
                  _elem160 = new com.lesports.api.common.LangString();
                  _elem160.read(iprot);
                  struct.multiLangVenues.add(_elem160);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangVenuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MULTI_LANG_MOMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                struct.multiLangMoments = new ArrayList<com.lesports.api.common.LangString>(_list162.size);
                com.lesports.api.common.LangString _elem163;
                for (int _i164 = 0; _i164 < _list162.size; ++_i164)
                {
                  _elem163 = new com.lesports.api.common.LangString();
                  _elem163.read(iprot);
                  struct.multiLangMoments.add(_elem163);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangMomentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // EIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list165 = iprot.readListBegin();
                struct.eids = new ArrayList<com.lesports.api.common.CountryLangId>(_list165.size);
                com.lesports.api.common.CountryLangId _elem166;
                for (int _i167 = 0; _i167 < _list165.size; ++_i167)
                {
                  _elem166 = new com.lesports.api.common.CountryLangId();
                  _elem166.read(iprot);
                  struct.eids.add(_elem166);
                }
                iprot.readListEnd();
              }
              struct.setEidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IS_SYNC_TO_CLOUD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSyncToCloud = iprot.readBool();
              struct.setIsSyncToCloudIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // THE_ROAD_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.theRoadOrder = iprot.readI32();
              struct.setTheRoadOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // VS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.vs = iprot.readBool();
              struct.setVsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // EXTEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map168 = iprot.readMapBegin();
                struct.extendInfos = new HashMap<String,String>(2*_map168.size);
                String _key169;
                String _val170;
                for (int _i171 = 0; _i171 < _map168.size; ++_i171)
                {
                  _key169 = iprot.readString();
                  _val170 = iprot.readString();
                  struct.extendInfos.put(_key169, _val170);
                }
                iprot.readMapEnd();
              }
              struct.setExtendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CURRENT_MOMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentMoment = new TCurrentMoment();
              struct.currentMoment.read(iprot);
              struct.setCurrentMomentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCsid()) {
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        if (struct.isSetStartTime()) {
          oprot.writeFieldBegin(START_TIME_FIELD_DESC);
          oprot.writeString(struct.startTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endTime != null) {
        if (struct.isSetEndTime()) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.venue != null) {
        if (struct.isSetVenue()) {
          oprot.writeFieldBegin(VENUE_FIELD_DESC);
          oprot.writeString(struct.venue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stage != null) {
        if (struct.isSetStage()) {
          oprot.writeFieldBegin(STAGE_FIELD_DESC);
          oprot.writeString(struct.stage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.round != null) {
        if (struct.isSetRound()) {
          oprot.writeFieldBegin(ROUND_FIELD_DESC);
          oprot.writeString(struct.round);
          oprot.writeFieldEnd();
        }
      }
      if (struct.group != null) {
        if (struct.isSetGroup()) {
          oprot.writeFieldBegin(GROUP_FIELD_DESC);
          oprot.writeString(struct.group);
          oprot.writeFieldEnd();
        }
      }
      if (struct.substation != null) {
        if (struct.isSetSubstation()) {
          oprot.writeFieldBegin(SUBSTATION_FIELD_DESC);
          oprot.writeString(struct.substation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.competitors != null) {
        if (struct.isSetCompetitors()) {
          oprot.writeFieldBegin(COMPETITORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.competitors.size()));
            for (TCompetitor _iter172 : struct.competitors)
            {
              _iter172.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEid()) {
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
      }
      if (struct.moment != null) {
        if (struct.isSetMoment()) {
          oprot.writeFieldBegin(MOMENT_FIELD_DESC);
          oprot.writeString(struct.moment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tags.size()));
            for (com.lesports.qmt.config.api.dto.TTag _iter173 : struct.tags)
            {
              _iter173.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsOctopus()) {
        oprot.writeFieldBegin(IS_OCTOPUS_FIELD_DESC);
        oprot.writeBool(struct.isOctopus);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOctopusMatchId()) {
        oprot.writeFieldBegin(OCTOPUS_MATCH_ID_FIELD_DESC);
        oprot.writeI64(struct.octopusMatchId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoleId()) {
        oprot.writeFieldBegin(BOLE_ID_FIELD_DESC);
        oprot.writeI64(struct.boleId);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter174 : struct.multiLangNames)
            {
              _iter174.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangVenues != null) {
        if (struct.isSetMultiLangVenues()) {
          oprot.writeFieldBegin(MULTI_LANG_VENUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangVenues.size()));
            for (com.lesports.api.common.LangString _iter175 : struct.multiLangVenues)
            {
              _iter175.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangMoments != null) {
        if (struct.isSetMultiLangMoments()) {
          oprot.writeFieldBegin(MULTI_LANG_MOMENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangMoments.size()));
            for (com.lesports.api.common.LangString _iter176 : struct.multiLangMoments)
            {
              _iter176.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eids != null) {
        if (struct.isSetEids()) {
          oprot.writeFieldBegin(EIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.eids.size()));
            for (com.lesports.api.common.CountryLangId _iter177 : struct.eids)
            {
              _iter177.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSyncToCloud()) {
        oprot.writeFieldBegin(IS_SYNC_TO_CLOUD_FIELD_DESC);
        oprot.writeBool(struct.isSyncToCloud);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTheRoadOrder()) {
        oprot.writeFieldBegin(THE_ROAD_ORDER_FIELD_DESC);
        oprot.writeI32(struct.theRoadOrder);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVs()) {
        oprot.writeFieldBegin(VS_FIELD_DESC);
        oprot.writeBool(struct.vs);
        oprot.writeFieldEnd();
      }
      if (struct.extendInfos != null) {
        if (struct.isSetExtendInfos()) {
          oprot.writeFieldBegin(EXTEND_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendInfos.size()));
            for (Map.Entry<String, String> _iter178 : struct.extendInfos.entrySet())
            {
              oprot.writeString(_iter178.getKey());
              oprot.writeString(_iter178.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.currentMoment != null) {
        if (struct.isSetCurrentMoment()) {
          oprot.writeFieldBegin(CURRENT_MOMENT_FIELD_DESC);
          struct.currentMoment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMatchTupleSchemeFactory implements SchemeFactory {
    public TMatchTupleScheme getScheme() {
      return new TMatchTupleScheme();
    }
  }

  private static class TMatchTupleScheme extends TupleScheme<TMatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMatch struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetCid()) {
        optionals.set(2);
      }
      if (struct.isSetCsid()) {
        optionals.set(3);
      }
      if (struct.isSetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetEndTime()) {
        optionals.set(5);
      }
      if (struct.isSetVenue()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetStage()) {
        optionals.set(8);
      }
      if (struct.isSetRound()) {
        optionals.set(9);
      }
      if (struct.isSetGroup()) {
        optionals.set(10);
      }
      if (struct.isSetSubstation()) {
        optionals.set(11);
      }
      if (struct.isSetNumber()) {
        optionals.set(12);
      }
      if (struct.isSetCompetitors()) {
        optionals.set(13);
      }
      if (struct.isSetEid()) {
        optionals.set(14);
      }
      if (struct.isSetMoment()) {
        optionals.set(15);
      }
      if (struct.isSetTags()) {
        optionals.set(16);
      }
      if (struct.isSetIsOctopus()) {
        optionals.set(17);
      }
      if (struct.isSetOctopusMatchId()) {
        optionals.set(18);
      }
      if (struct.isSetBoleId()) {
        optionals.set(19);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(20);
      }
      if (struct.isSetMultiLangVenues()) {
        optionals.set(21);
      }
      if (struct.isSetMultiLangMoments()) {
        optionals.set(22);
      }
      if (struct.isSetEids()) {
        optionals.set(23);
      }
      if (struct.isSetIsSyncToCloud()) {
        optionals.set(24);
      }
      if (struct.isSetTheRoadOrder()) {
        optionals.set(25);
      }
      if (struct.isSetVs()) {
        optionals.set(26);
      }
      if (struct.isSetExtendInfos()) {
        optionals.set(27);
      }
      if (struct.isSetCurrentMoment()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetStartTime()) {
        oprot.writeString(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeString(struct.endTime);
      }
      if (struct.isSetVenue()) {
        oprot.writeString(struct.venue);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetStage()) {
        oprot.writeString(struct.stage);
      }
      if (struct.isSetRound()) {
        oprot.writeString(struct.round);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetSubstation()) {
        oprot.writeString(struct.substation);
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetCompetitors()) {
        {
          oprot.writeI32(struct.competitors.size());
          for (TCompetitor _iter179 : struct.competitors)
          {
            _iter179.write(oprot);
          }
        }
      }
      if (struct.isSetEid()) {
        oprot.writeI64(struct.eid);
      }
      if (struct.isSetMoment()) {
        oprot.writeString(struct.moment);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (com.lesports.qmt.config.api.dto.TTag _iter180 : struct.tags)
          {
            _iter180.write(oprot);
          }
        }
      }
      if (struct.isSetIsOctopus()) {
        oprot.writeBool(struct.isOctopus);
      }
      if (struct.isSetOctopusMatchId()) {
        oprot.writeI64(struct.octopusMatchId);
      }
      if (struct.isSetBoleId()) {
        oprot.writeI64(struct.boleId);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter181 : struct.multiLangNames)
          {
            _iter181.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangVenues()) {
        {
          oprot.writeI32(struct.multiLangVenues.size());
          for (com.lesports.api.common.LangString _iter182 : struct.multiLangVenues)
          {
            _iter182.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangMoments()) {
        {
          oprot.writeI32(struct.multiLangMoments.size());
          for (com.lesports.api.common.LangString _iter183 : struct.multiLangMoments)
          {
            _iter183.write(oprot);
          }
        }
      }
      if (struct.isSetEids()) {
        {
          oprot.writeI32(struct.eids.size());
          for (com.lesports.api.common.CountryLangId _iter184 : struct.eids)
          {
            _iter184.write(oprot);
          }
        }
      }
      if (struct.isSetIsSyncToCloud()) {
        oprot.writeBool(struct.isSyncToCloud);
      }
      if (struct.isSetTheRoadOrder()) {
        oprot.writeI32(struct.theRoadOrder);
      }
      if (struct.isSetVs()) {
        oprot.writeBool(struct.vs);
      }
      if (struct.isSetExtendInfos()) {
        {
          oprot.writeI32(struct.extendInfos.size());
          for (Map.Entry<String, String> _iter185 : struct.extendInfos.entrySet())
          {
            oprot.writeString(_iter185.getKey());
            oprot.writeString(_iter185.getValue());
          }
        }
      }
      if (struct.isSetCurrentMoment()) {
        struct.currentMoment.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMatch struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startTime = iprot.readString();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTime = iprot.readString();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.venue = iprot.readString();
        struct.setVenueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stage = iprot.readString();
        struct.setStageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.round = iprot.readString();
        struct.setRoundIsSet(true);
      }
      if (incoming.get(10)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(11)) {
        struct.substation = iprot.readString();
        struct.setSubstationIsSet(true);
      }
      if (incoming.get(12)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list186 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.competitors = new ArrayList<TCompetitor>(_list186.size);
          TCompetitor _elem187;
          for (int _i188 = 0; _i188 < _list186.size; ++_i188)
          {
            _elem187 = new TCompetitor();
            _elem187.read(iprot);
            struct.competitors.add(_elem187);
          }
        }
        struct.setCompetitorsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.eid = iprot.readI64();
        struct.setEidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.moment = iprot.readString();
        struct.setMomentIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tags = new ArrayList<com.lesports.qmt.config.api.dto.TTag>(_list189.size);
          com.lesports.qmt.config.api.dto.TTag _elem190;
          for (int _i191 = 0; _i191 < _list189.size; ++_i191)
          {
            _elem190 = new com.lesports.qmt.config.api.dto.TTag();
            _elem190.read(iprot);
            struct.tags.add(_elem190);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isOctopus = iprot.readBool();
        struct.setIsOctopusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.octopusMatchId = iprot.readI64();
        struct.setOctopusMatchIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.boleId = iprot.readI64();
        struct.setBoleIdIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list192 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list192.size);
          com.lesports.api.common.LangString _elem193;
          for (int _i194 = 0; _i194 < _list192.size; ++_i194)
          {
            _elem193 = new com.lesports.api.common.LangString();
            _elem193.read(iprot);
            struct.multiLangNames.add(_elem193);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangVenues = new ArrayList<com.lesports.api.common.LangString>(_list195.size);
          com.lesports.api.common.LangString _elem196;
          for (int _i197 = 0; _i197 < _list195.size; ++_i197)
          {
            _elem196 = new com.lesports.api.common.LangString();
            _elem196.read(iprot);
            struct.multiLangVenues.add(_elem196);
          }
        }
        struct.setMultiLangVenuesIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list198 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangMoments = new ArrayList<com.lesports.api.common.LangString>(_list198.size);
          com.lesports.api.common.LangString _elem199;
          for (int _i200 = 0; _i200 < _list198.size; ++_i200)
          {
            _elem199 = new com.lesports.api.common.LangString();
            _elem199.read(iprot);
            struct.multiLangMoments.add(_elem199);
          }
        }
        struct.setMultiLangMomentsIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list201 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.eids = new ArrayList<com.lesports.api.common.CountryLangId>(_list201.size);
          com.lesports.api.common.CountryLangId _elem202;
          for (int _i203 = 0; _i203 < _list201.size; ++_i203)
          {
            _elem202 = new com.lesports.api.common.CountryLangId();
            _elem202.read(iprot);
            struct.eids.add(_elem202);
          }
        }
        struct.setEidsIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isSyncToCloud = iprot.readBool();
        struct.setIsSyncToCloudIsSet(true);
      }
      if (incoming.get(25)) {
        struct.theRoadOrder = iprot.readI32();
        struct.setTheRoadOrderIsSet(true);
      }
      if (incoming.get(26)) {
        struct.vs = iprot.readBool();
        struct.setVsIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extendInfos = new HashMap<String,String>(2*_map204.size);
          String _key205;
          String _val206;
          for (int _i207 = 0; _i207 < _map204.size; ++_i207)
          {
            _key205 = iprot.readString();
            _val206 = iprot.readString();
            struct.extendInfos.put(_key205, _val206);
          }
        }
        struct.setExtendInfosIsSet(true);
      }
      if (incoming.get(28)) {
        struct.currentMoment = new TCurrentMoment();
        struct.currentMoment.read(iprot);
        struct.setCurrentMomentIsSet(true);
      }
    }
  }

}

