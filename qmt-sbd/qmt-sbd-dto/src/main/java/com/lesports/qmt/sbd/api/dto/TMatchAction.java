/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-3")
public class TMatchAction implements org.apache.thrift.TBase<TMatchAction, TMatchAction._Fields>, java.io.Serializable, Cloneable, Comparable<TMatchAction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMatchAction");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PASSED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("passedTime", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TEAM_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("teamImageUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PLAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("playerName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PLAYER_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("playerImageUrl", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTypes", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CONTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangContents", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TEAM_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTeamNames", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_PLAYER_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangPlayerNames", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("typeId", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField MULTI_COUN_LOGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiCounLogos", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("detailTypeId", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DETAIL_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDetailTypes", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField COORDINATE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateX", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COORDINATE_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateY", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangSection", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailType", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMatchActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMatchActionTupleSchemeFactory());
  }

  private long id; // required
  private long mid; // required
  private long tid; // optional
  private long pid; // optional
  private double passedTime; // optional
  private String type; // optional
  private String content; // optional
  private String teamName; // optional
  private String teamImageUrl; // optional
  private String playerName; // optional
  private String playerImageUrl; // optional
  private List<com.lesports.api.common.LangString> multiLangTypes; // optional
  private List<com.lesports.api.common.LangString> multiLangContents; // optional
  private List<com.lesports.api.common.LangString> multiLangTeamNames; // optional
  private List<com.lesports.api.common.LangString> multiLangPlayerNames; // optional
  private long typeId; // optional
  private List<com.lesports.api.common.CounString> multiCounLogos; // optional
  private long detailTypeId; // optional
  private List<com.lesports.api.common.LangString> multiLangDetailTypes; // optional
  private String coordinateX; // optional
  private String coordinateY; // optional
  private double time; // optional
  private String section; // optional
  private List<com.lesports.api.common.LangString> multiLangSection; // optional
  private String detailType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MID((short)2, "mid"),
    TID((short)3, "tid"),
    PID((short)4, "pid"),
    PASSED_TIME((short)5, "passedTime"),
    TYPE((short)6, "type"),
    CONTENT((short)7, "content"),
    TEAM_NAME((short)8, "teamName"),
    TEAM_IMAGE_URL((short)9, "teamImageUrl"),
    PLAYER_NAME((short)10, "playerName"),
    PLAYER_IMAGE_URL((short)11, "playerImageUrl"),
    MULTI_LANG_TYPES((short)12, "multiLangTypes"),
    MULTI_LANG_CONTENTS((short)13, "multiLangContents"),
    MULTI_LANG_TEAM_NAMES((short)14, "multiLangTeamNames"),
    MULTI_LANG_PLAYER_NAMES((short)15, "multiLangPlayerNames"),
    TYPE_ID((short)16, "typeId"),
    MULTI_COUN_LOGOS((short)17, "multiCounLogos"),
    DETAIL_TYPE_ID((short)18, "detailTypeId"),
    MULTI_LANG_DETAIL_TYPES((short)19, "multiLangDetailTypes"),
    COORDINATE_X((short)20, "coordinateX"),
    COORDINATE_Y((short)21, "coordinateY"),
    TIME((short)22, "time"),
    SECTION((short)23, "section"),
    MULTI_LANG_SECTION((short)24, "multiLangSection"),
    DETAIL_TYPE((short)25, "detailType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MID
          return MID;
        case 3: // TID
          return TID;
        case 4: // PID
          return PID;
        case 5: // PASSED_TIME
          return PASSED_TIME;
        case 6: // TYPE
          return TYPE;
        case 7: // CONTENT
          return CONTENT;
        case 8: // TEAM_NAME
          return TEAM_NAME;
        case 9: // TEAM_IMAGE_URL
          return TEAM_IMAGE_URL;
        case 10: // PLAYER_NAME
          return PLAYER_NAME;
        case 11: // PLAYER_IMAGE_URL
          return PLAYER_IMAGE_URL;
        case 12: // MULTI_LANG_TYPES
          return MULTI_LANG_TYPES;
        case 13: // MULTI_LANG_CONTENTS
          return MULTI_LANG_CONTENTS;
        case 14: // MULTI_LANG_TEAM_NAMES
          return MULTI_LANG_TEAM_NAMES;
        case 15: // MULTI_LANG_PLAYER_NAMES
          return MULTI_LANG_PLAYER_NAMES;
        case 16: // TYPE_ID
          return TYPE_ID;
        case 17: // MULTI_COUN_LOGOS
          return MULTI_COUN_LOGOS;
        case 18: // DETAIL_TYPE_ID
          return DETAIL_TYPE_ID;
        case 19: // MULTI_LANG_DETAIL_TYPES
          return MULTI_LANG_DETAIL_TYPES;
        case 20: // COORDINATE_X
          return COORDINATE_X;
        case 21: // COORDINATE_Y
          return COORDINATE_Y;
        case 22: // TIME
          return TIME;
        case 23: // SECTION
          return SECTION;
        case 24: // MULTI_LANG_SECTION
          return MULTI_LANG_SECTION;
        case 25: // DETAIL_TYPE
          return DETAIL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MID_ISSET_ID = 1;
  private static final int __TID_ISSET_ID = 2;
  private static final int __PID_ISSET_ID = 3;
  private static final int __PASSEDTIME_ISSET_ID = 4;
  private static final int __TYPEID_ISSET_ID = 5;
  private static final int __DETAILTYPEID_ISSET_ID = 6;
  private static final int __TIME_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TID,_Fields.PID,_Fields.PASSED_TIME,_Fields.TYPE,_Fields.CONTENT,_Fields.TEAM_NAME,_Fields.TEAM_IMAGE_URL,_Fields.PLAYER_NAME,_Fields.PLAYER_IMAGE_URL,_Fields.MULTI_LANG_TYPES,_Fields.MULTI_LANG_CONTENTS,_Fields.MULTI_LANG_TEAM_NAMES,_Fields.MULTI_LANG_PLAYER_NAMES,_Fields.TYPE_ID,_Fields.MULTI_COUN_LOGOS,_Fields.DETAIL_TYPE_ID,_Fields.MULTI_LANG_DETAIL_TYPES,_Fields.COORDINATE_X,_Fields.COORDINATE_Y,_Fields.TIME,_Fields.SECTION,_Fields.MULTI_LANG_SECTION,_Fields.DETAIL_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PASSED_TIME, new org.apache.thrift.meta_data.FieldMetaData("passedTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("teamImageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("playerName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYER_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("playerImageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_CONTENTS, new org.apache.thrift.meta_data.FieldMetaData("multiLangContents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_TEAM_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTeamNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_PLAYER_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangPlayerNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("typeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_COUN_LOGOS, new org.apache.thrift.meta_data.FieldMetaData("multiCounLogos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CounString.class))));
    tmpMap.put(_Fields.DETAIL_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("detailTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_LANG_DETAIL_TYPES, new org.apache.thrift.meta_data.FieldMetaData("multiLangDetailTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.COORDINATE_X, new org.apache.thrift.meta_data.FieldMetaData("coordinateX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATE_Y, new org.apache.thrift.meta_data.FieldMetaData("coordinateY", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_SECTION, new org.apache.thrift.meta_data.FieldMetaData("multiLangSection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.DETAIL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("detailType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMatchAction.class, metaDataMap);
  }

  public TMatchAction() {
  }

  public TMatchAction(
    long id,
    long mid)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.mid = mid;
    setMidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMatchAction(TMatchAction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.mid = other.mid;
    this.tid = other.tid;
    this.pid = other.pid;
    this.passedTime = other.passedTime;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetTeamName()) {
      this.teamName = other.teamName;
    }
    if (other.isSetTeamImageUrl()) {
      this.teamImageUrl = other.teamImageUrl;
    }
    if (other.isSetPlayerName()) {
      this.playerName = other.playerName;
    }
    if (other.isSetPlayerImageUrl()) {
      this.playerImageUrl = other.playerImageUrl;
    }
    if (other.isSetMultiLangTypes()) {
      List<com.lesports.api.common.LangString> __this__multiLangTypes = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTypes.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTypes) {
        __this__multiLangTypes.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTypes = __this__multiLangTypes;
    }
    if (other.isSetMultiLangContents()) {
      List<com.lesports.api.common.LangString> __this__multiLangContents = new ArrayList<com.lesports.api.common.LangString>(other.multiLangContents.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangContents) {
        __this__multiLangContents.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangContents = __this__multiLangContents;
    }
    if (other.isSetMultiLangTeamNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTeamNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTeamNames) {
        __this__multiLangTeamNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTeamNames = __this__multiLangTeamNames;
    }
    if (other.isSetMultiLangPlayerNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangPlayerNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangPlayerNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangPlayerNames) {
        __this__multiLangPlayerNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangPlayerNames = __this__multiLangPlayerNames;
    }
    this.typeId = other.typeId;
    if (other.isSetMultiCounLogos()) {
      List<com.lesports.api.common.CounString> __this__multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(other.multiCounLogos.size());
      for (com.lesports.api.common.CounString other_element : other.multiCounLogos) {
        __this__multiCounLogos.add(new com.lesports.api.common.CounString(other_element));
      }
      this.multiCounLogos = __this__multiCounLogos;
    }
    this.detailTypeId = other.detailTypeId;
    if (other.isSetMultiLangDetailTypes()) {
      List<com.lesports.api.common.LangString> __this__multiLangDetailTypes = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDetailTypes.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDetailTypes) {
        __this__multiLangDetailTypes.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDetailTypes = __this__multiLangDetailTypes;
    }
    if (other.isSetCoordinateX()) {
      this.coordinateX = other.coordinateX;
    }
    if (other.isSetCoordinateY()) {
      this.coordinateY = other.coordinateY;
    }
    this.time = other.time;
    if (other.isSetSection()) {
      this.section = other.section;
    }
    if (other.isSetMultiLangSection()) {
      List<com.lesports.api.common.LangString> __this__multiLangSection = new ArrayList<com.lesports.api.common.LangString>(other.multiLangSection.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangSection) {
        __this__multiLangSection.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangSection = __this__multiLangSection;
    }
    if (other.isSetDetailType()) {
      this.detailType = other.detailType;
    }
  }

  public TMatchAction deepCopy() {
    return new TMatchAction(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setMidIsSet(false);
    this.mid = 0;
    setTidIsSet(false);
    this.tid = 0;
    setPidIsSet(false);
    this.pid = 0;
    setPassedTimeIsSet(false);
    this.passedTime = 0.0;
    this.type = null;
    this.content = null;
    this.teamName = null;
    this.teamImageUrl = null;
    this.playerName = null;
    this.playerImageUrl = null;
    this.multiLangTypes = null;
    this.multiLangContents = null;
    this.multiLangTeamNames = null;
    this.multiLangPlayerNames = null;
    setTypeIdIsSet(false);
    this.typeId = 0;
    this.multiCounLogos = null;
    setDetailTypeIdIsSet(false);
    this.detailTypeId = 0;
    this.multiLangDetailTypes = null;
    this.coordinateX = null;
    this.coordinateY = null;
    setTimeIsSet(false);
    this.time = 0.0;
    this.section = null;
    this.multiLangSection = null;
    this.detailType = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getMid() {
    return this.mid;
  }

  public void setMid(long mid) {
    this.mid = mid;
    setMidIsSet(true);
  }

  public void unsetMid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public long getTid() {
    return this.tid;
  }

  public void setTid(long tid) {
    this.tid = tid;
    setTidIsSet(true);
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public long getPid() {
    return this.pid;
  }

  public void setPid(long pid) {
    this.pid = pid;
    setPidIsSet(true);
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getPassedTime() {
    return this.passedTime;
  }

  public void setPassedTime(double passedTime) {
    this.passedTime = passedTime;
    setPassedTimeIsSet(true);
  }

  public void unsetPassedTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSEDTIME_ISSET_ID);
  }

  /** Returns true if field passedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPassedTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSEDTIME_ISSET_ID);
  }

  public void setPassedTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSEDTIME_ISSET_ID, value);
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getTeamName() {
    return this.teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }

  public void unsetTeamName() {
    this.teamName = null;
  }

  /** Returns true if field teamName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamName() {
    return this.teamName != null;
  }

  public void setTeamNameIsSet(boolean value) {
    if (!value) {
      this.teamName = null;
    }
  }

  public String getTeamImageUrl() {
    return this.teamImageUrl;
  }

  public void setTeamImageUrl(String teamImageUrl) {
    this.teamImageUrl = teamImageUrl;
  }

  public void unsetTeamImageUrl() {
    this.teamImageUrl = null;
  }

  /** Returns true if field teamImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamImageUrl() {
    return this.teamImageUrl != null;
  }

  public void setTeamImageUrlIsSet(boolean value) {
    if (!value) {
      this.teamImageUrl = null;
    }
  }

  public String getPlayerName() {
    return this.playerName;
  }

  public void setPlayerName(String playerName) {
    this.playerName = playerName;
  }

  public void unsetPlayerName() {
    this.playerName = null;
  }

  /** Returns true if field playerName is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerName() {
    return this.playerName != null;
  }

  public void setPlayerNameIsSet(boolean value) {
    if (!value) {
      this.playerName = null;
    }
  }

  public String getPlayerImageUrl() {
    return this.playerImageUrl;
  }

  public void setPlayerImageUrl(String playerImageUrl) {
    this.playerImageUrl = playerImageUrl;
  }

  public void unsetPlayerImageUrl() {
    this.playerImageUrl = null;
  }

  /** Returns true if field playerImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerImageUrl() {
    return this.playerImageUrl != null;
  }

  public void setPlayerImageUrlIsSet(boolean value) {
    if (!value) {
      this.playerImageUrl = null;
    }
  }

  public int getMultiLangTypesSize() {
    return (this.multiLangTypes == null) ? 0 : this.multiLangTypes.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTypesIterator() {
    return (this.multiLangTypes == null) ? null : this.multiLangTypes.iterator();
  }

  public void addToMultiLangTypes(com.lesports.api.common.LangString elem) {
    if (this.multiLangTypes == null) {
      this.multiLangTypes = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTypes.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTypes() {
    return this.multiLangTypes;
  }

  public void setMultiLangTypes(List<com.lesports.api.common.LangString> multiLangTypes) {
    this.multiLangTypes = multiLangTypes;
  }

  public void unsetMultiLangTypes() {
    this.multiLangTypes = null;
  }

  /** Returns true if field multiLangTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTypes() {
    return this.multiLangTypes != null;
  }

  public void setMultiLangTypesIsSet(boolean value) {
    if (!value) {
      this.multiLangTypes = null;
    }
  }

  public int getMultiLangContentsSize() {
    return (this.multiLangContents == null) ? 0 : this.multiLangContents.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangContentsIterator() {
    return (this.multiLangContents == null) ? null : this.multiLangContents.iterator();
  }

  public void addToMultiLangContents(com.lesports.api.common.LangString elem) {
    if (this.multiLangContents == null) {
      this.multiLangContents = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangContents.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangContents() {
    return this.multiLangContents;
  }

  public void setMultiLangContents(List<com.lesports.api.common.LangString> multiLangContents) {
    this.multiLangContents = multiLangContents;
  }

  public void unsetMultiLangContents() {
    this.multiLangContents = null;
  }

  /** Returns true if field multiLangContents is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangContents() {
    return this.multiLangContents != null;
  }

  public void setMultiLangContentsIsSet(boolean value) {
    if (!value) {
      this.multiLangContents = null;
    }
  }

  public int getMultiLangTeamNamesSize() {
    return (this.multiLangTeamNames == null) ? 0 : this.multiLangTeamNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTeamNamesIterator() {
    return (this.multiLangTeamNames == null) ? null : this.multiLangTeamNames.iterator();
  }

  public void addToMultiLangTeamNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangTeamNames == null) {
      this.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTeamNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTeamNames() {
    return this.multiLangTeamNames;
  }

  public void setMultiLangTeamNames(List<com.lesports.api.common.LangString> multiLangTeamNames) {
    this.multiLangTeamNames = multiLangTeamNames;
  }

  public void unsetMultiLangTeamNames() {
    this.multiLangTeamNames = null;
  }

  /** Returns true if field multiLangTeamNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTeamNames() {
    return this.multiLangTeamNames != null;
  }

  public void setMultiLangTeamNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangTeamNames = null;
    }
  }

  public int getMultiLangPlayerNamesSize() {
    return (this.multiLangPlayerNames == null) ? 0 : this.multiLangPlayerNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangPlayerNamesIterator() {
    return (this.multiLangPlayerNames == null) ? null : this.multiLangPlayerNames.iterator();
  }

  public void addToMultiLangPlayerNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangPlayerNames == null) {
      this.multiLangPlayerNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangPlayerNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangPlayerNames() {
    return this.multiLangPlayerNames;
  }

  public void setMultiLangPlayerNames(List<com.lesports.api.common.LangString> multiLangPlayerNames) {
    this.multiLangPlayerNames = multiLangPlayerNames;
  }

  public void unsetMultiLangPlayerNames() {
    this.multiLangPlayerNames = null;
  }

  /** Returns true if field multiLangPlayerNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangPlayerNames() {
    return this.multiLangPlayerNames != null;
  }

  public void setMultiLangPlayerNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangPlayerNames = null;
    }
  }

  public long getTypeId() {
    return this.typeId;
  }

  public void setTypeId(long typeId) {
    this.typeId = typeId;
    setTypeIdIsSet(true);
  }

  public void unsetTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  /** Returns true if field typeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPEID_ISSET_ID);
  }

  public void setTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPEID_ISSET_ID, value);
  }

  public int getMultiCounLogosSize() {
    return (this.multiCounLogos == null) ? 0 : this.multiCounLogos.size();
  }

  public java.util.Iterator<com.lesports.api.common.CounString> getMultiCounLogosIterator() {
    return (this.multiCounLogos == null) ? null : this.multiCounLogos.iterator();
  }

  public void addToMultiCounLogos(com.lesports.api.common.CounString elem) {
    if (this.multiCounLogos == null) {
      this.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>();
    }
    this.multiCounLogos.add(elem);
  }

  public List<com.lesports.api.common.CounString> getMultiCounLogos() {
    return this.multiCounLogos;
  }

  public void setMultiCounLogos(List<com.lesports.api.common.CounString> multiCounLogos) {
    this.multiCounLogos = multiCounLogos;
  }

  public void unsetMultiCounLogos() {
    this.multiCounLogos = null;
  }

  /** Returns true if field multiCounLogos is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiCounLogos() {
    return this.multiCounLogos != null;
  }

  public void setMultiCounLogosIsSet(boolean value) {
    if (!value) {
      this.multiCounLogos = null;
    }
  }

  public long getDetailTypeId() {
    return this.detailTypeId;
  }

  public void setDetailTypeId(long detailTypeId) {
    this.detailTypeId = detailTypeId;
    setDetailTypeIdIsSet(true);
  }

  public void unsetDetailTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILTYPEID_ISSET_ID);
  }

  /** Returns true if field detailTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILTYPEID_ISSET_ID);
  }

  public void setDetailTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILTYPEID_ISSET_ID, value);
  }

  public int getMultiLangDetailTypesSize() {
    return (this.multiLangDetailTypes == null) ? 0 : this.multiLangDetailTypes.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDetailTypesIterator() {
    return (this.multiLangDetailTypes == null) ? null : this.multiLangDetailTypes.iterator();
  }

  public void addToMultiLangDetailTypes(com.lesports.api.common.LangString elem) {
    if (this.multiLangDetailTypes == null) {
      this.multiLangDetailTypes = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDetailTypes.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDetailTypes() {
    return this.multiLangDetailTypes;
  }

  public void setMultiLangDetailTypes(List<com.lesports.api.common.LangString> multiLangDetailTypes) {
    this.multiLangDetailTypes = multiLangDetailTypes;
  }

  public void unsetMultiLangDetailTypes() {
    this.multiLangDetailTypes = null;
  }

  /** Returns true if field multiLangDetailTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDetailTypes() {
    return this.multiLangDetailTypes != null;
  }

  public void setMultiLangDetailTypesIsSet(boolean value) {
    if (!value) {
      this.multiLangDetailTypes = null;
    }
  }

  public String getCoordinateX() {
    return this.coordinateX;
  }

  public void setCoordinateX(String coordinateX) {
    this.coordinateX = coordinateX;
  }

  public void unsetCoordinateX() {
    this.coordinateX = null;
  }

  /** Returns true if field coordinateX is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinateX() {
    return this.coordinateX != null;
  }

  public void setCoordinateXIsSet(boolean value) {
    if (!value) {
      this.coordinateX = null;
    }
  }

  public String getCoordinateY() {
    return this.coordinateY;
  }

  public void setCoordinateY(String coordinateY) {
    this.coordinateY = coordinateY;
  }

  public void unsetCoordinateY() {
    this.coordinateY = null;
  }

  /** Returns true if field coordinateY is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinateY() {
    return this.coordinateY != null;
  }

  public void setCoordinateYIsSet(boolean value) {
    if (!value) {
      this.coordinateY = null;
    }
  }

  public double getTime() {
    return this.time;
  }

  public void setTime(double time) {
    this.time = time;
    setTimeIsSet(true);
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public String getSection() {
    return this.section;
  }

  public void setSection(String section) {
    this.section = section;
  }

  public void unsetSection() {
    this.section = null;
  }

  /** Returns true if field section is set (has been assigned a value) and false otherwise */
  public boolean isSetSection() {
    return this.section != null;
  }

  public void setSectionIsSet(boolean value) {
    if (!value) {
      this.section = null;
    }
  }

  public int getMultiLangSectionSize() {
    return (this.multiLangSection == null) ? 0 : this.multiLangSection.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangSectionIterator() {
    return (this.multiLangSection == null) ? null : this.multiLangSection.iterator();
  }

  public void addToMultiLangSection(com.lesports.api.common.LangString elem) {
    if (this.multiLangSection == null) {
      this.multiLangSection = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangSection.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangSection() {
    return this.multiLangSection;
  }

  public void setMultiLangSection(List<com.lesports.api.common.LangString> multiLangSection) {
    this.multiLangSection = multiLangSection;
  }

  public void unsetMultiLangSection() {
    this.multiLangSection = null;
  }

  /** Returns true if field multiLangSection is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangSection() {
    return this.multiLangSection != null;
  }

  public void setMultiLangSectionIsSet(boolean value) {
    if (!value) {
      this.multiLangSection = null;
    }
  }

  public String getDetailType() {
    return this.detailType;
  }

  public void setDetailType(String detailType) {
    this.detailType = detailType;
  }

  public void unsetDetailType() {
    this.detailType = null;
  }

  /** Returns true if field detailType is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailType() {
    return this.detailType != null;
  }

  public void setDetailTypeIsSet(boolean value) {
    if (!value) {
      this.detailType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((Long)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Long)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Long)value);
      }
      break;

    case PASSED_TIME:
      if (value == null) {
        unsetPassedTime();
      } else {
        setPassedTime((Double)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TEAM_NAME:
      if (value == null) {
        unsetTeamName();
      } else {
        setTeamName((String)value);
      }
      break;

    case TEAM_IMAGE_URL:
      if (value == null) {
        unsetTeamImageUrl();
      } else {
        setTeamImageUrl((String)value);
      }
      break;

    case PLAYER_NAME:
      if (value == null) {
        unsetPlayerName();
      } else {
        setPlayerName((String)value);
      }
      break;

    case PLAYER_IMAGE_URL:
      if (value == null) {
        unsetPlayerImageUrl();
      } else {
        setPlayerImageUrl((String)value);
      }
      break;

    case MULTI_LANG_TYPES:
      if (value == null) {
        unsetMultiLangTypes();
      } else {
        setMultiLangTypes((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_CONTENTS:
      if (value == null) {
        unsetMultiLangContents();
      } else {
        setMultiLangContents((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_TEAM_NAMES:
      if (value == null) {
        unsetMultiLangTeamNames();
      } else {
        setMultiLangTeamNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_PLAYER_NAMES:
      if (value == null) {
        unsetMultiLangPlayerNames();
      } else {
        setMultiLangPlayerNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case TYPE_ID:
      if (value == null) {
        unsetTypeId();
      } else {
        setTypeId((Long)value);
      }
      break;

    case MULTI_COUN_LOGOS:
      if (value == null) {
        unsetMultiCounLogos();
      } else {
        setMultiCounLogos((List<com.lesports.api.common.CounString>)value);
      }
      break;

    case DETAIL_TYPE_ID:
      if (value == null) {
        unsetDetailTypeId();
      } else {
        setDetailTypeId((Long)value);
      }
      break;

    case MULTI_LANG_DETAIL_TYPES:
      if (value == null) {
        unsetMultiLangDetailTypes();
      } else {
        setMultiLangDetailTypes((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case COORDINATE_X:
      if (value == null) {
        unsetCoordinateX();
      } else {
        setCoordinateX((String)value);
      }
      break;

    case COORDINATE_Y:
      if (value == null) {
        unsetCoordinateY();
      } else {
        setCoordinateY((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Double)value);
      }
      break;

    case SECTION:
      if (value == null) {
        unsetSection();
      } else {
        setSection((String)value);
      }
      break;

    case MULTI_LANG_SECTION:
      if (value == null) {
        unsetMultiLangSection();
      } else {
        setMultiLangSection((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case DETAIL_TYPE:
      if (value == null) {
        unsetDetailType();
      } else {
        setDetailType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MID:
      return Long.valueOf(getMid());

    case TID:
      return Long.valueOf(getTid());

    case PID:
      return Long.valueOf(getPid());

    case PASSED_TIME:
      return Double.valueOf(getPassedTime());

    case TYPE:
      return getType();

    case CONTENT:
      return getContent();

    case TEAM_NAME:
      return getTeamName();

    case TEAM_IMAGE_URL:
      return getTeamImageUrl();

    case PLAYER_NAME:
      return getPlayerName();

    case PLAYER_IMAGE_URL:
      return getPlayerImageUrl();

    case MULTI_LANG_TYPES:
      return getMultiLangTypes();

    case MULTI_LANG_CONTENTS:
      return getMultiLangContents();

    case MULTI_LANG_TEAM_NAMES:
      return getMultiLangTeamNames();

    case MULTI_LANG_PLAYER_NAMES:
      return getMultiLangPlayerNames();

    case TYPE_ID:
      return Long.valueOf(getTypeId());

    case MULTI_COUN_LOGOS:
      return getMultiCounLogos();

    case DETAIL_TYPE_ID:
      return Long.valueOf(getDetailTypeId());

    case MULTI_LANG_DETAIL_TYPES:
      return getMultiLangDetailTypes();

    case COORDINATE_X:
      return getCoordinateX();

    case COORDINATE_Y:
      return getCoordinateY();

    case TIME:
      return Double.valueOf(getTime());

    case SECTION:
      return getSection();

    case MULTI_LANG_SECTION:
      return getMultiLangSection();

    case DETAIL_TYPE:
      return getDetailType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MID:
      return isSetMid();
    case TID:
      return isSetTid();
    case PID:
      return isSetPid();
    case PASSED_TIME:
      return isSetPassedTime();
    case TYPE:
      return isSetType();
    case CONTENT:
      return isSetContent();
    case TEAM_NAME:
      return isSetTeamName();
    case TEAM_IMAGE_URL:
      return isSetTeamImageUrl();
    case PLAYER_NAME:
      return isSetPlayerName();
    case PLAYER_IMAGE_URL:
      return isSetPlayerImageUrl();
    case MULTI_LANG_TYPES:
      return isSetMultiLangTypes();
    case MULTI_LANG_CONTENTS:
      return isSetMultiLangContents();
    case MULTI_LANG_TEAM_NAMES:
      return isSetMultiLangTeamNames();
    case MULTI_LANG_PLAYER_NAMES:
      return isSetMultiLangPlayerNames();
    case TYPE_ID:
      return isSetTypeId();
    case MULTI_COUN_LOGOS:
      return isSetMultiCounLogos();
    case DETAIL_TYPE_ID:
      return isSetDetailTypeId();
    case MULTI_LANG_DETAIL_TYPES:
      return isSetMultiLangDetailTypes();
    case COORDINATE_X:
      return isSetCoordinateX();
    case COORDINATE_Y:
      return isSetCoordinateY();
    case TIME:
      return isSetTime();
    case SECTION:
      return isSetSection();
    case MULTI_LANG_SECTION:
      return isSetMultiLangSection();
    case DETAIL_TYPE:
      return isSetDetailType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMatchAction)
      return this.equals((TMatchAction)that);
    return false;
  }

  public boolean equals(TMatchAction that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_mid = true;
    boolean that_present_mid = true;
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_passedTime = true && this.isSetPassedTime();
    boolean that_present_passedTime = true && that.isSetPassedTime();
    if (this_present_passedTime || that_present_passedTime) {
      if (!(this_present_passedTime && that_present_passedTime))
        return false;
      if (this.passedTime != that.passedTime)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_teamName = true && this.isSetTeamName();
    boolean that_present_teamName = true && that.isSetTeamName();
    if (this_present_teamName || that_present_teamName) {
      if (!(this_present_teamName && that_present_teamName))
        return false;
      if (!this.teamName.equals(that.teamName))
        return false;
    }

    boolean this_present_teamImageUrl = true && this.isSetTeamImageUrl();
    boolean that_present_teamImageUrl = true && that.isSetTeamImageUrl();
    if (this_present_teamImageUrl || that_present_teamImageUrl) {
      if (!(this_present_teamImageUrl && that_present_teamImageUrl))
        return false;
      if (!this.teamImageUrl.equals(that.teamImageUrl))
        return false;
    }

    boolean this_present_playerName = true && this.isSetPlayerName();
    boolean that_present_playerName = true && that.isSetPlayerName();
    if (this_present_playerName || that_present_playerName) {
      if (!(this_present_playerName && that_present_playerName))
        return false;
      if (!this.playerName.equals(that.playerName))
        return false;
    }

    boolean this_present_playerImageUrl = true && this.isSetPlayerImageUrl();
    boolean that_present_playerImageUrl = true && that.isSetPlayerImageUrl();
    if (this_present_playerImageUrl || that_present_playerImageUrl) {
      if (!(this_present_playerImageUrl && that_present_playerImageUrl))
        return false;
      if (!this.playerImageUrl.equals(that.playerImageUrl))
        return false;
    }

    boolean this_present_multiLangTypes = true && this.isSetMultiLangTypes();
    boolean that_present_multiLangTypes = true && that.isSetMultiLangTypes();
    if (this_present_multiLangTypes || that_present_multiLangTypes) {
      if (!(this_present_multiLangTypes && that_present_multiLangTypes))
        return false;
      if (!this.multiLangTypes.equals(that.multiLangTypes))
        return false;
    }

    boolean this_present_multiLangContents = true && this.isSetMultiLangContents();
    boolean that_present_multiLangContents = true && that.isSetMultiLangContents();
    if (this_present_multiLangContents || that_present_multiLangContents) {
      if (!(this_present_multiLangContents && that_present_multiLangContents))
        return false;
      if (!this.multiLangContents.equals(that.multiLangContents))
        return false;
    }

    boolean this_present_multiLangTeamNames = true && this.isSetMultiLangTeamNames();
    boolean that_present_multiLangTeamNames = true && that.isSetMultiLangTeamNames();
    if (this_present_multiLangTeamNames || that_present_multiLangTeamNames) {
      if (!(this_present_multiLangTeamNames && that_present_multiLangTeamNames))
        return false;
      if (!this.multiLangTeamNames.equals(that.multiLangTeamNames))
        return false;
    }

    boolean this_present_multiLangPlayerNames = true && this.isSetMultiLangPlayerNames();
    boolean that_present_multiLangPlayerNames = true && that.isSetMultiLangPlayerNames();
    if (this_present_multiLangPlayerNames || that_present_multiLangPlayerNames) {
      if (!(this_present_multiLangPlayerNames && that_present_multiLangPlayerNames))
        return false;
      if (!this.multiLangPlayerNames.equals(that.multiLangPlayerNames))
        return false;
    }

    boolean this_present_typeId = true && this.isSetTypeId();
    boolean that_present_typeId = true && that.isSetTypeId();
    if (this_present_typeId || that_present_typeId) {
      if (!(this_present_typeId && that_present_typeId))
        return false;
      if (this.typeId != that.typeId)
        return false;
    }

    boolean this_present_multiCounLogos = true && this.isSetMultiCounLogos();
    boolean that_present_multiCounLogos = true && that.isSetMultiCounLogos();
    if (this_present_multiCounLogos || that_present_multiCounLogos) {
      if (!(this_present_multiCounLogos && that_present_multiCounLogos))
        return false;
      if (!this.multiCounLogos.equals(that.multiCounLogos))
        return false;
    }

    boolean this_present_detailTypeId = true && this.isSetDetailTypeId();
    boolean that_present_detailTypeId = true && that.isSetDetailTypeId();
    if (this_present_detailTypeId || that_present_detailTypeId) {
      if (!(this_present_detailTypeId && that_present_detailTypeId))
        return false;
      if (this.detailTypeId != that.detailTypeId)
        return false;
    }

    boolean this_present_multiLangDetailTypes = true && this.isSetMultiLangDetailTypes();
    boolean that_present_multiLangDetailTypes = true && that.isSetMultiLangDetailTypes();
    if (this_present_multiLangDetailTypes || that_present_multiLangDetailTypes) {
      if (!(this_present_multiLangDetailTypes && that_present_multiLangDetailTypes))
        return false;
      if (!this.multiLangDetailTypes.equals(that.multiLangDetailTypes))
        return false;
    }

    boolean this_present_coordinateX = true && this.isSetCoordinateX();
    boolean that_present_coordinateX = true && that.isSetCoordinateX();
    if (this_present_coordinateX || that_present_coordinateX) {
      if (!(this_present_coordinateX && that_present_coordinateX))
        return false;
      if (!this.coordinateX.equals(that.coordinateX))
        return false;
    }

    boolean this_present_coordinateY = true && this.isSetCoordinateY();
    boolean that_present_coordinateY = true && that.isSetCoordinateY();
    if (this_present_coordinateY || that_present_coordinateY) {
      if (!(this_present_coordinateY && that_present_coordinateY))
        return false;
      if (!this.coordinateY.equals(that.coordinateY))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_section = true && this.isSetSection();
    boolean that_present_section = true && that.isSetSection();
    if (this_present_section || that_present_section) {
      if (!(this_present_section && that_present_section))
        return false;
      if (!this.section.equals(that.section))
        return false;
    }

    boolean this_present_multiLangSection = true && this.isSetMultiLangSection();
    boolean that_present_multiLangSection = true && that.isSetMultiLangSection();
    if (this_present_multiLangSection || that_present_multiLangSection) {
      if (!(this_present_multiLangSection && that_present_multiLangSection))
        return false;
      if (!this.multiLangSection.equals(that.multiLangSection))
        return false;
    }

    boolean this_present_detailType = true && this.isSetDetailType();
    boolean that_present_detailType = true && that.isSetDetailType();
    if (this_present_detailType || that_present_detailType) {
      if (!(this_present_detailType && that_present_detailType))
        return false;
      if (!this.detailType.equals(that.detailType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_mid = true;
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_tid = true && (isSetTid());
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_pid = true && (isSetPid());
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_passedTime = true && (isSetPassedTime());
    list.add(present_passedTime);
    if (present_passedTime)
      list.add(passedTime);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_teamName = true && (isSetTeamName());
    list.add(present_teamName);
    if (present_teamName)
      list.add(teamName);

    boolean present_teamImageUrl = true && (isSetTeamImageUrl());
    list.add(present_teamImageUrl);
    if (present_teamImageUrl)
      list.add(teamImageUrl);

    boolean present_playerName = true && (isSetPlayerName());
    list.add(present_playerName);
    if (present_playerName)
      list.add(playerName);

    boolean present_playerImageUrl = true && (isSetPlayerImageUrl());
    list.add(present_playerImageUrl);
    if (present_playerImageUrl)
      list.add(playerImageUrl);

    boolean present_multiLangTypes = true && (isSetMultiLangTypes());
    list.add(present_multiLangTypes);
    if (present_multiLangTypes)
      list.add(multiLangTypes);

    boolean present_multiLangContents = true && (isSetMultiLangContents());
    list.add(present_multiLangContents);
    if (present_multiLangContents)
      list.add(multiLangContents);

    boolean present_multiLangTeamNames = true && (isSetMultiLangTeamNames());
    list.add(present_multiLangTeamNames);
    if (present_multiLangTeamNames)
      list.add(multiLangTeamNames);

    boolean present_multiLangPlayerNames = true && (isSetMultiLangPlayerNames());
    list.add(present_multiLangPlayerNames);
    if (present_multiLangPlayerNames)
      list.add(multiLangPlayerNames);

    boolean present_typeId = true && (isSetTypeId());
    list.add(present_typeId);
    if (present_typeId)
      list.add(typeId);

    boolean present_multiCounLogos = true && (isSetMultiCounLogos());
    list.add(present_multiCounLogos);
    if (present_multiCounLogos)
      list.add(multiCounLogos);

    boolean present_detailTypeId = true && (isSetDetailTypeId());
    list.add(present_detailTypeId);
    if (present_detailTypeId)
      list.add(detailTypeId);

    boolean present_multiLangDetailTypes = true && (isSetMultiLangDetailTypes());
    list.add(present_multiLangDetailTypes);
    if (present_multiLangDetailTypes)
      list.add(multiLangDetailTypes);

    boolean present_coordinateX = true && (isSetCoordinateX());
    list.add(present_coordinateX);
    if (present_coordinateX)
      list.add(coordinateX);

    boolean present_coordinateY = true && (isSetCoordinateY());
    list.add(present_coordinateY);
    if (present_coordinateY)
      list.add(coordinateY);

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_section = true && (isSetSection());
    list.add(present_section);
    if (present_section)
      list.add(section);

    boolean present_multiLangSection = true && (isSetMultiLangSection());
    list.add(present_multiLangSection);
    if (present_multiLangSection)
      list.add(multiLangSection);

    boolean present_detailType = true && (isSetDetailType());
    list.add(present_detailType);
    if (present_detailType)
      list.add(detailType);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMatchAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassedTime()).compareTo(other.isSetPassedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passedTime, other.passedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamName()).compareTo(other.isSetTeamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamName, other.teamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamImageUrl()).compareTo(other.isSetTeamImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamImageUrl, other.teamImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerName()).compareTo(other.isSetPlayerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerName, other.playerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerImageUrl()).compareTo(other.isSetPlayerImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerImageUrl, other.playerImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTypes()).compareTo(other.isSetMultiLangTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTypes, other.multiLangTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangContents()).compareTo(other.isSetMultiLangContents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangContents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangContents, other.multiLangContents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTeamNames()).compareTo(other.isSetMultiLangTeamNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTeamNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTeamNames, other.multiLangTeamNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangPlayerNames()).compareTo(other.isSetMultiLangPlayerNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangPlayerNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangPlayerNames, other.multiLangPlayerNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypeId()).compareTo(other.isSetTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeId, other.typeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiCounLogos()).compareTo(other.isSetMultiCounLogos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiCounLogos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiCounLogos, other.multiCounLogos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailTypeId()).compareTo(other.isSetDetailTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailTypeId, other.detailTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDetailTypes()).compareTo(other.isSetMultiLangDetailTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDetailTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDetailTypes, other.multiLangDetailTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinateX()).compareTo(other.isSetCoordinateX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinateX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateX, other.coordinateX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinateY()).compareTo(other.isSetCoordinateY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinateY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateY, other.coordinateY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangSection()).compareTo(other.isSetMultiLangSection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangSection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangSection, other.multiLangSection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailType()).compareTo(other.isSetDetailType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailType, other.detailType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMatchAction(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mid:");
    sb.append(this.mid);
    first = false;
    if (isSetTid()) {
      if (!first) sb.append(", ");
      sb.append("tid:");
      sb.append(this.tid);
      first = false;
    }
    if (isSetPid()) {
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
    }
    if (isSetPassedTime()) {
      if (!first) sb.append(", ");
      sb.append("passedTime:");
      sb.append(this.passedTime);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetTeamName()) {
      if (!first) sb.append(", ");
      sb.append("teamName:");
      if (this.teamName == null) {
        sb.append("null");
      } else {
        sb.append(this.teamName);
      }
      first = false;
    }
    if (isSetTeamImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("teamImageUrl:");
      if (this.teamImageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.teamImageUrl);
      }
      first = false;
    }
    if (isSetPlayerName()) {
      if (!first) sb.append(", ");
      sb.append("playerName:");
      if (this.playerName == null) {
        sb.append("null");
      } else {
        sb.append(this.playerName);
      }
      first = false;
    }
    if (isSetPlayerImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("playerImageUrl:");
      if (this.playerImageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.playerImageUrl);
      }
      first = false;
    }
    if (isSetMultiLangTypes()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTypes:");
      if (this.multiLangTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTypes);
      }
      first = false;
    }
    if (isSetMultiLangContents()) {
      if (!first) sb.append(", ");
      sb.append("multiLangContents:");
      if (this.multiLangContents == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangContents);
      }
      first = false;
    }
    if (isSetMultiLangTeamNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTeamNames:");
      if (this.multiLangTeamNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTeamNames);
      }
      first = false;
    }
    if (isSetMultiLangPlayerNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangPlayerNames:");
      if (this.multiLangPlayerNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangPlayerNames);
      }
      first = false;
    }
    if (isSetTypeId()) {
      if (!first) sb.append(", ");
      sb.append("typeId:");
      sb.append(this.typeId);
      first = false;
    }
    if (isSetMultiCounLogos()) {
      if (!first) sb.append(", ");
      sb.append("multiCounLogos:");
      if (this.multiCounLogos == null) {
        sb.append("null");
      } else {
        sb.append(this.multiCounLogos);
      }
      first = false;
    }
    if (isSetDetailTypeId()) {
      if (!first) sb.append(", ");
      sb.append("detailTypeId:");
      sb.append(this.detailTypeId);
      first = false;
    }
    if (isSetMultiLangDetailTypes()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDetailTypes:");
      if (this.multiLangDetailTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDetailTypes);
      }
      first = false;
    }
    if (isSetCoordinateX()) {
      if (!first) sb.append(", ");
      sb.append("coordinateX:");
      if (this.coordinateX == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateX);
      }
      first = false;
    }
    if (isSetCoordinateY()) {
      if (!first) sb.append(", ");
      sb.append("coordinateY:");
      if (this.coordinateY == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinateY);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    if (isSetSection()) {
      if (!first) sb.append(", ");
      sb.append("section:");
      if (this.section == null) {
        sb.append("null");
      } else {
        sb.append(this.section);
      }
      first = false;
    }
    if (isSetMultiLangSection()) {
      if (!first) sb.append(", ");
      sb.append("multiLangSection:");
      if (this.multiLangSection == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangSection);
      }
      first = false;
    }
    if (isSetDetailType()) {
      if (!first) sb.append(", ");
      sb.append("detailType:");
      if (this.detailType == null) {
        sb.append("null");
      } else {
        sb.append(this.detailType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMatchActionStandardSchemeFactory implements SchemeFactory {
    public TMatchActionStandardScheme getScheme() {
      return new TMatchActionStandardScheme();
    }
  }

  private static class TMatchActionStandardScheme extends StandardScheme<TMatchAction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMatchAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mid = iprot.readI64();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tid = iprot.readI64();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pid = iprot.readI64();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PASSED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.passedTime = iprot.readDouble();
              struct.setPassedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamName = iprot.readString();
              struct.setTeamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEAM_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamImageUrl = iprot.readString();
              struct.setTeamImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLAYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playerName = iprot.readString();
              struct.setPlayerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLAYER_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playerImageUrl = iprot.readString();
              struct.setPlayerImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MULTI_LANG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list306 = iprot.readListBegin();
                struct.multiLangTypes = new ArrayList<com.lesports.api.common.LangString>(_list306.size);
                com.lesports.api.common.LangString _elem307;
                for (int _i308 = 0; _i308 < _list306.size; ++_i308)
                {
                  _elem307 = new com.lesports.api.common.LangString();
                  _elem307.read(iprot);
                  struct.multiLangTypes.add(_elem307);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MULTI_LANG_CONTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list309 = iprot.readListBegin();
                struct.multiLangContents = new ArrayList<com.lesports.api.common.LangString>(_list309.size);
                com.lesports.api.common.LangString _elem310;
                for (int _i311 = 0; _i311 < _list309.size; ++_i311)
                {
                  _elem310 = new com.lesports.api.common.LangString();
                  _elem310.read(iprot);
                  struct.multiLangContents.add(_elem310);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangContentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MULTI_LANG_TEAM_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list312 = iprot.readListBegin();
                struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list312.size);
                com.lesports.api.common.LangString _elem313;
                for (int _i314 = 0; _i314 < _list312.size; ++_i314)
                {
                  _elem313 = new com.lesports.api.common.LangString();
                  _elem313.read(iprot);
                  struct.multiLangTeamNames.add(_elem313);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTeamNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MULTI_LANG_PLAYER_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list315 = iprot.readListBegin();
                struct.multiLangPlayerNames = new ArrayList<com.lesports.api.common.LangString>(_list315.size);
                com.lesports.api.common.LangString _elem316;
                for (int _i317 = 0; _i317 < _list315.size; ++_i317)
                {
                  _elem316 = new com.lesports.api.common.LangString();
                  _elem316.read(iprot);
                  struct.multiLangPlayerNames.add(_elem316);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangPlayerNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.typeId = iprot.readI64();
              struct.setTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MULTI_COUN_LOGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list318 = iprot.readListBegin();
                struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list318.size);
                com.lesports.api.common.CounString _elem319;
                for (int _i320 = 0; _i320 < _list318.size; ++_i320)
                {
                  _elem319 = new com.lesports.api.common.CounString();
                  _elem319.read(iprot);
                  struct.multiCounLogos.add(_elem319);
                }
                iprot.readListEnd();
              }
              struct.setMultiCounLogosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DETAIL_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.detailTypeId = iprot.readI64();
              struct.setDetailTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MULTI_LANG_DETAIL_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list321 = iprot.readListBegin();
                struct.multiLangDetailTypes = new ArrayList<com.lesports.api.common.LangString>(_list321.size);
                com.lesports.api.common.LangString _elem322;
                for (int _i323 = 0; _i323 < _list321.size; ++_i323)
                {
                  _elem322 = new com.lesports.api.common.LangString();
                  _elem322.read(iprot);
                  struct.multiLangDetailTypes.add(_elem322);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDetailTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COORDINATE_X
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coordinateX = iprot.readString();
              struct.setCoordinateXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COORDINATE_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coordinateY = iprot.readString();
              struct.setCoordinateYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.time = iprot.readDouble();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.section = iprot.readString();
              struct.setSectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MULTI_LANG_SECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list324 = iprot.readListBegin();
                struct.multiLangSection = new ArrayList<com.lesports.api.common.LangString>(_list324.size);
                com.lesports.api.common.LangString _elem325;
                for (int _i326 = 0; _i326 < _list324.size; ++_i326)
                {
                  _elem325 = new com.lesports.api.common.LangString();
                  _elem325.read(iprot);
                  struct.multiLangSection.add(_elem325);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangSectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DETAIL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailType = iprot.readString();
              struct.setDetailTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMatchAction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeI64(struct.mid);
      oprot.writeFieldEnd();
      if (struct.isSetTid()) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeI64(struct.tid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPid()) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPassedTime()) {
        oprot.writeFieldBegin(PASSED_TIME_FIELD_DESC);
        oprot.writeDouble(struct.passedTime);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamName != null) {
        if (struct.isSetTeamName()) {
          oprot.writeFieldBegin(TEAM_NAME_FIELD_DESC);
          oprot.writeString(struct.teamName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamImageUrl != null) {
        if (struct.isSetTeamImageUrl()) {
          oprot.writeFieldBegin(TEAM_IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.teamImageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerName != null) {
        if (struct.isSetPlayerName()) {
          oprot.writeFieldBegin(PLAYER_NAME_FIELD_DESC);
          oprot.writeString(struct.playerName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.playerImageUrl != null) {
        if (struct.isSetPlayerImageUrl()) {
          oprot.writeFieldBegin(PLAYER_IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.playerImageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTypes != null) {
        if (struct.isSetMultiLangTypes()) {
          oprot.writeFieldBegin(MULTI_LANG_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTypes.size()));
            for (com.lesports.api.common.LangString _iter327 : struct.multiLangTypes)
            {
              _iter327.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangContents != null) {
        if (struct.isSetMultiLangContents()) {
          oprot.writeFieldBegin(MULTI_LANG_CONTENTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangContents.size()));
            for (com.lesports.api.common.LangString _iter328 : struct.multiLangContents)
            {
              _iter328.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTeamNames != null) {
        if (struct.isSetMultiLangTeamNames()) {
          oprot.writeFieldBegin(MULTI_LANG_TEAM_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTeamNames.size()));
            for (com.lesports.api.common.LangString _iter329 : struct.multiLangTeamNames)
            {
              _iter329.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangPlayerNames != null) {
        if (struct.isSetMultiLangPlayerNames()) {
          oprot.writeFieldBegin(MULTI_LANG_PLAYER_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangPlayerNames.size()));
            for (com.lesports.api.common.LangString _iter330 : struct.multiLangPlayerNames)
            {
              _iter330.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTypeId()) {
        oprot.writeFieldBegin(TYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.typeId);
        oprot.writeFieldEnd();
      }
      if (struct.multiCounLogos != null) {
        if (struct.isSetMultiCounLogos()) {
          oprot.writeFieldBegin(MULTI_COUN_LOGOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiCounLogos.size()));
            for (com.lesports.api.common.CounString _iter331 : struct.multiCounLogos)
            {
              _iter331.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDetailTypeId()) {
        oprot.writeFieldBegin(DETAIL_TYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.detailTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangDetailTypes != null) {
        if (struct.isSetMultiLangDetailTypes()) {
          oprot.writeFieldBegin(MULTI_LANG_DETAIL_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDetailTypes.size()));
            for (com.lesports.api.common.LangString _iter332 : struct.multiLangDetailTypes)
            {
              _iter332.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinateX != null) {
        if (struct.isSetCoordinateX()) {
          oprot.writeFieldBegin(COORDINATE_X_FIELD_DESC);
          oprot.writeString(struct.coordinateX);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinateY != null) {
        if (struct.isSetCoordinateY()) {
          oprot.writeFieldBegin(COORDINATE_Y_FIELD_DESC);
          oprot.writeString(struct.coordinateY);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeDouble(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.section != null) {
        if (struct.isSetSection()) {
          oprot.writeFieldBegin(SECTION_FIELD_DESC);
          oprot.writeString(struct.section);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangSection != null) {
        if (struct.isSetMultiLangSection()) {
          oprot.writeFieldBegin(MULTI_LANG_SECTION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangSection.size()));
            for (com.lesports.api.common.LangString _iter333 : struct.multiLangSection)
            {
              _iter333.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.detailType != null) {
        if (struct.isSetDetailType()) {
          oprot.writeFieldBegin(DETAIL_TYPE_FIELD_DESC);
          oprot.writeString(struct.detailType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMatchActionTupleSchemeFactory implements SchemeFactory {
    public TMatchActionTupleScheme getScheme() {
      return new TMatchActionTupleScheme();
    }
  }

  private static class TMatchActionTupleScheme extends TupleScheme<TMatchAction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMatchAction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMid()) {
        optionals.set(1);
      }
      if (struct.isSetTid()) {
        optionals.set(2);
      }
      if (struct.isSetPid()) {
        optionals.set(3);
      }
      if (struct.isSetPassedTime()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetTeamName()) {
        optionals.set(7);
      }
      if (struct.isSetTeamImageUrl()) {
        optionals.set(8);
      }
      if (struct.isSetPlayerName()) {
        optionals.set(9);
      }
      if (struct.isSetPlayerImageUrl()) {
        optionals.set(10);
      }
      if (struct.isSetMultiLangTypes()) {
        optionals.set(11);
      }
      if (struct.isSetMultiLangContents()) {
        optionals.set(12);
      }
      if (struct.isSetMultiLangTeamNames()) {
        optionals.set(13);
      }
      if (struct.isSetMultiLangPlayerNames()) {
        optionals.set(14);
      }
      if (struct.isSetTypeId()) {
        optionals.set(15);
      }
      if (struct.isSetMultiCounLogos()) {
        optionals.set(16);
      }
      if (struct.isSetDetailTypeId()) {
        optionals.set(17);
      }
      if (struct.isSetMultiLangDetailTypes()) {
        optionals.set(18);
      }
      if (struct.isSetCoordinateX()) {
        optionals.set(19);
      }
      if (struct.isSetCoordinateY()) {
        optionals.set(20);
      }
      if (struct.isSetTime()) {
        optionals.set(21);
      }
      if (struct.isSetSection()) {
        optionals.set(22);
      }
      if (struct.isSetMultiLangSection()) {
        optionals.set(23);
      }
      if (struct.isSetDetailType()) {
        optionals.set(24);
      }
      oprot.writeBitSet(optionals, 25);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMid()) {
        oprot.writeI64(struct.mid);
      }
      if (struct.isSetTid()) {
        oprot.writeI64(struct.tid);
      }
      if (struct.isSetPid()) {
        oprot.writeI64(struct.pid);
      }
      if (struct.isSetPassedTime()) {
        oprot.writeDouble(struct.passedTime);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetTeamName()) {
        oprot.writeString(struct.teamName);
      }
      if (struct.isSetTeamImageUrl()) {
        oprot.writeString(struct.teamImageUrl);
      }
      if (struct.isSetPlayerName()) {
        oprot.writeString(struct.playerName);
      }
      if (struct.isSetPlayerImageUrl()) {
        oprot.writeString(struct.playerImageUrl);
      }
      if (struct.isSetMultiLangTypes()) {
        {
          oprot.writeI32(struct.multiLangTypes.size());
          for (com.lesports.api.common.LangString _iter334 : struct.multiLangTypes)
          {
            _iter334.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangContents()) {
        {
          oprot.writeI32(struct.multiLangContents.size());
          for (com.lesports.api.common.LangString _iter335 : struct.multiLangContents)
          {
            _iter335.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangTeamNames()) {
        {
          oprot.writeI32(struct.multiLangTeamNames.size());
          for (com.lesports.api.common.LangString _iter336 : struct.multiLangTeamNames)
          {
            _iter336.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangPlayerNames()) {
        {
          oprot.writeI32(struct.multiLangPlayerNames.size());
          for (com.lesports.api.common.LangString _iter337 : struct.multiLangPlayerNames)
          {
            _iter337.write(oprot);
          }
        }
      }
      if (struct.isSetTypeId()) {
        oprot.writeI64(struct.typeId);
      }
      if (struct.isSetMultiCounLogos()) {
        {
          oprot.writeI32(struct.multiCounLogos.size());
          for (com.lesports.api.common.CounString _iter338 : struct.multiCounLogos)
          {
            _iter338.write(oprot);
          }
        }
      }
      if (struct.isSetDetailTypeId()) {
        oprot.writeI64(struct.detailTypeId);
      }
      if (struct.isSetMultiLangDetailTypes()) {
        {
          oprot.writeI32(struct.multiLangDetailTypes.size());
          for (com.lesports.api.common.LangString _iter339 : struct.multiLangDetailTypes)
          {
            _iter339.write(oprot);
          }
        }
      }
      if (struct.isSetCoordinateX()) {
        oprot.writeString(struct.coordinateX);
      }
      if (struct.isSetCoordinateY()) {
        oprot.writeString(struct.coordinateY);
      }
      if (struct.isSetTime()) {
        oprot.writeDouble(struct.time);
      }
      if (struct.isSetSection()) {
        oprot.writeString(struct.section);
      }
      if (struct.isSetMultiLangSection()) {
        {
          oprot.writeI32(struct.multiLangSection.size());
          for (com.lesports.api.common.LangString _iter340 : struct.multiLangSection)
          {
            _iter340.write(oprot);
          }
        }
      }
      if (struct.isSetDetailType()) {
        oprot.writeString(struct.detailType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMatchAction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(25);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mid = iprot.readI64();
        struct.setMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tid = iprot.readI64();
        struct.setTidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pid = iprot.readI64();
        struct.setPidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.passedTime = iprot.readDouble();
        struct.setPassedTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.teamName = iprot.readString();
        struct.setTeamNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.teamImageUrl = iprot.readString();
        struct.setTeamImageUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.playerName = iprot.readString();
        struct.setPlayerNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.playerImageUrl = iprot.readString();
        struct.setPlayerImageUrlIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list341 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTypes = new ArrayList<com.lesports.api.common.LangString>(_list341.size);
          com.lesports.api.common.LangString _elem342;
          for (int _i343 = 0; _i343 < _list341.size; ++_i343)
          {
            _elem342 = new com.lesports.api.common.LangString();
            _elem342.read(iprot);
            struct.multiLangTypes.add(_elem342);
          }
        }
        struct.setMultiLangTypesIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list344 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangContents = new ArrayList<com.lesports.api.common.LangString>(_list344.size);
          com.lesports.api.common.LangString _elem345;
          for (int _i346 = 0; _i346 < _list344.size; ++_i346)
          {
            _elem345 = new com.lesports.api.common.LangString();
            _elem345.read(iprot);
            struct.multiLangContents.add(_elem345);
          }
        }
        struct.setMultiLangContentsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list347 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list347.size);
          com.lesports.api.common.LangString _elem348;
          for (int _i349 = 0; _i349 < _list347.size; ++_i349)
          {
            _elem348 = new com.lesports.api.common.LangString();
            _elem348.read(iprot);
            struct.multiLangTeamNames.add(_elem348);
          }
        }
        struct.setMultiLangTeamNamesIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list350 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangPlayerNames = new ArrayList<com.lesports.api.common.LangString>(_list350.size);
          com.lesports.api.common.LangString _elem351;
          for (int _i352 = 0; _i352 < _list350.size; ++_i352)
          {
            _elem351 = new com.lesports.api.common.LangString();
            _elem351.read(iprot);
            struct.multiLangPlayerNames.add(_elem351);
          }
        }
        struct.setMultiLangPlayerNamesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.typeId = iprot.readI64();
        struct.setTypeIdIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list353.size);
          com.lesports.api.common.CounString _elem354;
          for (int _i355 = 0; _i355 < _list353.size; ++_i355)
          {
            _elem354 = new com.lesports.api.common.CounString();
            _elem354.read(iprot);
            struct.multiCounLogos.add(_elem354);
          }
        }
        struct.setMultiCounLogosIsSet(true);
      }
      if (incoming.get(17)) {
        struct.detailTypeId = iprot.readI64();
        struct.setDetailTypeIdIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list356 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDetailTypes = new ArrayList<com.lesports.api.common.LangString>(_list356.size);
          com.lesports.api.common.LangString _elem357;
          for (int _i358 = 0; _i358 < _list356.size; ++_i358)
          {
            _elem357 = new com.lesports.api.common.LangString();
            _elem357.read(iprot);
            struct.multiLangDetailTypes.add(_elem357);
          }
        }
        struct.setMultiLangDetailTypesIsSet(true);
      }
      if (incoming.get(19)) {
        struct.coordinateX = iprot.readString();
        struct.setCoordinateXIsSet(true);
      }
      if (incoming.get(20)) {
        struct.coordinateY = iprot.readString();
        struct.setCoordinateYIsSet(true);
      }
      if (incoming.get(21)) {
        struct.time = iprot.readDouble();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.section = iprot.readString();
        struct.setSectionIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list359 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangSection = new ArrayList<com.lesports.api.common.LangString>(_list359.size);
          com.lesports.api.common.LangString _elem360;
          for (int _i361 = 0; _i361 < _list359.size; ++_i361)
          {
            _elem360 = new com.lesports.api.common.LangString();
            _elem360.read(iprot);
            struct.multiLangSection.add(_elem360);
          }
        }
        struct.setMultiLangSectionIsSet(true);
      }
      if (incoming.get(24)) {
        struct.detailType = iprot.readString();
        struct.setDetailTypeIsSet(true);
      }
    }
  }

}

