/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TMatchReview implements org.apache.thrift.TBase<TMatchReview, TMatchReview._Fields>, java.io.Serializable, Cloneable, Comparable<TMatchReview> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMatchReview");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONFRONTATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("confrontations", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MATCH_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("matchInfos", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATE_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("updateAt", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TMatchReviewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TMatchReviewTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private List<THistoryMatch> confrontations; // optional
  private List<TMatchInfo> matchInfos; // optional
  private Map<String,String> stats; // optional
  private String updateAt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MULTI_LANG_NAMES((short)3, "multiLangNames"),
    CONFRONTATIONS((short)4, "confrontations"),
    MATCH_INFOS((short)5, "matchInfos"),
    STATS((short)6, "stats"),
    UPDATE_AT((short)7, "updateAt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 4: // CONFRONTATIONS
          return CONFRONTATIONS;
        case 5: // MATCH_INFOS
          return MATCH_INFOS;
        case 6: // STATS
          return STATS;
        case 7: // UPDATE_AT
          return UPDATE_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.MULTI_LANG_NAMES,_Fields.CONFRONTATIONS,_Fields.MATCH_INFOS,_Fields.STATS,_Fields.UPDATE_AT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CONFRONTATIONS, new org.apache.thrift.meta_data.FieldMetaData("confrontations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THistoryMatch.class))));
    tmpMap.put(_Fields.MATCH_INFOS, new org.apache.thrift.meta_data.FieldMetaData("matchInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMatchInfo.class))));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UPDATE_AT, new org.apache.thrift.meta_data.FieldMetaData("updateAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMatchReview.class, metaDataMap);
  }

  public TMatchReview() {
  }

  public TMatchReview(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMatchReview(TMatchReview other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetConfrontations()) {
      List<THistoryMatch> __this__confrontations = new ArrayList<THistoryMatch>(other.confrontations.size());
      for (THistoryMatch other_element : other.confrontations) {
        __this__confrontations.add(new THistoryMatch(other_element));
      }
      this.confrontations = __this__confrontations;
    }
    if (other.isSetMatchInfos()) {
      List<TMatchInfo> __this__matchInfos = new ArrayList<TMatchInfo>(other.matchInfos.size());
      for (TMatchInfo other_element : other.matchInfos) {
        __this__matchInfos.add(new TMatchInfo(other_element));
      }
      this.matchInfos = __this__matchInfos;
    }
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    if (other.isSetUpdateAt()) {
      this.updateAt = other.updateAt;
    }
  }

  public TMatchReview deepCopy() {
    return new TMatchReview(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.multiLangNames = null;
    this.confrontations = null;
    this.matchInfos = null;
    this.stats = null;
    this.updateAt = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getConfrontationsSize() {
    return (this.confrontations == null) ? 0 : this.confrontations.size();
  }

  public java.util.Iterator<THistoryMatch> getConfrontationsIterator() {
    return (this.confrontations == null) ? null : this.confrontations.iterator();
  }

  public void addToConfrontations(THistoryMatch elem) {
    if (this.confrontations == null) {
      this.confrontations = new ArrayList<THistoryMatch>();
    }
    this.confrontations.add(elem);
  }

  public List<THistoryMatch> getConfrontations() {
    return this.confrontations;
  }

  public void setConfrontations(List<THistoryMatch> confrontations) {
    this.confrontations = confrontations;
  }

  public void unsetConfrontations() {
    this.confrontations = null;
  }

  /** Returns true if field confrontations is set (has been assigned a value) and false otherwise */
  public boolean isSetConfrontations() {
    return this.confrontations != null;
  }

  public void setConfrontationsIsSet(boolean value) {
    if (!value) {
      this.confrontations = null;
    }
  }

  public int getMatchInfosSize() {
    return (this.matchInfos == null) ? 0 : this.matchInfos.size();
  }

  public java.util.Iterator<TMatchInfo> getMatchInfosIterator() {
    return (this.matchInfos == null) ? null : this.matchInfos.iterator();
  }

  public void addToMatchInfos(TMatchInfo elem) {
    if (this.matchInfos == null) {
      this.matchInfos = new ArrayList<TMatchInfo>();
    }
    this.matchInfos.add(elem);
  }

  public List<TMatchInfo> getMatchInfos() {
    return this.matchInfos;
  }

  public void setMatchInfos(List<TMatchInfo> matchInfos) {
    this.matchInfos = matchInfos;
  }

  public void unsetMatchInfos() {
    this.matchInfos = null;
  }

  /** Returns true if field matchInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchInfos() {
    return this.matchInfos != null;
  }

  public void setMatchInfosIsSet(boolean value) {
    if (!value) {
      this.matchInfos = null;
    }
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public String getUpdateAt() {
    return this.updateAt;
  }

  public void setUpdateAt(String updateAt) {
    this.updateAt = updateAt;
  }

  public void unsetUpdateAt() {
    this.updateAt = null;
  }

  /** Returns true if field updateAt is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateAt() {
    return this.updateAt != null;
  }

  public void setUpdateAtIsSet(boolean value) {
    if (!value) {
      this.updateAt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CONFRONTATIONS:
      if (value == null) {
        unsetConfrontations();
      } else {
        setConfrontations((List<THistoryMatch>)value);
      }
      break;

    case MATCH_INFOS:
      if (value == null) {
        unsetMatchInfos();
      } else {
        setMatchInfos((List<TMatchInfo>)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case UPDATE_AT:
      if (value == null) {
        unsetUpdateAt();
      } else {
        setUpdateAt((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case CONFRONTATIONS:
      return getConfrontations();

    case MATCH_INFOS:
      return getMatchInfos();

    case STATS:
      return getStats();

    case UPDATE_AT:
      return getUpdateAt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case CONFRONTATIONS:
      return isSetConfrontations();
    case MATCH_INFOS:
      return isSetMatchInfos();
    case STATS:
      return isSetStats();
    case UPDATE_AT:
      return isSetUpdateAt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMatchReview)
      return this.equals((TMatchReview)that);
    return false;
  }

  public boolean equals(TMatchReview that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_confrontations = true && this.isSetConfrontations();
    boolean that_present_confrontations = true && that.isSetConfrontations();
    if (this_present_confrontations || that_present_confrontations) {
      if (!(this_present_confrontations && that_present_confrontations))
        return false;
      if (!this.confrontations.equals(that.confrontations))
        return false;
    }

    boolean this_present_matchInfos = true && this.isSetMatchInfos();
    boolean that_present_matchInfos = true && that.isSetMatchInfos();
    if (this_present_matchInfos || that_present_matchInfos) {
      if (!(this_present_matchInfos && that_present_matchInfos))
        return false;
      if (!this.matchInfos.equals(that.matchInfos))
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_updateAt = true && this.isSetUpdateAt();
    boolean that_present_updateAt = true && that.isSetUpdateAt();
    if (this_present_updateAt || that_present_updateAt) {
      if (!(this_present_updateAt && that_present_updateAt))
        return false;
      if (!this.updateAt.equals(that.updateAt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_confrontations = true && (isSetConfrontations());
    list.add(present_confrontations);
    if (present_confrontations)
      list.add(confrontations);

    boolean present_matchInfos = true && (isSetMatchInfos());
    list.add(present_matchInfos);
    if (present_matchInfos)
      list.add(matchInfos);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_updateAt = true && (isSetUpdateAt());
    list.add(present_updateAt);
    if (present_updateAt)
      list.add(updateAt);

    return list.hashCode();
  }

  @Override
  public int compareTo(TMatchReview other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfrontations()).compareTo(other.isSetConfrontations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfrontations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confrontations, other.confrontations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchInfos()).compareTo(other.isSetMatchInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchInfos, other.matchInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateAt()).compareTo(other.isSetUpdateAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateAt, other.updateAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TMatchReview(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetConfrontations()) {
      if (!first) sb.append(", ");
      sb.append("confrontations:");
      if (this.confrontations == null) {
        sb.append("null");
      } else {
        sb.append(this.confrontations);
      }
      first = false;
    }
    if (isSetMatchInfos()) {
      if (!first) sb.append(", ");
      sb.append("matchInfos:");
      if (this.matchInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.matchInfos);
      }
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetUpdateAt()) {
      if (!first) sb.append(", ");
      sb.append("updateAt:");
      if (this.updateAt == null) {
        sb.append("null");
      } else {
        sb.append(this.updateAt);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMatchReviewStandardSchemeFactory implements SchemeFactory {
    public TMatchReviewStandardScheme getScheme() {
      return new TMatchReviewStandardScheme();
    }
  }

  private static class TMatchReviewStandardScheme extends StandardScheme<TMatchReview> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMatchReview struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list66.size);
                com.lesports.api.common.LangString _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = new com.lesports.api.common.LangString();
                  _elem67.read(iprot);
                  struct.multiLangNames.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONFRONTATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
                struct.confrontations = new ArrayList<THistoryMatch>(_list69.size);
                THistoryMatch _elem70;
                for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                {
                  _elem70 = new THistoryMatch();
                  _elem70.read(iprot);
                  struct.confrontations.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setConfrontationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATCH_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.matchInfos = new ArrayList<TMatchInfo>(_list72.size);
                TMatchInfo _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new TMatchInfo();
                  _elem73.read(iprot);
                  struct.matchInfos.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setMatchInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map75 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map75.size);
                String _key76;
                String _val77;
                for (int _i78 = 0; _i78 < _map75.size; ++_i78)
                {
                  _key76 = iprot.readString();
                  _val77 = iprot.readString();
                  struct.stats.put(_key76, _val77);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATE_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateAt = iprot.readString();
              struct.setUpdateAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMatchReview struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter79 : struct.multiLangNames)
            {
              _iter79.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.confrontations != null) {
        if (struct.isSetConfrontations()) {
          oprot.writeFieldBegin(CONFRONTATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.confrontations.size()));
            for (THistoryMatch _iter80 : struct.confrontations)
            {
              _iter80.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchInfos != null) {
        if (struct.isSetMatchInfos()) {
          oprot.writeFieldBegin(MATCH_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchInfos.size()));
            for (TMatchInfo _iter81 : struct.matchInfos)
            {
              _iter81.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter82 : struct.stats.entrySet())
            {
              oprot.writeString(_iter82.getKey());
              oprot.writeString(_iter82.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateAt != null) {
        if (struct.isSetUpdateAt()) {
          oprot.writeFieldBegin(UPDATE_AT_FIELD_DESC);
          oprot.writeString(struct.updateAt);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMatchReviewTupleSchemeFactory implements SchemeFactory {
    public TMatchReviewTupleScheme getScheme() {
      return new TMatchReviewTupleScheme();
    }
  }

  private static class TMatchReviewTupleScheme extends TupleScheme<TMatchReview> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMatchReview struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(2);
      }
      if (struct.isSetConfrontations()) {
        optionals.set(3);
      }
      if (struct.isSetMatchInfos()) {
        optionals.set(4);
      }
      if (struct.isSetStats()) {
        optionals.set(5);
      }
      if (struct.isSetUpdateAt()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter83 : struct.multiLangNames)
          {
            _iter83.write(oprot);
          }
        }
      }
      if (struct.isSetConfrontations()) {
        {
          oprot.writeI32(struct.confrontations.size());
          for (THistoryMatch _iter84 : struct.confrontations)
          {
            _iter84.write(oprot);
          }
        }
      }
      if (struct.isSetMatchInfos()) {
        {
          oprot.writeI32(struct.matchInfos.size());
          for (TMatchInfo _iter85 : struct.matchInfos)
          {
            _iter85.write(oprot);
          }
        }
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter86 : struct.stats.entrySet())
          {
            oprot.writeString(_iter86.getKey());
            oprot.writeString(_iter86.getValue());
          }
        }
      }
      if (struct.isSetUpdateAt()) {
        oprot.writeString(struct.updateAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMatchReview struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list87.size);
          com.lesports.api.common.LangString _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new com.lesports.api.common.LangString();
            _elem88.read(iprot);
            struct.multiLangNames.add(_elem88);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.confrontations = new ArrayList<THistoryMatch>(_list90.size);
          THistoryMatch _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new THistoryMatch();
            _elem91.read(iprot);
            struct.confrontations.add(_elem91);
          }
        }
        struct.setConfrontationsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchInfos = new ArrayList<TMatchInfo>(_list93.size);
          TMatchInfo _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new TMatchInfo();
            _elem94.read(iprot);
            struct.matchInfos.add(_elem94);
          }
        }
        struct.setMatchInfosIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map96.size);
          String _key97;
          String _val98;
          for (int _i99 = 0; _i99 < _map96.size; ++_i99)
          {
            _key97 = iprot.readString();
            _val98 = iprot.readString();
            struct.stats.put(_key97, _val98);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updateAt = iprot.readString();
        struct.setUpdateAtIsSet(true);
      }
    }
  }

}

