/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-9")
public class TPlayer implements org.apache.thrift.TBase<TPlayer, TPlayer._Fields>, java.io.Serializable, Cloneable, Comparable<TPlayer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlayer");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NATIONALITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNationalities", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCities", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField BACKGROUP_IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("backgroupImageUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFType", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField GAME_STYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameSType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDesc", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NICKNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNicknames", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BG_WEB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("bgWebUrl", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SQUAD_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("squadOrder", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField BOLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boleId", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGameFType", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField NATIONAL_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("nationalTeam", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField CLUB_TEAM_FIELD_DESC = new org.apache.thrift.protocol.TField("clubTeam", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFTypeId", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField CAREER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("careerValue", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CAREER_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCareerValue", org.apache.thrift.protocol.TType.LIST, (short)32);
  private static final org.apache.thrift.protocol.TField CAREER_TEAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("careerTeams", org.apache.thrift.protocol.TType.LIST, (short)33);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_POSITION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangPositionNames", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField EXPERIENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("experience", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField DRAFT_FIELD_DESC = new org.apache.thrift.protocol.TField("draft", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DRAFT_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDraft", org.apache.thrift.protocol.TType.LIST, (short)37);
  private static final org.apache.thrift.protocol.TField SALARY_FIELD_DESC = new org.apache.thrift.protocol.TField("salary", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("school", org.apache.thrift.protocol.TType.STRING, (short)39);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlayerTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private int height; // optional
  private int weight; // optional
  private String birthday; // optional
  private int gender; // optional
  private String nationality; // optional
  private List<com.lesports.api.common.LangString> multiLangNationalities; // optional
  private String city; // optional
  private List<com.lesports.api.common.LangString> multiLangCities; // optional
  private String imageUrl; // optional
  private String backgroupImageUrl; // optional
  private String gameFType; // optional
  private String gameSType; // optional
  private String desc; // optional
  private List<com.lesports.api.common.LangString> multiLangDesc; // optional
  private String nickname; // optional
  private List<com.lesports.api.common.LangString> multiLangNicknames; // optional
  private int number; // optional
  private String position; // optional
  private String bgWebUrl; // optional
  private int squadOrder; // optional
  private long boleId; // optional
  private long positionId; // optional
  private List<com.lesports.api.common.LangString> multiLangGameFType; // optional
  private PlayingTeam nationalTeam; // optional
  private PlayingTeam clubTeam; // optional
  private long gameFTypeId; // optional
  private String careerValue; // optional
  private List<com.lesports.api.common.LangString> multiLangCareerValue; // optional
  private List<PlayingTeam> careerTeams; // optional
  private List<com.lesports.api.common.LangString> multiLangPositionNames; // optional
  private String experience; // optional
  private String draft; // optional
  private List<com.lesports.api.common.LangString> multiLangDraft; // optional
  private String salary; // optional
  private String school; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MULTI_LANG_NAMES((short)3, "multiLangNames"),
    HEIGHT((short)4, "height"),
    WEIGHT((short)5, "weight"),
    BIRTHDAY((short)6, "birthday"),
    GENDER((short)7, "gender"),
    NATIONALITY((short)8, "nationality"),
    MULTI_LANG_NATIONALITIES((short)9, "multiLangNationalities"),
    CITY((short)10, "city"),
    MULTI_LANG_CITIES((short)11, "multiLangCities"),
    IMAGE_URL((short)12, "imageUrl"),
    BACKGROUP_IMAGE_URL((short)13, "backgroupImageUrl"),
    GAME_FTYPE((short)14, "gameFType"),
    GAME_STYPE((short)15, "gameSType"),
    DESC((short)16, "desc"),
    MULTI_LANG_DESC((short)17, "multiLangDesc"),
    NICKNAME((short)18, "nickname"),
    MULTI_LANG_NICKNAMES((short)19, "multiLangNicknames"),
    NUMBER((short)21, "number"),
    POSITION((short)22, "position"),
    BG_WEB_URL((short)23, "bgWebUrl"),
    SQUAD_ORDER((short)24, "squadOrder"),
    BOLE_ID((short)25, "boleId"),
    POSITION_ID((short)26, "positionId"),
    MULTI_LANG_GAME_FTYPE((short)27, "multiLangGameFType"),
    NATIONAL_TEAM((short)28, "nationalTeam"),
    CLUB_TEAM((short)29, "clubTeam"),
    GAME_FTYPE_ID((short)30, "gameFTypeId"),
    CAREER_VALUE((short)31, "careerValue"),
    MULTI_LANG_CAREER_VALUE((short)32, "multiLangCareerValue"),
    CAREER_TEAMS((short)33, "careerTeams"),
    MULTI_LANG_POSITION_NAMES((short)34, "multiLangPositionNames"),
    EXPERIENCE((short)35, "experience"),
    DRAFT((short)36, "draft"),
    MULTI_LANG_DRAFT((short)37, "multiLangDraft"),
    SALARY((short)38, "salary"),
    SCHOOL((short)39, "school");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 4: // HEIGHT
          return HEIGHT;
        case 5: // WEIGHT
          return WEIGHT;
        case 6: // BIRTHDAY
          return BIRTHDAY;
        case 7: // GENDER
          return GENDER;
        case 8: // NATIONALITY
          return NATIONALITY;
        case 9: // MULTI_LANG_NATIONALITIES
          return MULTI_LANG_NATIONALITIES;
        case 10: // CITY
          return CITY;
        case 11: // MULTI_LANG_CITIES
          return MULTI_LANG_CITIES;
        case 12: // IMAGE_URL
          return IMAGE_URL;
        case 13: // BACKGROUP_IMAGE_URL
          return BACKGROUP_IMAGE_URL;
        case 14: // GAME_FTYPE
          return GAME_FTYPE;
        case 15: // GAME_STYPE
          return GAME_STYPE;
        case 16: // DESC
          return DESC;
        case 17: // MULTI_LANG_DESC
          return MULTI_LANG_DESC;
        case 18: // NICKNAME
          return NICKNAME;
        case 19: // MULTI_LANG_NICKNAMES
          return MULTI_LANG_NICKNAMES;
        case 21: // NUMBER
          return NUMBER;
        case 22: // POSITION
          return POSITION;
        case 23: // BG_WEB_URL
          return BG_WEB_URL;
        case 24: // SQUAD_ORDER
          return SQUAD_ORDER;
        case 25: // BOLE_ID
          return BOLE_ID;
        case 26: // POSITION_ID
          return POSITION_ID;
        case 27: // MULTI_LANG_GAME_FTYPE
          return MULTI_LANG_GAME_FTYPE;
        case 28: // NATIONAL_TEAM
          return NATIONAL_TEAM;
        case 29: // CLUB_TEAM
          return CLUB_TEAM;
        case 30: // GAME_FTYPE_ID
          return GAME_FTYPE_ID;
        case 31: // CAREER_VALUE
          return CAREER_VALUE;
        case 32: // MULTI_LANG_CAREER_VALUE
          return MULTI_LANG_CAREER_VALUE;
        case 33: // CAREER_TEAMS
          return CAREER_TEAMS;
        case 34: // MULTI_LANG_POSITION_NAMES
          return MULTI_LANG_POSITION_NAMES;
        case 35: // EXPERIENCE
          return EXPERIENCE;
        case 36: // DRAFT
          return DRAFT;
        case 37: // MULTI_LANG_DRAFT
          return MULTI_LANG_DRAFT;
        case 38: // SALARY
          return SALARY;
        case 39: // SCHOOL
          return SCHOOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private static final int __WEIGHT_ISSET_ID = 2;
  private static final int __GENDER_ISSET_ID = 3;
  private static final int __NUMBER_ISSET_ID = 4;
  private static final int __SQUADORDER_ISSET_ID = 5;
  private static final int __BOLEID_ISSET_ID = 6;
  private static final int __POSITIONID_ISSET_ID = 7;
  private static final int __GAMEFTYPEID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.MULTI_LANG_NAMES,_Fields.HEIGHT,_Fields.WEIGHT,_Fields.BIRTHDAY,_Fields.GENDER,_Fields.NATIONALITY,_Fields.MULTI_LANG_NATIONALITIES,_Fields.CITY,_Fields.MULTI_LANG_CITIES,_Fields.IMAGE_URL,_Fields.BACKGROUP_IMAGE_URL,_Fields.GAME_FTYPE,_Fields.GAME_STYPE,_Fields.DESC,_Fields.MULTI_LANG_DESC,_Fields.NICKNAME,_Fields.MULTI_LANG_NICKNAMES,_Fields.NUMBER,_Fields.POSITION,_Fields.BG_WEB_URL,_Fields.SQUAD_ORDER,_Fields.BOLE_ID,_Fields.POSITION_ID,_Fields.MULTI_LANG_GAME_FTYPE,_Fields.NATIONAL_TEAM,_Fields.CLUB_TEAM,_Fields.GAME_FTYPE_ID,_Fields.CAREER_VALUE,_Fields.MULTI_LANG_CAREER_VALUE,_Fields.CAREER_TEAMS,_Fields.MULTI_LANG_POSITION_NAMES,_Fields.EXPERIENCE,_Fields.DRAFT,_Fields.MULTI_LANG_DRAFT,_Fields.SALARY,_Fields.SCHOOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NATIONALITIES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNationalities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_CITIES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKGROUP_IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("backgroupImageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GAME_STYPE, new org.apache.thrift.meta_data.FieldMetaData("gameSType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_DESC, new org.apache.thrift.meta_data.FieldMetaData("multiLangDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NICKNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNicknames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BG_WEB_URL, new org.apache.thrift.meta_data.FieldMetaData("bgWebUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQUAD_ORDER, new org.apache.thrift.meta_data.FieldMetaData("squadOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOLE_ID, new org.apache.thrift.meta_data.FieldMetaData("boleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_LANG_GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("multiLangGameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.NATIONAL_TEAM, new org.apache.thrift.meta_data.FieldMetaData("nationalTeam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "PlayingTeam")));
    tmpMap.put(_Fields.CLUB_TEAM, new org.apache.thrift.meta_data.FieldMetaData("clubTeam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "PlayingTeam")));
    tmpMap.put(_Fields.GAME_FTYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("gameFTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAREER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("careerValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_CAREER_VALUE, new org.apache.thrift.meta_data.FieldMetaData("multiLangCareerValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CAREER_TEAMS, new org.apache.thrift.meta_data.FieldMetaData("careerTeams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "PlayingTeam"))));
    tmpMap.put(_Fields.MULTI_LANG_POSITION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangPositionNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.EXPERIENCE, new org.apache.thrift.meta_data.FieldMetaData("experience", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRAFT, new org.apache.thrift.meta_data.FieldMetaData("draft", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_DRAFT, new org.apache.thrift.meta_data.FieldMetaData("multiLangDraft", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.SALARY, new org.apache.thrift.meta_data.FieldMetaData("salary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("school", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlayer.class, metaDataMap);
  }

  public TPlayer() {
  }

  public TPlayer(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlayer(TPlayer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    this.height = other.height;
    this.weight = other.weight;
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    this.gender = other.gender;
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetMultiLangNationalities()) {
      List<com.lesports.api.common.LangString> __this__multiLangNationalities = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNationalities.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNationalities) {
        __this__multiLangNationalities.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNationalities = __this__multiLangNationalities;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetMultiLangCities()) {
      List<com.lesports.api.common.LangString> __this__multiLangCities = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCities.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCities) {
        __this__multiLangCities.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCities = __this__multiLangCities;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.isSetBackgroupImageUrl()) {
      this.backgroupImageUrl = other.backgroupImageUrl;
    }
    if (other.isSetGameFType()) {
      this.gameFType = other.gameFType;
    }
    if (other.isSetGameSType()) {
      this.gameSType = other.gameSType;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetMultiLangDesc()) {
      List<com.lesports.api.common.LangString> __this__multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDesc.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDesc) {
        __this__multiLangDesc.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDesc = __this__multiLangDesc;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetMultiLangNicknames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNicknames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNicknames) {
        __this__multiLangNicknames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNicknames = __this__multiLangNicknames;
    }
    this.number = other.number;
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    if (other.isSetBgWebUrl()) {
      this.bgWebUrl = other.bgWebUrl;
    }
    this.squadOrder = other.squadOrder;
    this.boleId = other.boleId;
    this.positionId = other.positionId;
    if (other.isSetMultiLangGameFType()) {
      List<com.lesports.api.common.LangString> __this__multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGameFType.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGameFType) {
        __this__multiLangGameFType.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGameFType = __this__multiLangGameFType;
    }
    if (other.isSetNationalTeam()) {
      this.nationalTeam = other.nationalTeam;
    }
    if (other.isSetClubTeam()) {
      this.clubTeam = other.clubTeam;
    }
    this.gameFTypeId = other.gameFTypeId;
    if (other.isSetCareerValue()) {
      this.careerValue = other.careerValue;
    }
    if (other.isSetMultiLangCareerValue()) {
      List<com.lesports.api.common.LangString> __this__multiLangCareerValue = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCareerValue.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCareerValue) {
        __this__multiLangCareerValue.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCareerValue = __this__multiLangCareerValue;
    }
    if (other.isSetCareerTeams()) {
      List<PlayingTeam> __this__careerTeams = new ArrayList<PlayingTeam>(other.careerTeams.size());
      for (PlayingTeam other_element : other.careerTeams) {
        __this__careerTeams.add(other_element);
      }
      this.careerTeams = __this__careerTeams;
    }
    if (other.isSetMultiLangPositionNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangPositionNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangPositionNames) {
        __this__multiLangPositionNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangPositionNames = __this__multiLangPositionNames;
    }
    if (other.isSetExperience()) {
      this.experience = other.experience;
    }
    if (other.isSetDraft()) {
      this.draft = other.draft;
    }
    if (other.isSetMultiLangDraft()) {
      List<com.lesports.api.common.LangString> __this__multiLangDraft = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDraft.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDraft) {
        __this__multiLangDraft.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDraft = __this__multiLangDraft;
    }
    if (other.isSetSalary()) {
      this.salary = other.salary;
    }
    if (other.isSetSchool()) {
      this.school = other.school;
    }
  }

  public TPlayer deepCopy() {
    return new TPlayer(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.multiLangNames = null;
    setHeightIsSet(false);
    this.height = 0;
    setWeightIsSet(false);
    this.weight = 0;
    this.birthday = null;
    setGenderIsSet(false);
    this.gender = 0;
    this.nationality = null;
    this.multiLangNationalities = null;
    this.city = null;
    this.multiLangCities = null;
    this.imageUrl = null;
    this.backgroupImageUrl = null;
    this.gameFType = null;
    this.gameSType = null;
    this.desc = null;
    this.multiLangDesc = null;
    this.nickname = null;
    this.multiLangNicknames = null;
    setNumberIsSet(false);
    this.number = 0;
    this.position = null;
    this.bgWebUrl = null;
    setSquadOrderIsSet(false);
    this.squadOrder = 0;
    setBoleIdIsSet(false);
    this.boleId = 0;
    setPositionIdIsSet(false);
    this.positionId = 0;
    this.multiLangGameFType = null;
    this.nationalTeam = null;
    this.clubTeam = null;
    setGameFTypeIdIsSet(false);
    this.gameFTypeId = 0;
    this.careerValue = null;
    this.multiLangCareerValue = null;
    this.careerTeams = null;
    this.multiLangPositionNames = null;
    this.experience = null;
    this.draft = null;
    this.multiLangDraft = null;
    this.salary = null;
    this.school = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public int getHeight() {
    return this.height;
  }

  public void setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public int getWeight() {
    return this.weight;
  }

  public void setWeight(int weight) {
    this.weight = weight;
    setWeightIsSet(true);
  }

  public void unsetWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public String getBirthday() {
    return this.birthday;
  }

  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public int getGender() {
    return this.gender;
  }

  public void setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  public String getNationality() {
    return this.nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  public int getMultiLangNationalitiesSize() {
    return (this.multiLangNationalities == null) ? 0 : this.multiLangNationalities.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNationalitiesIterator() {
    return (this.multiLangNationalities == null) ? null : this.multiLangNationalities.iterator();
  }

  public void addToMultiLangNationalities(com.lesports.api.common.LangString elem) {
    if (this.multiLangNationalities == null) {
      this.multiLangNationalities = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNationalities.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNationalities() {
    return this.multiLangNationalities;
  }

  public void setMultiLangNationalities(List<com.lesports.api.common.LangString> multiLangNationalities) {
    this.multiLangNationalities = multiLangNationalities;
  }

  public void unsetMultiLangNationalities() {
    this.multiLangNationalities = null;
  }

  /** Returns true if field multiLangNationalities is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNationalities() {
    return this.multiLangNationalities != null;
  }

  public void setMultiLangNationalitiesIsSet(boolean value) {
    if (!value) {
      this.multiLangNationalities = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getMultiLangCitiesSize() {
    return (this.multiLangCities == null) ? 0 : this.multiLangCities.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCitiesIterator() {
    return (this.multiLangCities == null) ? null : this.multiLangCities.iterator();
  }

  public void addToMultiLangCities(com.lesports.api.common.LangString elem) {
    if (this.multiLangCities == null) {
      this.multiLangCities = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCities.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCities() {
    return this.multiLangCities;
  }

  public void setMultiLangCities(List<com.lesports.api.common.LangString> multiLangCities) {
    this.multiLangCities = multiLangCities;
  }

  public void unsetMultiLangCities() {
    this.multiLangCities = null;
  }

  /** Returns true if field multiLangCities is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCities() {
    return this.multiLangCities != null;
  }

  public void setMultiLangCitiesIsSet(boolean value) {
    if (!value) {
      this.multiLangCities = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  public String getBackgroupImageUrl() {
    return this.backgroupImageUrl;
  }

  public void setBackgroupImageUrl(String backgroupImageUrl) {
    this.backgroupImageUrl = backgroupImageUrl;
  }

  public void unsetBackgroupImageUrl() {
    this.backgroupImageUrl = null;
  }

  /** Returns true if field backgroupImageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetBackgroupImageUrl() {
    return this.backgroupImageUrl != null;
  }

  public void setBackgroupImageUrlIsSet(boolean value) {
    if (!value) {
      this.backgroupImageUrl = null;
    }
  }

  public String getGameFType() {
    return this.gameFType;
  }

  public void setGameFType(String gameFType) {
    this.gameFType = gameFType;
  }

  public void unsetGameFType() {
    this.gameFType = null;
  }

  /** Returns true if field gameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFType() {
    return this.gameFType != null;
  }

  public void setGameFTypeIsSet(boolean value) {
    if (!value) {
      this.gameFType = null;
    }
  }

  public String getGameSType() {
    return this.gameSType;
  }

  public void setGameSType(String gameSType) {
    this.gameSType = gameSType;
  }

  public void unsetGameSType() {
    this.gameSType = null;
  }

  /** Returns true if field gameSType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameSType() {
    return this.gameSType != null;
  }

  public void setGameSTypeIsSet(boolean value) {
    if (!value) {
      this.gameSType = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getMultiLangDescSize() {
    return (this.multiLangDesc == null) ? 0 : this.multiLangDesc.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDescIterator() {
    return (this.multiLangDesc == null) ? null : this.multiLangDesc.iterator();
  }

  public void addToMultiLangDesc(com.lesports.api.common.LangString elem) {
    if (this.multiLangDesc == null) {
      this.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDesc.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDesc() {
    return this.multiLangDesc;
  }

  public void setMultiLangDesc(List<com.lesports.api.common.LangString> multiLangDesc) {
    this.multiLangDesc = multiLangDesc;
  }

  public void unsetMultiLangDesc() {
    this.multiLangDesc = null;
  }

  /** Returns true if field multiLangDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDesc() {
    return this.multiLangDesc != null;
  }

  public void setMultiLangDescIsSet(boolean value) {
    if (!value) {
      this.multiLangDesc = null;
    }
  }

  public String getNickname() {
    return this.nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public int getMultiLangNicknamesSize() {
    return (this.multiLangNicknames == null) ? 0 : this.multiLangNicknames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNicknamesIterator() {
    return (this.multiLangNicknames == null) ? null : this.multiLangNicknames.iterator();
  }

  public void addToMultiLangNicknames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNicknames == null) {
      this.multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNicknames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNicknames() {
    return this.multiLangNicknames;
  }

  public void setMultiLangNicknames(List<com.lesports.api.common.LangString> multiLangNicknames) {
    this.multiLangNicknames = multiLangNicknames;
  }

  public void unsetMultiLangNicknames() {
    this.multiLangNicknames = null;
  }

  /** Returns true if field multiLangNicknames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNicknames() {
    return this.multiLangNicknames != null;
  }

  public void setMultiLangNicknamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNicknames = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public String getPosition() {
    return this.position;
  }

  public void setPosition(String position) {
    this.position = position;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public String getBgWebUrl() {
    return this.bgWebUrl;
  }

  public void setBgWebUrl(String bgWebUrl) {
    this.bgWebUrl = bgWebUrl;
  }

  public void unsetBgWebUrl() {
    this.bgWebUrl = null;
  }

  /** Returns true if field bgWebUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetBgWebUrl() {
    return this.bgWebUrl != null;
  }

  public void setBgWebUrlIsSet(boolean value) {
    if (!value) {
      this.bgWebUrl = null;
    }
  }

  public int getSquadOrder() {
    return this.squadOrder;
  }

  public void setSquadOrder(int squadOrder) {
    this.squadOrder = squadOrder;
    setSquadOrderIsSet(true);
  }

  public void unsetSquadOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SQUADORDER_ISSET_ID);
  }

  /** Returns true if field squadOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSquadOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __SQUADORDER_ISSET_ID);
  }

  public void setSquadOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SQUADORDER_ISSET_ID, value);
  }

  public long getBoleId() {
    return this.boleId;
  }

  public void setBoleId(long boleId) {
    this.boleId = boleId;
    setBoleIdIsSet(true);
  }

  public void unsetBoleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  /** Returns true if field boleId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoleId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  public void setBoleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOLEID_ISSET_ID, value);
  }

  public long getPositionId() {
    return this.positionId;
  }

  public void setPositionId(long positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
  }

  public void unsetPositionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public int getMultiLangGameFTypeSize() {
    return (this.multiLangGameFType == null) ? 0 : this.multiLangGameFType.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGameFTypeIterator() {
    return (this.multiLangGameFType == null) ? null : this.multiLangGameFType.iterator();
  }

  public void addToMultiLangGameFType(com.lesports.api.common.LangString elem) {
    if (this.multiLangGameFType == null) {
      this.multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGameFType.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGameFType() {
    return this.multiLangGameFType;
  }

  public void setMultiLangGameFType(List<com.lesports.api.common.LangString> multiLangGameFType) {
    this.multiLangGameFType = multiLangGameFType;
  }

  public void unsetMultiLangGameFType() {
    this.multiLangGameFType = null;
  }

  /** Returns true if field multiLangGameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGameFType() {
    return this.multiLangGameFType != null;
  }

  public void setMultiLangGameFTypeIsSet(boolean value) {
    if (!value) {
      this.multiLangGameFType = null;
    }
  }

  public PlayingTeam getNationalTeam() {
    return this.nationalTeam;
  }

  public void setNationalTeam(PlayingTeam nationalTeam) {
    this.nationalTeam = nationalTeam;
  }

  public void unsetNationalTeam() {
    this.nationalTeam = null;
  }

  /** Returns true if field nationalTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetNationalTeam() {
    return this.nationalTeam != null;
  }

  public void setNationalTeamIsSet(boolean value) {
    if (!value) {
      this.nationalTeam = null;
    }
  }

  public PlayingTeam getClubTeam() {
    return this.clubTeam;
  }

  public void setClubTeam(PlayingTeam clubTeam) {
    this.clubTeam = clubTeam;
  }

  public void unsetClubTeam() {
    this.clubTeam = null;
  }

  /** Returns true if field clubTeam is set (has been assigned a value) and false otherwise */
  public boolean isSetClubTeam() {
    return this.clubTeam != null;
  }

  public void setClubTeamIsSet(boolean value) {
    if (!value) {
      this.clubTeam = null;
    }
  }

  public long getGameFTypeId() {
    return this.gameFTypeId;
  }

  public void setGameFTypeId(long gameFTypeId) {
    this.gameFTypeId = gameFTypeId;
    setGameFTypeIdIsSet(true);
  }

  public void unsetGameFTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  /** Returns true if field gameFTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  public void setGameFTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID, value);
  }

  public String getCareerValue() {
    return this.careerValue;
  }

  public void setCareerValue(String careerValue) {
    this.careerValue = careerValue;
  }

  public void unsetCareerValue() {
    this.careerValue = null;
  }

  /** Returns true if field careerValue is set (has been assigned a value) and false otherwise */
  public boolean isSetCareerValue() {
    return this.careerValue != null;
  }

  public void setCareerValueIsSet(boolean value) {
    if (!value) {
      this.careerValue = null;
    }
  }

  public int getMultiLangCareerValueSize() {
    return (this.multiLangCareerValue == null) ? 0 : this.multiLangCareerValue.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCareerValueIterator() {
    return (this.multiLangCareerValue == null) ? null : this.multiLangCareerValue.iterator();
  }

  public void addToMultiLangCareerValue(com.lesports.api.common.LangString elem) {
    if (this.multiLangCareerValue == null) {
      this.multiLangCareerValue = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCareerValue.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCareerValue() {
    return this.multiLangCareerValue;
  }

  public void setMultiLangCareerValue(List<com.lesports.api.common.LangString> multiLangCareerValue) {
    this.multiLangCareerValue = multiLangCareerValue;
  }

  public void unsetMultiLangCareerValue() {
    this.multiLangCareerValue = null;
  }

  /** Returns true if field multiLangCareerValue is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCareerValue() {
    return this.multiLangCareerValue != null;
  }

  public void setMultiLangCareerValueIsSet(boolean value) {
    if (!value) {
      this.multiLangCareerValue = null;
    }
  }

  public int getCareerTeamsSize() {
    return (this.careerTeams == null) ? 0 : this.careerTeams.size();
  }

  public java.util.Iterator<PlayingTeam> getCareerTeamsIterator() {
    return (this.careerTeams == null) ? null : this.careerTeams.iterator();
  }

  public void addToCareerTeams(PlayingTeam elem) {
    if (this.careerTeams == null) {
      this.careerTeams = new ArrayList<PlayingTeam>();
    }
    this.careerTeams.add(elem);
  }

  public List<PlayingTeam> getCareerTeams() {
    return this.careerTeams;
  }

  public void setCareerTeams(List<PlayingTeam> careerTeams) {
    this.careerTeams = careerTeams;
  }

  public void unsetCareerTeams() {
    this.careerTeams = null;
  }

  /** Returns true if field careerTeams is set (has been assigned a value) and false otherwise */
  public boolean isSetCareerTeams() {
    return this.careerTeams != null;
  }

  public void setCareerTeamsIsSet(boolean value) {
    if (!value) {
      this.careerTeams = null;
    }
  }

  public int getMultiLangPositionNamesSize() {
    return (this.multiLangPositionNames == null) ? 0 : this.multiLangPositionNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangPositionNamesIterator() {
    return (this.multiLangPositionNames == null) ? null : this.multiLangPositionNames.iterator();
  }

  public void addToMultiLangPositionNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangPositionNames == null) {
      this.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangPositionNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangPositionNames() {
    return this.multiLangPositionNames;
  }

  public void setMultiLangPositionNames(List<com.lesports.api.common.LangString> multiLangPositionNames) {
    this.multiLangPositionNames = multiLangPositionNames;
  }

  public void unsetMultiLangPositionNames() {
    this.multiLangPositionNames = null;
  }

  /** Returns true if field multiLangPositionNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangPositionNames() {
    return this.multiLangPositionNames != null;
  }

  public void setMultiLangPositionNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangPositionNames = null;
    }
  }

  public String getExperience() {
    return this.experience;
  }

  public void setExperience(String experience) {
    this.experience = experience;
  }

  public void unsetExperience() {
    this.experience = null;
  }

  /** Returns true if field experience is set (has been assigned a value) and false otherwise */
  public boolean isSetExperience() {
    return this.experience != null;
  }

  public void setExperienceIsSet(boolean value) {
    if (!value) {
      this.experience = null;
    }
  }

  public String getDraft() {
    return this.draft;
  }

  public void setDraft(String draft) {
    this.draft = draft;
  }

  public void unsetDraft() {
    this.draft = null;
  }

  /** Returns true if field draft is set (has been assigned a value) and false otherwise */
  public boolean isSetDraft() {
    return this.draft != null;
  }

  public void setDraftIsSet(boolean value) {
    if (!value) {
      this.draft = null;
    }
  }

  public int getMultiLangDraftSize() {
    return (this.multiLangDraft == null) ? 0 : this.multiLangDraft.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDraftIterator() {
    return (this.multiLangDraft == null) ? null : this.multiLangDraft.iterator();
  }

  public void addToMultiLangDraft(com.lesports.api.common.LangString elem) {
    if (this.multiLangDraft == null) {
      this.multiLangDraft = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDraft.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDraft() {
    return this.multiLangDraft;
  }

  public void setMultiLangDraft(List<com.lesports.api.common.LangString> multiLangDraft) {
    this.multiLangDraft = multiLangDraft;
  }

  public void unsetMultiLangDraft() {
    this.multiLangDraft = null;
  }

  /** Returns true if field multiLangDraft is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDraft() {
    return this.multiLangDraft != null;
  }

  public void setMultiLangDraftIsSet(boolean value) {
    if (!value) {
      this.multiLangDraft = null;
    }
  }

  public String getSalary() {
    return this.salary;
  }

  public void setSalary(String salary) {
    this.salary = salary;
  }

  public void unsetSalary() {
    this.salary = null;
  }

  /** Returns true if field salary is set (has been assigned a value) and false otherwise */
  public boolean isSetSalary() {
    return this.salary != null;
  }

  public void setSalaryIsSet(boolean value) {
    if (!value) {
      this.salary = null;
    }
  }

  public String getSchool() {
    return this.school;
  }

  public void setSchool(String school) {
    this.school = school;
  }

  public void unsetSchool() {
    this.school = null;
  }

  /** Returns true if field school is set (has been assigned a value) and false otherwise */
  public boolean isSetSchool() {
    return this.school != null;
  }

  public void setSchoolIsSet(boolean value) {
    if (!value) {
      this.school = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Integer)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((Integer)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((String)value);
      }
      break;

    case MULTI_LANG_NATIONALITIES:
      if (value == null) {
        unsetMultiLangNationalities();
      } else {
        setMultiLangNationalities((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case MULTI_LANG_CITIES:
      if (value == null) {
        unsetMultiLangCities();
      } else {
        setMultiLangCities((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case BACKGROUP_IMAGE_URL:
      if (value == null) {
        unsetBackgroupImageUrl();
      } else {
        setBackgroupImageUrl((String)value);
      }
      break;

    case GAME_FTYPE:
      if (value == null) {
        unsetGameFType();
      } else {
        setGameFType((String)value);
      }
      break;

    case GAME_STYPE:
      if (value == null) {
        unsetGameSType();
      } else {
        setGameSType((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case MULTI_LANG_DESC:
      if (value == null) {
        unsetMultiLangDesc();
      } else {
        setMultiLangDesc((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case MULTI_LANG_NICKNAMES:
      if (value == null) {
        unsetMultiLangNicknames();
      } else {
        setMultiLangNicknames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case BG_WEB_URL:
      if (value == null) {
        unsetBgWebUrl();
      } else {
        setBgWebUrl((String)value);
      }
      break;

    case SQUAD_ORDER:
      if (value == null) {
        unsetSquadOrder();
      } else {
        setSquadOrder((Integer)value);
      }
      break;

    case BOLE_ID:
      if (value == null) {
        unsetBoleId();
      } else {
        setBoleId((Long)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Long)value);
      }
      break;

    case MULTI_LANG_GAME_FTYPE:
      if (value == null) {
        unsetMultiLangGameFType();
      } else {
        setMultiLangGameFType((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case NATIONAL_TEAM:
      if (value == null) {
        unsetNationalTeam();
      } else {
        setNationalTeam((PlayingTeam)value);
      }
      break;

    case CLUB_TEAM:
      if (value == null) {
        unsetClubTeam();
      } else {
        setClubTeam((PlayingTeam)value);
      }
      break;

    case GAME_FTYPE_ID:
      if (value == null) {
        unsetGameFTypeId();
      } else {
        setGameFTypeId((Long)value);
      }
      break;

    case CAREER_VALUE:
      if (value == null) {
        unsetCareerValue();
      } else {
        setCareerValue((String)value);
      }
      break;

    case MULTI_LANG_CAREER_VALUE:
      if (value == null) {
        unsetMultiLangCareerValue();
      } else {
        setMultiLangCareerValue((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CAREER_TEAMS:
      if (value == null) {
        unsetCareerTeams();
      } else {
        setCareerTeams((List<PlayingTeam>)value);
      }
      break;

    case MULTI_LANG_POSITION_NAMES:
      if (value == null) {
        unsetMultiLangPositionNames();
      } else {
        setMultiLangPositionNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case EXPERIENCE:
      if (value == null) {
        unsetExperience();
      } else {
        setExperience((String)value);
      }
      break;

    case DRAFT:
      if (value == null) {
        unsetDraft();
      } else {
        setDraft((String)value);
      }
      break;

    case MULTI_LANG_DRAFT:
      if (value == null) {
        unsetMultiLangDraft();
      } else {
        setMultiLangDraft((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case SALARY:
      if (value == null) {
        unsetSalary();
      } else {
        setSalary((String)value);
      }
      break;

    case SCHOOL:
      if (value == null) {
        unsetSchool();
      } else {
        setSchool((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case HEIGHT:
      return Integer.valueOf(getHeight());

    case WEIGHT:
      return Integer.valueOf(getWeight());

    case BIRTHDAY:
      return getBirthday();

    case GENDER:
      return Integer.valueOf(getGender());

    case NATIONALITY:
      return getNationality();

    case MULTI_LANG_NATIONALITIES:
      return getMultiLangNationalities();

    case CITY:
      return getCity();

    case MULTI_LANG_CITIES:
      return getMultiLangCities();

    case IMAGE_URL:
      return getImageUrl();

    case BACKGROUP_IMAGE_URL:
      return getBackgroupImageUrl();

    case GAME_FTYPE:
      return getGameFType();

    case GAME_STYPE:
      return getGameSType();

    case DESC:
      return getDesc();

    case MULTI_LANG_DESC:
      return getMultiLangDesc();

    case NICKNAME:
      return getNickname();

    case MULTI_LANG_NICKNAMES:
      return getMultiLangNicknames();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case POSITION:
      return getPosition();

    case BG_WEB_URL:
      return getBgWebUrl();

    case SQUAD_ORDER:
      return Integer.valueOf(getSquadOrder());

    case BOLE_ID:
      return Long.valueOf(getBoleId());

    case POSITION_ID:
      return Long.valueOf(getPositionId());

    case MULTI_LANG_GAME_FTYPE:
      return getMultiLangGameFType();

    case NATIONAL_TEAM:
      return getNationalTeam();

    case CLUB_TEAM:
      return getClubTeam();

    case GAME_FTYPE_ID:
      return Long.valueOf(getGameFTypeId());

    case CAREER_VALUE:
      return getCareerValue();

    case MULTI_LANG_CAREER_VALUE:
      return getMultiLangCareerValue();

    case CAREER_TEAMS:
      return getCareerTeams();

    case MULTI_LANG_POSITION_NAMES:
      return getMultiLangPositionNames();

    case EXPERIENCE:
      return getExperience();

    case DRAFT:
      return getDraft();

    case MULTI_LANG_DRAFT:
      return getMultiLangDraft();

    case SALARY:
      return getSalary();

    case SCHOOL:
      return getSchool();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case HEIGHT:
      return isSetHeight();
    case WEIGHT:
      return isSetWeight();
    case BIRTHDAY:
      return isSetBirthday();
    case GENDER:
      return isSetGender();
    case NATIONALITY:
      return isSetNationality();
    case MULTI_LANG_NATIONALITIES:
      return isSetMultiLangNationalities();
    case CITY:
      return isSetCity();
    case MULTI_LANG_CITIES:
      return isSetMultiLangCities();
    case IMAGE_URL:
      return isSetImageUrl();
    case BACKGROUP_IMAGE_URL:
      return isSetBackgroupImageUrl();
    case GAME_FTYPE:
      return isSetGameFType();
    case GAME_STYPE:
      return isSetGameSType();
    case DESC:
      return isSetDesc();
    case MULTI_LANG_DESC:
      return isSetMultiLangDesc();
    case NICKNAME:
      return isSetNickname();
    case MULTI_LANG_NICKNAMES:
      return isSetMultiLangNicknames();
    case NUMBER:
      return isSetNumber();
    case POSITION:
      return isSetPosition();
    case BG_WEB_URL:
      return isSetBgWebUrl();
    case SQUAD_ORDER:
      return isSetSquadOrder();
    case BOLE_ID:
      return isSetBoleId();
    case POSITION_ID:
      return isSetPositionId();
    case MULTI_LANG_GAME_FTYPE:
      return isSetMultiLangGameFType();
    case NATIONAL_TEAM:
      return isSetNationalTeam();
    case CLUB_TEAM:
      return isSetClubTeam();
    case GAME_FTYPE_ID:
      return isSetGameFTypeId();
    case CAREER_VALUE:
      return isSetCareerValue();
    case MULTI_LANG_CAREER_VALUE:
      return isSetMultiLangCareerValue();
    case CAREER_TEAMS:
      return isSetCareerTeams();
    case MULTI_LANG_POSITION_NAMES:
      return isSetMultiLangPositionNames();
    case EXPERIENCE:
      return isSetExperience();
    case DRAFT:
      return isSetDraft();
    case MULTI_LANG_DRAFT:
      return isSetMultiLangDraft();
    case SALARY:
      return isSetSalary();
    case SCHOOL:
      return isSetSchool();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlayer)
      return this.equals((TPlayer)that);
    return false;
  }

  public boolean equals(TPlayer that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_height = true && this.isSetHeight();
    boolean that_present_height = true && that.isSetHeight();
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_weight = true && this.isSetWeight();
    boolean that_present_weight = true && that.isSetWeight();
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_multiLangNationalities = true && this.isSetMultiLangNationalities();
    boolean that_present_multiLangNationalities = true && that.isSetMultiLangNationalities();
    if (this_present_multiLangNationalities || that_present_multiLangNationalities) {
      if (!(this_present_multiLangNationalities && that_present_multiLangNationalities))
        return false;
      if (!this.multiLangNationalities.equals(that.multiLangNationalities))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_multiLangCities = true && this.isSetMultiLangCities();
    boolean that_present_multiLangCities = true && that.isSetMultiLangCities();
    if (this_present_multiLangCities || that_present_multiLangCities) {
      if (!(this_present_multiLangCities && that_present_multiLangCities))
        return false;
      if (!this.multiLangCities.equals(that.multiLangCities))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_backgroupImageUrl = true && this.isSetBackgroupImageUrl();
    boolean that_present_backgroupImageUrl = true && that.isSetBackgroupImageUrl();
    if (this_present_backgroupImageUrl || that_present_backgroupImageUrl) {
      if (!(this_present_backgroupImageUrl && that_present_backgroupImageUrl))
        return false;
      if (!this.backgroupImageUrl.equals(that.backgroupImageUrl))
        return false;
    }

    boolean this_present_gameFType = true && this.isSetGameFType();
    boolean that_present_gameFType = true && that.isSetGameFType();
    if (this_present_gameFType || that_present_gameFType) {
      if (!(this_present_gameFType && that_present_gameFType))
        return false;
      if (!this.gameFType.equals(that.gameFType))
        return false;
    }

    boolean this_present_gameSType = true && this.isSetGameSType();
    boolean that_present_gameSType = true && that.isSetGameSType();
    if (this_present_gameSType || that_present_gameSType) {
      if (!(this_present_gameSType && that_present_gameSType))
        return false;
      if (!this.gameSType.equals(that.gameSType))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_multiLangDesc = true && this.isSetMultiLangDesc();
    boolean that_present_multiLangDesc = true && that.isSetMultiLangDesc();
    if (this_present_multiLangDesc || that_present_multiLangDesc) {
      if (!(this_present_multiLangDesc && that_present_multiLangDesc))
        return false;
      if (!this.multiLangDesc.equals(that.multiLangDesc))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_multiLangNicknames = true && this.isSetMultiLangNicknames();
    boolean that_present_multiLangNicknames = true && that.isSetMultiLangNicknames();
    if (this_present_multiLangNicknames || that_present_multiLangNicknames) {
      if (!(this_present_multiLangNicknames && that_present_multiLangNicknames))
        return false;
      if (!this.multiLangNicknames.equals(that.multiLangNicknames))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_bgWebUrl = true && this.isSetBgWebUrl();
    boolean that_present_bgWebUrl = true && that.isSetBgWebUrl();
    if (this_present_bgWebUrl || that_present_bgWebUrl) {
      if (!(this_present_bgWebUrl && that_present_bgWebUrl))
        return false;
      if (!this.bgWebUrl.equals(that.bgWebUrl))
        return false;
    }

    boolean this_present_squadOrder = true && this.isSetSquadOrder();
    boolean that_present_squadOrder = true && that.isSetSquadOrder();
    if (this_present_squadOrder || that_present_squadOrder) {
      if (!(this_present_squadOrder && that_present_squadOrder))
        return false;
      if (this.squadOrder != that.squadOrder)
        return false;
    }

    boolean this_present_boleId = true && this.isSetBoleId();
    boolean that_present_boleId = true && that.isSetBoleId();
    if (this_present_boleId || that_present_boleId) {
      if (!(this_present_boleId && that_present_boleId))
        return false;
      if (this.boleId != that.boleId)
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_multiLangGameFType = true && this.isSetMultiLangGameFType();
    boolean that_present_multiLangGameFType = true && that.isSetMultiLangGameFType();
    if (this_present_multiLangGameFType || that_present_multiLangGameFType) {
      if (!(this_present_multiLangGameFType && that_present_multiLangGameFType))
        return false;
      if (!this.multiLangGameFType.equals(that.multiLangGameFType))
        return false;
    }

    boolean this_present_nationalTeam = true && this.isSetNationalTeam();
    boolean that_present_nationalTeam = true && that.isSetNationalTeam();
    if (this_present_nationalTeam || that_present_nationalTeam) {
      if (!(this_present_nationalTeam && that_present_nationalTeam))
        return false;
      if (!this.nationalTeam.equals(that.nationalTeam))
        return false;
    }

    boolean this_present_clubTeam = true && this.isSetClubTeam();
    boolean that_present_clubTeam = true && that.isSetClubTeam();
    if (this_present_clubTeam || that_present_clubTeam) {
      if (!(this_present_clubTeam && that_present_clubTeam))
        return false;
      if (!this.clubTeam.equals(that.clubTeam))
        return false;
    }

    boolean this_present_gameFTypeId = true && this.isSetGameFTypeId();
    boolean that_present_gameFTypeId = true && that.isSetGameFTypeId();
    if (this_present_gameFTypeId || that_present_gameFTypeId) {
      if (!(this_present_gameFTypeId && that_present_gameFTypeId))
        return false;
      if (this.gameFTypeId != that.gameFTypeId)
        return false;
    }

    boolean this_present_careerValue = true && this.isSetCareerValue();
    boolean that_present_careerValue = true && that.isSetCareerValue();
    if (this_present_careerValue || that_present_careerValue) {
      if (!(this_present_careerValue && that_present_careerValue))
        return false;
      if (!this.careerValue.equals(that.careerValue))
        return false;
    }

    boolean this_present_multiLangCareerValue = true && this.isSetMultiLangCareerValue();
    boolean that_present_multiLangCareerValue = true && that.isSetMultiLangCareerValue();
    if (this_present_multiLangCareerValue || that_present_multiLangCareerValue) {
      if (!(this_present_multiLangCareerValue && that_present_multiLangCareerValue))
        return false;
      if (!this.multiLangCareerValue.equals(that.multiLangCareerValue))
        return false;
    }

    boolean this_present_careerTeams = true && this.isSetCareerTeams();
    boolean that_present_careerTeams = true && that.isSetCareerTeams();
    if (this_present_careerTeams || that_present_careerTeams) {
      if (!(this_present_careerTeams && that_present_careerTeams))
        return false;
      if (!this.careerTeams.equals(that.careerTeams))
        return false;
    }

    boolean this_present_multiLangPositionNames = true && this.isSetMultiLangPositionNames();
    boolean that_present_multiLangPositionNames = true && that.isSetMultiLangPositionNames();
    if (this_present_multiLangPositionNames || that_present_multiLangPositionNames) {
      if (!(this_present_multiLangPositionNames && that_present_multiLangPositionNames))
        return false;
      if (!this.multiLangPositionNames.equals(that.multiLangPositionNames))
        return false;
    }

    boolean this_present_experience = true && this.isSetExperience();
    boolean that_present_experience = true && that.isSetExperience();
    if (this_present_experience || that_present_experience) {
      if (!(this_present_experience && that_present_experience))
        return false;
      if (!this.experience.equals(that.experience))
        return false;
    }

    boolean this_present_draft = true && this.isSetDraft();
    boolean that_present_draft = true && that.isSetDraft();
    if (this_present_draft || that_present_draft) {
      if (!(this_present_draft && that_present_draft))
        return false;
      if (!this.draft.equals(that.draft))
        return false;
    }

    boolean this_present_multiLangDraft = true && this.isSetMultiLangDraft();
    boolean that_present_multiLangDraft = true && that.isSetMultiLangDraft();
    if (this_present_multiLangDraft || that_present_multiLangDraft) {
      if (!(this_present_multiLangDraft && that_present_multiLangDraft))
        return false;
      if (!this.multiLangDraft.equals(that.multiLangDraft))
        return false;
    }

    boolean this_present_salary = true && this.isSetSalary();
    boolean that_present_salary = true && that.isSetSalary();
    if (this_present_salary || that_present_salary) {
      if (!(this_present_salary && that_present_salary))
        return false;
      if (!this.salary.equals(that.salary))
        return false;
    }

    boolean this_present_school = true && this.isSetSchool();
    boolean that_present_school = true && that.isSetSchool();
    if (this_present_school || that_present_school) {
      if (!(this_present_school && that_present_school))
        return false;
      if (!this.school.equals(that.school))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_height = true && (isSetHeight());
    list.add(present_height);
    if (present_height)
      list.add(height);

    boolean present_weight = true && (isSetWeight());
    list.add(present_weight);
    if (present_weight)
      list.add(weight);

    boolean present_birthday = true && (isSetBirthday());
    list.add(present_birthday);
    if (present_birthday)
      list.add(birthday);

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_nationality = true && (isSetNationality());
    list.add(present_nationality);
    if (present_nationality)
      list.add(nationality);

    boolean present_multiLangNationalities = true && (isSetMultiLangNationalities());
    list.add(present_multiLangNationalities);
    if (present_multiLangNationalities)
      list.add(multiLangNationalities);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_multiLangCities = true && (isSetMultiLangCities());
    list.add(present_multiLangCities);
    if (present_multiLangCities)
      list.add(multiLangCities);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_backgroupImageUrl = true && (isSetBackgroupImageUrl());
    list.add(present_backgroupImageUrl);
    if (present_backgroupImageUrl)
      list.add(backgroupImageUrl);

    boolean present_gameFType = true && (isSetGameFType());
    list.add(present_gameFType);
    if (present_gameFType)
      list.add(gameFType);

    boolean present_gameSType = true && (isSetGameSType());
    list.add(present_gameSType);
    if (present_gameSType)
      list.add(gameSType);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_multiLangDesc = true && (isSetMultiLangDesc());
    list.add(present_multiLangDesc);
    if (present_multiLangDesc)
      list.add(multiLangDesc);

    boolean present_nickname = true && (isSetNickname());
    list.add(present_nickname);
    if (present_nickname)
      list.add(nickname);

    boolean present_multiLangNicknames = true && (isSetMultiLangNicknames());
    list.add(present_multiLangNicknames);
    if (present_multiLangNicknames)
      list.add(multiLangNicknames);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_bgWebUrl = true && (isSetBgWebUrl());
    list.add(present_bgWebUrl);
    if (present_bgWebUrl)
      list.add(bgWebUrl);

    boolean present_squadOrder = true && (isSetSquadOrder());
    list.add(present_squadOrder);
    if (present_squadOrder)
      list.add(squadOrder);

    boolean present_boleId = true && (isSetBoleId());
    list.add(present_boleId);
    if (present_boleId)
      list.add(boleId);

    boolean present_positionId = true && (isSetPositionId());
    list.add(present_positionId);
    if (present_positionId)
      list.add(positionId);

    boolean present_multiLangGameFType = true && (isSetMultiLangGameFType());
    list.add(present_multiLangGameFType);
    if (present_multiLangGameFType)
      list.add(multiLangGameFType);

    boolean present_nationalTeam = true && (isSetNationalTeam());
    list.add(present_nationalTeam);
    if (present_nationalTeam)
      list.add(nationalTeam);

    boolean present_clubTeam = true && (isSetClubTeam());
    list.add(present_clubTeam);
    if (present_clubTeam)
      list.add(clubTeam);

    boolean present_gameFTypeId = true && (isSetGameFTypeId());
    list.add(present_gameFTypeId);
    if (present_gameFTypeId)
      list.add(gameFTypeId);

    boolean present_careerValue = true && (isSetCareerValue());
    list.add(present_careerValue);
    if (present_careerValue)
      list.add(careerValue);

    boolean present_multiLangCareerValue = true && (isSetMultiLangCareerValue());
    list.add(present_multiLangCareerValue);
    if (present_multiLangCareerValue)
      list.add(multiLangCareerValue);

    boolean present_careerTeams = true && (isSetCareerTeams());
    list.add(present_careerTeams);
    if (present_careerTeams)
      list.add(careerTeams);

    boolean present_multiLangPositionNames = true && (isSetMultiLangPositionNames());
    list.add(present_multiLangPositionNames);
    if (present_multiLangPositionNames)
      list.add(multiLangPositionNames);

    boolean present_experience = true && (isSetExperience());
    list.add(present_experience);
    if (present_experience)
      list.add(experience);

    boolean present_draft = true && (isSetDraft());
    list.add(present_draft);
    if (present_draft)
      list.add(draft);

    boolean present_multiLangDraft = true && (isSetMultiLangDraft());
    list.add(present_multiLangDraft);
    if (present_multiLangDraft)
      list.add(multiLangDraft);

    boolean present_salary = true && (isSetSalary());
    list.add(present_salary);
    if (present_salary)
      list.add(salary);

    boolean present_school = true && (isSetSchool());
    list.add(present_school);
    if (present_school)
      list.add(school);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationality()).compareTo(other.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, other.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNationalities()).compareTo(other.isSetMultiLangNationalities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNationalities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNationalities, other.multiLangNationalities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCities()).compareTo(other.isSetMultiLangCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCities, other.multiLangCities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackgroupImageUrl()).compareTo(other.isSetBackgroupImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackgroupImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backgroupImageUrl, other.backgroupImageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFType()).compareTo(other.isSetGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFType, other.gameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameSType()).compareTo(other.isSetGameSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameSType, other.gameSType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDesc()).compareTo(other.isSetMultiLangDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDesc, other.multiLangDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNicknames()).compareTo(other.isSetMultiLangNicknames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNicknames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNicknames, other.multiLangNicknames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBgWebUrl()).compareTo(other.isSetBgWebUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBgWebUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bgWebUrl, other.bgWebUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquadOrder()).compareTo(other.isSetSquadOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquadOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squadOrder, other.squadOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoleId()).compareTo(other.isSetBoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boleId, other.boleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGameFType()).compareTo(other.isSetMultiLangGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGameFType, other.multiLangGameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationalTeam()).compareTo(other.isSetNationalTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationalTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationalTeam, other.nationalTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClubTeam()).compareTo(other.isSetClubTeam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClubTeam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clubTeam, other.clubTeam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFTypeId()).compareTo(other.isSetGameFTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFTypeId, other.gameFTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCareerValue()).compareTo(other.isSetCareerValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCareerValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.careerValue, other.careerValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCareerValue()).compareTo(other.isSetMultiLangCareerValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCareerValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCareerValue, other.multiLangCareerValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCareerTeams()).compareTo(other.isSetCareerTeams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCareerTeams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.careerTeams, other.careerTeams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangPositionNames()).compareTo(other.isSetMultiLangPositionNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangPositionNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangPositionNames, other.multiLangPositionNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperience()).compareTo(other.isSetExperience());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperience()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experience, other.experience);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDraft()).compareTo(other.isSetDraft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDraft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draft, other.draft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDraft()).compareTo(other.isSetMultiLangDraft());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDraft()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDraft, other.multiLangDraft);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalary()).compareTo(other.isSetSalary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salary, other.salary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchool()).compareTo(other.isSetSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.school, other.school);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlayer(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetHeight()) {
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
    }
    if (isSetWeight()) {
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
    }
    if (isSetBirthday()) {
      if (!first) sb.append(", ");
      sb.append("birthday:");
      if (this.birthday == null) {
        sb.append("null");
      } else {
        sb.append(this.birthday);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      sb.append(this.gender);
      first = false;
    }
    if (isSetNationality()) {
      if (!first) sb.append(", ");
      sb.append("nationality:");
      if (this.nationality == null) {
        sb.append("null");
      } else {
        sb.append(this.nationality);
      }
      first = false;
    }
    if (isSetMultiLangNationalities()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNationalities:");
      if (this.multiLangNationalities == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNationalities);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetMultiLangCities()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCities:");
      if (this.multiLangCities == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCities);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetBackgroupImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("backgroupImageUrl:");
      if (this.backgroupImageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.backgroupImageUrl);
      }
      first = false;
    }
    if (isSetGameFType()) {
      if (!first) sb.append(", ");
      sb.append("gameFType:");
      if (this.gameFType == null) {
        sb.append("null");
      } else {
        sb.append(this.gameFType);
      }
      first = false;
    }
    if (isSetGameSType()) {
      if (!first) sb.append(", ");
      sb.append("gameSType:");
      if (this.gameSType == null) {
        sb.append("null");
      } else {
        sb.append(this.gameSType);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetMultiLangDesc()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDesc:");
      if (this.multiLangDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDesc);
      }
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetMultiLangNicknames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNicknames:");
      if (this.multiLangNicknames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNicknames);
      }
      first = false;
    }
    if (isSetNumber()) {
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetBgWebUrl()) {
      if (!first) sb.append(", ");
      sb.append("bgWebUrl:");
      if (this.bgWebUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.bgWebUrl);
      }
      first = false;
    }
    if (isSetSquadOrder()) {
      if (!first) sb.append(", ");
      sb.append("squadOrder:");
      sb.append(this.squadOrder);
      first = false;
    }
    if (isSetBoleId()) {
      if (!first) sb.append(", ");
      sb.append("boleId:");
      sb.append(this.boleId);
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetMultiLangGameFType()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGameFType:");
      if (this.multiLangGameFType == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGameFType);
      }
      first = false;
    }
    if (isSetNationalTeam()) {
      if (!first) sb.append(", ");
      sb.append("nationalTeam:");
      if (this.nationalTeam == null) {
        sb.append("null");
      } else {
        sb.append(this.nationalTeam);
      }
      first = false;
    }
    if (isSetClubTeam()) {
      if (!first) sb.append(", ");
      sb.append("clubTeam:");
      if (this.clubTeam == null) {
        sb.append("null");
      } else {
        sb.append(this.clubTeam);
      }
      first = false;
    }
    if (isSetGameFTypeId()) {
      if (!first) sb.append(", ");
      sb.append("gameFTypeId:");
      sb.append(this.gameFTypeId);
      first = false;
    }
    if (isSetCareerValue()) {
      if (!first) sb.append(", ");
      sb.append("careerValue:");
      if (this.careerValue == null) {
        sb.append("null");
      } else {
        sb.append(this.careerValue);
      }
      first = false;
    }
    if (isSetMultiLangCareerValue()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCareerValue:");
      if (this.multiLangCareerValue == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCareerValue);
      }
      first = false;
    }
    if (isSetCareerTeams()) {
      if (!first) sb.append(", ");
      sb.append("careerTeams:");
      if (this.careerTeams == null) {
        sb.append("null");
      } else {
        sb.append(this.careerTeams);
      }
      first = false;
    }
    if (isSetMultiLangPositionNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangPositionNames:");
      if (this.multiLangPositionNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangPositionNames);
      }
      first = false;
    }
    if (isSetExperience()) {
      if (!first) sb.append(", ");
      sb.append("experience:");
      if (this.experience == null) {
        sb.append("null");
      } else {
        sb.append(this.experience);
      }
      first = false;
    }
    if (isSetDraft()) {
      if (!first) sb.append(", ");
      sb.append("draft:");
      if (this.draft == null) {
        sb.append("null");
      } else {
        sb.append(this.draft);
      }
      first = false;
    }
    if (isSetMultiLangDraft()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDraft:");
      if (this.multiLangDraft == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDraft);
      }
      first = false;
    }
    if (isSetSalary()) {
      if (!first) sb.append(", ");
      sb.append("salary:");
      if (this.salary == null) {
        sb.append("null");
      } else {
        sb.append(this.salary);
      }
      first = false;
    }
    if (isSetSchool()) {
      if (!first) sb.append(", ");
      sb.append("school:");
      if (this.school == null) {
        sb.append("null");
      } else {
        sb.append(this.school);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlayerStandardSchemeFactory implements SchemeFactory {
    public TPlayerStandardScheme getScheme() {
      return new TPlayerStandardScheme();
    }
  }

  private static class TPlayerStandardScheme extends StandardScheme<TPlayer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list0.size);
                com.lesports.api.common.LangString _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.lesports.api.common.LangString();
                  _elem1.read(iprot);
                  struct.multiLangNames.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weight = iprot.readI32();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTI_LANG_NATIONALITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.multiLangNationalities = new ArrayList<com.lesports.api.common.LangString>(_list3.size);
                com.lesports.api.common.LangString _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.lesports.api.common.LangString();
                  _elem4.read(iprot);
                  struct.multiLangNationalities.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNationalitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MULTI_LANG_CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.multiLangCities = new ArrayList<com.lesports.api.common.LangString>(_list6.size);
                com.lesports.api.common.LangString _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.lesports.api.common.LangString();
                  _elem7.read(iprot);
                  struct.multiLangCities.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BACKGROUP_IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backgroupImageUrl = iprot.readString();
              struct.setBackgroupImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameFType = iprot.readString();
              struct.setGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GAME_STYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameSType = iprot.readString();
              struct.setGameSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MULTI_LANG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list9.size);
                com.lesports.api.common.LangString _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new com.lesports.api.common.LangString();
                  _elem10.read(iprot);
                  struct.multiLangDesc.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MULTI_LANG_NICKNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>(_list12.size);
                com.lesports.api.common.LangString _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new com.lesports.api.common.LangString();
                  _elem13.read(iprot);
                  struct.multiLangNicknames.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNicknamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BG_WEB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bgWebUrl = iprot.readString();
              struct.setBgWebUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SQUAD_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.squadOrder = iprot.readI32();
              struct.setSquadOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // BOLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.boleId = iprot.readI64();
              struct.setBoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionId = iprot.readI64();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MULTI_LANG_GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>(_list15.size);
                com.lesports.api.common.LangString _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new com.lesports.api.common.LangString();
                  _elem16.read(iprot);
                  struct.multiLangGameFType.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // NATIONAL_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nationalTeam = new PlayingTeam();
              struct.nationalTeam.read(iprot);
              struct.setNationalTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CLUB_TEAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clubTeam = new PlayingTeam();
              struct.clubTeam.read(iprot);
              struct.setClubTeamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // GAME_FTYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFTypeId = iprot.readI64();
              struct.setGameFTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CAREER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.careerValue = iprot.readString();
              struct.setCareerValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // MULTI_LANG_CAREER_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.multiLangCareerValue = new ArrayList<com.lesports.api.common.LangString>(_list18.size);
                com.lesports.api.common.LangString _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new com.lesports.api.common.LangString();
                  _elem19.read(iprot);
                  struct.multiLangCareerValue.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCareerValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CAREER_TEAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.careerTeams = new ArrayList<PlayingTeam>(_list21.size);
                PlayingTeam _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new PlayingTeam();
                  _elem22.read(iprot);
                  struct.careerTeams.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setCareerTeamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // MULTI_LANG_POSITION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(_list24.size);
                com.lesports.api.common.LangString _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new com.lesports.api.common.LangString();
                  _elem25.read(iprot);
                  struct.multiLangPositionNames.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangPositionNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // EXPERIENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experience = iprot.readString();
              struct.setExperienceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DRAFT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.draft = iprot.readString();
              struct.setDraftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // MULTI_LANG_DRAFT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.multiLangDraft = new ArrayList<com.lesports.api.common.LangString>(_list27.size);
                com.lesports.api.common.LangString _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new com.lesports.api.common.LangString();
                  _elem28.read(iprot);
                  struct.multiLangDraft.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDraftIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SALARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salary = iprot.readString();
              struct.setSalaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.school = iprot.readString();
              struct.setSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlayer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter30 : struct.multiLangNames)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHeight()) {
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeight()) {
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.weight);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        if (struct.isSetBirthday()) {
          oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
          oprot.writeString(struct.birthday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGender()) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(struct.gender);
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        if (struct.isSetNationality()) {
          oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
          oprot.writeString(struct.nationality);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNationalities != null) {
        if (struct.isSetMultiLangNationalities()) {
          oprot.writeFieldBegin(MULTI_LANG_NATIONALITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNationalities.size()));
            for (com.lesports.api.common.LangString _iter31 : struct.multiLangNationalities)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCities != null) {
        if (struct.isSetMultiLangCities()) {
          oprot.writeFieldBegin(MULTI_LANG_CITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCities.size()));
            for (com.lesports.api.common.LangString _iter32 : struct.multiLangCities)
            {
              _iter32.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backgroupImageUrl != null) {
        if (struct.isSetBackgroupImageUrl()) {
          oprot.writeFieldBegin(BACKGROUP_IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.backgroupImageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameFType != null) {
        if (struct.isSetGameFType()) {
          oprot.writeFieldBegin(GAME_FTYPE_FIELD_DESC);
          oprot.writeString(struct.gameFType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameSType != null) {
        if (struct.isSetGameSType()) {
          oprot.writeFieldBegin(GAME_STYPE_FIELD_DESC);
          oprot.writeString(struct.gameSType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangDesc != null) {
        if (struct.isSetMultiLangDesc()) {
          oprot.writeFieldBegin(MULTI_LANG_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDesc.size()));
            for (com.lesports.api.common.LangString _iter33 : struct.multiLangDesc)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNicknames != null) {
        if (struct.isSetMultiLangNicknames()) {
          oprot.writeFieldBegin(MULTI_LANG_NICKNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNicknames.size()));
            for (com.lesports.api.common.LangString _iter34 : struct.multiLangNicknames)
            {
              _iter34.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bgWebUrl != null) {
        if (struct.isSetBgWebUrl()) {
          oprot.writeFieldBegin(BG_WEB_URL_FIELD_DESC);
          oprot.writeString(struct.bgWebUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSquadOrder()) {
        oprot.writeFieldBegin(SQUAD_ORDER_FIELD_DESC);
        oprot.writeI32(struct.squadOrder);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoleId()) {
        oprot.writeFieldBegin(BOLE_ID_FIELD_DESC);
        oprot.writeI64(struct.boleId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI64(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangGameFType != null) {
        if (struct.isSetMultiLangGameFType()) {
          oprot.writeFieldBegin(MULTI_LANG_GAME_FTYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGameFType.size()));
            for (com.lesports.api.common.LangString _iter35 : struct.multiLangGameFType)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nationalTeam != null) {
        if (struct.isSetNationalTeam()) {
          oprot.writeFieldBegin(NATIONAL_TEAM_FIELD_DESC);
          struct.nationalTeam.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clubTeam != null) {
        if (struct.isSetClubTeam()) {
          oprot.writeFieldBegin(CLUB_TEAM_FIELD_DESC);
          struct.clubTeam.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGameFTypeId()) {
        oprot.writeFieldBegin(GAME_FTYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.gameFTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.careerValue != null) {
        if (struct.isSetCareerValue()) {
          oprot.writeFieldBegin(CAREER_VALUE_FIELD_DESC);
          oprot.writeString(struct.careerValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCareerValue != null) {
        if (struct.isSetMultiLangCareerValue()) {
          oprot.writeFieldBegin(MULTI_LANG_CAREER_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCareerValue.size()));
            for (com.lesports.api.common.LangString _iter36 : struct.multiLangCareerValue)
            {
              _iter36.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.careerTeams != null) {
        if (struct.isSetCareerTeams()) {
          oprot.writeFieldBegin(CAREER_TEAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.careerTeams.size()));
            for (PlayingTeam _iter37 : struct.careerTeams)
            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangPositionNames != null) {
        if (struct.isSetMultiLangPositionNames()) {
          oprot.writeFieldBegin(MULTI_LANG_POSITION_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangPositionNames.size()));
            for (com.lesports.api.common.LangString _iter38 : struct.multiLangPositionNames)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.experience != null) {
        if (struct.isSetExperience()) {
          oprot.writeFieldBegin(EXPERIENCE_FIELD_DESC);
          oprot.writeString(struct.experience);
          oprot.writeFieldEnd();
        }
      }
      if (struct.draft != null) {
        if (struct.isSetDraft()) {
          oprot.writeFieldBegin(DRAFT_FIELD_DESC);
          oprot.writeString(struct.draft);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangDraft != null) {
        if (struct.isSetMultiLangDraft()) {
          oprot.writeFieldBegin(MULTI_LANG_DRAFT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDraft.size()));
            for (com.lesports.api.common.LangString _iter39 : struct.multiLangDraft)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.salary != null) {
        if (struct.isSetSalary()) {
          oprot.writeFieldBegin(SALARY_FIELD_DESC);
          oprot.writeString(struct.salary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.school != null) {
        if (struct.isSetSchool()) {
          oprot.writeFieldBegin(SCHOOL_FIELD_DESC);
          oprot.writeString(struct.school);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlayerTupleSchemeFactory implements SchemeFactory {
    public TPlayerTupleScheme getScheme() {
      return new TPlayerTupleScheme();
    }
  }

  private static class TPlayerTupleScheme extends TupleScheme<TPlayer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(2);
      }
      if (struct.isSetHeight()) {
        optionals.set(3);
      }
      if (struct.isSetWeight()) {
        optionals.set(4);
      }
      if (struct.isSetBirthday()) {
        optionals.set(5);
      }
      if (struct.isSetGender()) {
        optionals.set(6);
      }
      if (struct.isSetNationality()) {
        optionals.set(7);
      }
      if (struct.isSetMultiLangNationalities()) {
        optionals.set(8);
      }
      if (struct.isSetCity()) {
        optionals.set(9);
      }
      if (struct.isSetMultiLangCities()) {
        optionals.set(10);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(11);
      }
      if (struct.isSetBackgroupImageUrl()) {
        optionals.set(12);
      }
      if (struct.isSetGameFType()) {
        optionals.set(13);
      }
      if (struct.isSetGameSType()) {
        optionals.set(14);
      }
      if (struct.isSetDesc()) {
        optionals.set(15);
      }
      if (struct.isSetMultiLangDesc()) {
        optionals.set(16);
      }
      if (struct.isSetNickname()) {
        optionals.set(17);
      }
      if (struct.isSetMultiLangNicknames()) {
        optionals.set(18);
      }
      if (struct.isSetNumber()) {
        optionals.set(19);
      }
      if (struct.isSetPosition()) {
        optionals.set(20);
      }
      if (struct.isSetBgWebUrl()) {
        optionals.set(21);
      }
      if (struct.isSetSquadOrder()) {
        optionals.set(22);
      }
      if (struct.isSetBoleId()) {
        optionals.set(23);
      }
      if (struct.isSetPositionId()) {
        optionals.set(24);
      }
      if (struct.isSetMultiLangGameFType()) {
        optionals.set(25);
      }
      if (struct.isSetNationalTeam()) {
        optionals.set(26);
      }
      if (struct.isSetClubTeam()) {
        optionals.set(27);
      }
      if (struct.isSetGameFTypeId()) {
        optionals.set(28);
      }
      if (struct.isSetCareerValue()) {
        optionals.set(29);
      }
      if (struct.isSetMultiLangCareerValue()) {
        optionals.set(30);
      }
      if (struct.isSetCareerTeams()) {
        optionals.set(31);
      }
      if (struct.isSetMultiLangPositionNames()) {
        optionals.set(32);
      }
      if (struct.isSetExperience()) {
        optionals.set(33);
      }
      if (struct.isSetDraft()) {
        optionals.set(34);
      }
      if (struct.isSetMultiLangDraft()) {
        optionals.set(35);
      }
      if (struct.isSetSalary()) {
        optionals.set(36);
      }
      if (struct.isSetSchool()) {
        optionals.set(37);
      }
      oprot.writeBitSet(optionals, 38);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter40 : struct.multiLangNames)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetHeight()) {
        oprot.writeI32(struct.height);
      }
      if (struct.isSetWeight()) {
        oprot.writeI32(struct.weight);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetNationality()) {
        oprot.writeString(struct.nationality);
      }
      if (struct.isSetMultiLangNationalities()) {
        {
          oprot.writeI32(struct.multiLangNationalities.size());
          for (com.lesports.api.common.LangString _iter41 : struct.multiLangNationalities)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetMultiLangCities()) {
        {
          oprot.writeI32(struct.multiLangCities.size());
          for (com.lesports.api.common.LangString _iter42 : struct.multiLangCities)
          {
            _iter42.write(oprot);
          }
        }
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetBackgroupImageUrl()) {
        oprot.writeString(struct.backgroupImageUrl);
      }
      if (struct.isSetGameFType()) {
        oprot.writeString(struct.gameFType);
      }
      if (struct.isSetGameSType()) {
        oprot.writeString(struct.gameSType);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetMultiLangDesc()) {
        {
          oprot.writeI32(struct.multiLangDesc.size());
          for (com.lesports.api.common.LangString _iter43 : struct.multiLangDesc)
          {
            _iter43.write(oprot);
          }
        }
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetMultiLangNicknames()) {
        {
          oprot.writeI32(struct.multiLangNicknames.size());
          for (com.lesports.api.common.LangString _iter44 : struct.multiLangNicknames)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetBgWebUrl()) {
        oprot.writeString(struct.bgWebUrl);
      }
      if (struct.isSetSquadOrder()) {
        oprot.writeI32(struct.squadOrder);
      }
      if (struct.isSetBoleId()) {
        oprot.writeI64(struct.boleId);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI64(struct.positionId);
      }
      if (struct.isSetMultiLangGameFType()) {
        {
          oprot.writeI32(struct.multiLangGameFType.size());
          for (com.lesports.api.common.LangString _iter45 : struct.multiLangGameFType)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetNationalTeam()) {
        struct.nationalTeam.write(oprot);
      }
      if (struct.isSetClubTeam()) {
        struct.clubTeam.write(oprot);
      }
      if (struct.isSetGameFTypeId()) {
        oprot.writeI64(struct.gameFTypeId);
      }
      if (struct.isSetCareerValue()) {
        oprot.writeString(struct.careerValue);
      }
      if (struct.isSetMultiLangCareerValue()) {
        {
          oprot.writeI32(struct.multiLangCareerValue.size());
          for (com.lesports.api.common.LangString _iter46 : struct.multiLangCareerValue)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetCareerTeams()) {
        {
          oprot.writeI32(struct.careerTeams.size());
          for (PlayingTeam _iter47 : struct.careerTeams)
          {
            _iter47.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangPositionNames()) {
        {
          oprot.writeI32(struct.multiLangPositionNames.size());
          for (com.lesports.api.common.LangString _iter48 : struct.multiLangPositionNames)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetExperience()) {
        oprot.writeString(struct.experience);
      }
      if (struct.isSetDraft()) {
        oprot.writeString(struct.draft);
      }
      if (struct.isSetMultiLangDraft()) {
        {
          oprot.writeI32(struct.multiLangDraft.size());
          for (com.lesports.api.common.LangString _iter49 : struct.multiLangDraft)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetSalary()) {
        oprot.writeString(struct.salary);
      }
      if (struct.isSetSchool()) {
        oprot.writeString(struct.school);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(38);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list50.size);
          com.lesports.api.common.LangString _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new com.lesports.api.common.LangString();
            _elem51.read(iprot);
            struct.multiLangNames.add(_elem51);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.height = iprot.readI32();
        struct.setHeightIsSet(true);
      }
      if (incoming.get(4)) {
        struct.weight = iprot.readI32();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nationality = iprot.readString();
        struct.setNationalityIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNationalities = new ArrayList<com.lesports.api.common.LangString>(_list53.size);
          com.lesports.api.common.LangString _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new com.lesports.api.common.LangString();
            _elem54.read(iprot);
            struct.multiLangNationalities.add(_elem54);
          }
        }
        struct.setMultiLangNationalitiesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list56 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCities = new ArrayList<com.lesports.api.common.LangString>(_list56.size);
          com.lesports.api.common.LangString _elem57;
          for (int _i58 = 0; _i58 < _list56.size; ++_i58)
          {
            _elem57 = new com.lesports.api.common.LangString();
            _elem57.read(iprot);
            struct.multiLangCities.add(_elem57);
          }
        }
        struct.setMultiLangCitiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.backgroupImageUrl = iprot.readString();
        struct.setBackgroupImageUrlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.gameFType = iprot.readString();
        struct.setGameFTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.gameSType = iprot.readString();
        struct.setGameSTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list59.size);
          com.lesports.api.common.LangString _elem60;
          for (int _i61 = 0; _i61 < _list59.size; ++_i61)
          {
            _elem60 = new com.lesports.api.common.LangString();
            _elem60.read(iprot);
            struct.multiLangDesc.add(_elem60);
          }
        }
        struct.setMultiLangDescIsSet(true);
      }
      if (incoming.get(17)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>(_list62.size);
          com.lesports.api.common.LangString _elem63;
          for (int _i64 = 0; _i64 < _list62.size; ++_i64)
          {
            _elem63 = new com.lesports.api.common.LangString();
            _elem63.read(iprot);
            struct.multiLangNicknames.add(_elem63);
          }
        }
        struct.setMultiLangNicknamesIsSet(true);
      }
      if (incoming.get(19)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(20)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(21)) {
        struct.bgWebUrl = iprot.readString();
        struct.setBgWebUrlIsSet(true);
      }
      if (incoming.get(22)) {
        struct.squadOrder = iprot.readI32();
        struct.setSquadOrderIsSet(true);
      }
      if (incoming.get(23)) {
        struct.boleId = iprot.readI64();
        struct.setBoleIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.positionId = iprot.readI64();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>(_list65.size);
          com.lesports.api.common.LangString _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = new com.lesports.api.common.LangString();
            _elem66.read(iprot);
            struct.multiLangGameFType.add(_elem66);
          }
        }
        struct.setMultiLangGameFTypeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.nationalTeam = new PlayingTeam();
        struct.nationalTeam.read(iprot);
        struct.setNationalTeamIsSet(true);
      }
      if (incoming.get(27)) {
        struct.clubTeam = new PlayingTeam();
        struct.clubTeam.read(iprot);
        struct.setClubTeamIsSet(true);
      }
      if (incoming.get(28)) {
        struct.gameFTypeId = iprot.readI64();
        struct.setGameFTypeIdIsSet(true);
      }
      if (incoming.get(29)) {
        struct.careerValue = iprot.readString();
        struct.setCareerValueIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCareerValue = new ArrayList<com.lesports.api.common.LangString>(_list68.size);
          com.lesports.api.common.LangString _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new com.lesports.api.common.LangString();
            _elem69.read(iprot);
            struct.multiLangCareerValue.add(_elem69);
          }
        }
        struct.setMultiLangCareerValueIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.careerTeams = new ArrayList<PlayingTeam>(_list71.size);
          PlayingTeam _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new PlayingTeam();
            _elem72.read(iprot);
            struct.careerTeams.add(_elem72);
          }
        }
        struct.setCareerTeamsIsSet(true);
      }
      if (incoming.get(32)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(_list74.size);
          com.lesports.api.common.LangString _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = new com.lesports.api.common.LangString();
            _elem75.read(iprot);
            struct.multiLangPositionNames.add(_elem75);
          }
        }
        struct.setMultiLangPositionNamesIsSet(true);
      }
      if (incoming.get(33)) {
        struct.experience = iprot.readString();
        struct.setExperienceIsSet(true);
      }
      if (incoming.get(34)) {
        struct.draft = iprot.readString();
        struct.setDraftIsSet(true);
      }
      if (incoming.get(35)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDraft = new ArrayList<com.lesports.api.common.LangString>(_list77.size);
          com.lesports.api.common.LangString _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new com.lesports.api.common.LangString();
            _elem78.read(iprot);
            struct.multiLangDraft.add(_elem78);
          }
        }
        struct.setMultiLangDraftIsSet(true);
      }
      if (incoming.get(36)) {
        struct.salary = iprot.readString();
        struct.setSalaryIsSet(true);
      }
      if (incoming.get(37)) {
        struct.school = iprot.readString();
        struct.setSchoolIsSet(true);
      }
    }
  }

}

