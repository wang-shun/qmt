/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 球员生涯统计
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TPlayerCareerStat implements org.apache.thrift.TBase<TPlayerCareerStat, TPlayerCareerStat._Fields>, java.io.Serializable, Cloneable, Comparable<TPlayerCareerStat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlayerCareerStat");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TEAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TEAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("teamLogo", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPlayerCareerStatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPlayerCareerStatTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private long teamId; // optional
  private String teamName; // optional
  private int teamType; // optional
  private Map<String,String> stats; // optional
  private long playerId; // optional
  private String teamLogo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    TEAM_ID((short)3, "teamId"),
    TEAM_NAME((short)4, "teamName"),
    TEAM_TYPE((short)5, "teamType"),
    STATS((short)6, "stats"),
    PLAYER_ID((short)7, "playerId"),
    TEAM_LOGO((short)8, "teamLogo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // TEAM_ID
          return TEAM_ID;
        case 4: // TEAM_NAME
          return TEAM_NAME;
        case 5: // TEAM_TYPE
          return TEAM_TYPE;
        case 6: // STATS
          return STATS;
        case 7: // PLAYER_ID
          return PLAYER_ID;
        case 8: // TEAM_LOGO
          return TEAM_LOGO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TEAMID_ISSET_ID = 1;
  private static final int __TEAMTYPE_ISSET_ID = 2;
  private static final int __PLAYERID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.TEAM_ID,_Fields.TEAM_NAME,_Fields.TEAM_TYPE,_Fields.STATS,_Fields.PLAYER_ID,_Fields.TEAM_LOGO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("teamType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_LOGO, new org.apache.thrift.meta_data.FieldMetaData("teamLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlayerCareerStat.class, metaDataMap);
  }

  public TPlayerCareerStat() {
  }

  public TPlayerCareerStat(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlayerCareerStat(TPlayerCareerStat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.teamId = other.teamId;
    if (other.isSetTeamName()) {
      this.teamName = other.teamName;
    }
    this.teamType = other.teamType;
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    this.playerId = other.playerId;
    if (other.isSetTeamLogo()) {
      this.teamLogo = other.teamLogo;
    }
  }

  public TPlayerCareerStat deepCopy() {
    return new TPlayerCareerStat(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    setTeamIdIsSet(false);
    this.teamId = 0;
    this.teamName = null;
    setTeamTypeIsSet(false);
    this.teamType = 0;
    this.stats = null;
    setPlayerIdIsSet(false);
    this.playerId = 0;
    this.teamLogo = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getTeamId() {
    return this.teamId;
  }

  public void setTeamId(long teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
  }

  public void unsetTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public String getTeamName() {
    return this.teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }

  public void unsetTeamName() {
    this.teamName = null;
  }

  /** Returns true if field teamName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamName() {
    return this.teamName != null;
  }

  public void setTeamNameIsSet(boolean value) {
    if (!value) {
      this.teamName = null;
    }
  }

  public int getTeamType() {
    return this.teamType;
  }

  public void setTeamType(int teamType) {
    this.teamType = teamType;
    setTeamTypeIsSet(true);
  }

  public void unsetTeamType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  /** Returns true if field teamType is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamType() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  public void setTeamTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMTYPE_ISSET_ID, value);
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public long getPlayerId() {
    return this.playerId;
  }

  public void setPlayerId(long playerId) {
    this.playerId = playerId;
    setPlayerIdIsSet(true);
  }

  public void unsetPlayerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  public void setPlayerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
  }

  public String getTeamLogo() {
    return this.teamLogo;
  }

  public void setTeamLogo(String teamLogo) {
    this.teamLogo = teamLogo;
  }

  public void unsetTeamLogo() {
    this.teamLogo = null;
  }

  /** Returns true if field teamLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamLogo() {
    return this.teamLogo != null;
  }

  public void setTeamLogoIsSet(boolean value) {
    if (!value) {
      this.teamLogo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Long)value);
      }
      break;

    case TEAM_NAME:
      if (value == null) {
        unsetTeamName();
      } else {
        setTeamName((String)value);
      }
      break;

    case TEAM_TYPE:
      if (value == null) {
        unsetTeamType();
      } else {
        setTeamType((Integer)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case PLAYER_ID:
      if (value == null) {
        unsetPlayerId();
      } else {
        setPlayerId((Long)value);
      }
      break;

    case TEAM_LOGO:
      if (value == null) {
        unsetTeamLogo();
      } else {
        setTeamLogo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case TEAM_ID:
      return Long.valueOf(getTeamId());

    case TEAM_NAME:
      return getTeamName();

    case TEAM_TYPE:
      return Integer.valueOf(getTeamType());

    case STATS:
      return getStats();

    case PLAYER_ID:
      return Long.valueOf(getPlayerId());

    case TEAM_LOGO:
      return getTeamLogo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case TEAM_ID:
      return isSetTeamId();
    case TEAM_NAME:
      return isSetTeamName();
    case TEAM_TYPE:
      return isSetTeamType();
    case STATS:
      return isSetStats();
    case PLAYER_ID:
      return isSetPlayerId();
    case TEAM_LOGO:
      return isSetTeamLogo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPlayerCareerStat)
      return this.equals((TPlayerCareerStat)that);
    return false;
  }

  public boolean equals(TPlayerCareerStat that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    boolean this_present_teamName = true && this.isSetTeamName();
    boolean that_present_teamName = true && that.isSetTeamName();
    if (this_present_teamName || that_present_teamName) {
      if (!(this_present_teamName && that_present_teamName))
        return false;
      if (!this.teamName.equals(that.teamName))
        return false;
    }

    boolean this_present_teamType = true && this.isSetTeamType();
    boolean that_present_teamType = true && that.isSetTeamType();
    if (this_present_teamType || that_present_teamType) {
      if (!(this_present_teamType && that_present_teamType))
        return false;
      if (this.teamType != that.teamType)
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_playerId = true && this.isSetPlayerId();
    boolean that_present_playerId = true && that.isSetPlayerId();
    if (this_present_playerId || that_present_playerId) {
      if (!(this_present_playerId && that_present_playerId))
        return false;
      if (this.playerId != that.playerId)
        return false;
    }

    boolean this_present_teamLogo = true && this.isSetTeamLogo();
    boolean that_present_teamLogo = true && that.isSetTeamLogo();
    if (this_present_teamLogo || that_present_teamLogo) {
      if (!(this_present_teamLogo && that_present_teamLogo))
        return false;
      if (!this.teamLogo.equals(that.teamLogo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_teamName = true && (isSetTeamName());
    list.add(present_teamName);
    if (present_teamName)
      list.add(teamName);

    boolean present_teamType = true && (isSetTeamType());
    list.add(present_teamType);
    if (present_teamType)
      list.add(teamType);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_playerId = true && (isSetPlayerId());
    list.add(present_playerId);
    if (present_playerId)
      list.add(playerId);

    boolean present_teamLogo = true && (isSetTeamLogo());
    list.add(present_teamLogo);
    if (present_teamLogo)
      list.add(teamLogo);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPlayerCareerStat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamName()).compareTo(other.isSetTeamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamName, other.teamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamType()).compareTo(other.isSetTeamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamType, other.teamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(other.isSetPlayerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, other.playerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamLogo()).compareTo(other.isSetTeamLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamLogo, other.teamLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPlayerCareerStat(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetTeamId()) {
      if (!first) sb.append(", ");
      sb.append("teamId:");
      sb.append(this.teamId);
      first = false;
    }
    if (isSetTeamName()) {
      if (!first) sb.append(", ");
      sb.append("teamName:");
      if (this.teamName == null) {
        sb.append("null");
      } else {
        sb.append(this.teamName);
      }
      first = false;
    }
    if (isSetTeamType()) {
      if (!first) sb.append(", ");
      sb.append("teamType:");
      sb.append(this.teamType);
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetPlayerId()) {
      if (!first) sb.append(", ");
      sb.append("playerId:");
      sb.append(this.playerId);
      first = false;
    }
    if (isSetTeamLogo()) {
      if (!first) sb.append(", ");
      sb.append("teamLogo:");
      if (this.teamLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.teamLogo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlayerCareerStatStandardSchemeFactory implements SchemeFactory {
    public TPlayerCareerStatStandardScheme getScheme() {
      return new TPlayerCareerStatStandardScheme();
    }
  }

  private static class TPlayerCareerStatStandardScheme extends StandardScheme<TPlayerCareerStat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlayerCareerStat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.teamId = iprot.readI64();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamName = iprot.readString();
              struct.setTeamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teamType = iprot.readI32();
              struct.setTeamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map160.size);
                String _key161;
                String _val162;
                for (int _i163 = 0; _i163 < _map160.size; ++_i163)
                {
                  _key161 = iprot.readString();
                  _val162 = iprot.readString();
                  struct.stats.put(_key161, _val162);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.playerId = iprot.readI64();
              struct.setPlayerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamLogo = iprot.readString();
              struct.setTeamLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlayerCareerStat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTeamId()) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeI64(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.teamName != null) {
        if (struct.isSetTeamName()) {
          oprot.writeFieldBegin(TEAM_NAME_FIELD_DESC);
          oprot.writeString(struct.teamName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTeamType()) {
        oprot.writeFieldBegin(TEAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.teamType);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter164 : struct.stats.entrySet())
            {
              oprot.writeString(_iter164.getKey());
              oprot.writeString(_iter164.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPlayerId()) {
        oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
        oprot.writeI64(struct.playerId);
        oprot.writeFieldEnd();
      }
      if (struct.teamLogo != null) {
        if (struct.isSetTeamLogo()) {
          oprot.writeFieldBegin(TEAM_LOGO_FIELD_DESC);
          oprot.writeString(struct.teamLogo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlayerCareerStatTupleSchemeFactory implements SchemeFactory {
    public TPlayerCareerStatTupleScheme getScheme() {
      return new TPlayerCareerStatTupleScheme();
    }
  }

  private static class TPlayerCareerStatTupleScheme extends TupleScheme<TPlayerCareerStat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlayerCareerStat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetTeamId()) {
        optionals.set(2);
      }
      if (struct.isSetTeamName()) {
        optionals.set(3);
      }
      if (struct.isSetTeamType()) {
        optionals.set(4);
      }
      if (struct.isSetStats()) {
        optionals.set(5);
      }
      if (struct.isSetPlayerId()) {
        optionals.set(6);
      }
      if (struct.isSetTeamLogo()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetTeamId()) {
        oprot.writeI64(struct.teamId);
      }
      if (struct.isSetTeamName()) {
        oprot.writeString(struct.teamName);
      }
      if (struct.isSetTeamType()) {
        oprot.writeI32(struct.teamType);
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter165 : struct.stats.entrySet())
          {
            oprot.writeString(_iter165.getKey());
            oprot.writeString(_iter165.getValue());
          }
        }
      }
      if (struct.isSetPlayerId()) {
        oprot.writeI64(struct.playerId);
      }
      if (struct.isSetTeamLogo()) {
        oprot.writeString(struct.teamLogo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlayerCareerStat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.teamId = iprot.readI64();
        struct.setTeamIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.teamName = iprot.readString();
        struct.setTeamNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.teamType = iprot.readI32();
        struct.setTeamTypeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map166.size);
          String _key167;
          String _val168;
          for (int _i169 = 0; _i169 < _map166.size; ++_i169)
          {
            _key167 = iprot.readString();
            _val168 = iprot.readString();
            struct.stats.put(_key167, _val168);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.playerId = iprot.readI64();
        struct.setPlayerIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.teamLogo = iprot.readString();
        struct.setTeamLogoIsSet(true);
      }
    }
  }

}

