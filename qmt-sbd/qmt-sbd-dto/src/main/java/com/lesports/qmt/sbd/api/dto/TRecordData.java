/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TRecordData implements org.apache.thrift.TBase<TRecordData, TRecordData._Fields>, java.io.Serializable, Cloneable, Comparable<TRecordData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRecordData");

  private static final org.apache.thrift.protocol.TField IS_CURRENT_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("isCurrentRecord", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GEN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("genDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField COMPETITOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField COMPETITOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_COMPETITOR_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCompetitorNames", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField COUNTRY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("countryName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_COUNTRY_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCountryNames", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField COUNTRY_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("countryLogo", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RECORD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("recordType", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRecordDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRecordDataTupleSchemeFactory());
  }

  private boolean isCurrentRecord; // optional
  private String resultType; // optional
  private String result; // optional
  private long countryId; // optional
  private String city; // optional
  private String genDate; // optional
  private long competitorId; // optional
  private com.lesports.qmt.sbd.api.common.CompetitorType competitorType; // optional
  private String competitorName; // optional
  private List<com.lesports.api.common.LangString> multiLangCompetitorNames; // optional
  private String countryName; // optional
  private List<com.lesports.api.common.LangString> multiLangCountryNames; // optional
  private String countryLogo; // optional
  private RecordType recordType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_CURRENT_RECORD((short)1, "isCurrentRecord"),
    RESULT_TYPE((short)2, "resultType"),
    RESULT((short)3, "result"),
    COUNTRY_ID((short)4, "countryId"),
    CITY((short)5, "city"),
    GEN_DATE((short)6, "genDate"),
    COMPETITOR_ID((short)7, "competitorId"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CompetitorType
     */
    COMPETITOR_TYPE((short)8, "competitorType"),
    COMPETITOR_NAME((short)9, "competitorName"),
    MULTI_LANG_COMPETITOR_NAMES((short)10, "multiLangCompetitorNames"),
    COUNTRY_NAME((short)11, "countryName"),
    MULTI_LANG_COUNTRY_NAMES((short)12, "multiLangCountryNames"),
    COUNTRY_LOGO((short)13, "countryLogo"),
    /**
     * 
     * @see RecordType
     */
    RECORD_TYPE((short)14, "recordType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_CURRENT_RECORD
          return IS_CURRENT_RECORD;
        case 2: // RESULT_TYPE
          return RESULT_TYPE;
        case 3: // RESULT
          return RESULT;
        case 4: // COUNTRY_ID
          return COUNTRY_ID;
        case 5: // CITY
          return CITY;
        case 6: // GEN_DATE
          return GEN_DATE;
        case 7: // COMPETITOR_ID
          return COMPETITOR_ID;
        case 8: // COMPETITOR_TYPE
          return COMPETITOR_TYPE;
        case 9: // COMPETITOR_NAME
          return COMPETITOR_NAME;
        case 10: // MULTI_LANG_COMPETITOR_NAMES
          return MULTI_LANG_COMPETITOR_NAMES;
        case 11: // COUNTRY_NAME
          return COUNTRY_NAME;
        case 12: // MULTI_LANG_COUNTRY_NAMES
          return MULTI_LANG_COUNTRY_NAMES;
        case 13: // COUNTRY_LOGO
          return COUNTRY_LOGO;
        case 14: // RECORD_TYPE
          return RECORD_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISCURRENTRECORD_ISSET_ID = 0;
  private static final int __COUNTRYID_ISSET_ID = 1;
  private static final int __COMPETITORID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_CURRENT_RECORD,_Fields.RESULT_TYPE,_Fields.RESULT,_Fields.COUNTRY_ID,_Fields.CITY,_Fields.GEN_DATE,_Fields.COMPETITOR_ID,_Fields.COMPETITOR_TYPE,_Fields.COMPETITOR_NAME,_Fields.MULTI_LANG_COMPETITOR_NAMES,_Fields.COUNTRY_NAME,_Fields.MULTI_LANG_COUNTRY_NAMES,_Fields.COUNTRY_LOGO,_Fields.RECORD_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_CURRENT_RECORD, new org.apache.thrift.meta_data.FieldMetaData("isCurrentRecord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESULT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resultType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEN_DATE, new org.apache.thrift.meta_data.FieldMetaData("genDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("competitorType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CompetitorType.class)));
    tmpMap.put(_Fields.COMPETITOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("competitorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_COMPETITOR_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCompetitorNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.COUNTRY_NAME, new org.apache.thrift.meta_data.FieldMetaData("countryName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_COUNTRY_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCountryNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.COUNTRY_LOGO, new org.apache.thrift.meta_data.FieldMetaData("countryLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("recordType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RecordType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRecordData.class, metaDataMap);
  }

  public TRecordData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRecordData(TRecordData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isCurrentRecord = other.isCurrentRecord;
    if (other.isSetResultType()) {
      this.resultType = other.resultType;
    }
    if (other.isSetResult()) {
      this.result = other.result;
    }
    this.countryId = other.countryId;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetGenDate()) {
      this.genDate = other.genDate;
    }
    this.competitorId = other.competitorId;
    if (other.isSetCompetitorType()) {
      this.competitorType = other.competitorType;
    }
    if (other.isSetCompetitorName()) {
      this.competitorName = other.competitorName;
    }
    if (other.isSetMultiLangCompetitorNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCompetitorNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCompetitorNames) {
        __this__multiLangCompetitorNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCompetitorNames = __this__multiLangCompetitorNames;
    }
    if (other.isSetCountryName()) {
      this.countryName = other.countryName;
    }
    if (other.isSetMultiLangCountryNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangCountryNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCountryNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCountryNames) {
        __this__multiLangCountryNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCountryNames = __this__multiLangCountryNames;
    }
    if (other.isSetCountryLogo()) {
      this.countryLogo = other.countryLogo;
    }
    if (other.isSetRecordType()) {
      this.recordType = other.recordType;
    }
  }

  public TRecordData deepCopy() {
    return new TRecordData(this);
  }

  @Override
  public void clear() {
    setIsCurrentRecordIsSet(false);
    this.isCurrentRecord = false;
    this.resultType = null;
    this.result = null;
    setCountryIdIsSet(false);
    this.countryId = 0;
    this.city = null;
    this.genDate = null;
    setCompetitorIdIsSet(false);
    this.competitorId = 0;
    this.competitorType = null;
    this.competitorName = null;
    this.multiLangCompetitorNames = null;
    this.countryName = null;
    this.multiLangCountryNames = null;
    this.countryLogo = null;
    this.recordType = null;
  }

  public boolean isIsCurrentRecord() {
    return this.isCurrentRecord;
  }

  public void setIsCurrentRecord(boolean isCurrentRecord) {
    this.isCurrentRecord = isCurrentRecord;
    setIsCurrentRecordIsSet(true);
  }

  public void unsetIsCurrentRecord() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCURRENTRECORD_ISSET_ID);
  }

  /** Returns true if field isCurrentRecord is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCurrentRecord() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCURRENTRECORD_ISSET_ID);
  }

  public void setIsCurrentRecordIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCURRENTRECORD_ISSET_ID, value);
  }

  public String getResultType() {
    return this.resultType;
  }

  public void setResultType(String resultType) {
    this.resultType = resultType;
  }

  public void unsetResultType() {
    this.resultType = null;
  }

  /** Returns true if field resultType is set (has been assigned a value) and false otherwise */
  public boolean isSetResultType() {
    return this.resultType != null;
  }

  public void setResultTypeIsSet(boolean value) {
    if (!value) {
      this.resultType = null;
    }
  }

  public String getResult() {
    return this.result;
  }

  public void setResult(String result) {
    this.result = result;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public long getCountryId() {
    return this.countryId;
  }

  public void setCountryId(long countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
  }

  public void unsetCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getGenDate() {
    return this.genDate;
  }

  public void setGenDate(String genDate) {
    this.genDate = genDate;
  }

  public void unsetGenDate() {
    this.genDate = null;
  }

  /** Returns true if field genDate is set (has been assigned a value) and false otherwise */
  public boolean isSetGenDate() {
    return this.genDate != null;
  }

  public void setGenDateIsSet(boolean value) {
    if (!value) {
      this.genDate = null;
    }
  }

  public long getCompetitorId() {
    return this.competitorId;
  }

  public void setCompetitorId(long competitorId) {
    this.competitorId = competitorId;
    setCompetitorIdIsSet(true);
  }

  public void unsetCompetitorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  public void setCompetitorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public com.lesports.qmt.sbd.api.common.CompetitorType getCompetitorType() {
    return this.competitorType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public void setCompetitorType(com.lesports.qmt.sbd.api.common.CompetitorType competitorType) {
    this.competitorType = competitorType;
  }

  public void unsetCompetitorType() {
    this.competitorType = null;
  }

  /** Returns true if field competitorType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorType() {
    return this.competitorType != null;
  }

  public void setCompetitorTypeIsSet(boolean value) {
    if (!value) {
      this.competitorType = null;
    }
  }

  public String getCompetitorName() {
    return this.competitorName;
  }

  public void setCompetitorName(String competitorName) {
    this.competitorName = competitorName;
  }

  public void unsetCompetitorName() {
    this.competitorName = null;
  }

  /** Returns true if field competitorName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorName() {
    return this.competitorName != null;
  }

  public void setCompetitorNameIsSet(boolean value) {
    if (!value) {
      this.competitorName = null;
    }
  }

  public int getMultiLangCompetitorNamesSize() {
    return (this.multiLangCompetitorNames == null) ? 0 : this.multiLangCompetitorNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCompetitorNamesIterator() {
    return (this.multiLangCompetitorNames == null) ? null : this.multiLangCompetitorNames.iterator();
  }

  public void addToMultiLangCompetitorNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangCompetitorNames == null) {
      this.multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCompetitorNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCompetitorNames() {
    return this.multiLangCompetitorNames;
  }

  public void setMultiLangCompetitorNames(List<com.lesports.api.common.LangString> multiLangCompetitorNames) {
    this.multiLangCompetitorNames = multiLangCompetitorNames;
  }

  public void unsetMultiLangCompetitorNames() {
    this.multiLangCompetitorNames = null;
  }

  /** Returns true if field multiLangCompetitorNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCompetitorNames() {
    return this.multiLangCompetitorNames != null;
  }

  public void setMultiLangCompetitorNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangCompetitorNames = null;
    }
  }

  public String getCountryName() {
    return this.countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }

  public void unsetCountryName() {
    this.countryName = null;
  }

  /** Returns true if field countryName is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryName() {
    return this.countryName != null;
  }

  public void setCountryNameIsSet(boolean value) {
    if (!value) {
      this.countryName = null;
    }
  }

  public int getMultiLangCountryNamesSize() {
    return (this.multiLangCountryNames == null) ? 0 : this.multiLangCountryNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCountryNamesIterator() {
    return (this.multiLangCountryNames == null) ? null : this.multiLangCountryNames.iterator();
  }

  public void addToMultiLangCountryNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangCountryNames == null) {
      this.multiLangCountryNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCountryNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCountryNames() {
    return this.multiLangCountryNames;
  }

  public void setMultiLangCountryNames(List<com.lesports.api.common.LangString> multiLangCountryNames) {
    this.multiLangCountryNames = multiLangCountryNames;
  }

  public void unsetMultiLangCountryNames() {
    this.multiLangCountryNames = null;
  }

  /** Returns true if field multiLangCountryNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCountryNames() {
    return this.multiLangCountryNames != null;
  }

  public void setMultiLangCountryNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangCountryNames = null;
    }
  }

  public String getCountryLogo() {
    return this.countryLogo;
  }

  public void setCountryLogo(String countryLogo) {
    this.countryLogo = countryLogo;
  }

  public void unsetCountryLogo() {
    this.countryLogo = null;
  }

  /** Returns true if field countryLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryLogo() {
    return this.countryLogo != null;
  }

  public void setCountryLogoIsSet(boolean value) {
    if (!value) {
      this.countryLogo = null;
    }
  }

  /**
   * 
   * @see RecordType
   */
  public RecordType getRecordType() {
    return this.recordType;
  }

  /**
   * 
   * @see RecordType
   */
  public void setRecordType(RecordType recordType) {
    this.recordType = recordType;
  }

  public void unsetRecordType() {
    this.recordType = null;
  }

  /** Returns true if field recordType is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordType() {
    return this.recordType != null;
  }

  public void setRecordTypeIsSet(boolean value) {
    if (!value) {
      this.recordType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_CURRENT_RECORD:
      if (value == null) {
        unsetIsCurrentRecord();
      } else {
        setIsCurrentRecord((Boolean)value);
      }
      break;

    case RESULT_TYPE:
      if (value == null) {
        unsetResultType();
      } else {
        setResultType((String)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((String)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((Long)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case GEN_DATE:
      if (value == null) {
        unsetGenDate();
      } else {
        setGenDate((String)value);
      }
      break;

    case COMPETITOR_ID:
      if (value == null) {
        unsetCompetitorId();
      } else {
        setCompetitorId((Long)value);
      }
      break;

    case COMPETITOR_TYPE:
      if (value == null) {
        unsetCompetitorType();
      } else {
        setCompetitorType((com.lesports.qmt.sbd.api.common.CompetitorType)value);
      }
      break;

    case COMPETITOR_NAME:
      if (value == null) {
        unsetCompetitorName();
      } else {
        setCompetitorName((String)value);
      }
      break;

    case MULTI_LANG_COMPETITOR_NAMES:
      if (value == null) {
        unsetMultiLangCompetitorNames();
      } else {
        setMultiLangCompetitorNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case COUNTRY_NAME:
      if (value == null) {
        unsetCountryName();
      } else {
        setCountryName((String)value);
      }
      break;

    case MULTI_LANG_COUNTRY_NAMES:
      if (value == null) {
        unsetMultiLangCountryNames();
      } else {
        setMultiLangCountryNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case COUNTRY_LOGO:
      if (value == null) {
        unsetCountryLogo();
      } else {
        setCountryLogo((String)value);
      }
      break;

    case RECORD_TYPE:
      if (value == null) {
        unsetRecordType();
      } else {
        setRecordType((RecordType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_CURRENT_RECORD:
      return Boolean.valueOf(isIsCurrentRecord());

    case RESULT_TYPE:
      return getResultType();

    case RESULT:
      return getResult();

    case COUNTRY_ID:
      return Long.valueOf(getCountryId());

    case CITY:
      return getCity();

    case GEN_DATE:
      return getGenDate();

    case COMPETITOR_ID:
      return Long.valueOf(getCompetitorId());

    case COMPETITOR_TYPE:
      return getCompetitorType();

    case COMPETITOR_NAME:
      return getCompetitorName();

    case MULTI_LANG_COMPETITOR_NAMES:
      return getMultiLangCompetitorNames();

    case COUNTRY_NAME:
      return getCountryName();

    case MULTI_LANG_COUNTRY_NAMES:
      return getMultiLangCountryNames();

    case COUNTRY_LOGO:
      return getCountryLogo();

    case RECORD_TYPE:
      return getRecordType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_CURRENT_RECORD:
      return isSetIsCurrentRecord();
    case RESULT_TYPE:
      return isSetResultType();
    case RESULT:
      return isSetResult();
    case COUNTRY_ID:
      return isSetCountryId();
    case CITY:
      return isSetCity();
    case GEN_DATE:
      return isSetGenDate();
    case COMPETITOR_ID:
      return isSetCompetitorId();
    case COMPETITOR_TYPE:
      return isSetCompetitorType();
    case COMPETITOR_NAME:
      return isSetCompetitorName();
    case MULTI_LANG_COMPETITOR_NAMES:
      return isSetMultiLangCompetitorNames();
    case COUNTRY_NAME:
      return isSetCountryName();
    case MULTI_LANG_COUNTRY_NAMES:
      return isSetMultiLangCountryNames();
    case COUNTRY_LOGO:
      return isSetCountryLogo();
    case RECORD_TYPE:
      return isSetRecordType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRecordData)
      return this.equals((TRecordData)that);
    return false;
  }

  public boolean equals(TRecordData that) {
    if (that == null)
      return false;

    boolean this_present_isCurrentRecord = true && this.isSetIsCurrentRecord();
    boolean that_present_isCurrentRecord = true && that.isSetIsCurrentRecord();
    if (this_present_isCurrentRecord || that_present_isCurrentRecord) {
      if (!(this_present_isCurrentRecord && that_present_isCurrentRecord))
        return false;
      if (this.isCurrentRecord != that.isCurrentRecord)
        return false;
    }

    boolean this_present_resultType = true && this.isSetResultType();
    boolean that_present_resultType = true && that.isSetResultType();
    if (this_present_resultType || that_present_resultType) {
      if (!(this_present_resultType && that_present_resultType))
        return false;
      if (!this.resultType.equals(that.resultType))
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_genDate = true && this.isSetGenDate();
    boolean that_present_genDate = true && that.isSetGenDate();
    if (this_present_genDate || that_present_genDate) {
      if (!(this_present_genDate && that_present_genDate))
        return false;
      if (!this.genDate.equals(that.genDate))
        return false;
    }

    boolean this_present_competitorId = true && this.isSetCompetitorId();
    boolean that_present_competitorId = true && that.isSetCompetitorId();
    if (this_present_competitorId || that_present_competitorId) {
      if (!(this_present_competitorId && that_present_competitorId))
        return false;
      if (this.competitorId != that.competitorId)
        return false;
    }

    boolean this_present_competitorType = true && this.isSetCompetitorType();
    boolean that_present_competitorType = true && that.isSetCompetitorType();
    if (this_present_competitorType || that_present_competitorType) {
      if (!(this_present_competitorType && that_present_competitorType))
        return false;
      if (!this.competitorType.equals(that.competitorType))
        return false;
    }

    boolean this_present_competitorName = true && this.isSetCompetitorName();
    boolean that_present_competitorName = true && that.isSetCompetitorName();
    if (this_present_competitorName || that_present_competitorName) {
      if (!(this_present_competitorName && that_present_competitorName))
        return false;
      if (!this.competitorName.equals(that.competitorName))
        return false;
    }

    boolean this_present_multiLangCompetitorNames = true && this.isSetMultiLangCompetitorNames();
    boolean that_present_multiLangCompetitorNames = true && that.isSetMultiLangCompetitorNames();
    if (this_present_multiLangCompetitorNames || that_present_multiLangCompetitorNames) {
      if (!(this_present_multiLangCompetitorNames && that_present_multiLangCompetitorNames))
        return false;
      if (!this.multiLangCompetitorNames.equals(that.multiLangCompetitorNames))
        return false;
    }

    boolean this_present_countryName = true && this.isSetCountryName();
    boolean that_present_countryName = true && that.isSetCountryName();
    if (this_present_countryName || that_present_countryName) {
      if (!(this_present_countryName && that_present_countryName))
        return false;
      if (!this.countryName.equals(that.countryName))
        return false;
    }

    boolean this_present_multiLangCountryNames = true && this.isSetMultiLangCountryNames();
    boolean that_present_multiLangCountryNames = true && that.isSetMultiLangCountryNames();
    if (this_present_multiLangCountryNames || that_present_multiLangCountryNames) {
      if (!(this_present_multiLangCountryNames && that_present_multiLangCountryNames))
        return false;
      if (!this.multiLangCountryNames.equals(that.multiLangCountryNames))
        return false;
    }

    boolean this_present_countryLogo = true && this.isSetCountryLogo();
    boolean that_present_countryLogo = true && that.isSetCountryLogo();
    if (this_present_countryLogo || that_present_countryLogo) {
      if (!(this_present_countryLogo && that_present_countryLogo))
        return false;
      if (!this.countryLogo.equals(that.countryLogo))
        return false;
    }

    boolean this_present_recordType = true && this.isSetRecordType();
    boolean that_present_recordType = true && that.isSetRecordType();
    if (this_present_recordType || that_present_recordType) {
      if (!(this_present_recordType && that_present_recordType))
        return false;
      if (!this.recordType.equals(that.recordType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isCurrentRecord = true && (isSetIsCurrentRecord());
    list.add(present_isCurrentRecord);
    if (present_isCurrentRecord)
      list.add(isCurrentRecord);

    boolean present_resultType = true && (isSetResultType());
    list.add(present_resultType);
    if (present_resultType)
      list.add(resultType);

    boolean present_result = true && (isSetResult());
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_countryId = true && (isSetCountryId());
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_genDate = true && (isSetGenDate());
    list.add(present_genDate);
    if (present_genDate)
      list.add(genDate);

    boolean present_competitorId = true && (isSetCompetitorId());
    list.add(present_competitorId);
    if (present_competitorId)
      list.add(competitorId);

    boolean present_competitorType = true && (isSetCompetitorType());
    list.add(present_competitorType);
    if (present_competitorType)
      list.add(competitorType.getValue());

    boolean present_competitorName = true && (isSetCompetitorName());
    list.add(present_competitorName);
    if (present_competitorName)
      list.add(competitorName);

    boolean present_multiLangCompetitorNames = true && (isSetMultiLangCompetitorNames());
    list.add(present_multiLangCompetitorNames);
    if (present_multiLangCompetitorNames)
      list.add(multiLangCompetitorNames);

    boolean present_countryName = true && (isSetCountryName());
    list.add(present_countryName);
    if (present_countryName)
      list.add(countryName);

    boolean present_multiLangCountryNames = true && (isSetMultiLangCountryNames());
    list.add(present_multiLangCountryNames);
    if (present_multiLangCountryNames)
      list.add(multiLangCountryNames);

    boolean present_countryLogo = true && (isSetCountryLogo());
    list.add(present_countryLogo);
    if (present_countryLogo)
      list.add(countryLogo);

    boolean present_recordType = true && (isSetRecordType());
    list.add(present_recordType);
    if (present_recordType)
      list.add(recordType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TRecordData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsCurrentRecord()).compareTo(other.isSetIsCurrentRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCurrentRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCurrentRecord, other.isCurrentRecord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultType()).compareTo(other.isSetResultType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultType, other.resultType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenDate()).compareTo(other.isSetGenDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genDate, other.genDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorType()).compareTo(other.isSetCompetitorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorType, other.competitorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorName()).compareTo(other.isSetCompetitorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorName, other.competitorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCompetitorNames()).compareTo(other.isSetMultiLangCompetitorNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCompetitorNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCompetitorNames, other.multiLangCompetitorNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryName()).compareTo(other.isSetCountryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryName, other.countryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCountryNames()).compareTo(other.isSetMultiLangCountryNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCountryNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCountryNames, other.multiLangCountryNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryLogo()).compareTo(other.isSetCountryLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryLogo, other.countryLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordType()).compareTo(other.isSetRecordType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordType, other.recordType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRecordData(");
    boolean first = true;

    if (isSetIsCurrentRecord()) {
      sb.append("isCurrentRecord:");
      sb.append(this.isCurrentRecord);
      first = false;
    }
    if (isSetResultType()) {
      if (!first) sb.append(", ");
      sb.append("resultType:");
      if (this.resultType == null) {
        sb.append("null");
      } else {
        sb.append(this.resultType);
      }
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetCountryId()) {
      if (!first) sb.append(", ");
      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetGenDate()) {
      if (!first) sb.append(", ");
      sb.append("genDate:");
      if (this.genDate == null) {
        sb.append("null");
      } else {
        sb.append(this.genDate);
      }
      first = false;
    }
    if (isSetCompetitorId()) {
      if (!first) sb.append(", ");
      sb.append("competitorId:");
      sb.append(this.competitorId);
      first = false;
    }
    if (isSetCompetitorType()) {
      if (!first) sb.append(", ");
      sb.append("competitorType:");
      if (this.competitorType == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorType);
      }
      first = false;
    }
    if (isSetCompetitorName()) {
      if (!first) sb.append(", ");
      sb.append("competitorName:");
      if (this.competitorName == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorName);
      }
      first = false;
    }
    if (isSetMultiLangCompetitorNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCompetitorNames:");
      if (this.multiLangCompetitorNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCompetitorNames);
      }
      first = false;
    }
    if (isSetCountryName()) {
      if (!first) sb.append(", ");
      sb.append("countryName:");
      if (this.countryName == null) {
        sb.append("null");
      } else {
        sb.append(this.countryName);
      }
      first = false;
    }
    if (isSetMultiLangCountryNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCountryNames:");
      if (this.multiLangCountryNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCountryNames);
      }
      first = false;
    }
    if (isSetCountryLogo()) {
      if (!first) sb.append(", ");
      sb.append("countryLogo:");
      if (this.countryLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.countryLogo);
      }
      first = false;
    }
    if (isSetRecordType()) {
      if (!first) sb.append(", ");
      sb.append("recordType:");
      if (this.recordType == null) {
        sb.append("null");
      } else {
        sb.append(this.recordType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRecordDataStandardSchemeFactory implements SchemeFactory {
    public TRecordDataStandardScheme getScheme() {
      return new TRecordDataStandardScheme();
    }
  }

  private static class TRecordDataStandardScheme extends StandardScheme<TRecordData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRecordData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_CURRENT_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isCurrentRecord = iprot.readBool();
              struct.setIsCurrentRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultType = iprot.readString();
              struct.setResultTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.result = iprot.readString();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.countryId = iprot.readI64();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GEN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genDate = iprot.readString();
              struct.setGenDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPETITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitorId = iprot.readI64();
              struct.setCompetitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPETITOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
              struct.setCompetitorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMPETITOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.competitorName = iprot.readString();
              struct.setCompetitorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MULTI_LANG_COMPETITOR_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>(_list8.size);
                com.lesports.api.common.LangString _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new com.lesports.api.common.LangString();
                  _elem9.read(iprot);
                  struct.multiLangCompetitorNames.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCompetitorNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COUNTRY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryName = iprot.readString();
              struct.setCountryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MULTI_LANG_COUNTRY_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.multiLangCountryNames = new ArrayList<com.lesports.api.common.LangString>(_list11.size);
                com.lesports.api.common.LangString _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new com.lesports.api.common.LangString();
                  _elem12.read(iprot);
                  struct.multiLangCountryNames.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCountryNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COUNTRY_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryLogo = iprot.readString();
              struct.setCountryLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RECORD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordType = com.lesports.qmt.sbd.api.dto.RecordType.findByValue(iprot.readI32());
              struct.setRecordTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRecordData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIsCurrentRecord()) {
        oprot.writeFieldBegin(IS_CURRENT_RECORD_FIELD_DESC);
        oprot.writeBool(struct.isCurrentRecord);
        oprot.writeFieldEnd();
      }
      if (struct.resultType != null) {
        if (struct.isSetResultType()) {
          oprot.writeFieldBegin(RESULT_TYPE_FIELD_DESC);
          oprot.writeString(struct.resultType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          oprot.writeString(struct.result);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCountryId()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.countryId);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.genDate != null) {
        if (struct.isSetGenDate()) {
          oprot.writeFieldBegin(GEN_DATE_FIELD_DESC);
          oprot.writeString(struct.genDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompetitorId()) {
        oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorId);
        oprot.writeFieldEnd();
      }
      if (struct.competitorType != null) {
        if (struct.isSetCompetitorType()) {
          oprot.writeFieldBegin(COMPETITOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.competitorType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitorName != null) {
        if (struct.isSetCompetitorName()) {
          oprot.writeFieldBegin(COMPETITOR_NAME_FIELD_DESC);
          oprot.writeString(struct.competitorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCompetitorNames != null) {
        if (struct.isSetMultiLangCompetitorNames()) {
          oprot.writeFieldBegin(MULTI_LANG_COMPETITOR_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCompetitorNames.size()));
            for (com.lesports.api.common.LangString _iter14 : struct.multiLangCompetitorNames)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryName != null) {
        if (struct.isSetCountryName()) {
          oprot.writeFieldBegin(COUNTRY_NAME_FIELD_DESC);
          oprot.writeString(struct.countryName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCountryNames != null) {
        if (struct.isSetMultiLangCountryNames()) {
          oprot.writeFieldBegin(MULTI_LANG_COUNTRY_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCountryNames.size()));
            for (com.lesports.api.common.LangString _iter15 : struct.multiLangCountryNames)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryLogo != null) {
        if (struct.isSetCountryLogo()) {
          oprot.writeFieldBegin(COUNTRY_LOGO_FIELD_DESC);
          oprot.writeString(struct.countryLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recordType != null) {
        if (struct.isSetRecordType()) {
          oprot.writeFieldBegin(RECORD_TYPE_FIELD_DESC);
          oprot.writeI32(struct.recordType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRecordDataTupleSchemeFactory implements SchemeFactory {
    public TRecordDataTupleScheme getScheme() {
      return new TRecordDataTupleScheme();
    }
  }

  private static class TRecordDataTupleScheme extends TupleScheme<TRecordData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRecordData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsCurrentRecord()) {
        optionals.set(0);
      }
      if (struct.isSetResultType()) {
        optionals.set(1);
      }
      if (struct.isSetResult()) {
        optionals.set(2);
      }
      if (struct.isSetCountryId()) {
        optionals.set(3);
      }
      if (struct.isSetCity()) {
        optionals.set(4);
      }
      if (struct.isSetGenDate()) {
        optionals.set(5);
      }
      if (struct.isSetCompetitorId()) {
        optionals.set(6);
      }
      if (struct.isSetCompetitorType()) {
        optionals.set(7);
      }
      if (struct.isSetCompetitorName()) {
        optionals.set(8);
      }
      if (struct.isSetMultiLangCompetitorNames()) {
        optionals.set(9);
      }
      if (struct.isSetCountryName()) {
        optionals.set(10);
      }
      if (struct.isSetMultiLangCountryNames()) {
        optionals.set(11);
      }
      if (struct.isSetCountryLogo()) {
        optionals.set(12);
      }
      if (struct.isSetRecordType()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetIsCurrentRecord()) {
        oprot.writeBool(struct.isCurrentRecord);
      }
      if (struct.isSetResultType()) {
        oprot.writeString(struct.resultType);
      }
      if (struct.isSetResult()) {
        oprot.writeString(struct.result);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI64(struct.countryId);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetGenDate()) {
        oprot.writeString(struct.genDate);
      }
      if (struct.isSetCompetitorId()) {
        oprot.writeI64(struct.competitorId);
      }
      if (struct.isSetCompetitorType()) {
        oprot.writeI32(struct.competitorType.getValue());
      }
      if (struct.isSetCompetitorName()) {
        oprot.writeString(struct.competitorName);
      }
      if (struct.isSetMultiLangCompetitorNames()) {
        {
          oprot.writeI32(struct.multiLangCompetitorNames.size());
          for (com.lesports.api.common.LangString _iter16 : struct.multiLangCompetitorNames)
          {
            _iter16.write(oprot);
          }
        }
      }
      if (struct.isSetCountryName()) {
        oprot.writeString(struct.countryName);
      }
      if (struct.isSetMultiLangCountryNames()) {
        {
          oprot.writeI32(struct.multiLangCountryNames.size());
          for (com.lesports.api.common.LangString _iter17 : struct.multiLangCountryNames)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetCountryLogo()) {
        oprot.writeString(struct.countryLogo);
      }
      if (struct.isSetRecordType()) {
        oprot.writeI32(struct.recordType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRecordData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.isCurrentRecord = iprot.readBool();
        struct.setIsCurrentRecordIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resultType = iprot.readString();
        struct.setResultTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.result = iprot.readString();
        struct.setResultIsSet(true);
      }
      if (incoming.get(3)) {
        struct.countryId = iprot.readI64();
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.genDate = iprot.readString();
        struct.setGenDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.competitorId = iprot.readI64();
        struct.setCompetitorIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
        struct.setCompetitorTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.competitorName = iprot.readString();
        struct.setCompetitorNameIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>(_list18.size);
          com.lesports.api.common.LangString _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new com.lesports.api.common.LangString();
            _elem19.read(iprot);
            struct.multiLangCompetitorNames.add(_elem19);
          }
        }
        struct.setMultiLangCompetitorNamesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.countryName = iprot.readString();
        struct.setCountryNameIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCountryNames = new ArrayList<com.lesports.api.common.LangString>(_list21.size);
          com.lesports.api.common.LangString _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new com.lesports.api.common.LangString();
            _elem22.read(iprot);
            struct.multiLangCountryNames.add(_elem22);
          }
        }
        struct.setMultiLangCountryNamesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.countryLogo = iprot.readString();
        struct.setCountryLogoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.recordType = com.lesports.qmt.sbd.api.dto.RecordType.findByValue(iprot.readI32());
        struct.setRecordTypeIsSet(true);
      }
    }
  }

}

