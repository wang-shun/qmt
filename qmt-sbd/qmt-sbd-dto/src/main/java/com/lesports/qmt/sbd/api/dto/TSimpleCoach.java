/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TSimpleCoach implements org.apache.thrift.TBase<TSimpleCoach, TSimpleCoach._Fields>, java.io.Serializable, Cloneable, Comparable<TSimpleCoach> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSimpleCoach");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENGLISH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("englishName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRY_IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("countryImgUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COACH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("coachType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EXTEND_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extendInfos", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSimpleCoachStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSimpleCoachTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private String englishName; // optional
  private long countryId; // optional
  private String nationality; // optional
  private String countryImgUrl; // optional
  private String imageUrl; // optional
  private CoachType coachType; // optional
  private Map<String,String> extendInfos; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    ENGLISH_NAME((short)3, "englishName"),
    COUNTRY_ID((short)4, "countryId"),
    NATIONALITY((short)5, "nationality"),
    COUNTRY_IMG_URL((short)6, "countryImgUrl"),
    IMAGE_URL((short)7, "imageUrl"),
    /**
     * 
     * @see CoachType
     */
    COACH_TYPE((short)8, "coachType"),
    EXTEND_INFOS((short)9, "extendInfos"),
    MULTI_LANG_NAMES((short)10, "multiLangNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ENGLISH_NAME
          return ENGLISH_NAME;
        case 4: // COUNTRY_ID
          return COUNTRY_ID;
        case 5: // NATIONALITY
          return NATIONALITY;
        case 6: // COUNTRY_IMG_URL
          return COUNTRY_IMG_URL;
        case 7: // IMAGE_URL
          return IMAGE_URL;
        case 8: // COACH_TYPE
          return COACH_TYPE;
        case 9: // EXTEND_INFOS
          return EXTEND_INFOS;
        case 10: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COUNTRYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.ENGLISH_NAME,_Fields.COUNTRY_ID,_Fields.NATIONALITY,_Fields.COUNTRY_IMG_URL,_Fields.IMAGE_URL,_Fields.COACH_TYPE,_Fields.EXTEND_INFOS,_Fields.MULTI_LANG_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENGLISH_NAME, new org.apache.thrift.meta_data.FieldMetaData("englishName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("countryImgUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("imageUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COACH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("coachType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CoachType.class)));
    tmpMap.put(_Fields.EXTEND_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extendInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSimpleCoach.class, metaDataMap);
  }

  public TSimpleCoach() {
  }

  public TSimpleCoach(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSimpleCoach(TSimpleCoach other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetEnglishName()) {
      this.englishName = other.englishName;
    }
    this.countryId = other.countryId;
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetCountryImgUrl()) {
      this.countryImgUrl = other.countryImgUrl;
    }
    if (other.isSetImageUrl()) {
      this.imageUrl = other.imageUrl;
    }
    if (other.isSetCoachType()) {
      this.coachType = other.coachType;
    }
    if (other.isSetExtendInfos()) {
      Map<String,String> __this__extendInfos = new HashMap<String,String>(other.extendInfos);
      this.extendInfos = __this__extendInfos;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
  }

  public TSimpleCoach deepCopy() {
    return new TSimpleCoach(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.englishName = null;
    setCountryIdIsSet(false);
    this.countryId = 0;
    this.nationality = null;
    this.countryImgUrl = null;
    this.imageUrl = null;
    this.coachType = null;
    this.extendInfos = null;
    this.multiLangNames = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getEnglishName() {
    return this.englishName;
  }

  public void setEnglishName(String englishName) {
    this.englishName = englishName;
  }

  public void unsetEnglishName() {
    this.englishName = null;
  }

  /** Returns true if field englishName is set (has been assigned a value) and false otherwise */
  public boolean isSetEnglishName() {
    return this.englishName != null;
  }

  public void setEnglishNameIsSet(boolean value) {
    if (!value) {
      this.englishName = null;
    }
  }

  public long getCountryId() {
    return this.countryId;
  }

  public void setCountryId(long countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
  }

  public void unsetCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public String getNationality() {
    return this.nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  public String getCountryImgUrl() {
    return this.countryImgUrl;
  }

  public void setCountryImgUrl(String countryImgUrl) {
    this.countryImgUrl = countryImgUrl;
  }

  public void unsetCountryImgUrl() {
    this.countryImgUrl = null;
  }

  /** Returns true if field countryImgUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryImgUrl() {
    return this.countryImgUrl != null;
  }

  public void setCountryImgUrlIsSet(boolean value) {
    if (!value) {
      this.countryImgUrl = null;
    }
  }

  public String getImageUrl() {
    return this.imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public void unsetImageUrl() {
    this.imageUrl = null;
  }

  /** Returns true if field imageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUrl() {
    return this.imageUrl != null;
  }

  public void setImageUrlIsSet(boolean value) {
    if (!value) {
      this.imageUrl = null;
    }
  }

  /**
   * 
   * @see CoachType
   */
  public CoachType getCoachType() {
    return this.coachType;
  }

  /**
   * 
   * @see CoachType
   */
  public void setCoachType(CoachType coachType) {
    this.coachType = coachType;
  }

  public void unsetCoachType() {
    this.coachType = null;
  }

  /** Returns true if field coachType is set (has been assigned a value) and false otherwise */
  public boolean isSetCoachType() {
    return this.coachType != null;
  }

  public void setCoachTypeIsSet(boolean value) {
    if (!value) {
      this.coachType = null;
    }
  }

  public int getExtendInfosSize() {
    return (this.extendInfos == null) ? 0 : this.extendInfos.size();
  }

  public void putToExtendInfos(String key, String val) {
    if (this.extendInfos == null) {
      this.extendInfos = new HashMap<String,String>();
    }
    this.extendInfos.put(key, val);
  }

  public Map<String,String> getExtendInfos() {
    return this.extendInfos;
  }

  public void setExtendInfos(Map<String,String> extendInfos) {
    this.extendInfos = extendInfos;
  }

  public void unsetExtendInfos() {
    this.extendInfos = null;
  }

  /** Returns true if field extendInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendInfos() {
    return this.extendInfos != null;
  }

  public void setExtendInfosIsSet(boolean value) {
    if (!value) {
      this.extendInfos = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ENGLISH_NAME:
      if (value == null) {
        unsetEnglishName();
      } else {
        setEnglishName((String)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((Long)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((String)value);
      }
      break;

    case COUNTRY_IMG_URL:
      if (value == null) {
        unsetCountryImgUrl();
      } else {
        setCountryImgUrl((String)value);
      }
      break;

    case IMAGE_URL:
      if (value == null) {
        unsetImageUrl();
      } else {
        setImageUrl((String)value);
      }
      break;

    case COACH_TYPE:
      if (value == null) {
        unsetCoachType();
      } else {
        setCoachType((CoachType)value);
      }
      break;

    case EXTEND_INFOS:
      if (value == null) {
        unsetExtendInfos();
      } else {
        setExtendInfos((Map<String,String>)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case ENGLISH_NAME:
      return getEnglishName();

    case COUNTRY_ID:
      return Long.valueOf(getCountryId());

    case NATIONALITY:
      return getNationality();

    case COUNTRY_IMG_URL:
      return getCountryImgUrl();

    case IMAGE_URL:
      return getImageUrl();

    case COACH_TYPE:
      return getCoachType();

    case EXTEND_INFOS:
      return getExtendInfos();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ENGLISH_NAME:
      return isSetEnglishName();
    case COUNTRY_ID:
      return isSetCountryId();
    case NATIONALITY:
      return isSetNationality();
    case COUNTRY_IMG_URL:
      return isSetCountryImgUrl();
    case IMAGE_URL:
      return isSetImageUrl();
    case COACH_TYPE:
      return isSetCoachType();
    case EXTEND_INFOS:
      return isSetExtendInfos();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSimpleCoach)
      return this.equals((TSimpleCoach)that);
    return false;
  }

  public boolean equals(TSimpleCoach that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_englishName = true && this.isSetEnglishName();
    boolean that_present_englishName = true && that.isSetEnglishName();
    if (this_present_englishName || that_present_englishName) {
      if (!(this_present_englishName && that_present_englishName))
        return false;
      if (!this.englishName.equals(that.englishName))
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_countryImgUrl = true && this.isSetCountryImgUrl();
    boolean that_present_countryImgUrl = true && that.isSetCountryImgUrl();
    if (this_present_countryImgUrl || that_present_countryImgUrl) {
      if (!(this_present_countryImgUrl && that_present_countryImgUrl))
        return false;
      if (!this.countryImgUrl.equals(that.countryImgUrl))
        return false;
    }

    boolean this_present_imageUrl = true && this.isSetImageUrl();
    boolean that_present_imageUrl = true && that.isSetImageUrl();
    if (this_present_imageUrl || that_present_imageUrl) {
      if (!(this_present_imageUrl && that_present_imageUrl))
        return false;
      if (!this.imageUrl.equals(that.imageUrl))
        return false;
    }

    boolean this_present_coachType = true && this.isSetCoachType();
    boolean that_present_coachType = true && that.isSetCoachType();
    if (this_present_coachType || that_present_coachType) {
      if (!(this_present_coachType && that_present_coachType))
        return false;
      if (!this.coachType.equals(that.coachType))
        return false;
    }

    boolean this_present_extendInfos = true && this.isSetExtendInfos();
    boolean that_present_extendInfos = true && that.isSetExtendInfos();
    if (this_present_extendInfos || that_present_extendInfos) {
      if (!(this_present_extendInfos && that_present_extendInfos))
        return false;
      if (!this.extendInfos.equals(that.extendInfos))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_englishName = true && (isSetEnglishName());
    list.add(present_englishName);
    if (present_englishName)
      list.add(englishName);

    boolean present_countryId = true && (isSetCountryId());
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId);

    boolean present_nationality = true && (isSetNationality());
    list.add(present_nationality);
    if (present_nationality)
      list.add(nationality);

    boolean present_countryImgUrl = true && (isSetCountryImgUrl());
    list.add(present_countryImgUrl);
    if (present_countryImgUrl)
      list.add(countryImgUrl);

    boolean present_imageUrl = true && (isSetImageUrl());
    list.add(present_imageUrl);
    if (present_imageUrl)
      list.add(imageUrl);

    boolean present_coachType = true && (isSetCoachType());
    list.add(present_coachType);
    if (present_coachType)
      list.add(coachType.getValue());

    boolean present_extendInfos = true && (isSetExtendInfos());
    list.add(present_extendInfos);
    if (present_extendInfos)
      list.add(extendInfos);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSimpleCoach other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnglishName()).compareTo(other.isSetEnglishName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnglishName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.englishName, other.englishName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationality()).compareTo(other.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, other.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryImgUrl()).compareTo(other.isSetCountryImgUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryImgUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryImgUrl, other.countryImgUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUrl()).compareTo(other.isSetImageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUrl, other.imageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoachType()).compareTo(other.isSetCoachType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoachType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coachType, other.coachType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtendInfos()).compareTo(other.isSetExtendInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendInfos, other.extendInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSimpleCoach(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetEnglishName()) {
      if (!first) sb.append(", ");
      sb.append("englishName:");
      if (this.englishName == null) {
        sb.append("null");
      } else {
        sb.append(this.englishName);
      }
      first = false;
    }
    if (isSetCountryId()) {
      if (!first) sb.append(", ");
      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
    }
    if (isSetNationality()) {
      if (!first) sb.append(", ");
      sb.append("nationality:");
      if (this.nationality == null) {
        sb.append("null");
      } else {
        sb.append(this.nationality);
      }
      first = false;
    }
    if (isSetCountryImgUrl()) {
      if (!first) sb.append(", ");
      sb.append("countryImgUrl:");
      if (this.countryImgUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.countryImgUrl);
      }
      first = false;
    }
    if (isSetImageUrl()) {
      if (!first) sb.append(", ");
      sb.append("imageUrl:");
      if (this.imageUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.imageUrl);
      }
      first = false;
    }
    if (isSetCoachType()) {
      if (!first) sb.append(", ");
      sb.append("coachType:");
      if (this.coachType == null) {
        sb.append("null");
      } else {
        sb.append(this.coachType);
      }
      first = false;
    }
    if (isSetExtendInfos()) {
      if (!first) sb.append(", ");
      sb.append("extendInfos:");
      if (this.extendInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extendInfos);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSimpleCoachStandardSchemeFactory implements SchemeFactory {
    public TSimpleCoachStandardScheme getScheme() {
      return new TSimpleCoachStandardScheme();
    }
  }

  private static class TSimpleCoachStandardScheme extends StandardScheme<TSimpleCoach> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSimpleCoach struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENGLISH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.englishName = iprot.readString();
              struct.setEnglishNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.countryId = iprot.readI64();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTRY_IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryImgUrl = iprot.readString();
              struct.setCountryImgUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageUrl = iprot.readString();
              struct.setImageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COACH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coachType = com.lesports.qmt.sbd.api.dto.CoachType.findByValue(iprot.readI32());
              struct.setCoachTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTEND_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map142 = iprot.readMapBegin();
                struct.extendInfos = new HashMap<String,String>(2*_map142.size);
                String _key143;
                String _val144;
                for (int _i145 = 0; _i145 < _map142.size; ++_i145)
                {
                  _key143 = iprot.readString();
                  _val144 = iprot.readString();
                  struct.extendInfos.put(_key143, _val144);
                }
                iprot.readMapEnd();
              }
              struct.setExtendInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list146.size);
                com.lesports.api.common.LangString _elem147;
                for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                {
                  _elem147 = new com.lesports.api.common.LangString();
                  _elem147.read(iprot);
                  struct.multiLangNames.add(_elem147);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSimpleCoach struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.englishName != null) {
        if (struct.isSetEnglishName()) {
          oprot.writeFieldBegin(ENGLISH_NAME_FIELD_DESC);
          oprot.writeString(struct.englishName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCountryId()) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.countryId);
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        if (struct.isSetNationality()) {
          oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
          oprot.writeString(struct.nationality);
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryImgUrl != null) {
        if (struct.isSetCountryImgUrl()) {
          oprot.writeFieldBegin(COUNTRY_IMG_URL_FIELD_DESC);
          oprot.writeString(struct.countryImgUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.imageUrl != null) {
        if (struct.isSetImageUrl()) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.imageUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coachType != null) {
        if (struct.isSetCoachType()) {
          oprot.writeFieldBegin(COACH_TYPE_FIELD_DESC);
          oprot.writeI32(struct.coachType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.extendInfos != null) {
        if (struct.isSetExtendInfos()) {
          oprot.writeFieldBegin(EXTEND_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendInfos.size()));
            for (Map.Entry<String, String> _iter149 : struct.extendInfos.entrySet())
            {
              oprot.writeString(_iter149.getKey());
              oprot.writeString(_iter149.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter150 : struct.multiLangNames)
            {
              _iter150.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSimpleCoachTupleSchemeFactory implements SchemeFactory {
    public TSimpleCoachTupleScheme getScheme() {
      return new TSimpleCoachTupleScheme();
    }
  }

  private static class TSimpleCoachTupleScheme extends TupleScheme<TSimpleCoach> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSimpleCoach struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetEnglishName()) {
        optionals.set(2);
      }
      if (struct.isSetCountryId()) {
        optionals.set(3);
      }
      if (struct.isSetNationality()) {
        optionals.set(4);
      }
      if (struct.isSetCountryImgUrl()) {
        optionals.set(5);
      }
      if (struct.isSetImageUrl()) {
        optionals.set(6);
      }
      if (struct.isSetCoachType()) {
        optionals.set(7);
      }
      if (struct.isSetExtendInfos()) {
        optionals.set(8);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetEnglishName()) {
        oprot.writeString(struct.englishName);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI64(struct.countryId);
      }
      if (struct.isSetNationality()) {
        oprot.writeString(struct.nationality);
      }
      if (struct.isSetCountryImgUrl()) {
        oprot.writeString(struct.countryImgUrl);
      }
      if (struct.isSetImageUrl()) {
        oprot.writeString(struct.imageUrl);
      }
      if (struct.isSetCoachType()) {
        oprot.writeI32(struct.coachType.getValue());
      }
      if (struct.isSetExtendInfos()) {
        {
          oprot.writeI32(struct.extendInfos.size());
          for (Map.Entry<String, String> _iter151 : struct.extendInfos.entrySet())
          {
            oprot.writeString(_iter151.getKey());
            oprot.writeString(_iter151.getValue());
          }
        }
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter152 : struct.multiLangNames)
          {
            _iter152.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSimpleCoach struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.englishName = iprot.readString();
        struct.setEnglishNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.countryId = iprot.readI64();
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nationality = iprot.readString();
        struct.setNationalityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.countryImgUrl = iprot.readString();
        struct.setCountryImgUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.imageUrl = iprot.readString();
        struct.setImageUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.coachType = com.lesports.qmt.sbd.api.dto.CoachType.findByValue(iprot.readI32());
        struct.setCoachTypeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map153 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extendInfos = new HashMap<String,String>(2*_map153.size);
          String _key154;
          String _val155;
          for (int _i156 = 0; _i156 < _map153.size; ++_i156)
          {
            _key154 = iprot.readString();
            _val155 = iprot.readString();
            struct.extendInfos.put(_key154, _val155);
          }
        }
        struct.setExtendInfosIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list157.size);
          com.lesports.api.common.LangString _elem158;
          for (int _i159 = 0; _i159 < _list157.size; ++_i159)
          {
            _elem158 = new com.lesports.api.common.LangString();
            _elem158.read(iprot);
            struct.multiLangNames.add(_elem158);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
    }
  }

}

