/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-9")
public class TTeam implements org.apache.thrift.TBase<TTeam, TTeam._Fields>, java.io.Serializable, Cloneable, Comparable<TTeam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTeam");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("abbreviation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_ABBRS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangAbbrs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NICKNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNicknames", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField HOMEPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeplace", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_HOMEPLACES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangHomeplaces", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCities", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField HOME_SHIRT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("homeShirtImage", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField AWAY_SHIRT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("awayShirtImage", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField GRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("grade", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangDesc", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField GAME_FIRST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFirstType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField TEAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("teamType", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BG_WEB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("bgWebUrl", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField SONG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("songId", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField SHIRT_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("shirtColor", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField BACKGROUP_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("backgroupColor", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("players", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField PNG_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("pngLogo", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CONFERENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("conferenceId", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionId", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField CONFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("conference", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField IS_FOCUSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isFocused", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField BOLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boleId", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField CAMP_ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("campEntity", org.apache.thrift.protocol.TType.STRUCT, (short)33);
  private static final org.apache.thrift.protocol.TField IS_FOCUSED_COUNTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("isFocusedCountries", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField CURRENT_CID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentCid", org.apache.thrift.protocol.TType.I64, (short)35);
  private static final org.apache.thrift.protocol.TField CURRENT_CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentCsid", org.apache.thrift.protocol.TType.I64, (short)36);
  private static final org.apache.thrift.protocol.TField CURRENT_TSID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentTsid", org.apache.thrift.protocol.TType.I64, (short)37);
  private static final org.apache.thrift.protocol.TField HONORS_FIELD_DESC = new org.apache.thrift.protocol.TField("honors", org.apache.thrift.protocol.TType.LIST, (short)38);
  private static final org.apache.thrift.protocol.TField RANKS_FIELD_DESC = new org.apache.thrift.protocol.TField("ranks", org.apache.thrift.protocol.TType.LIST, (short)39);
  private static final org.apache.thrift.protocol.TField GAME_FTYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("gameFTypeId", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField COCAH_FIELD_DESC = new org.apache.thrift.protocol.TField("cocah", org.apache.thrift.protocol.TType.STRUCT, (short)41);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_GAME_FTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangGameFType", org.apache.thrift.protocol.TType.LIST, (short)42);
  private static final org.apache.thrift.protocol.TField CAPTAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("captain", org.apache.thrift.protocol.TType.STRUCT, (short)43);
  private static final org.apache.thrift.protocol.TField CORE_PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("corePlayers", org.apache.thrift.protocol.TType.LIST, (short)44);
  private static final org.apache.thrift.protocol.TField MULTI_COUN_LOGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiCounLogos", org.apache.thrift.protocol.TType.LIST, (short)45);
  private static final org.apache.thrift.protocol.TField CHAMPION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("championNum", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField OFFICIAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("officialName", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_OFFICIAL_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangOfficialNames", org.apache.thrift.protocol.TType.LIST, (short)48);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_CONFERENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangConferences", org.apache.thrift.protocol.TType.LIST, (short)49);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_REGIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangRegions", org.apache.thrift.protocol.TType.LIST, (short)50);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTeamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTeamTupleSchemeFactory());
  }

  private long id; // required
  private String name; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private String abbreviation; // optional
  private List<com.lesports.api.common.LangString> multiLangAbbrs; // optional
  private String nickname; // optional
  private List<com.lesports.api.common.LangString> multiLangNicknames; // optional
  private String homeplace; // optional
  private List<com.lesports.api.common.LangString> multiLangHomeplaces; // optional
  private String city; // optional
  private List<com.lesports.api.common.LangString> multiLangCities; // optional
  private String logoUrl; // optional
  private String homeShirtImage; // optional
  private String awayShirtImage; // optional
  private int grade; // optional
  private String desc; // optional
  private List<com.lesports.api.common.LangString> multiLangDesc; // optional
  private String gameFirstType; // optional
  private int teamType; // optional
  private String bgWebUrl; // optional
  private long songId; // optional
  private String shirtColor; // optional
  private String backgroupColor; // optional
  private List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> players; // optional
  private String pngLogo; // optional
  private long conferenceId; // optional
  private long regionId; // optional
  private String conference; // optional
  private String region; // optional
  private boolean isFocused; // optional
  private long boleId; // optional
  private com.lesports.qmt.sbd.api.common.Camp campEntity; // optional
  private List<com.lesports.api.common.CountryCode> isFocusedCountries; // optional
  private long currentCid; // optional
  private long currentCsid; // optional
  private long currentTsid; // optional
  private List<String> honors; // optional
  private List<TRank> ranks; // optional
  private long gameFTypeId; // optional
  private TTeamPlayer cocah; // optional
  private List<com.lesports.api.common.LangString> multiLangGameFType; // optional
  private TTeamPlayer captain; // optional
  private List<TTeamPlayer> corePlayers; // optional
  private List<com.lesports.api.common.CounString> multiCounLogos; // optional
  private String championNum; // optional
  private String officialName; // optional
  private List<com.lesports.api.common.LangString> multiLangOfficialNames; // optional
  private List<com.lesports.api.common.LangString> multiLangConferences; // optional
  private List<com.lesports.api.common.LangString> multiLangRegions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    MULTI_LANG_NAMES((short)3, "multiLangNames"),
    ABBREVIATION((short)4, "abbreviation"),
    MULTI_LANG_ABBRS((short)5, "multiLangAbbrs"),
    NICKNAME((short)6, "nickname"),
    MULTI_LANG_NICKNAMES((short)7, "multiLangNicknames"),
    HOMEPLACE((short)8, "homeplace"),
    MULTI_LANG_HOMEPLACES((short)9, "multiLangHomeplaces"),
    CITY((short)10, "city"),
    MULTI_LANG_CITIES((short)11, "multiLangCities"),
    LOGO_URL((short)12, "logoUrl"),
    HOME_SHIRT_IMAGE((short)13, "homeShirtImage"),
    AWAY_SHIRT_IMAGE((short)14, "awayShirtImage"),
    GRADE((short)15, "grade"),
    DESC((short)16, "desc"),
    MULTI_LANG_DESC((short)17, "multiLangDesc"),
    GAME_FIRST_TYPE((short)18, "gameFirstType"),
    TEAM_TYPE((short)19, "teamType"),
    BG_WEB_URL((short)20, "bgWebUrl"),
    SONG_ID((short)21, "songId"),
    SHIRT_COLOR((short)22, "shirtColor"),
    BACKGROUP_COLOR((short)23, "backgroupColor"),
    PLAYERS((short)24, "players"),
    PNG_LOGO((short)26, "pngLogo"),
    CONFERENCE_ID((short)27, "conferenceId"),
    REGION_ID((short)28, "regionId"),
    CONFERENCE((short)29, "conference"),
    REGION((short)30, "region"),
    IS_FOCUSED((short)31, "isFocused"),
    BOLE_ID((short)32, "boleId"),
    CAMP_ENTITY((short)33, "campEntity"),
    IS_FOCUSED_COUNTRIES((short)34, "isFocusedCountries"),
    CURRENT_CID((short)35, "currentCid"),
    CURRENT_CSID((short)36, "currentCsid"),
    CURRENT_TSID((short)37, "currentTsid"),
    HONORS((short)38, "honors"),
    RANKS((short)39, "ranks"),
    GAME_FTYPE_ID((short)40, "gameFTypeId"),
    COCAH((short)41, "cocah"),
    MULTI_LANG_GAME_FTYPE((short)42, "multiLangGameFType"),
    CAPTAIN((short)43, "captain"),
    CORE_PLAYERS((short)44, "corePlayers"),
    MULTI_COUN_LOGOS((short)45, "multiCounLogos"),
    CHAMPION_NUM((short)46, "championNum"),
    OFFICIAL_NAME((short)47, "officialName"),
    MULTI_LANG_OFFICIAL_NAMES((short)48, "multiLangOfficialNames"),
    MULTI_LANG_CONFERENCES((short)49, "multiLangConferences"),
    MULTI_LANG_REGIONS((short)50, "multiLangRegions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 4: // ABBREVIATION
          return ABBREVIATION;
        case 5: // MULTI_LANG_ABBRS
          return MULTI_LANG_ABBRS;
        case 6: // NICKNAME
          return NICKNAME;
        case 7: // MULTI_LANG_NICKNAMES
          return MULTI_LANG_NICKNAMES;
        case 8: // HOMEPLACE
          return HOMEPLACE;
        case 9: // MULTI_LANG_HOMEPLACES
          return MULTI_LANG_HOMEPLACES;
        case 10: // CITY
          return CITY;
        case 11: // MULTI_LANG_CITIES
          return MULTI_LANG_CITIES;
        case 12: // LOGO_URL
          return LOGO_URL;
        case 13: // HOME_SHIRT_IMAGE
          return HOME_SHIRT_IMAGE;
        case 14: // AWAY_SHIRT_IMAGE
          return AWAY_SHIRT_IMAGE;
        case 15: // GRADE
          return GRADE;
        case 16: // DESC
          return DESC;
        case 17: // MULTI_LANG_DESC
          return MULTI_LANG_DESC;
        case 18: // GAME_FIRST_TYPE
          return GAME_FIRST_TYPE;
        case 19: // TEAM_TYPE
          return TEAM_TYPE;
        case 20: // BG_WEB_URL
          return BG_WEB_URL;
        case 21: // SONG_ID
          return SONG_ID;
        case 22: // SHIRT_COLOR
          return SHIRT_COLOR;
        case 23: // BACKGROUP_COLOR
          return BACKGROUP_COLOR;
        case 24: // PLAYERS
          return PLAYERS;
        case 26: // PNG_LOGO
          return PNG_LOGO;
        case 27: // CONFERENCE_ID
          return CONFERENCE_ID;
        case 28: // REGION_ID
          return REGION_ID;
        case 29: // CONFERENCE
          return CONFERENCE;
        case 30: // REGION
          return REGION;
        case 31: // IS_FOCUSED
          return IS_FOCUSED;
        case 32: // BOLE_ID
          return BOLE_ID;
        case 33: // CAMP_ENTITY
          return CAMP_ENTITY;
        case 34: // IS_FOCUSED_COUNTRIES
          return IS_FOCUSED_COUNTRIES;
        case 35: // CURRENT_CID
          return CURRENT_CID;
        case 36: // CURRENT_CSID
          return CURRENT_CSID;
        case 37: // CURRENT_TSID
          return CURRENT_TSID;
        case 38: // HONORS
          return HONORS;
        case 39: // RANKS
          return RANKS;
        case 40: // GAME_FTYPE_ID
          return GAME_FTYPE_ID;
        case 41: // COCAH
          return COCAH;
        case 42: // MULTI_LANG_GAME_FTYPE
          return MULTI_LANG_GAME_FTYPE;
        case 43: // CAPTAIN
          return CAPTAIN;
        case 44: // CORE_PLAYERS
          return CORE_PLAYERS;
        case 45: // MULTI_COUN_LOGOS
          return MULTI_COUN_LOGOS;
        case 46: // CHAMPION_NUM
          return CHAMPION_NUM;
        case 47: // OFFICIAL_NAME
          return OFFICIAL_NAME;
        case 48: // MULTI_LANG_OFFICIAL_NAMES
          return MULTI_LANG_OFFICIAL_NAMES;
        case 49: // MULTI_LANG_CONFERENCES
          return MULTI_LANG_CONFERENCES;
        case 50: // MULTI_LANG_REGIONS
          return MULTI_LANG_REGIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GRADE_ISSET_ID = 1;
  private static final int __TEAMTYPE_ISSET_ID = 2;
  private static final int __SONGID_ISSET_ID = 3;
  private static final int __CONFERENCEID_ISSET_ID = 4;
  private static final int __REGIONID_ISSET_ID = 5;
  private static final int __ISFOCUSED_ISSET_ID = 6;
  private static final int __BOLEID_ISSET_ID = 7;
  private static final int __CURRENTCID_ISSET_ID = 8;
  private static final int __CURRENTCSID_ISSET_ID = 9;
  private static final int __CURRENTTSID_ISSET_ID = 10;
  private static final int __GAMEFTYPEID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.MULTI_LANG_NAMES,_Fields.ABBREVIATION,_Fields.MULTI_LANG_ABBRS,_Fields.NICKNAME,_Fields.MULTI_LANG_NICKNAMES,_Fields.HOMEPLACE,_Fields.MULTI_LANG_HOMEPLACES,_Fields.CITY,_Fields.MULTI_LANG_CITIES,_Fields.LOGO_URL,_Fields.HOME_SHIRT_IMAGE,_Fields.AWAY_SHIRT_IMAGE,_Fields.GRADE,_Fields.DESC,_Fields.MULTI_LANG_DESC,_Fields.GAME_FIRST_TYPE,_Fields.TEAM_TYPE,_Fields.BG_WEB_URL,_Fields.SONG_ID,_Fields.SHIRT_COLOR,_Fields.BACKGROUP_COLOR,_Fields.PLAYERS,_Fields.PNG_LOGO,_Fields.CONFERENCE_ID,_Fields.REGION_ID,_Fields.CONFERENCE,_Fields.REGION,_Fields.IS_FOCUSED,_Fields.BOLE_ID,_Fields.CAMP_ENTITY,_Fields.IS_FOCUSED_COUNTRIES,_Fields.CURRENT_CID,_Fields.CURRENT_CSID,_Fields.CURRENT_TSID,_Fields.HONORS,_Fields.RANKS,_Fields.GAME_FTYPE_ID,_Fields.COCAH,_Fields.MULTI_LANG_GAME_FTYPE,_Fields.CAPTAIN,_Fields.CORE_PLAYERS,_Fields.MULTI_COUN_LOGOS,_Fields.CHAMPION_NUM,_Fields.OFFICIAL_NAME,_Fields.MULTI_LANG_OFFICIAL_NAMES,_Fields.MULTI_LANG_CONFERENCES,_Fields.MULTI_LANG_REGIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("abbreviation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_ABBRS, new org.apache.thrift.meta_data.FieldMetaData("multiLangAbbrs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.NICKNAME, new org.apache.thrift.meta_data.FieldMetaData("nickname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NICKNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNicknames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.HOMEPLACE, new org.apache.thrift.meta_data.FieldMetaData("homeplace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_HOMEPLACES, new org.apache.thrift.meta_data.FieldMetaData("multiLangHomeplaces", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_CITIES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOME_SHIRT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("homeShirtImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AWAY_SHIRT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("awayShirtImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GRADE, new org.apache.thrift.meta_data.FieldMetaData("grade", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_DESC, new org.apache.thrift.meta_data.FieldMetaData("multiLangDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.GAME_FIRST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameFirstType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("teamType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BG_WEB_URL, new org.apache.thrift.meta_data.FieldMetaData("bgWebUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SONG_ID, new org.apache.thrift.meta_data.FieldMetaData("songId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHIRT_COLOR, new org.apache.thrift.meta_data.FieldMetaData("shirtColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKGROUP_COLOR, new org.apache.thrift.meta_data.FieldMetaData("backgroupColor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("players", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TSimplePlayer.class))));
    tmpMap.put(_Fields.PNG_LOGO, new org.apache.thrift.meta_data.FieldMetaData("pngLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFERENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("conferenceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("regionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONFERENCE, new org.apache.thrift.meta_data.FieldMetaData("conference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_FOCUSED, new org.apache.thrift.meta_data.FieldMetaData("isFocused", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOLE_ID, new org.apache.thrift.meta_data.FieldMetaData("boleId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAMP_ENTITY, new org.apache.thrift.meta_data.FieldMetaData("campEntity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.common.Camp.class)));
    tmpMap.put(_Fields.IS_FOCUSED_COUNTRIES, new org.apache.thrift.meta_data.FieldMetaData("isFocusedCountries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.CountryCode.class))));
    tmpMap.put(_Fields.CURRENT_CID, new org.apache.thrift.meta_data.FieldMetaData("currentCid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_CSID, new org.apache.thrift.meta_data.FieldMetaData("currentCsid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENT_TSID, new org.apache.thrift.meta_data.FieldMetaData("currentTsid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HONORS, new org.apache.thrift.meta_data.FieldMetaData("honors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RANKS, new org.apache.thrift.meta_data.FieldMetaData("ranks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TRank"))));
    tmpMap.put(_Fields.GAME_FTYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("gameFTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COCAH, new org.apache.thrift.meta_data.FieldMetaData("cocah", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TTeamPlayer")));
    tmpMap.put(_Fields.MULTI_LANG_GAME_FTYPE, new org.apache.thrift.meta_data.FieldMetaData("multiLangGameFType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.CAPTAIN, new org.apache.thrift.meta_data.FieldMetaData("captain", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TTeamPlayer")));
    tmpMap.put(_Fields.CORE_PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("corePlayers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TTeamPlayer"))));
    tmpMap.put(_Fields.MULTI_COUN_LOGOS, new org.apache.thrift.meta_data.FieldMetaData("multiCounLogos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CounString.class))));
    tmpMap.put(_Fields.CHAMPION_NUM, new org.apache.thrift.meta_data.FieldMetaData("championNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFICIAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("officialName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_OFFICIAL_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangOfficialNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_CONFERENCES, new org.apache.thrift.meta_data.FieldMetaData("multiLangConferences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_REGIONS, new org.apache.thrift.meta_data.FieldMetaData("multiLangRegions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTeam.class, metaDataMap);
  }

  public TTeam() {
  }

  public TTeam(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTeam(TTeam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetAbbreviation()) {
      this.abbreviation = other.abbreviation;
    }
    if (other.isSetMultiLangAbbrs()) {
      List<com.lesports.api.common.LangString> __this__multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(other.multiLangAbbrs.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangAbbrs) {
        __this__multiLangAbbrs.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangAbbrs = __this__multiLangAbbrs;
    }
    if (other.isSetNickname()) {
      this.nickname = other.nickname;
    }
    if (other.isSetMultiLangNicknames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNicknames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNicknames) {
        __this__multiLangNicknames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNicknames = __this__multiLangNicknames;
    }
    if (other.isSetHomeplace()) {
      this.homeplace = other.homeplace;
    }
    if (other.isSetMultiLangHomeplaces()) {
      List<com.lesports.api.common.LangString> __this__multiLangHomeplaces = new ArrayList<com.lesports.api.common.LangString>(other.multiLangHomeplaces.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangHomeplaces) {
        __this__multiLangHomeplaces.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangHomeplaces = __this__multiLangHomeplaces;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetMultiLangCities()) {
      List<com.lesports.api.common.LangString> __this__multiLangCities = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCities.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCities) {
        __this__multiLangCities.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCities = __this__multiLangCities;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    if (other.isSetHomeShirtImage()) {
      this.homeShirtImage = other.homeShirtImage;
    }
    if (other.isSetAwayShirtImage()) {
      this.awayShirtImage = other.awayShirtImage;
    }
    this.grade = other.grade;
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetMultiLangDesc()) {
      List<com.lesports.api.common.LangString> __this__multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(other.multiLangDesc.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangDesc) {
        __this__multiLangDesc.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangDesc = __this__multiLangDesc;
    }
    if (other.isSetGameFirstType()) {
      this.gameFirstType = other.gameFirstType;
    }
    this.teamType = other.teamType;
    if (other.isSetBgWebUrl()) {
      this.bgWebUrl = other.bgWebUrl;
    }
    this.songId = other.songId;
    if (other.isSetShirtColor()) {
      this.shirtColor = other.shirtColor;
    }
    if (other.isSetBackgroupColor()) {
      this.backgroupColor = other.backgroupColor;
    }
    if (other.isSetPlayers()) {
      List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> __this__players = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(other.players.size());
      for (com.lesports.qmt.sbd.api.dto.TSimplePlayer other_element : other.players) {
        __this__players.add(new com.lesports.qmt.sbd.api.dto.TSimplePlayer(other_element));
      }
      this.players = __this__players;
    }
    if (other.isSetPngLogo()) {
      this.pngLogo = other.pngLogo;
    }
    this.conferenceId = other.conferenceId;
    this.regionId = other.regionId;
    if (other.isSetConference()) {
      this.conference = other.conference;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    this.isFocused = other.isFocused;
    this.boleId = other.boleId;
    if (other.isSetCampEntity()) {
      this.campEntity = new com.lesports.qmt.sbd.api.common.Camp(other.campEntity);
    }
    if (other.isSetIsFocusedCountries()) {
      List<com.lesports.api.common.CountryCode> __this__isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>(other.isFocusedCountries.size());
      for (com.lesports.api.common.CountryCode other_element : other.isFocusedCountries) {
        __this__isFocusedCountries.add(other_element);
      }
      this.isFocusedCountries = __this__isFocusedCountries;
    }
    this.currentCid = other.currentCid;
    this.currentCsid = other.currentCsid;
    this.currentTsid = other.currentTsid;
    if (other.isSetHonors()) {
      List<String> __this__honors = new ArrayList<String>(other.honors);
      this.honors = __this__honors;
    }
    if (other.isSetRanks()) {
      List<TRank> __this__ranks = new ArrayList<TRank>(other.ranks.size());
      for (TRank other_element : other.ranks) {
        __this__ranks.add(other_element);
      }
      this.ranks = __this__ranks;
    }
    this.gameFTypeId = other.gameFTypeId;
    if (other.isSetCocah()) {
      this.cocah = other.cocah;
    }
    if (other.isSetMultiLangGameFType()) {
      List<com.lesports.api.common.LangString> __this__multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>(other.multiLangGameFType.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangGameFType) {
        __this__multiLangGameFType.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangGameFType = __this__multiLangGameFType;
    }
    if (other.isSetCaptain()) {
      this.captain = other.captain;
    }
    if (other.isSetCorePlayers()) {
      List<TTeamPlayer> __this__corePlayers = new ArrayList<TTeamPlayer>(other.corePlayers.size());
      for (TTeamPlayer other_element : other.corePlayers) {
        __this__corePlayers.add(other_element);
      }
      this.corePlayers = __this__corePlayers;
    }
    if (other.isSetMultiCounLogos()) {
      List<com.lesports.api.common.CounString> __this__multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(other.multiCounLogos.size());
      for (com.lesports.api.common.CounString other_element : other.multiCounLogos) {
        __this__multiCounLogos.add(new com.lesports.api.common.CounString(other_element));
      }
      this.multiCounLogos = __this__multiCounLogos;
    }
    if (other.isSetChampionNum()) {
      this.championNum = other.championNum;
    }
    if (other.isSetOfficialName()) {
      this.officialName = other.officialName;
    }
    if (other.isSetMultiLangOfficialNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangOfficialNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangOfficialNames) {
        __this__multiLangOfficialNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangOfficialNames = __this__multiLangOfficialNames;
    }
    if (other.isSetMultiLangConferences()) {
      List<com.lesports.api.common.LangString> __this__multiLangConferences = new ArrayList<com.lesports.api.common.LangString>(other.multiLangConferences.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangConferences) {
        __this__multiLangConferences.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangConferences = __this__multiLangConferences;
    }
    if (other.isSetMultiLangRegions()) {
      List<com.lesports.api.common.LangString> __this__multiLangRegions = new ArrayList<com.lesports.api.common.LangString>(other.multiLangRegions.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangRegions) {
        __this__multiLangRegions.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangRegions = __this__multiLangRegions;
    }
  }

  public TTeam deepCopy() {
    return new TTeam(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.multiLangNames = null;
    this.abbreviation = null;
    this.multiLangAbbrs = null;
    this.nickname = null;
    this.multiLangNicknames = null;
    this.homeplace = null;
    this.multiLangHomeplaces = null;
    this.city = null;
    this.multiLangCities = null;
    this.logoUrl = null;
    this.homeShirtImage = null;
    this.awayShirtImage = null;
    setGradeIsSet(false);
    this.grade = 0;
    this.desc = null;
    this.multiLangDesc = null;
    this.gameFirstType = null;
    setTeamTypeIsSet(false);
    this.teamType = 0;
    this.bgWebUrl = null;
    setSongIdIsSet(false);
    this.songId = 0;
    this.shirtColor = null;
    this.backgroupColor = null;
    this.players = null;
    this.pngLogo = null;
    setConferenceIdIsSet(false);
    this.conferenceId = 0;
    setRegionIdIsSet(false);
    this.regionId = 0;
    this.conference = null;
    this.region = null;
    setIsFocusedIsSet(false);
    this.isFocused = false;
    setBoleIdIsSet(false);
    this.boleId = 0;
    this.campEntity = null;
    this.isFocusedCountries = null;
    setCurrentCidIsSet(false);
    this.currentCid = 0;
    setCurrentCsidIsSet(false);
    this.currentCsid = 0;
    setCurrentTsidIsSet(false);
    this.currentTsid = 0;
    this.honors = null;
    this.ranks = null;
    setGameFTypeIdIsSet(false);
    this.gameFTypeId = 0;
    this.cocah = null;
    this.multiLangGameFType = null;
    this.captain = null;
    this.corePlayers = null;
    this.multiCounLogos = null;
    this.championNum = null;
    this.officialName = null;
    this.multiLangOfficialNames = null;
    this.multiLangConferences = null;
    this.multiLangRegions = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public String getAbbreviation() {
    return this.abbreviation;
  }

  public void setAbbreviation(String abbreviation) {
    this.abbreviation = abbreviation;
  }

  public void unsetAbbreviation() {
    this.abbreviation = null;
  }

  /** Returns true if field abbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetAbbreviation() {
    return this.abbreviation != null;
  }

  public void setAbbreviationIsSet(boolean value) {
    if (!value) {
      this.abbreviation = null;
    }
  }

  public int getMultiLangAbbrsSize() {
    return (this.multiLangAbbrs == null) ? 0 : this.multiLangAbbrs.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangAbbrsIterator() {
    return (this.multiLangAbbrs == null) ? null : this.multiLangAbbrs.iterator();
  }

  public void addToMultiLangAbbrs(com.lesports.api.common.LangString elem) {
    if (this.multiLangAbbrs == null) {
      this.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangAbbrs.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangAbbrs() {
    return this.multiLangAbbrs;
  }

  public void setMultiLangAbbrs(List<com.lesports.api.common.LangString> multiLangAbbrs) {
    this.multiLangAbbrs = multiLangAbbrs;
  }

  public void unsetMultiLangAbbrs() {
    this.multiLangAbbrs = null;
  }

  /** Returns true if field multiLangAbbrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangAbbrs() {
    return this.multiLangAbbrs != null;
  }

  public void setMultiLangAbbrsIsSet(boolean value) {
    if (!value) {
      this.multiLangAbbrs = null;
    }
  }

  public String getNickname() {
    return this.nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }

  public void unsetNickname() {
    this.nickname = null;
  }

  /** Returns true if field nickname is set (has been assigned a value) and false otherwise */
  public boolean isSetNickname() {
    return this.nickname != null;
  }

  public void setNicknameIsSet(boolean value) {
    if (!value) {
      this.nickname = null;
    }
  }

  public int getMultiLangNicknamesSize() {
    return (this.multiLangNicknames == null) ? 0 : this.multiLangNicknames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNicknamesIterator() {
    return (this.multiLangNicknames == null) ? null : this.multiLangNicknames.iterator();
  }

  public void addToMultiLangNicknames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNicknames == null) {
      this.multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNicknames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNicknames() {
    return this.multiLangNicknames;
  }

  public void setMultiLangNicknames(List<com.lesports.api.common.LangString> multiLangNicknames) {
    this.multiLangNicknames = multiLangNicknames;
  }

  public void unsetMultiLangNicknames() {
    this.multiLangNicknames = null;
  }

  /** Returns true if field multiLangNicknames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNicknames() {
    return this.multiLangNicknames != null;
  }

  public void setMultiLangNicknamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNicknames = null;
    }
  }

  public String getHomeplace() {
    return this.homeplace;
  }

  public void setHomeplace(String homeplace) {
    this.homeplace = homeplace;
  }

  public void unsetHomeplace() {
    this.homeplace = null;
  }

  /** Returns true if field homeplace is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeplace() {
    return this.homeplace != null;
  }

  public void setHomeplaceIsSet(boolean value) {
    if (!value) {
      this.homeplace = null;
    }
  }

  public int getMultiLangHomeplacesSize() {
    return (this.multiLangHomeplaces == null) ? 0 : this.multiLangHomeplaces.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangHomeplacesIterator() {
    return (this.multiLangHomeplaces == null) ? null : this.multiLangHomeplaces.iterator();
  }

  public void addToMultiLangHomeplaces(com.lesports.api.common.LangString elem) {
    if (this.multiLangHomeplaces == null) {
      this.multiLangHomeplaces = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangHomeplaces.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangHomeplaces() {
    return this.multiLangHomeplaces;
  }

  public void setMultiLangHomeplaces(List<com.lesports.api.common.LangString> multiLangHomeplaces) {
    this.multiLangHomeplaces = multiLangHomeplaces;
  }

  public void unsetMultiLangHomeplaces() {
    this.multiLangHomeplaces = null;
  }

  /** Returns true if field multiLangHomeplaces is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangHomeplaces() {
    return this.multiLangHomeplaces != null;
  }

  public void setMultiLangHomeplacesIsSet(boolean value) {
    if (!value) {
      this.multiLangHomeplaces = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getMultiLangCitiesSize() {
    return (this.multiLangCities == null) ? 0 : this.multiLangCities.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCitiesIterator() {
    return (this.multiLangCities == null) ? null : this.multiLangCities.iterator();
  }

  public void addToMultiLangCities(com.lesports.api.common.LangString elem) {
    if (this.multiLangCities == null) {
      this.multiLangCities = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCities.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCities() {
    return this.multiLangCities;
  }

  public void setMultiLangCities(List<com.lesports.api.common.LangString> multiLangCities) {
    this.multiLangCities = multiLangCities;
  }

  public void unsetMultiLangCities() {
    this.multiLangCities = null;
  }

  /** Returns true if field multiLangCities is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCities() {
    return this.multiLangCities != null;
  }

  public void setMultiLangCitiesIsSet(boolean value) {
    if (!value) {
      this.multiLangCities = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public String getHomeShirtImage() {
    return this.homeShirtImage;
  }

  public void setHomeShirtImage(String homeShirtImage) {
    this.homeShirtImage = homeShirtImage;
  }

  public void unsetHomeShirtImage() {
    this.homeShirtImage = null;
  }

  /** Returns true if field homeShirtImage is set (has been assigned a value) and false otherwise */
  public boolean isSetHomeShirtImage() {
    return this.homeShirtImage != null;
  }

  public void setHomeShirtImageIsSet(boolean value) {
    if (!value) {
      this.homeShirtImage = null;
    }
  }

  public String getAwayShirtImage() {
    return this.awayShirtImage;
  }

  public void setAwayShirtImage(String awayShirtImage) {
    this.awayShirtImage = awayShirtImage;
  }

  public void unsetAwayShirtImage() {
    this.awayShirtImage = null;
  }

  /** Returns true if field awayShirtImage is set (has been assigned a value) and false otherwise */
  public boolean isSetAwayShirtImage() {
    return this.awayShirtImage != null;
  }

  public void setAwayShirtImageIsSet(boolean value) {
    if (!value) {
      this.awayShirtImage = null;
    }
  }

  public int getGrade() {
    return this.grade;
  }

  public void setGrade(int grade) {
    this.grade = grade;
    setGradeIsSet(true);
  }

  public void unsetGrade() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  /** Returns true if field grade is set (has been assigned a value) and false otherwise */
  public boolean isSetGrade() {
    return EncodingUtils.testBit(__isset_bitfield, __GRADE_ISSET_ID);
  }

  public void setGradeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRADE_ISSET_ID, value);
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getMultiLangDescSize() {
    return (this.multiLangDesc == null) ? 0 : this.multiLangDesc.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangDescIterator() {
    return (this.multiLangDesc == null) ? null : this.multiLangDesc.iterator();
  }

  public void addToMultiLangDesc(com.lesports.api.common.LangString elem) {
    if (this.multiLangDesc == null) {
      this.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangDesc.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangDesc() {
    return this.multiLangDesc;
  }

  public void setMultiLangDesc(List<com.lesports.api.common.LangString> multiLangDesc) {
    this.multiLangDesc = multiLangDesc;
  }

  public void unsetMultiLangDesc() {
    this.multiLangDesc = null;
  }

  /** Returns true if field multiLangDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangDesc() {
    return this.multiLangDesc != null;
  }

  public void setMultiLangDescIsSet(boolean value) {
    if (!value) {
      this.multiLangDesc = null;
    }
  }

  public String getGameFirstType() {
    return this.gameFirstType;
  }

  public void setGameFirstType(String gameFirstType) {
    this.gameFirstType = gameFirstType;
  }

  public void unsetGameFirstType() {
    this.gameFirstType = null;
  }

  /** Returns true if field gameFirstType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFirstType() {
    return this.gameFirstType != null;
  }

  public void setGameFirstTypeIsSet(boolean value) {
    if (!value) {
      this.gameFirstType = null;
    }
  }

  public int getTeamType() {
    return this.teamType;
  }

  public void setTeamType(int teamType) {
    this.teamType = teamType;
    setTeamTypeIsSet(true);
  }

  public void unsetTeamType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  /** Returns true if field teamType is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamType() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMTYPE_ISSET_ID);
  }

  public void setTeamTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMTYPE_ISSET_ID, value);
  }

  public String getBgWebUrl() {
    return this.bgWebUrl;
  }

  public void setBgWebUrl(String bgWebUrl) {
    this.bgWebUrl = bgWebUrl;
  }

  public void unsetBgWebUrl() {
    this.bgWebUrl = null;
  }

  /** Returns true if field bgWebUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetBgWebUrl() {
    return this.bgWebUrl != null;
  }

  public void setBgWebUrlIsSet(boolean value) {
    if (!value) {
      this.bgWebUrl = null;
    }
  }

  public long getSongId() {
    return this.songId;
  }

  public void setSongId(long songId) {
    this.songId = songId;
    setSongIdIsSet(true);
  }

  public void unsetSongId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  /** Returns true if field songId is set (has been assigned a value) and false otherwise */
  public boolean isSetSongId() {
    return EncodingUtils.testBit(__isset_bitfield, __SONGID_ISSET_ID);
  }

  public void setSongIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SONGID_ISSET_ID, value);
  }

  public String getShirtColor() {
    return this.shirtColor;
  }

  public void setShirtColor(String shirtColor) {
    this.shirtColor = shirtColor;
  }

  public void unsetShirtColor() {
    this.shirtColor = null;
  }

  /** Returns true if field shirtColor is set (has been assigned a value) and false otherwise */
  public boolean isSetShirtColor() {
    return this.shirtColor != null;
  }

  public void setShirtColorIsSet(boolean value) {
    if (!value) {
      this.shirtColor = null;
    }
  }

  public String getBackgroupColor() {
    return this.backgroupColor;
  }

  public void setBackgroupColor(String backgroupColor) {
    this.backgroupColor = backgroupColor;
  }

  public void unsetBackgroupColor() {
    this.backgroupColor = null;
  }

  /** Returns true if field backgroupColor is set (has been assigned a value) and false otherwise */
  public boolean isSetBackgroupColor() {
    return this.backgroupColor != null;
  }

  public void setBackgroupColorIsSet(boolean value) {
    if (!value) {
      this.backgroupColor = null;
    }
  }

  public int getPlayersSize() {
    return (this.players == null) ? 0 : this.players.size();
  }

  public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TSimplePlayer> getPlayersIterator() {
    return (this.players == null) ? null : this.players.iterator();
  }

  public void addToPlayers(com.lesports.qmt.sbd.api.dto.TSimplePlayer elem) {
    if (this.players == null) {
      this.players = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>();
    }
    this.players.add(elem);
  }

  public List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> getPlayers() {
    return this.players;
  }

  public void setPlayers(List<com.lesports.qmt.sbd.api.dto.TSimplePlayer> players) {
    this.players = players;
  }

  public void unsetPlayers() {
    this.players = null;
  }

  /** Returns true if field players is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayers() {
    return this.players != null;
  }

  public void setPlayersIsSet(boolean value) {
    if (!value) {
      this.players = null;
    }
  }

  public String getPngLogo() {
    return this.pngLogo;
  }

  public void setPngLogo(String pngLogo) {
    this.pngLogo = pngLogo;
  }

  public void unsetPngLogo() {
    this.pngLogo = null;
  }

  /** Returns true if field pngLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetPngLogo() {
    return this.pngLogo != null;
  }

  public void setPngLogoIsSet(boolean value) {
    if (!value) {
      this.pngLogo = null;
    }
  }

  public long getConferenceId() {
    return this.conferenceId;
  }

  public void setConferenceId(long conferenceId) {
    this.conferenceId = conferenceId;
    setConferenceIdIsSet(true);
  }

  public void unsetConferenceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFERENCEID_ISSET_ID);
  }

  /** Returns true if field conferenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetConferenceId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFERENCEID_ISSET_ID);
  }

  public void setConferenceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFERENCEID_ISSET_ID, value);
  }

  public long getRegionId() {
    return this.regionId;
  }

  public void setRegionId(long regionId) {
    this.regionId = regionId;
    setRegionIdIsSet(true);
  }

  public void unsetRegionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGIONID_ISSET_ID);
  }

  /** Returns true if field regionId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGIONID_ISSET_ID);
  }

  public void setRegionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGIONID_ISSET_ID, value);
  }

  public String getConference() {
    return this.conference;
  }

  public void setConference(String conference) {
    this.conference = conference;
  }

  public void unsetConference() {
    this.conference = null;
  }

  /** Returns true if field conference is set (has been assigned a value) and false otherwise */
  public boolean isSetConference() {
    return this.conference != null;
  }

  public void setConferenceIsSet(boolean value) {
    if (!value) {
      this.conference = null;
    }
  }

  public String getRegion() {
    return this.region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public boolean isIsFocused() {
    return this.isFocused;
  }

  public void setIsFocused(boolean isFocused) {
    this.isFocused = isFocused;
    setIsFocusedIsSet(true);
  }

  public void unsetIsFocused() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOCUSED_ISSET_ID);
  }

  /** Returns true if field isFocused is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFocused() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOCUSED_ISSET_ID);
  }

  public void setIsFocusedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOCUSED_ISSET_ID, value);
  }

  public long getBoleId() {
    return this.boleId;
  }

  public void setBoleId(long boleId) {
    this.boleId = boleId;
    setBoleIdIsSet(true);
  }

  public void unsetBoleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  /** Returns true if field boleId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoleId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOLEID_ISSET_ID);
  }

  public void setBoleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOLEID_ISSET_ID, value);
  }

  public com.lesports.qmt.sbd.api.common.Camp getCampEntity() {
    return this.campEntity;
  }

  public void setCampEntity(com.lesports.qmt.sbd.api.common.Camp campEntity) {
    this.campEntity = campEntity;
  }

  public void unsetCampEntity() {
    this.campEntity = null;
  }

  /** Returns true if field campEntity is set (has been assigned a value) and false otherwise */
  public boolean isSetCampEntity() {
    return this.campEntity != null;
  }

  public void setCampEntityIsSet(boolean value) {
    if (!value) {
      this.campEntity = null;
    }
  }

  public int getIsFocusedCountriesSize() {
    return (this.isFocusedCountries == null) ? 0 : this.isFocusedCountries.size();
  }

  public java.util.Iterator<com.lesports.api.common.CountryCode> getIsFocusedCountriesIterator() {
    return (this.isFocusedCountries == null) ? null : this.isFocusedCountries.iterator();
  }

  public void addToIsFocusedCountries(com.lesports.api.common.CountryCode elem) {
    if (this.isFocusedCountries == null) {
      this.isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>();
    }
    this.isFocusedCountries.add(elem);
  }

  public List<com.lesports.api.common.CountryCode> getIsFocusedCountries() {
    return this.isFocusedCountries;
  }

  public void setIsFocusedCountries(List<com.lesports.api.common.CountryCode> isFocusedCountries) {
    this.isFocusedCountries = isFocusedCountries;
  }

  public void unsetIsFocusedCountries() {
    this.isFocusedCountries = null;
  }

  /** Returns true if field isFocusedCountries is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFocusedCountries() {
    return this.isFocusedCountries != null;
  }

  public void setIsFocusedCountriesIsSet(boolean value) {
    if (!value) {
      this.isFocusedCountries = null;
    }
  }

  public long getCurrentCid() {
    return this.currentCid;
  }

  public void setCurrentCid(long currentCid) {
    this.currentCid = currentCid;
    setCurrentCidIsSet(true);
  }

  public void unsetCurrentCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTCID_ISSET_ID);
  }

  /** Returns true if field currentCid is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTCID_ISSET_ID);
  }

  public void setCurrentCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTCID_ISSET_ID, value);
  }

  public long getCurrentCsid() {
    return this.currentCsid;
  }

  public void setCurrentCsid(long currentCsid) {
    this.currentCsid = currentCsid;
    setCurrentCsidIsSet(true);
  }

  public void unsetCurrentCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTCSID_ISSET_ID);
  }

  /** Returns true if field currentCsid is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTCSID_ISSET_ID);
  }

  public void setCurrentCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTCSID_ISSET_ID, value);
  }

  public long getCurrentTsid() {
    return this.currentTsid;
  }

  public void setCurrentTsid(long currentTsid) {
    this.currentTsid = currentTsid;
    setCurrentTsidIsSet(true);
  }

  public void unsetCurrentTsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTTSID_ISSET_ID);
  }

  /** Returns true if field currentTsid is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentTsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTTSID_ISSET_ID);
  }

  public void setCurrentTsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTTSID_ISSET_ID, value);
  }

  public int getHonorsSize() {
    return (this.honors == null) ? 0 : this.honors.size();
  }

  public java.util.Iterator<String> getHonorsIterator() {
    return (this.honors == null) ? null : this.honors.iterator();
  }

  public void addToHonors(String elem) {
    if (this.honors == null) {
      this.honors = new ArrayList<String>();
    }
    this.honors.add(elem);
  }

  public List<String> getHonors() {
    return this.honors;
  }

  public void setHonors(List<String> honors) {
    this.honors = honors;
  }

  public void unsetHonors() {
    this.honors = null;
  }

  /** Returns true if field honors is set (has been assigned a value) and false otherwise */
  public boolean isSetHonors() {
    return this.honors != null;
  }

  public void setHonorsIsSet(boolean value) {
    if (!value) {
      this.honors = null;
    }
  }

  public int getRanksSize() {
    return (this.ranks == null) ? 0 : this.ranks.size();
  }

  public java.util.Iterator<TRank> getRanksIterator() {
    return (this.ranks == null) ? null : this.ranks.iterator();
  }

  public void addToRanks(TRank elem) {
    if (this.ranks == null) {
      this.ranks = new ArrayList<TRank>();
    }
    this.ranks.add(elem);
  }

  public List<TRank> getRanks() {
    return this.ranks;
  }

  public void setRanks(List<TRank> ranks) {
    this.ranks = ranks;
  }

  public void unsetRanks() {
    this.ranks = null;
  }

  /** Returns true if field ranks is set (has been assigned a value) and false otherwise */
  public boolean isSetRanks() {
    return this.ranks != null;
  }

  public void setRanksIsSet(boolean value) {
    if (!value) {
      this.ranks = null;
    }
  }

  public long getGameFTypeId() {
    return this.gameFTypeId;
  }

  public void setGameFTypeId(long gameFTypeId) {
    this.gameFTypeId = gameFTypeId;
    setGameFTypeIdIsSet(true);
  }

  public void unsetGameFTypeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  /** Returns true if field gameFTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetGameFTypeId() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID);
  }

  public void setGameFTypeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMEFTYPEID_ISSET_ID, value);
  }

  public TTeamPlayer getCocah() {
    return this.cocah;
  }

  public void setCocah(TTeamPlayer cocah) {
    this.cocah = cocah;
  }

  public void unsetCocah() {
    this.cocah = null;
  }

  /** Returns true if field cocah is set (has been assigned a value) and false otherwise */
  public boolean isSetCocah() {
    return this.cocah != null;
  }

  public void setCocahIsSet(boolean value) {
    if (!value) {
      this.cocah = null;
    }
  }

  public int getMultiLangGameFTypeSize() {
    return (this.multiLangGameFType == null) ? 0 : this.multiLangGameFType.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangGameFTypeIterator() {
    return (this.multiLangGameFType == null) ? null : this.multiLangGameFType.iterator();
  }

  public void addToMultiLangGameFType(com.lesports.api.common.LangString elem) {
    if (this.multiLangGameFType == null) {
      this.multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangGameFType.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangGameFType() {
    return this.multiLangGameFType;
  }

  public void setMultiLangGameFType(List<com.lesports.api.common.LangString> multiLangGameFType) {
    this.multiLangGameFType = multiLangGameFType;
  }

  public void unsetMultiLangGameFType() {
    this.multiLangGameFType = null;
  }

  /** Returns true if field multiLangGameFType is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangGameFType() {
    return this.multiLangGameFType != null;
  }

  public void setMultiLangGameFTypeIsSet(boolean value) {
    if (!value) {
      this.multiLangGameFType = null;
    }
  }

  public TTeamPlayer getCaptain() {
    return this.captain;
  }

  public void setCaptain(TTeamPlayer captain) {
    this.captain = captain;
  }

  public void unsetCaptain() {
    this.captain = null;
  }

  /** Returns true if field captain is set (has been assigned a value) and false otherwise */
  public boolean isSetCaptain() {
    return this.captain != null;
  }

  public void setCaptainIsSet(boolean value) {
    if (!value) {
      this.captain = null;
    }
  }

  public int getCorePlayersSize() {
    return (this.corePlayers == null) ? 0 : this.corePlayers.size();
  }

  public java.util.Iterator<TTeamPlayer> getCorePlayersIterator() {
    return (this.corePlayers == null) ? null : this.corePlayers.iterator();
  }

  public void addToCorePlayers(TTeamPlayer elem) {
    if (this.corePlayers == null) {
      this.corePlayers = new ArrayList<TTeamPlayer>();
    }
    this.corePlayers.add(elem);
  }

  public List<TTeamPlayer> getCorePlayers() {
    return this.corePlayers;
  }

  public void setCorePlayers(List<TTeamPlayer> corePlayers) {
    this.corePlayers = corePlayers;
  }

  public void unsetCorePlayers() {
    this.corePlayers = null;
  }

  /** Returns true if field corePlayers is set (has been assigned a value) and false otherwise */
  public boolean isSetCorePlayers() {
    return this.corePlayers != null;
  }

  public void setCorePlayersIsSet(boolean value) {
    if (!value) {
      this.corePlayers = null;
    }
  }

  public int getMultiCounLogosSize() {
    return (this.multiCounLogos == null) ? 0 : this.multiCounLogos.size();
  }

  public java.util.Iterator<com.lesports.api.common.CounString> getMultiCounLogosIterator() {
    return (this.multiCounLogos == null) ? null : this.multiCounLogos.iterator();
  }

  public void addToMultiCounLogos(com.lesports.api.common.CounString elem) {
    if (this.multiCounLogos == null) {
      this.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>();
    }
    this.multiCounLogos.add(elem);
  }

  public List<com.lesports.api.common.CounString> getMultiCounLogos() {
    return this.multiCounLogos;
  }

  public void setMultiCounLogos(List<com.lesports.api.common.CounString> multiCounLogos) {
    this.multiCounLogos = multiCounLogos;
  }

  public void unsetMultiCounLogos() {
    this.multiCounLogos = null;
  }

  /** Returns true if field multiCounLogos is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiCounLogos() {
    return this.multiCounLogos != null;
  }

  public void setMultiCounLogosIsSet(boolean value) {
    if (!value) {
      this.multiCounLogos = null;
    }
  }

  public String getChampionNum() {
    return this.championNum;
  }

  public void setChampionNum(String championNum) {
    this.championNum = championNum;
  }

  public void unsetChampionNum() {
    this.championNum = null;
  }

  /** Returns true if field championNum is set (has been assigned a value) and false otherwise */
  public boolean isSetChampionNum() {
    return this.championNum != null;
  }

  public void setChampionNumIsSet(boolean value) {
    if (!value) {
      this.championNum = null;
    }
  }

  public String getOfficialName() {
    return this.officialName;
  }

  public void setOfficialName(String officialName) {
    this.officialName = officialName;
  }

  public void unsetOfficialName() {
    this.officialName = null;
  }

  /** Returns true if field officialName is set (has been assigned a value) and false otherwise */
  public boolean isSetOfficialName() {
    return this.officialName != null;
  }

  public void setOfficialNameIsSet(boolean value) {
    if (!value) {
      this.officialName = null;
    }
  }

  public int getMultiLangOfficialNamesSize() {
    return (this.multiLangOfficialNames == null) ? 0 : this.multiLangOfficialNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangOfficialNamesIterator() {
    return (this.multiLangOfficialNames == null) ? null : this.multiLangOfficialNames.iterator();
  }

  public void addToMultiLangOfficialNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangOfficialNames == null) {
      this.multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangOfficialNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangOfficialNames() {
    return this.multiLangOfficialNames;
  }

  public void setMultiLangOfficialNames(List<com.lesports.api.common.LangString> multiLangOfficialNames) {
    this.multiLangOfficialNames = multiLangOfficialNames;
  }

  public void unsetMultiLangOfficialNames() {
    this.multiLangOfficialNames = null;
  }

  /** Returns true if field multiLangOfficialNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangOfficialNames() {
    return this.multiLangOfficialNames != null;
  }

  public void setMultiLangOfficialNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangOfficialNames = null;
    }
  }

  public int getMultiLangConferencesSize() {
    return (this.multiLangConferences == null) ? 0 : this.multiLangConferences.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangConferencesIterator() {
    return (this.multiLangConferences == null) ? null : this.multiLangConferences.iterator();
  }

  public void addToMultiLangConferences(com.lesports.api.common.LangString elem) {
    if (this.multiLangConferences == null) {
      this.multiLangConferences = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangConferences.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangConferences() {
    return this.multiLangConferences;
  }

  public void setMultiLangConferences(List<com.lesports.api.common.LangString> multiLangConferences) {
    this.multiLangConferences = multiLangConferences;
  }

  public void unsetMultiLangConferences() {
    this.multiLangConferences = null;
  }

  /** Returns true if field multiLangConferences is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangConferences() {
    return this.multiLangConferences != null;
  }

  public void setMultiLangConferencesIsSet(boolean value) {
    if (!value) {
      this.multiLangConferences = null;
    }
  }

  public int getMultiLangRegionsSize() {
    return (this.multiLangRegions == null) ? 0 : this.multiLangRegions.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangRegionsIterator() {
    return (this.multiLangRegions == null) ? null : this.multiLangRegions.iterator();
  }

  public void addToMultiLangRegions(com.lesports.api.common.LangString elem) {
    if (this.multiLangRegions == null) {
      this.multiLangRegions = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangRegions.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangRegions() {
    return this.multiLangRegions;
  }

  public void setMultiLangRegions(List<com.lesports.api.common.LangString> multiLangRegions) {
    this.multiLangRegions = multiLangRegions;
  }

  public void unsetMultiLangRegions() {
    this.multiLangRegions = null;
  }

  /** Returns true if field multiLangRegions is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangRegions() {
    return this.multiLangRegions != null;
  }

  public void setMultiLangRegionsIsSet(boolean value) {
    if (!value) {
      this.multiLangRegions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case ABBREVIATION:
      if (value == null) {
        unsetAbbreviation();
      } else {
        setAbbreviation((String)value);
      }
      break;

    case MULTI_LANG_ABBRS:
      if (value == null) {
        unsetMultiLangAbbrs();
      } else {
        setMultiLangAbbrs((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case NICKNAME:
      if (value == null) {
        unsetNickname();
      } else {
        setNickname((String)value);
      }
      break;

    case MULTI_LANG_NICKNAMES:
      if (value == null) {
        unsetMultiLangNicknames();
      } else {
        setMultiLangNicknames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case HOMEPLACE:
      if (value == null) {
        unsetHomeplace();
      } else {
        setHomeplace((String)value);
      }
      break;

    case MULTI_LANG_HOMEPLACES:
      if (value == null) {
        unsetMultiLangHomeplaces();
      } else {
        setMultiLangHomeplaces((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case MULTI_LANG_CITIES:
      if (value == null) {
        unsetMultiLangCities();
      } else {
        setMultiLangCities((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case HOME_SHIRT_IMAGE:
      if (value == null) {
        unsetHomeShirtImage();
      } else {
        setHomeShirtImage((String)value);
      }
      break;

    case AWAY_SHIRT_IMAGE:
      if (value == null) {
        unsetAwayShirtImage();
      } else {
        setAwayShirtImage((String)value);
      }
      break;

    case GRADE:
      if (value == null) {
        unsetGrade();
      } else {
        setGrade((Integer)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case MULTI_LANG_DESC:
      if (value == null) {
        unsetMultiLangDesc();
      } else {
        setMultiLangDesc((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case GAME_FIRST_TYPE:
      if (value == null) {
        unsetGameFirstType();
      } else {
        setGameFirstType((String)value);
      }
      break;

    case TEAM_TYPE:
      if (value == null) {
        unsetTeamType();
      } else {
        setTeamType((Integer)value);
      }
      break;

    case BG_WEB_URL:
      if (value == null) {
        unsetBgWebUrl();
      } else {
        setBgWebUrl((String)value);
      }
      break;

    case SONG_ID:
      if (value == null) {
        unsetSongId();
      } else {
        setSongId((Long)value);
      }
      break;

    case SHIRT_COLOR:
      if (value == null) {
        unsetShirtColor();
      } else {
        setShirtColor((String)value);
      }
      break;

    case BACKGROUP_COLOR:
      if (value == null) {
        unsetBackgroupColor();
      } else {
        setBackgroupColor((String)value);
      }
      break;

    case PLAYERS:
      if (value == null) {
        unsetPlayers();
      } else {
        setPlayers((List<com.lesports.qmt.sbd.api.dto.TSimplePlayer>)value);
      }
      break;

    case PNG_LOGO:
      if (value == null) {
        unsetPngLogo();
      } else {
        setPngLogo((String)value);
      }
      break;

    case CONFERENCE_ID:
      if (value == null) {
        unsetConferenceId();
      } else {
        setConferenceId((Long)value);
      }
      break;

    case REGION_ID:
      if (value == null) {
        unsetRegionId();
      } else {
        setRegionId((Long)value);
      }
      break;

    case CONFERENCE:
      if (value == null) {
        unsetConference();
      } else {
        setConference((String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((String)value);
      }
      break;

    case IS_FOCUSED:
      if (value == null) {
        unsetIsFocused();
      } else {
        setIsFocused((Boolean)value);
      }
      break;

    case BOLE_ID:
      if (value == null) {
        unsetBoleId();
      } else {
        setBoleId((Long)value);
      }
      break;

    case CAMP_ENTITY:
      if (value == null) {
        unsetCampEntity();
      } else {
        setCampEntity((com.lesports.qmt.sbd.api.common.Camp)value);
      }
      break;

    case IS_FOCUSED_COUNTRIES:
      if (value == null) {
        unsetIsFocusedCountries();
      } else {
        setIsFocusedCountries((List<com.lesports.api.common.CountryCode>)value);
      }
      break;

    case CURRENT_CID:
      if (value == null) {
        unsetCurrentCid();
      } else {
        setCurrentCid((Long)value);
      }
      break;

    case CURRENT_CSID:
      if (value == null) {
        unsetCurrentCsid();
      } else {
        setCurrentCsid((Long)value);
      }
      break;

    case CURRENT_TSID:
      if (value == null) {
        unsetCurrentTsid();
      } else {
        setCurrentTsid((Long)value);
      }
      break;

    case HONORS:
      if (value == null) {
        unsetHonors();
      } else {
        setHonors((List<String>)value);
      }
      break;

    case RANKS:
      if (value == null) {
        unsetRanks();
      } else {
        setRanks((List<TRank>)value);
      }
      break;

    case GAME_FTYPE_ID:
      if (value == null) {
        unsetGameFTypeId();
      } else {
        setGameFTypeId((Long)value);
      }
      break;

    case COCAH:
      if (value == null) {
        unsetCocah();
      } else {
        setCocah((TTeamPlayer)value);
      }
      break;

    case MULTI_LANG_GAME_FTYPE:
      if (value == null) {
        unsetMultiLangGameFType();
      } else {
        setMultiLangGameFType((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case CAPTAIN:
      if (value == null) {
        unsetCaptain();
      } else {
        setCaptain((TTeamPlayer)value);
      }
      break;

    case CORE_PLAYERS:
      if (value == null) {
        unsetCorePlayers();
      } else {
        setCorePlayers((List<TTeamPlayer>)value);
      }
      break;

    case MULTI_COUN_LOGOS:
      if (value == null) {
        unsetMultiCounLogos();
      } else {
        setMultiCounLogos((List<com.lesports.api.common.CounString>)value);
      }
      break;

    case CHAMPION_NUM:
      if (value == null) {
        unsetChampionNum();
      } else {
        setChampionNum((String)value);
      }
      break;

    case OFFICIAL_NAME:
      if (value == null) {
        unsetOfficialName();
      } else {
        setOfficialName((String)value);
      }
      break;

    case MULTI_LANG_OFFICIAL_NAMES:
      if (value == null) {
        unsetMultiLangOfficialNames();
      } else {
        setMultiLangOfficialNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_CONFERENCES:
      if (value == null) {
        unsetMultiLangConferences();
      } else {
        setMultiLangConferences((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_REGIONS:
      if (value == null) {
        unsetMultiLangRegions();
      } else {
        setMultiLangRegions((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case NAME:
      return getName();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case ABBREVIATION:
      return getAbbreviation();

    case MULTI_LANG_ABBRS:
      return getMultiLangAbbrs();

    case NICKNAME:
      return getNickname();

    case MULTI_LANG_NICKNAMES:
      return getMultiLangNicknames();

    case HOMEPLACE:
      return getHomeplace();

    case MULTI_LANG_HOMEPLACES:
      return getMultiLangHomeplaces();

    case CITY:
      return getCity();

    case MULTI_LANG_CITIES:
      return getMultiLangCities();

    case LOGO_URL:
      return getLogoUrl();

    case HOME_SHIRT_IMAGE:
      return getHomeShirtImage();

    case AWAY_SHIRT_IMAGE:
      return getAwayShirtImage();

    case GRADE:
      return Integer.valueOf(getGrade());

    case DESC:
      return getDesc();

    case MULTI_LANG_DESC:
      return getMultiLangDesc();

    case GAME_FIRST_TYPE:
      return getGameFirstType();

    case TEAM_TYPE:
      return Integer.valueOf(getTeamType());

    case BG_WEB_URL:
      return getBgWebUrl();

    case SONG_ID:
      return Long.valueOf(getSongId());

    case SHIRT_COLOR:
      return getShirtColor();

    case BACKGROUP_COLOR:
      return getBackgroupColor();

    case PLAYERS:
      return getPlayers();

    case PNG_LOGO:
      return getPngLogo();

    case CONFERENCE_ID:
      return Long.valueOf(getConferenceId());

    case REGION_ID:
      return Long.valueOf(getRegionId());

    case CONFERENCE:
      return getConference();

    case REGION:
      return getRegion();

    case IS_FOCUSED:
      return Boolean.valueOf(isIsFocused());

    case BOLE_ID:
      return Long.valueOf(getBoleId());

    case CAMP_ENTITY:
      return getCampEntity();

    case IS_FOCUSED_COUNTRIES:
      return getIsFocusedCountries();

    case CURRENT_CID:
      return Long.valueOf(getCurrentCid());

    case CURRENT_CSID:
      return Long.valueOf(getCurrentCsid());

    case CURRENT_TSID:
      return Long.valueOf(getCurrentTsid());

    case HONORS:
      return getHonors();

    case RANKS:
      return getRanks();

    case GAME_FTYPE_ID:
      return Long.valueOf(getGameFTypeId());

    case COCAH:
      return getCocah();

    case MULTI_LANG_GAME_FTYPE:
      return getMultiLangGameFType();

    case CAPTAIN:
      return getCaptain();

    case CORE_PLAYERS:
      return getCorePlayers();

    case MULTI_COUN_LOGOS:
      return getMultiCounLogos();

    case CHAMPION_NUM:
      return getChampionNum();

    case OFFICIAL_NAME:
      return getOfficialName();

    case MULTI_LANG_OFFICIAL_NAMES:
      return getMultiLangOfficialNames();

    case MULTI_LANG_CONFERENCES:
      return getMultiLangConferences();

    case MULTI_LANG_REGIONS:
      return getMultiLangRegions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case ABBREVIATION:
      return isSetAbbreviation();
    case MULTI_LANG_ABBRS:
      return isSetMultiLangAbbrs();
    case NICKNAME:
      return isSetNickname();
    case MULTI_LANG_NICKNAMES:
      return isSetMultiLangNicknames();
    case HOMEPLACE:
      return isSetHomeplace();
    case MULTI_LANG_HOMEPLACES:
      return isSetMultiLangHomeplaces();
    case CITY:
      return isSetCity();
    case MULTI_LANG_CITIES:
      return isSetMultiLangCities();
    case LOGO_URL:
      return isSetLogoUrl();
    case HOME_SHIRT_IMAGE:
      return isSetHomeShirtImage();
    case AWAY_SHIRT_IMAGE:
      return isSetAwayShirtImage();
    case GRADE:
      return isSetGrade();
    case DESC:
      return isSetDesc();
    case MULTI_LANG_DESC:
      return isSetMultiLangDesc();
    case GAME_FIRST_TYPE:
      return isSetGameFirstType();
    case TEAM_TYPE:
      return isSetTeamType();
    case BG_WEB_URL:
      return isSetBgWebUrl();
    case SONG_ID:
      return isSetSongId();
    case SHIRT_COLOR:
      return isSetShirtColor();
    case BACKGROUP_COLOR:
      return isSetBackgroupColor();
    case PLAYERS:
      return isSetPlayers();
    case PNG_LOGO:
      return isSetPngLogo();
    case CONFERENCE_ID:
      return isSetConferenceId();
    case REGION_ID:
      return isSetRegionId();
    case CONFERENCE:
      return isSetConference();
    case REGION:
      return isSetRegion();
    case IS_FOCUSED:
      return isSetIsFocused();
    case BOLE_ID:
      return isSetBoleId();
    case CAMP_ENTITY:
      return isSetCampEntity();
    case IS_FOCUSED_COUNTRIES:
      return isSetIsFocusedCountries();
    case CURRENT_CID:
      return isSetCurrentCid();
    case CURRENT_CSID:
      return isSetCurrentCsid();
    case CURRENT_TSID:
      return isSetCurrentTsid();
    case HONORS:
      return isSetHonors();
    case RANKS:
      return isSetRanks();
    case GAME_FTYPE_ID:
      return isSetGameFTypeId();
    case COCAH:
      return isSetCocah();
    case MULTI_LANG_GAME_FTYPE:
      return isSetMultiLangGameFType();
    case CAPTAIN:
      return isSetCaptain();
    case CORE_PLAYERS:
      return isSetCorePlayers();
    case MULTI_COUN_LOGOS:
      return isSetMultiCounLogos();
    case CHAMPION_NUM:
      return isSetChampionNum();
    case OFFICIAL_NAME:
      return isSetOfficialName();
    case MULTI_LANG_OFFICIAL_NAMES:
      return isSetMultiLangOfficialNames();
    case MULTI_LANG_CONFERENCES:
      return isSetMultiLangConferences();
    case MULTI_LANG_REGIONS:
      return isSetMultiLangRegions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTeam)
      return this.equals((TTeam)that);
    return false;
  }

  public boolean equals(TTeam that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_abbreviation = true && this.isSetAbbreviation();
    boolean that_present_abbreviation = true && that.isSetAbbreviation();
    if (this_present_abbreviation || that_present_abbreviation) {
      if (!(this_present_abbreviation && that_present_abbreviation))
        return false;
      if (!this.abbreviation.equals(that.abbreviation))
        return false;
    }

    boolean this_present_multiLangAbbrs = true && this.isSetMultiLangAbbrs();
    boolean that_present_multiLangAbbrs = true && that.isSetMultiLangAbbrs();
    if (this_present_multiLangAbbrs || that_present_multiLangAbbrs) {
      if (!(this_present_multiLangAbbrs && that_present_multiLangAbbrs))
        return false;
      if (!this.multiLangAbbrs.equals(that.multiLangAbbrs))
        return false;
    }

    boolean this_present_nickname = true && this.isSetNickname();
    boolean that_present_nickname = true && that.isSetNickname();
    if (this_present_nickname || that_present_nickname) {
      if (!(this_present_nickname && that_present_nickname))
        return false;
      if (!this.nickname.equals(that.nickname))
        return false;
    }

    boolean this_present_multiLangNicknames = true && this.isSetMultiLangNicknames();
    boolean that_present_multiLangNicknames = true && that.isSetMultiLangNicknames();
    if (this_present_multiLangNicknames || that_present_multiLangNicknames) {
      if (!(this_present_multiLangNicknames && that_present_multiLangNicknames))
        return false;
      if (!this.multiLangNicknames.equals(that.multiLangNicknames))
        return false;
    }

    boolean this_present_homeplace = true && this.isSetHomeplace();
    boolean that_present_homeplace = true && that.isSetHomeplace();
    if (this_present_homeplace || that_present_homeplace) {
      if (!(this_present_homeplace && that_present_homeplace))
        return false;
      if (!this.homeplace.equals(that.homeplace))
        return false;
    }

    boolean this_present_multiLangHomeplaces = true && this.isSetMultiLangHomeplaces();
    boolean that_present_multiLangHomeplaces = true && that.isSetMultiLangHomeplaces();
    if (this_present_multiLangHomeplaces || that_present_multiLangHomeplaces) {
      if (!(this_present_multiLangHomeplaces && that_present_multiLangHomeplaces))
        return false;
      if (!this.multiLangHomeplaces.equals(that.multiLangHomeplaces))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_multiLangCities = true && this.isSetMultiLangCities();
    boolean that_present_multiLangCities = true && that.isSetMultiLangCities();
    if (this_present_multiLangCities || that_present_multiLangCities) {
      if (!(this_present_multiLangCities && that_present_multiLangCities))
        return false;
      if (!this.multiLangCities.equals(that.multiLangCities))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_homeShirtImage = true && this.isSetHomeShirtImage();
    boolean that_present_homeShirtImage = true && that.isSetHomeShirtImage();
    if (this_present_homeShirtImage || that_present_homeShirtImage) {
      if (!(this_present_homeShirtImage && that_present_homeShirtImage))
        return false;
      if (!this.homeShirtImage.equals(that.homeShirtImage))
        return false;
    }

    boolean this_present_awayShirtImage = true && this.isSetAwayShirtImage();
    boolean that_present_awayShirtImage = true && that.isSetAwayShirtImage();
    if (this_present_awayShirtImage || that_present_awayShirtImage) {
      if (!(this_present_awayShirtImage && that_present_awayShirtImage))
        return false;
      if (!this.awayShirtImage.equals(that.awayShirtImage))
        return false;
    }

    boolean this_present_grade = true && this.isSetGrade();
    boolean that_present_grade = true && that.isSetGrade();
    if (this_present_grade || that_present_grade) {
      if (!(this_present_grade && that_present_grade))
        return false;
      if (this.grade != that.grade)
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_multiLangDesc = true && this.isSetMultiLangDesc();
    boolean that_present_multiLangDesc = true && that.isSetMultiLangDesc();
    if (this_present_multiLangDesc || that_present_multiLangDesc) {
      if (!(this_present_multiLangDesc && that_present_multiLangDesc))
        return false;
      if (!this.multiLangDesc.equals(that.multiLangDesc))
        return false;
    }

    boolean this_present_gameFirstType = true && this.isSetGameFirstType();
    boolean that_present_gameFirstType = true && that.isSetGameFirstType();
    if (this_present_gameFirstType || that_present_gameFirstType) {
      if (!(this_present_gameFirstType && that_present_gameFirstType))
        return false;
      if (!this.gameFirstType.equals(that.gameFirstType))
        return false;
    }

    boolean this_present_teamType = true && this.isSetTeamType();
    boolean that_present_teamType = true && that.isSetTeamType();
    if (this_present_teamType || that_present_teamType) {
      if (!(this_present_teamType && that_present_teamType))
        return false;
      if (this.teamType != that.teamType)
        return false;
    }

    boolean this_present_bgWebUrl = true && this.isSetBgWebUrl();
    boolean that_present_bgWebUrl = true && that.isSetBgWebUrl();
    if (this_present_bgWebUrl || that_present_bgWebUrl) {
      if (!(this_present_bgWebUrl && that_present_bgWebUrl))
        return false;
      if (!this.bgWebUrl.equals(that.bgWebUrl))
        return false;
    }

    boolean this_present_songId = true && this.isSetSongId();
    boolean that_present_songId = true && that.isSetSongId();
    if (this_present_songId || that_present_songId) {
      if (!(this_present_songId && that_present_songId))
        return false;
      if (this.songId != that.songId)
        return false;
    }

    boolean this_present_shirtColor = true && this.isSetShirtColor();
    boolean that_present_shirtColor = true && that.isSetShirtColor();
    if (this_present_shirtColor || that_present_shirtColor) {
      if (!(this_present_shirtColor && that_present_shirtColor))
        return false;
      if (!this.shirtColor.equals(that.shirtColor))
        return false;
    }

    boolean this_present_backgroupColor = true && this.isSetBackgroupColor();
    boolean that_present_backgroupColor = true && that.isSetBackgroupColor();
    if (this_present_backgroupColor || that_present_backgroupColor) {
      if (!(this_present_backgroupColor && that_present_backgroupColor))
        return false;
      if (!this.backgroupColor.equals(that.backgroupColor))
        return false;
    }

    boolean this_present_players = true && this.isSetPlayers();
    boolean that_present_players = true && that.isSetPlayers();
    if (this_present_players || that_present_players) {
      if (!(this_present_players && that_present_players))
        return false;
      if (!this.players.equals(that.players))
        return false;
    }

    boolean this_present_pngLogo = true && this.isSetPngLogo();
    boolean that_present_pngLogo = true && that.isSetPngLogo();
    if (this_present_pngLogo || that_present_pngLogo) {
      if (!(this_present_pngLogo && that_present_pngLogo))
        return false;
      if (!this.pngLogo.equals(that.pngLogo))
        return false;
    }

    boolean this_present_conferenceId = true && this.isSetConferenceId();
    boolean that_present_conferenceId = true && that.isSetConferenceId();
    if (this_present_conferenceId || that_present_conferenceId) {
      if (!(this_present_conferenceId && that_present_conferenceId))
        return false;
      if (this.conferenceId != that.conferenceId)
        return false;
    }

    boolean this_present_regionId = true && this.isSetRegionId();
    boolean that_present_regionId = true && that.isSetRegionId();
    if (this_present_regionId || that_present_regionId) {
      if (!(this_present_regionId && that_present_regionId))
        return false;
      if (this.regionId != that.regionId)
        return false;
    }

    boolean this_present_conference = true && this.isSetConference();
    boolean that_present_conference = true && that.isSetConference();
    if (this_present_conference || that_present_conference) {
      if (!(this_present_conference && that_present_conference))
        return false;
      if (!this.conference.equals(that.conference))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_isFocused = true && this.isSetIsFocused();
    boolean that_present_isFocused = true && that.isSetIsFocused();
    if (this_present_isFocused || that_present_isFocused) {
      if (!(this_present_isFocused && that_present_isFocused))
        return false;
      if (this.isFocused != that.isFocused)
        return false;
    }

    boolean this_present_boleId = true && this.isSetBoleId();
    boolean that_present_boleId = true && that.isSetBoleId();
    if (this_present_boleId || that_present_boleId) {
      if (!(this_present_boleId && that_present_boleId))
        return false;
      if (this.boleId != that.boleId)
        return false;
    }

    boolean this_present_campEntity = true && this.isSetCampEntity();
    boolean that_present_campEntity = true && that.isSetCampEntity();
    if (this_present_campEntity || that_present_campEntity) {
      if (!(this_present_campEntity && that_present_campEntity))
        return false;
      if (!this.campEntity.equals(that.campEntity))
        return false;
    }

    boolean this_present_isFocusedCountries = true && this.isSetIsFocusedCountries();
    boolean that_present_isFocusedCountries = true && that.isSetIsFocusedCountries();
    if (this_present_isFocusedCountries || that_present_isFocusedCountries) {
      if (!(this_present_isFocusedCountries && that_present_isFocusedCountries))
        return false;
      if (!this.isFocusedCountries.equals(that.isFocusedCountries))
        return false;
    }

    boolean this_present_currentCid = true && this.isSetCurrentCid();
    boolean that_present_currentCid = true && that.isSetCurrentCid();
    if (this_present_currentCid || that_present_currentCid) {
      if (!(this_present_currentCid && that_present_currentCid))
        return false;
      if (this.currentCid != that.currentCid)
        return false;
    }

    boolean this_present_currentCsid = true && this.isSetCurrentCsid();
    boolean that_present_currentCsid = true && that.isSetCurrentCsid();
    if (this_present_currentCsid || that_present_currentCsid) {
      if (!(this_present_currentCsid && that_present_currentCsid))
        return false;
      if (this.currentCsid != that.currentCsid)
        return false;
    }

    boolean this_present_currentTsid = true && this.isSetCurrentTsid();
    boolean that_present_currentTsid = true && that.isSetCurrentTsid();
    if (this_present_currentTsid || that_present_currentTsid) {
      if (!(this_present_currentTsid && that_present_currentTsid))
        return false;
      if (this.currentTsid != that.currentTsid)
        return false;
    }

    boolean this_present_honors = true && this.isSetHonors();
    boolean that_present_honors = true && that.isSetHonors();
    if (this_present_honors || that_present_honors) {
      if (!(this_present_honors && that_present_honors))
        return false;
      if (!this.honors.equals(that.honors))
        return false;
    }

    boolean this_present_ranks = true && this.isSetRanks();
    boolean that_present_ranks = true && that.isSetRanks();
    if (this_present_ranks || that_present_ranks) {
      if (!(this_present_ranks && that_present_ranks))
        return false;
      if (!this.ranks.equals(that.ranks))
        return false;
    }

    boolean this_present_gameFTypeId = true && this.isSetGameFTypeId();
    boolean that_present_gameFTypeId = true && that.isSetGameFTypeId();
    if (this_present_gameFTypeId || that_present_gameFTypeId) {
      if (!(this_present_gameFTypeId && that_present_gameFTypeId))
        return false;
      if (this.gameFTypeId != that.gameFTypeId)
        return false;
    }

    boolean this_present_cocah = true && this.isSetCocah();
    boolean that_present_cocah = true && that.isSetCocah();
    if (this_present_cocah || that_present_cocah) {
      if (!(this_present_cocah && that_present_cocah))
        return false;
      if (!this.cocah.equals(that.cocah))
        return false;
    }

    boolean this_present_multiLangGameFType = true && this.isSetMultiLangGameFType();
    boolean that_present_multiLangGameFType = true && that.isSetMultiLangGameFType();
    if (this_present_multiLangGameFType || that_present_multiLangGameFType) {
      if (!(this_present_multiLangGameFType && that_present_multiLangGameFType))
        return false;
      if (!this.multiLangGameFType.equals(that.multiLangGameFType))
        return false;
    }

    boolean this_present_captain = true && this.isSetCaptain();
    boolean that_present_captain = true && that.isSetCaptain();
    if (this_present_captain || that_present_captain) {
      if (!(this_present_captain && that_present_captain))
        return false;
      if (!this.captain.equals(that.captain))
        return false;
    }

    boolean this_present_corePlayers = true && this.isSetCorePlayers();
    boolean that_present_corePlayers = true && that.isSetCorePlayers();
    if (this_present_corePlayers || that_present_corePlayers) {
      if (!(this_present_corePlayers && that_present_corePlayers))
        return false;
      if (!this.corePlayers.equals(that.corePlayers))
        return false;
    }

    boolean this_present_multiCounLogos = true && this.isSetMultiCounLogos();
    boolean that_present_multiCounLogos = true && that.isSetMultiCounLogos();
    if (this_present_multiCounLogos || that_present_multiCounLogos) {
      if (!(this_present_multiCounLogos && that_present_multiCounLogos))
        return false;
      if (!this.multiCounLogos.equals(that.multiCounLogos))
        return false;
    }

    boolean this_present_championNum = true && this.isSetChampionNum();
    boolean that_present_championNum = true && that.isSetChampionNum();
    if (this_present_championNum || that_present_championNum) {
      if (!(this_present_championNum && that_present_championNum))
        return false;
      if (!this.championNum.equals(that.championNum))
        return false;
    }

    boolean this_present_officialName = true && this.isSetOfficialName();
    boolean that_present_officialName = true && that.isSetOfficialName();
    if (this_present_officialName || that_present_officialName) {
      if (!(this_present_officialName && that_present_officialName))
        return false;
      if (!this.officialName.equals(that.officialName))
        return false;
    }

    boolean this_present_multiLangOfficialNames = true && this.isSetMultiLangOfficialNames();
    boolean that_present_multiLangOfficialNames = true && that.isSetMultiLangOfficialNames();
    if (this_present_multiLangOfficialNames || that_present_multiLangOfficialNames) {
      if (!(this_present_multiLangOfficialNames && that_present_multiLangOfficialNames))
        return false;
      if (!this.multiLangOfficialNames.equals(that.multiLangOfficialNames))
        return false;
    }

    boolean this_present_multiLangConferences = true && this.isSetMultiLangConferences();
    boolean that_present_multiLangConferences = true && that.isSetMultiLangConferences();
    if (this_present_multiLangConferences || that_present_multiLangConferences) {
      if (!(this_present_multiLangConferences && that_present_multiLangConferences))
        return false;
      if (!this.multiLangConferences.equals(that.multiLangConferences))
        return false;
    }

    boolean this_present_multiLangRegions = true && this.isSetMultiLangRegions();
    boolean that_present_multiLangRegions = true && that.isSetMultiLangRegions();
    if (this_present_multiLangRegions || that_present_multiLangRegions) {
      if (!(this_present_multiLangRegions && that_present_multiLangRegions))
        return false;
      if (!this.multiLangRegions.equals(that.multiLangRegions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_abbreviation = true && (isSetAbbreviation());
    list.add(present_abbreviation);
    if (present_abbreviation)
      list.add(abbreviation);

    boolean present_multiLangAbbrs = true && (isSetMultiLangAbbrs());
    list.add(present_multiLangAbbrs);
    if (present_multiLangAbbrs)
      list.add(multiLangAbbrs);

    boolean present_nickname = true && (isSetNickname());
    list.add(present_nickname);
    if (present_nickname)
      list.add(nickname);

    boolean present_multiLangNicknames = true && (isSetMultiLangNicknames());
    list.add(present_multiLangNicknames);
    if (present_multiLangNicknames)
      list.add(multiLangNicknames);

    boolean present_homeplace = true && (isSetHomeplace());
    list.add(present_homeplace);
    if (present_homeplace)
      list.add(homeplace);

    boolean present_multiLangHomeplaces = true && (isSetMultiLangHomeplaces());
    list.add(present_multiLangHomeplaces);
    if (present_multiLangHomeplaces)
      list.add(multiLangHomeplaces);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_multiLangCities = true && (isSetMultiLangCities());
    list.add(present_multiLangCities);
    if (present_multiLangCities)
      list.add(multiLangCities);

    boolean present_logoUrl = true && (isSetLogoUrl());
    list.add(present_logoUrl);
    if (present_logoUrl)
      list.add(logoUrl);

    boolean present_homeShirtImage = true && (isSetHomeShirtImage());
    list.add(present_homeShirtImage);
    if (present_homeShirtImage)
      list.add(homeShirtImage);

    boolean present_awayShirtImage = true && (isSetAwayShirtImage());
    list.add(present_awayShirtImage);
    if (present_awayShirtImage)
      list.add(awayShirtImage);

    boolean present_grade = true && (isSetGrade());
    list.add(present_grade);
    if (present_grade)
      list.add(grade);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_multiLangDesc = true && (isSetMultiLangDesc());
    list.add(present_multiLangDesc);
    if (present_multiLangDesc)
      list.add(multiLangDesc);

    boolean present_gameFirstType = true && (isSetGameFirstType());
    list.add(present_gameFirstType);
    if (present_gameFirstType)
      list.add(gameFirstType);

    boolean present_teamType = true && (isSetTeamType());
    list.add(present_teamType);
    if (present_teamType)
      list.add(teamType);

    boolean present_bgWebUrl = true && (isSetBgWebUrl());
    list.add(present_bgWebUrl);
    if (present_bgWebUrl)
      list.add(bgWebUrl);

    boolean present_songId = true && (isSetSongId());
    list.add(present_songId);
    if (present_songId)
      list.add(songId);

    boolean present_shirtColor = true && (isSetShirtColor());
    list.add(present_shirtColor);
    if (present_shirtColor)
      list.add(shirtColor);

    boolean present_backgroupColor = true && (isSetBackgroupColor());
    list.add(present_backgroupColor);
    if (present_backgroupColor)
      list.add(backgroupColor);

    boolean present_players = true && (isSetPlayers());
    list.add(present_players);
    if (present_players)
      list.add(players);

    boolean present_pngLogo = true && (isSetPngLogo());
    list.add(present_pngLogo);
    if (present_pngLogo)
      list.add(pngLogo);

    boolean present_conferenceId = true && (isSetConferenceId());
    list.add(present_conferenceId);
    if (present_conferenceId)
      list.add(conferenceId);

    boolean present_regionId = true && (isSetRegionId());
    list.add(present_regionId);
    if (present_regionId)
      list.add(regionId);

    boolean present_conference = true && (isSetConference());
    list.add(present_conference);
    if (present_conference)
      list.add(conference);

    boolean present_region = true && (isSetRegion());
    list.add(present_region);
    if (present_region)
      list.add(region);

    boolean present_isFocused = true && (isSetIsFocused());
    list.add(present_isFocused);
    if (present_isFocused)
      list.add(isFocused);

    boolean present_boleId = true && (isSetBoleId());
    list.add(present_boleId);
    if (present_boleId)
      list.add(boleId);

    boolean present_campEntity = true && (isSetCampEntity());
    list.add(present_campEntity);
    if (present_campEntity)
      list.add(campEntity);

    boolean present_isFocusedCountries = true && (isSetIsFocusedCountries());
    list.add(present_isFocusedCountries);
    if (present_isFocusedCountries)
      list.add(isFocusedCountries);

    boolean present_currentCid = true && (isSetCurrentCid());
    list.add(present_currentCid);
    if (present_currentCid)
      list.add(currentCid);

    boolean present_currentCsid = true && (isSetCurrentCsid());
    list.add(present_currentCsid);
    if (present_currentCsid)
      list.add(currentCsid);

    boolean present_currentTsid = true && (isSetCurrentTsid());
    list.add(present_currentTsid);
    if (present_currentTsid)
      list.add(currentTsid);

    boolean present_honors = true && (isSetHonors());
    list.add(present_honors);
    if (present_honors)
      list.add(honors);

    boolean present_ranks = true && (isSetRanks());
    list.add(present_ranks);
    if (present_ranks)
      list.add(ranks);

    boolean present_gameFTypeId = true && (isSetGameFTypeId());
    list.add(present_gameFTypeId);
    if (present_gameFTypeId)
      list.add(gameFTypeId);

    boolean present_cocah = true && (isSetCocah());
    list.add(present_cocah);
    if (present_cocah)
      list.add(cocah);

    boolean present_multiLangGameFType = true && (isSetMultiLangGameFType());
    list.add(present_multiLangGameFType);
    if (present_multiLangGameFType)
      list.add(multiLangGameFType);

    boolean present_captain = true && (isSetCaptain());
    list.add(present_captain);
    if (present_captain)
      list.add(captain);

    boolean present_corePlayers = true && (isSetCorePlayers());
    list.add(present_corePlayers);
    if (present_corePlayers)
      list.add(corePlayers);

    boolean present_multiCounLogos = true && (isSetMultiCounLogos());
    list.add(present_multiCounLogos);
    if (present_multiCounLogos)
      list.add(multiCounLogos);

    boolean present_championNum = true && (isSetChampionNum());
    list.add(present_championNum);
    if (present_championNum)
      list.add(championNum);

    boolean present_officialName = true && (isSetOfficialName());
    list.add(present_officialName);
    if (present_officialName)
      list.add(officialName);

    boolean present_multiLangOfficialNames = true && (isSetMultiLangOfficialNames());
    list.add(present_multiLangOfficialNames);
    if (present_multiLangOfficialNames)
      list.add(multiLangOfficialNames);

    boolean present_multiLangConferences = true && (isSetMultiLangConferences());
    list.add(present_multiLangConferences);
    if (present_multiLangConferences)
      list.add(multiLangConferences);

    boolean present_multiLangRegions = true && (isSetMultiLangRegions());
    list.add(present_multiLangRegions);
    if (present_multiLangRegions)
      list.add(multiLangRegions);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTeam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbbreviation()).compareTo(other.isSetAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbreviation, other.abbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangAbbrs()).compareTo(other.isSetMultiLangAbbrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangAbbrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangAbbrs, other.multiLangAbbrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNicknames()).compareTo(other.isSetMultiLangNicknames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNicknames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNicknames, other.multiLangNicknames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeplace()).compareTo(other.isSetHomeplace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeplace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeplace, other.homeplace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangHomeplaces()).compareTo(other.isSetMultiLangHomeplaces());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangHomeplaces()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangHomeplaces, other.multiLangHomeplaces);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCities()).compareTo(other.isSetMultiLangCities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCities, other.multiLangCities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHomeShirtImage()).compareTo(other.isSetHomeShirtImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHomeShirtImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.homeShirtImage, other.homeShirtImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAwayShirtImage()).compareTo(other.isSetAwayShirtImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAwayShirtImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awayShirtImage, other.awayShirtImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrade()).compareTo(other.isSetGrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grade, other.grade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangDesc()).compareTo(other.isSetMultiLangDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangDesc, other.multiLangDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFirstType()).compareTo(other.isSetGameFirstType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFirstType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFirstType, other.gameFirstType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamType()).compareTo(other.isSetTeamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamType, other.teamType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBgWebUrl()).compareTo(other.isSetBgWebUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBgWebUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bgWebUrl, other.bgWebUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongId()).compareTo(other.isSetSongId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songId, other.songId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShirtColor()).compareTo(other.isSetShirtColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShirtColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shirtColor, other.shirtColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackgroupColor()).compareTo(other.isSetBackgroupColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackgroupColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backgroupColor, other.backgroupColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayers()).compareTo(other.isSetPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.players, other.players);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPngLogo()).compareTo(other.isSetPngLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPngLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pngLogo, other.pngLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConferenceId()).compareTo(other.isSetConferenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConferenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conferenceId, other.conferenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionId()).compareTo(other.isSetRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, other.regionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConference()).compareTo(other.isSetConference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conference, other.conference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFocused()).compareTo(other.isSetIsFocused());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFocused()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFocused, other.isFocused);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoleId()).compareTo(other.isSetBoleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boleId, other.boleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampEntity()).compareTo(other.isSetCampEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campEntity, other.campEntity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFocusedCountries()).compareTo(other.isSetIsFocusedCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFocusedCountries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFocusedCountries, other.isFocusedCountries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentCid()).compareTo(other.isSetCurrentCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentCid, other.currentCid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentCsid()).compareTo(other.isSetCurrentCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentCsid, other.currentCsid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentTsid()).compareTo(other.isSetCurrentTsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentTsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentTsid, other.currentTsid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHonors()).compareTo(other.isSetHonors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHonors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.honors, other.honors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRanks()).compareTo(other.isSetRanks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranks, other.ranks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameFTypeId()).compareTo(other.isSetGameFTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameFTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameFTypeId, other.gameFTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCocah()).compareTo(other.isSetCocah());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCocah()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cocah, other.cocah);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangGameFType()).compareTo(other.isSetMultiLangGameFType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangGameFType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangGameFType, other.multiLangGameFType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaptain()).compareTo(other.isSetCaptain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaptain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captain, other.captain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorePlayers()).compareTo(other.isSetCorePlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorePlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corePlayers, other.corePlayers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiCounLogos()).compareTo(other.isSetMultiCounLogos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiCounLogos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiCounLogos, other.multiCounLogos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChampionNum()).compareTo(other.isSetChampionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChampionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.championNum, other.championNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfficialName()).compareTo(other.isSetOfficialName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfficialName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.officialName, other.officialName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangOfficialNames()).compareTo(other.isSetMultiLangOfficialNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangOfficialNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangOfficialNames, other.multiLangOfficialNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangConferences()).compareTo(other.isSetMultiLangConferences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangConferences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangConferences, other.multiLangConferences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangRegions()).compareTo(other.isSetMultiLangRegions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangRegions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangRegions, other.multiLangRegions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTeam(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetAbbreviation()) {
      if (!first) sb.append(", ");
      sb.append("abbreviation:");
      if (this.abbreviation == null) {
        sb.append("null");
      } else {
        sb.append(this.abbreviation);
      }
      first = false;
    }
    if (isSetMultiLangAbbrs()) {
      if (!first) sb.append(", ");
      sb.append("multiLangAbbrs:");
      if (this.multiLangAbbrs == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangAbbrs);
      }
      first = false;
    }
    if (isSetNickname()) {
      if (!first) sb.append(", ");
      sb.append("nickname:");
      if (this.nickname == null) {
        sb.append("null");
      } else {
        sb.append(this.nickname);
      }
      first = false;
    }
    if (isSetMultiLangNicknames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNicknames:");
      if (this.multiLangNicknames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNicknames);
      }
      first = false;
    }
    if (isSetHomeplace()) {
      if (!first) sb.append(", ");
      sb.append("homeplace:");
      if (this.homeplace == null) {
        sb.append("null");
      } else {
        sb.append(this.homeplace);
      }
      first = false;
    }
    if (isSetMultiLangHomeplaces()) {
      if (!first) sb.append(", ");
      sb.append("multiLangHomeplaces:");
      if (this.multiLangHomeplaces == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangHomeplaces);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetMultiLangCities()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCities:");
      if (this.multiLangCities == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCities);
      }
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetHomeShirtImage()) {
      if (!first) sb.append(", ");
      sb.append("homeShirtImage:");
      if (this.homeShirtImage == null) {
        sb.append("null");
      } else {
        sb.append(this.homeShirtImage);
      }
      first = false;
    }
    if (isSetAwayShirtImage()) {
      if (!first) sb.append(", ");
      sb.append("awayShirtImage:");
      if (this.awayShirtImage == null) {
        sb.append("null");
      } else {
        sb.append(this.awayShirtImage);
      }
      first = false;
    }
    if (isSetGrade()) {
      if (!first) sb.append(", ");
      sb.append("grade:");
      sb.append(this.grade);
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetMultiLangDesc()) {
      if (!first) sb.append(", ");
      sb.append("multiLangDesc:");
      if (this.multiLangDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangDesc);
      }
      first = false;
    }
    if (isSetGameFirstType()) {
      if (!first) sb.append(", ");
      sb.append("gameFirstType:");
      if (this.gameFirstType == null) {
        sb.append("null");
      } else {
        sb.append(this.gameFirstType);
      }
      first = false;
    }
    if (isSetTeamType()) {
      if (!first) sb.append(", ");
      sb.append("teamType:");
      sb.append(this.teamType);
      first = false;
    }
    if (isSetBgWebUrl()) {
      if (!first) sb.append(", ");
      sb.append("bgWebUrl:");
      if (this.bgWebUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.bgWebUrl);
      }
      first = false;
    }
    if (isSetSongId()) {
      if (!first) sb.append(", ");
      sb.append("songId:");
      sb.append(this.songId);
      first = false;
    }
    if (isSetShirtColor()) {
      if (!first) sb.append(", ");
      sb.append("shirtColor:");
      if (this.shirtColor == null) {
        sb.append("null");
      } else {
        sb.append(this.shirtColor);
      }
      first = false;
    }
    if (isSetBackgroupColor()) {
      if (!first) sb.append(", ");
      sb.append("backgroupColor:");
      if (this.backgroupColor == null) {
        sb.append("null");
      } else {
        sb.append(this.backgroupColor);
      }
      first = false;
    }
    if (isSetPlayers()) {
      if (!first) sb.append(", ");
      sb.append("players:");
      if (this.players == null) {
        sb.append("null");
      } else {
        sb.append(this.players);
      }
      first = false;
    }
    if (isSetPngLogo()) {
      if (!first) sb.append(", ");
      sb.append("pngLogo:");
      if (this.pngLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.pngLogo);
      }
      first = false;
    }
    if (isSetConferenceId()) {
      if (!first) sb.append(", ");
      sb.append("conferenceId:");
      sb.append(this.conferenceId);
      first = false;
    }
    if (isSetRegionId()) {
      if (!first) sb.append(", ");
      sb.append("regionId:");
      sb.append(this.regionId);
      first = false;
    }
    if (isSetConference()) {
      if (!first) sb.append(", ");
      sb.append("conference:");
      if (this.conference == null) {
        sb.append("null");
      } else {
        sb.append(this.conference);
      }
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetIsFocused()) {
      if (!first) sb.append(", ");
      sb.append("isFocused:");
      sb.append(this.isFocused);
      first = false;
    }
    if (isSetBoleId()) {
      if (!first) sb.append(", ");
      sb.append("boleId:");
      sb.append(this.boleId);
      first = false;
    }
    if (isSetCampEntity()) {
      if (!first) sb.append(", ");
      sb.append("campEntity:");
      if (this.campEntity == null) {
        sb.append("null");
      } else {
        sb.append(this.campEntity);
      }
      first = false;
    }
    if (isSetIsFocusedCountries()) {
      if (!first) sb.append(", ");
      sb.append("isFocusedCountries:");
      if (this.isFocusedCountries == null) {
        sb.append("null");
      } else {
        sb.append(this.isFocusedCountries);
      }
      first = false;
    }
    if (isSetCurrentCid()) {
      if (!first) sb.append(", ");
      sb.append("currentCid:");
      sb.append(this.currentCid);
      first = false;
    }
    if (isSetCurrentCsid()) {
      if (!first) sb.append(", ");
      sb.append("currentCsid:");
      sb.append(this.currentCsid);
      first = false;
    }
    if (isSetCurrentTsid()) {
      if (!first) sb.append(", ");
      sb.append("currentTsid:");
      sb.append(this.currentTsid);
      first = false;
    }
    if (isSetHonors()) {
      if (!first) sb.append(", ");
      sb.append("honors:");
      if (this.honors == null) {
        sb.append("null");
      } else {
        sb.append(this.honors);
      }
      first = false;
    }
    if (isSetRanks()) {
      if (!first) sb.append(", ");
      sb.append("ranks:");
      if (this.ranks == null) {
        sb.append("null");
      } else {
        sb.append(this.ranks);
      }
      first = false;
    }
    if (isSetGameFTypeId()) {
      if (!first) sb.append(", ");
      sb.append("gameFTypeId:");
      sb.append(this.gameFTypeId);
      first = false;
    }
    if (isSetCocah()) {
      if (!first) sb.append(", ");
      sb.append("cocah:");
      if (this.cocah == null) {
        sb.append("null");
      } else {
        sb.append(this.cocah);
      }
      first = false;
    }
    if (isSetMultiLangGameFType()) {
      if (!first) sb.append(", ");
      sb.append("multiLangGameFType:");
      if (this.multiLangGameFType == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangGameFType);
      }
      first = false;
    }
    if (isSetCaptain()) {
      if (!first) sb.append(", ");
      sb.append("captain:");
      if (this.captain == null) {
        sb.append("null");
      } else {
        sb.append(this.captain);
      }
      first = false;
    }
    if (isSetCorePlayers()) {
      if (!first) sb.append(", ");
      sb.append("corePlayers:");
      if (this.corePlayers == null) {
        sb.append("null");
      } else {
        sb.append(this.corePlayers);
      }
      first = false;
    }
    if (isSetMultiCounLogos()) {
      if (!first) sb.append(", ");
      sb.append("multiCounLogos:");
      if (this.multiCounLogos == null) {
        sb.append("null");
      } else {
        sb.append(this.multiCounLogos);
      }
      first = false;
    }
    if (isSetChampionNum()) {
      if (!first) sb.append(", ");
      sb.append("championNum:");
      if (this.championNum == null) {
        sb.append("null");
      } else {
        sb.append(this.championNum);
      }
      first = false;
    }
    if (isSetOfficialName()) {
      if (!first) sb.append(", ");
      sb.append("officialName:");
      if (this.officialName == null) {
        sb.append("null");
      } else {
        sb.append(this.officialName);
      }
      first = false;
    }
    if (isSetMultiLangOfficialNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangOfficialNames:");
      if (this.multiLangOfficialNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangOfficialNames);
      }
      first = false;
    }
    if (isSetMultiLangConferences()) {
      if (!first) sb.append(", ");
      sb.append("multiLangConferences:");
      if (this.multiLangConferences == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangConferences);
      }
      first = false;
    }
    if (isSetMultiLangRegions()) {
      if (!first) sb.append(", ");
      sb.append("multiLangRegions:");
      if (this.multiLangRegions == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangRegions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (campEntity != null) {
      campEntity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTeamStandardSchemeFactory implements SchemeFactory {
    public TTeamStandardScheme getScheme() {
      return new TTeamStandardScheme();
    }
  }

  private static class TTeamStandardScheme extends StandardScheme<TTeam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTeam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list0.size);
                com.lesports.api.common.LangString _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.lesports.api.common.LangString();
                  _elem1.read(iprot);
                  struct.multiLangNames.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abbreviation = iprot.readString();
              struct.setAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MULTI_LANG_ABBRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(_list3.size);
                com.lesports.api.common.LangString _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.lesports.api.common.LangString();
                  _elem4.read(iprot);
                  struct.multiLangAbbrs.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangAbbrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NICKNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickname = iprot.readString();
              struct.setNicknameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MULTI_LANG_NICKNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>(_list6.size);
                com.lesports.api.common.LangString _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new com.lesports.api.common.LangString();
                  _elem7.read(iprot);
                  struct.multiLangNicknames.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNicknamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HOMEPLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeplace = iprot.readString();
              struct.setHomeplaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MULTI_LANG_HOMEPLACES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.multiLangHomeplaces = new ArrayList<com.lesports.api.common.LangString>(_list9.size);
                com.lesports.api.common.LangString _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new com.lesports.api.common.LangString();
                  _elem10.read(iprot);
                  struct.multiLangHomeplaces.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangHomeplacesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MULTI_LANG_CITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.multiLangCities = new ArrayList<com.lesports.api.common.LangString>(_list12.size);
                com.lesports.api.common.LangString _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new com.lesports.api.common.LangString();
                  _elem13.read(iprot);
                  struct.multiLangCities.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // HOME_SHIRT_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.homeShirtImage = iprot.readString();
              struct.setHomeShirtImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AWAY_SHIRT_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.awayShirtImage = iprot.readString();
              struct.setAwayShirtImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grade = iprot.readI32();
              struct.setGradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MULTI_LANG_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list15.size);
                com.lesports.api.common.LangString _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new com.lesports.api.common.LangString();
                  _elem16.read(iprot);
                  struct.multiLangDesc.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // GAME_FIRST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameFirstType = iprot.readString();
              struct.setGameFirstTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TEAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.teamType = iprot.readI32();
              struct.setTeamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BG_WEB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bgWebUrl = iprot.readString();
              struct.setBgWebUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // SONG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.songId = iprot.readI64();
              struct.setSongIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SHIRT_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shirtColor = iprot.readString();
              struct.setShirtColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BACKGROUP_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backgroupColor = iprot.readString();
              struct.setBackgroupColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.players = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(_list18.size);
                com.lesports.qmt.sbd.api.dto.TSimplePlayer _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new com.lesports.qmt.sbd.api.dto.TSimplePlayer();
                  _elem19.read(iprot);
                  struct.players.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setPlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PNG_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pngLogo = iprot.readString();
              struct.setPngLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CONFERENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.conferenceId = iprot.readI64();
              struct.setConferenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionId = iprot.readI64();
              struct.setRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // CONFERENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.conference = iprot.readString();
              struct.setConferenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // IS_FOCUSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFocused = iprot.readBool();
              struct.setIsFocusedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // BOLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.boleId = iprot.readI64();
              struct.setBoleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CAMP_ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.campEntity = new com.lesports.qmt.sbd.api.common.Camp();
              struct.campEntity.read(iprot);
              struct.setCampEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // IS_FOCUSED_COUNTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>(_list21.size);
                com.lesports.api.common.CountryCode _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
                  struct.isFocusedCountries.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setIsFocusedCountriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CURRENT_CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentCid = iprot.readI64();
              struct.setCurrentCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CURRENT_CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentCsid = iprot.readI64();
              struct.setCurrentCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CURRENT_TSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.currentTsid = iprot.readI64();
              struct.setCurrentTsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // HONORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.honors = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.honors.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setHonorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // RANKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.ranks = new ArrayList<TRank>(_list27.size);
                TRank _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new TRank();
                  _elem28.read(iprot);
                  struct.ranks.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setRanksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // GAME_FTYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameFTypeId = iprot.readI64();
              struct.setGameFTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // COCAH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cocah = new TTeamPlayer();
              struct.cocah.read(iprot);
              struct.setCocahIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // MULTI_LANG_GAME_FTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>(_list30.size);
                com.lesports.api.common.LangString _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = new com.lesports.api.common.LangString();
                  _elem31.read(iprot);
                  struct.multiLangGameFType.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangGameFTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // CAPTAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.captain = new TTeamPlayer();
              struct.captain.read(iprot);
              struct.setCaptainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // CORE_PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.corePlayers = new ArrayList<TTeamPlayer>(_list33.size);
                TTeamPlayer _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = new TTeamPlayer();
                  _elem34.read(iprot);
                  struct.corePlayers.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setCorePlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // MULTI_COUN_LOGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list36.size);
                com.lesports.api.common.CounString _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new com.lesports.api.common.CounString();
                  _elem37.read(iprot);
                  struct.multiCounLogos.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setMultiCounLogosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // CHAMPION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.championNum = iprot.readString();
              struct.setChampionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // OFFICIAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.officialName = iprot.readString();
              struct.setOfficialNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // MULTI_LANG_OFFICIAL_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>(_list39.size);
                com.lesports.api.common.LangString _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = new com.lesports.api.common.LangString();
                  _elem40.read(iprot);
                  struct.multiLangOfficialNames.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangOfficialNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // MULTI_LANG_CONFERENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.multiLangConferences = new ArrayList<com.lesports.api.common.LangString>(_list42.size);
                com.lesports.api.common.LangString _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new com.lesports.api.common.LangString();
                  _elem43.read(iprot);
                  struct.multiLangConferences.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangConferencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // MULTI_LANG_REGIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.multiLangRegions = new ArrayList<com.lesports.api.common.LangString>(_list45.size);
                com.lesports.api.common.LangString _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = new com.lesports.api.common.LangString();
                  _elem46.read(iprot);
                  struct.multiLangRegions.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangRegionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTeam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter48 : struct.multiLangNames)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.abbreviation != null) {
        if (struct.isSetAbbreviation()) {
          oprot.writeFieldBegin(ABBREVIATION_FIELD_DESC);
          oprot.writeString(struct.abbreviation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangAbbrs != null) {
        if (struct.isSetMultiLangAbbrs()) {
          oprot.writeFieldBegin(MULTI_LANG_ABBRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangAbbrs.size()));
            for (com.lesports.api.common.LangString _iter49 : struct.multiLangAbbrs)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickname != null) {
        if (struct.isSetNickname()) {
          oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
          oprot.writeString(struct.nickname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNicknames != null) {
        if (struct.isSetMultiLangNicknames()) {
          oprot.writeFieldBegin(MULTI_LANG_NICKNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNicknames.size()));
            for (com.lesports.api.common.LangString _iter50 : struct.multiLangNicknames)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.homeplace != null) {
        if (struct.isSetHomeplace()) {
          oprot.writeFieldBegin(HOMEPLACE_FIELD_DESC);
          oprot.writeString(struct.homeplace);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangHomeplaces != null) {
        if (struct.isSetMultiLangHomeplaces()) {
          oprot.writeFieldBegin(MULTI_LANG_HOMEPLACES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangHomeplaces.size()));
            for (com.lesports.api.common.LangString _iter51 : struct.multiLangHomeplaces)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCities != null) {
        if (struct.isSetMultiLangCities()) {
          oprot.writeFieldBegin(MULTI_LANG_CITIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCities.size()));
            for (com.lesports.api.common.LangString _iter52 : struct.multiLangCities)
            {
              _iter52.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.homeShirtImage != null) {
        if (struct.isSetHomeShirtImage()) {
          oprot.writeFieldBegin(HOME_SHIRT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.homeShirtImage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.awayShirtImage != null) {
        if (struct.isSetAwayShirtImage()) {
          oprot.writeFieldBegin(AWAY_SHIRT_IMAGE_FIELD_DESC);
          oprot.writeString(struct.awayShirtImage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGrade()) {
        oprot.writeFieldBegin(GRADE_FIELD_DESC);
        oprot.writeI32(struct.grade);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        if (struct.isSetDesc()) {
          oprot.writeFieldBegin(DESC_FIELD_DESC);
          oprot.writeString(struct.desc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangDesc != null) {
        if (struct.isSetMultiLangDesc()) {
          oprot.writeFieldBegin(MULTI_LANG_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangDesc.size()));
            for (com.lesports.api.common.LangString _iter53 : struct.multiLangDesc)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.gameFirstType != null) {
        if (struct.isSetGameFirstType()) {
          oprot.writeFieldBegin(GAME_FIRST_TYPE_FIELD_DESC);
          oprot.writeString(struct.gameFirstType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTeamType()) {
        oprot.writeFieldBegin(TEAM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.teamType);
        oprot.writeFieldEnd();
      }
      if (struct.bgWebUrl != null) {
        if (struct.isSetBgWebUrl()) {
          oprot.writeFieldBegin(BG_WEB_URL_FIELD_DESC);
          oprot.writeString(struct.bgWebUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSongId()) {
        oprot.writeFieldBegin(SONG_ID_FIELD_DESC);
        oprot.writeI64(struct.songId);
        oprot.writeFieldEnd();
      }
      if (struct.shirtColor != null) {
        if (struct.isSetShirtColor()) {
          oprot.writeFieldBegin(SHIRT_COLOR_FIELD_DESC);
          oprot.writeString(struct.shirtColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backgroupColor != null) {
        if (struct.isSetBackgroupColor()) {
          oprot.writeFieldBegin(BACKGROUP_COLOR_FIELD_DESC);
          oprot.writeString(struct.backgroupColor);
          oprot.writeFieldEnd();
        }
      }
      if (struct.players != null) {
        if (struct.isSetPlayers()) {
          oprot.writeFieldBegin(PLAYERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.players.size()));
            for (com.lesports.qmt.sbd.api.dto.TSimplePlayer _iter54 : struct.players)
            {
              _iter54.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pngLogo != null) {
        if (struct.isSetPngLogo()) {
          oprot.writeFieldBegin(PNG_LOGO_FIELD_DESC);
          oprot.writeString(struct.pngLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConferenceId()) {
        oprot.writeFieldBegin(CONFERENCE_ID_FIELD_DESC);
        oprot.writeI64(struct.conferenceId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRegionId()) {
        oprot.writeFieldBegin(REGION_ID_FIELD_DESC);
        oprot.writeI64(struct.regionId);
        oprot.writeFieldEnd();
      }
      if (struct.conference != null) {
        if (struct.isSetConference()) {
          oprot.writeFieldBegin(CONFERENCE_FIELD_DESC);
          oprot.writeString(struct.conference);
          oprot.writeFieldEnd();
        }
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsFocused()) {
        oprot.writeFieldBegin(IS_FOCUSED_FIELD_DESC);
        oprot.writeBool(struct.isFocused);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoleId()) {
        oprot.writeFieldBegin(BOLE_ID_FIELD_DESC);
        oprot.writeI64(struct.boleId);
        oprot.writeFieldEnd();
      }
      if (struct.campEntity != null) {
        if (struct.isSetCampEntity()) {
          oprot.writeFieldBegin(CAMP_ENTITY_FIELD_DESC);
          struct.campEntity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isFocusedCountries != null) {
        if (struct.isSetIsFocusedCountries()) {
          oprot.writeFieldBegin(IS_FOCUSED_COUNTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.isFocusedCountries.size()));
            for (com.lesports.api.common.CountryCode _iter55 : struct.isFocusedCountries)
            {
              oprot.writeI32(_iter55.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCurrentCid()) {
        oprot.writeFieldBegin(CURRENT_CID_FIELD_DESC);
        oprot.writeI64(struct.currentCid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrentCsid()) {
        oprot.writeFieldBegin(CURRENT_CSID_FIELD_DESC);
        oprot.writeI64(struct.currentCsid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrentTsid()) {
        oprot.writeFieldBegin(CURRENT_TSID_FIELD_DESC);
        oprot.writeI64(struct.currentTsid);
        oprot.writeFieldEnd();
      }
      if (struct.honors != null) {
        if (struct.isSetHonors()) {
          oprot.writeFieldBegin(HONORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.honors.size()));
            for (String _iter56 : struct.honors)
            {
              oprot.writeString(_iter56);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ranks != null) {
        if (struct.isSetRanks()) {
          oprot.writeFieldBegin(RANKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ranks.size()));
            for (TRank _iter57 : struct.ranks)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGameFTypeId()) {
        oprot.writeFieldBegin(GAME_FTYPE_ID_FIELD_DESC);
        oprot.writeI64(struct.gameFTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.cocah != null) {
        if (struct.isSetCocah()) {
          oprot.writeFieldBegin(COCAH_FIELD_DESC);
          struct.cocah.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangGameFType != null) {
        if (struct.isSetMultiLangGameFType()) {
          oprot.writeFieldBegin(MULTI_LANG_GAME_FTYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangGameFType.size()));
            for (com.lesports.api.common.LangString _iter58 : struct.multiLangGameFType)
            {
              _iter58.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.captain != null) {
        if (struct.isSetCaptain()) {
          oprot.writeFieldBegin(CAPTAIN_FIELD_DESC);
          struct.captain.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.corePlayers != null) {
        if (struct.isSetCorePlayers()) {
          oprot.writeFieldBegin(CORE_PLAYERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.corePlayers.size()));
            for (TTeamPlayer _iter59 : struct.corePlayers)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiCounLogos != null) {
        if (struct.isSetMultiCounLogos()) {
          oprot.writeFieldBegin(MULTI_COUN_LOGOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiCounLogos.size()));
            for (com.lesports.api.common.CounString _iter60 : struct.multiCounLogos)
            {
              _iter60.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.championNum != null) {
        if (struct.isSetChampionNum()) {
          oprot.writeFieldBegin(CHAMPION_NUM_FIELD_DESC);
          oprot.writeString(struct.championNum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.officialName != null) {
        if (struct.isSetOfficialName()) {
          oprot.writeFieldBegin(OFFICIAL_NAME_FIELD_DESC);
          oprot.writeString(struct.officialName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangOfficialNames != null) {
        if (struct.isSetMultiLangOfficialNames()) {
          oprot.writeFieldBegin(MULTI_LANG_OFFICIAL_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangOfficialNames.size()));
            for (com.lesports.api.common.LangString _iter61 : struct.multiLangOfficialNames)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangConferences != null) {
        if (struct.isSetMultiLangConferences()) {
          oprot.writeFieldBegin(MULTI_LANG_CONFERENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangConferences.size()));
            for (com.lesports.api.common.LangString _iter62 : struct.multiLangConferences)
            {
              _iter62.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangRegions != null) {
        if (struct.isSetMultiLangRegions()) {
          oprot.writeFieldBegin(MULTI_LANG_REGIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangRegions.size()));
            for (com.lesports.api.common.LangString _iter63 : struct.multiLangRegions)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTeamTupleSchemeFactory implements SchemeFactory {
    public TTeamTupleScheme getScheme() {
      return new TTeamTupleScheme();
    }
  }

  private static class TTeamTupleScheme extends TupleScheme<TTeam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(2);
      }
      if (struct.isSetAbbreviation()) {
        optionals.set(3);
      }
      if (struct.isSetMultiLangAbbrs()) {
        optionals.set(4);
      }
      if (struct.isSetNickname()) {
        optionals.set(5);
      }
      if (struct.isSetMultiLangNicknames()) {
        optionals.set(6);
      }
      if (struct.isSetHomeplace()) {
        optionals.set(7);
      }
      if (struct.isSetMultiLangHomeplaces()) {
        optionals.set(8);
      }
      if (struct.isSetCity()) {
        optionals.set(9);
      }
      if (struct.isSetMultiLangCities()) {
        optionals.set(10);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(11);
      }
      if (struct.isSetHomeShirtImage()) {
        optionals.set(12);
      }
      if (struct.isSetAwayShirtImage()) {
        optionals.set(13);
      }
      if (struct.isSetGrade()) {
        optionals.set(14);
      }
      if (struct.isSetDesc()) {
        optionals.set(15);
      }
      if (struct.isSetMultiLangDesc()) {
        optionals.set(16);
      }
      if (struct.isSetGameFirstType()) {
        optionals.set(17);
      }
      if (struct.isSetTeamType()) {
        optionals.set(18);
      }
      if (struct.isSetBgWebUrl()) {
        optionals.set(19);
      }
      if (struct.isSetSongId()) {
        optionals.set(20);
      }
      if (struct.isSetShirtColor()) {
        optionals.set(21);
      }
      if (struct.isSetBackgroupColor()) {
        optionals.set(22);
      }
      if (struct.isSetPlayers()) {
        optionals.set(23);
      }
      if (struct.isSetPngLogo()) {
        optionals.set(24);
      }
      if (struct.isSetConferenceId()) {
        optionals.set(25);
      }
      if (struct.isSetRegionId()) {
        optionals.set(26);
      }
      if (struct.isSetConference()) {
        optionals.set(27);
      }
      if (struct.isSetRegion()) {
        optionals.set(28);
      }
      if (struct.isSetIsFocused()) {
        optionals.set(29);
      }
      if (struct.isSetBoleId()) {
        optionals.set(30);
      }
      if (struct.isSetCampEntity()) {
        optionals.set(31);
      }
      if (struct.isSetIsFocusedCountries()) {
        optionals.set(32);
      }
      if (struct.isSetCurrentCid()) {
        optionals.set(33);
      }
      if (struct.isSetCurrentCsid()) {
        optionals.set(34);
      }
      if (struct.isSetCurrentTsid()) {
        optionals.set(35);
      }
      if (struct.isSetHonors()) {
        optionals.set(36);
      }
      if (struct.isSetRanks()) {
        optionals.set(37);
      }
      if (struct.isSetGameFTypeId()) {
        optionals.set(38);
      }
      if (struct.isSetCocah()) {
        optionals.set(39);
      }
      if (struct.isSetMultiLangGameFType()) {
        optionals.set(40);
      }
      if (struct.isSetCaptain()) {
        optionals.set(41);
      }
      if (struct.isSetCorePlayers()) {
        optionals.set(42);
      }
      if (struct.isSetMultiCounLogos()) {
        optionals.set(43);
      }
      if (struct.isSetChampionNum()) {
        optionals.set(44);
      }
      if (struct.isSetOfficialName()) {
        optionals.set(45);
      }
      if (struct.isSetMultiLangOfficialNames()) {
        optionals.set(46);
      }
      if (struct.isSetMultiLangConferences()) {
        optionals.set(47);
      }
      if (struct.isSetMultiLangRegions()) {
        optionals.set(48);
      }
      oprot.writeBitSet(optionals, 49);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter64 : struct.multiLangNames)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetAbbreviation()) {
        oprot.writeString(struct.abbreviation);
      }
      if (struct.isSetMultiLangAbbrs()) {
        {
          oprot.writeI32(struct.multiLangAbbrs.size());
          for (com.lesports.api.common.LangString _iter65 : struct.multiLangAbbrs)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetNickname()) {
        oprot.writeString(struct.nickname);
      }
      if (struct.isSetMultiLangNicknames()) {
        {
          oprot.writeI32(struct.multiLangNicknames.size());
          for (com.lesports.api.common.LangString _iter66 : struct.multiLangNicknames)
          {
            _iter66.write(oprot);
          }
        }
      }
      if (struct.isSetHomeplace()) {
        oprot.writeString(struct.homeplace);
      }
      if (struct.isSetMultiLangHomeplaces()) {
        {
          oprot.writeI32(struct.multiLangHomeplaces.size());
          for (com.lesports.api.common.LangString _iter67 : struct.multiLangHomeplaces)
          {
            _iter67.write(oprot);
          }
        }
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetMultiLangCities()) {
        {
          oprot.writeI32(struct.multiLangCities.size());
          for (com.lesports.api.common.LangString _iter68 : struct.multiLangCities)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetHomeShirtImage()) {
        oprot.writeString(struct.homeShirtImage);
      }
      if (struct.isSetAwayShirtImage()) {
        oprot.writeString(struct.awayShirtImage);
      }
      if (struct.isSetGrade()) {
        oprot.writeI32(struct.grade);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetMultiLangDesc()) {
        {
          oprot.writeI32(struct.multiLangDesc.size());
          for (com.lesports.api.common.LangString _iter69 : struct.multiLangDesc)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetGameFirstType()) {
        oprot.writeString(struct.gameFirstType);
      }
      if (struct.isSetTeamType()) {
        oprot.writeI32(struct.teamType);
      }
      if (struct.isSetBgWebUrl()) {
        oprot.writeString(struct.bgWebUrl);
      }
      if (struct.isSetSongId()) {
        oprot.writeI64(struct.songId);
      }
      if (struct.isSetShirtColor()) {
        oprot.writeString(struct.shirtColor);
      }
      if (struct.isSetBackgroupColor()) {
        oprot.writeString(struct.backgroupColor);
      }
      if (struct.isSetPlayers()) {
        {
          oprot.writeI32(struct.players.size());
          for (com.lesports.qmt.sbd.api.dto.TSimplePlayer _iter70 : struct.players)
          {
            _iter70.write(oprot);
          }
        }
      }
      if (struct.isSetPngLogo()) {
        oprot.writeString(struct.pngLogo);
      }
      if (struct.isSetConferenceId()) {
        oprot.writeI64(struct.conferenceId);
      }
      if (struct.isSetRegionId()) {
        oprot.writeI64(struct.regionId);
      }
      if (struct.isSetConference()) {
        oprot.writeString(struct.conference);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetIsFocused()) {
        oprot.writeBool(struct.isFocused);
      }
      if (struct.isSetBoleId()) {
        oprot.writeI64(struct.boleId);
      }
      if (struct.isSetCampEntity()) {
        struct.campEntity.write(oprot);
      }
      if (struct.isSetIsFocusedCountries()) {
        {
          oprot.writeI32(struct.isFocusedCountries.size());
          for (com.lesports.api.common.CountryCode _iter71 : struct.isFocusedCountries)
          {
            oprot.writeI32(_iter71.getValue());
          }
        }
      }
      if (struct.isSetCurrentCid()) {
        oprot.writeI64(struct.currentCid);
      }
      if (struct.isSetCurrentCsid()) {
        oprot.writeI64(struct.currentCsid);
      }
      if (struct.isSetCurrentTsid()) {
        oprot.writeI64(struct.currentTsid);
      }
      if (struct.isSetHonors()) {
        {
          oprot.writeI32(struct.honors.size());
          for (String _iter72 : struct.honors)
          {
            oprot.writeString(_iter72);
          }
        }
      }
      if (struct.isSetRanks()) {
        {
          oprot.writeI32(struct.ranks.size());
          for (TRank _iter73 : struct.ranks)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetGameFTypeId()) {
        oprot.writeI64(struct.gameFTypeId);
      }
      if (struct.isSetCocah()) {
        struct.cocah.write(oprot);
      }
      if (struct.isSetMultiLangGameFType()) {
        {
          oprot.writeI32(struct.multiLangGameFType.size());
          for (com.lesports.api.common.LangString _iter74 : struct.multiLangGameFType)
          {
            _iter74.write(oprot);
          }
        }
      }
      if (struct.isSetCaptain()) {
        struct.captain.write(oprot);
      }
      if (struct.isSetCorePlayers()) {
        {
          oprot.writeI32(struct.corePlayers.size());
          for (TTeamPlayer _iter75 : struct.corePlayers)
          {
            _iter75.write(oprot);
          }
        }
      }
      if (struct.isSetMultiCounLogos()) {
        {
          oprot.writeI32(struct.multiCounLogos.size());
          for (com.lesports.api.common.CounString _iter76 : struct.multiCounLogos)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetChampionNum()) {
        oprot.writeString(struct.championNum);
      }
      if (struct.isSetOfficialName()) {
        oprot.writeString(struct.officialName);
      }
      if (struct.isSetMultiLangOfficialNames()) {
        {
          oprot.writeI32(struct.multiLangOfficialNames.size());
          for (com.lesports.api.common.LangString _iter77 : struct.multiLangOfficialNames)
          {
            _iter77.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangConferences()) {
        {
          oprot.writeI32(struct.multiLangConferences.size());
          for (com.lesports.api.common.LangString _iter78 : struct.multiLangConferences)
          {
            _iter78.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangRegions()) {
        {
          oprot.writeI32(struct.multiLangRegions.size());
          for (com.lesports.api.common.LangString _iter79 : struct.multiLangRegions)
          {
            _iter79.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTeam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(49);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list80 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list80.size);
          com.lesports.api.common.LangString _elem81;
          for (int _i82 = 0; _i82 < _list80.size; ++_i82)
          {
            _elem81 = new com.lesports.api.common.LangString();
            _elem81.read(iprot);
            struct.multiLangNames.add(_elem81);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.abbreviation = iprot.readString();
        struct.setAbbreviationIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangAbbrs = new ArrayList<com.lesports.api.common.LangString>(_list83.size);
          com.lesports.api.common.LangString _elem84;
          for (int _i85 = 0; _i85 < _list83.size; ++_i85)
          {
            _elem84 = new com.lesports.api.common.LangString();
            _elem84.read(iprot);
            struct.multiLangAbbrs.add(_elem84);
          }
        }
        struct.setMultiLangAbbrsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nickname = iprot.readString();
        struct.setNicknameIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNicknames = new ArrayList<com.lesports.api.common.LangString>(_list86.size);
          com.lesports.api.common.LangString _elem87;
          for (int _i88 = 0; _i88 < _list86.size; ++_i88)
          {
            _elem87 = new com.lesports.api.common.LangString();
            _elem87.read(iprot);
            struct.multiLangNicknames.add(_elem87);
          }
        }
        struct.setMultiLangNicknamesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.homeplace = iprot.readString();
        struct.setHomeplaceIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangHomeplaces = new ArrayList<com.lesports.api.common.LangString>(_list89.size);
          com.lesports.api.common.LangString _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = new com.lesports.api.common.LangString();
            _elem90.read(iprot);
            struct.multiLangHomeplaces.add(_elem90);
          }
        }
        struct.setMultiLangHomeplacesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCities = new ArrayList<com.lesports.api.common.LangString>(_list92.size);
          com.lesports.api.common.LangString _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = new com.lesports.api.common.LangString();
            _elem93.read(iprot);
            struct.multiLangCities.add(_elem93);
          }
        }
        struct.setMultiLangCitiesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(12)) {
        struct.homeShirtImage = iprot.readString();
        struct.setHomeShirtImageIsSet(true);
      }
      if (incoming.get(13)) {
        struct.awayShirtImage = iprot.readString();
        struct.setAwayShirtImageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.grade = iprot.readI32();
        struct.setGradeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangDesc = new ArrayList<com.lesports.api.common.LangString>(_list95.size);
          com.lesports.api.common.LangString _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = new com.lesports.api.common.LangString();
            _elem96.read(iprot);
            struct.multiLangDesc.add(_elem96);
          }
        }
        struct.setMultiLangDescIsSet(true);
      }
      if (incoming.get(17)) {
        struct.gameFirstType = iprot.readString();
        struct.setGameFirstTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.teamType = iprot.readI32();
        struct.setTeamTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.bgWebUrl = iprot.readString();
        struct.setBgWebUrlIsSet(true);
      }
      if (incoming.get(20)) {
        struct.songId = iprot.readI64();
        struct.setSongIdIsSet(true);
      }
      if (incoming.get(21)) {
        struct.shirtColor = iprot.readString();
        struct.setShirtColorIsSet(true);
      }
      if (incoming.get(22)) {
        struct.backgroupColor = iprot.readString();
        struct.setBackgroupColorIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.players = new ArrayList<com.lesports.qmt.sbd.api.dto.TSimplePlayer>(_list98.size);
          com.lesports.qmt.sbd.api.dto.TSimplePlayer _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = new com.lesports.qmt.sbd.api.dto.TSimplePlayer();
            _elem99.read(iprot);
            struct.players.add(_elem99);
          }
        }
        struct.setPlayersIsSet(true);
      }
      if (incoming.get(24)) {
        struct.pngLogo = iprot.readString();
        struct.setPngLogoIsSet(true);
      }
      if (incoming.get(25)) {
        struct.conferenceId = iprot.readI64();
        struct.setConferenceIdIsSet(true);
      }
      if (incoming.get(26)) {
        struct.regionId = iprot.readI64();
        struct.setRegionIdIsSet(true);
      }
      if (incoming.get(27)) {
        struct.conference = iprot.readString();
        struct.setConferenceIsSet(true);
      }
      if (incoming.get(28)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(29)) {
        struct.isFocused = iprot.readBool();
        struct.setIsFocusedIsSet(true);
      }
      if (incoming.get(30)) {
        struct.boleId = iprot.readI64();
        struct.setBoleIdIsSet(true);
      }
      if (incoming.get(31)) {
        struct.campEntity = new com.lesports.qmt.sbd.api.common.Camp();
        struct.campEntity.read(iprot);
        struct.setCampEntityIsSet(true);
      }
      if (incoming.get(32)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.isFocusedCountries = new ArrayList<com.lesports.api.common.CountryCode>(_list101.size);
          com.lesports.api.common.CountryCode _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = com.lesports.api.common.CountryCode.findByValue(iprot.readI32());
            struct.isFocusedCountries.add(_elem102);
          }
        }
        struct.setIsFocusedCountriesIsSet(true);
      }
      if (incoming.get(33)) {
        struct.currentCid = iprot.readI64();
        struct.setCurrentCidIsSet(true);
      }
      if (incoming.get(34)) {
        struct.currentCsid = iprot.readI64();
        struct.setCurrentCsidIsSet(true);
      }
      if (incoming.get(35)) {
        struct.currentTsid = iprot.readI64();
        struct.setCurrentTsidIsSet(true);
      }
      if (incoming.get(36)) {
        {
          org.apache.thrift.protocol.TList _list104 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.honors = new ArrayList<String>(_list104.size);
          String _elem105;
          for (int _i106 = 0; _i106 < _list104.size; ++_i106)
          {
            _elem105 = iprot.readString();
            struct.honors.add(_elem105);
          }
        }
        struct.setHonorsIsSet(true);
      }
      if (incoming.get(37)) {
        {
          org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.ranks = new ArrayList<TRank>(_list107.size);
          TRank _elem108;
          for (int _i109 = 0; _i109 < _list107.size; ++_i109)
          {
            _elem108 = new TRank();
            _elem108.read(iprot);
            struct.ranks.add(_elem108);
          }
        }
        struct.setRanksIsSet(true);
      }
      if (incoming.get(38)) {
        struct.gameFTypeId = iprot.readI64();
        struct.setGameFTypeIdIsSet(true);
      }
      if (incoming.get(39)) {
        struct.cocah = new TTeamPlayer();
        struct.cocah.read(iprot);
        struct.setCocahIsSet(true);
      }
      if (incoming.get(40)) {
        {
          org.apache.thrift.protocol.TList _list110 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangGameFType = new ArrayList<com.lesports.api.common.LangString>(_list110.size);
          com.lesports.api.common.LangString _elem111;
          for (int _i112 = 0; _i112 < _list110.size; ++_i112)
          {
            _elem111 = new com.lesports.api.common.LangString();
            _elem111.read(iprot);
            struct.multiLangGameFType.add(_elem111);
          }
        }
        struct.setMultiLangGameFTypeIsSet(true);
      }
      if (incoming.get(41)) {
        struct.captain = new TTeamPlayer();
        struct.captain.read(iprot);
        struct.setCaptainIsSet(true);
      }
      if (incoming.get(42)) {
        {
          org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.corePlayers = new ArrayList<TTeamPlayer>(_list113.size);
          TTeamPlayer _elem114;
          for (int _i115 = 0; _i115 < _list113.size; ++_i115)
          {
            _elem114 = new TTeamPlayer();
            _elem114.read(iprot);
            struct.corePlayers.add(_elem114);
          }
        }
        struct.setCorePlayersIsSet(true);
      }
      if (incoming.get(43)) {
        {
          org.apache.thrift.protocol.TList _list116 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list116.size);
          com.lesports.api.common.CounString _elem117;
          for (int _i118 = 0; _i118 < _list116.size; ++_i118)
          {
            _elem117 = new com.lesports.api.common.CounString();
            _elem117.read(iprot);
            struct.multiCounLogos.add(_elem117);
          }
        }
        struct.setMultiCounLogosIsSet(true);
      }
      if (incoming.get(44)) {
        struct.championNum = iprot.readString();
        struct.setChampionNumIsSet(true);
      }
      if (incoming.get(45)) {
        struct.officialName = iprot.readString();
        struct.setOfficialNameIsSet(true);
      }
      if (incoming.get(46)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangOfficialNames = new ArrayList<com.lesports.api.common.LangString>(_list119.size);
          com.lesports.api.common.LangString _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = new com.lesports.api.common.LangString();
            _elem120.read(iprot);
            struct.multiLangOfficialNames.add(_elem120);
          }
        }
        struct.setMultiLangOfficialNamesIsSet(true);
      }
      if (incoming.get(47)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangConferences = new ArrayList<com.lesports.api.common.LangString>(_list122.size);
          com.lesports.api.common.LangString _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = new com.lesports.api.common.LangString();
            _elem123.read(iprot);
            struct.multiLangConferences.add(_elem123);
          }
        }
        struct.setMultiLangConferencesIsSet(true);
      }
      if (incoming.get(48)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangRegions = new ArrayList<com.lesports.api.common.LangString>(_list125.size);
          com.lesports.api.common.LangString _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = new com.lesports.api.common.LangString();
            _elem126.read(iprot);
            struct.multiLangRegions.add(_elem126);
          }
        }
        struct.setMultiLangRegionsIsSet(true);
      }
    }
  }

}

