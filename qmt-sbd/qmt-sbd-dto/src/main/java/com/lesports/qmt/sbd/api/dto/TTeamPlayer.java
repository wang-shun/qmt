/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TTeamPlayer implements org.apache.thrift.TBase<TTeamPlayer, TTeamPlayer._Fields>, java.io.Serializable, Cloneable, Comparable<TTeamPlayer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTeamPlayer");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNames", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("positionName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_POSITION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangPositionNames", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField POSITION_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("positionOrder", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("logo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_NATIONALITYS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangNationalitys", org.apache.thrift.protocol.TType.LIST, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTeamPlayerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTeamPlayerTupleSchemeFactory());
  }

  private long pid; // required
  private long number; // required
  private String name; // optional
  private List<com.lesports.api.common.LangString> multiLangNames; // optional
  private String positionName; // optional
  private List<com.lesports.api.common.LangString> multiLangPositionNames; // optional
  private int positionOrder; // optional
  private String logo; // optional
  private long positionId; // optional
  private String nationality; // optional
  private List<com.lesports.api.common.LangString> multiLangNationalitys; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    NUMBER((short)2, "number"),
    NAME((short)3, "name"),
    MULTI_LANG_NAMES((short)4, "multiLangNames"),
    POSITION_NAME((short)5, "positionName"),
    MULTI_LANG_POSITION_NAMES((short)6, "multiLangPositionNames"),
    POSITION_ORDER((short)7, "positionOrder"),
    LOGO((short)8, "logo"),
    POSITION_ID((short)9, "positionId"),
    NATIONALITY((short)10, "nationality"),
    MULTI_LANG_NATIONALITYS((short)11, "multiLangNationalitys");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // NUMBER
          return NUMBER;
        case 3: // NAME
          return NAME;
        case 4: // MULTI_LANG_NAMES
          return MULTI_LANG_NAMES;
        case 5: // POSITION_NAME
          return POSITION_NAME;
        case 6: // MULTI_LANG_POSITION_NAMES
          return MULTI_LANG_POSITION_NAMES;
        case 7: // POSITION_ORDER
          return POSITION_ORDER;
        case 8: // LOGO
          return LOGO;
        case 9: // POSITION_ID
          return POSITION_ID;
        case 10: // NATIONALITY
          return NATIONALITY;
        case 11: // MULTI_LANG_NATIONALITYS
          return MULTI_LANG_NATIONALITYS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __NUMBER_ISSET_ID = 1;
  private static final int __POSITIONORDER_ISSET_ID = 2;
  private static final int __POSITIONID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.MULTI_LANG_NAMES,_Fields.POSITION_NAME,_Fields.MULTI_LANG_POSITION_NAMES,_Fields.POSITION_ORDER,_Fields.LOGO,_Fields.POSITION_ID,_Fields.NATIONALITY,_Fields.MULTI_LANG_NATIONALITYS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.POSITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("positionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_POSITION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangPositionNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.POSITION_ORDER, new org.apache.thrift.meta_data.FieldMetaData("positionOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGO, new org.apache.thrift.meta_data.FieldMetaData("logo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_NATIONALITYS, new org.apache.thrift.meta_data.FieldMetaData("multiLangNationalitys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTeamPlayer.class, metaDataMap);
  }

  public TTeamPlayer() {
  }

  public TTeamPlayer(
    long pid,
    long number)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.number = number;
    setNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTeamPlayer(TTeamPlayer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.number = other.number;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMultiLangNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNames) {
        __this__multiLangNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNames = __this__multiLangNames;
    }
    if (other.isSetPositionName()) {
      this.positionName = other.positionName;
    }
    if (other.isSetMultiLangPositionNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangPositionNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangPositionNames) {
        __this__multiLangPositionNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangPositionNames = __this__multiLangPositionNames;
    }
    this.positionOrder = other.positionOrder;
    if (other.isSetLogo()) {
      this.logo = other.logo;
    }
    this.positionId = other.positionId;
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetMultiLangNationalitys()) {
      List<com.lesports.api.common.LangString> __this__multiLangNationalitys = new ArrayList<com.lesports.api.common.LangString>(other.multiLangNationalitys.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangNationalitys) {
        __this__multiLangNationalitys.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangNationalitys = __this__multiLangNationalitys;
    }
  }

  public TTeamPlayer deepCopy() {
    return new TTeamPlayer(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setNumberIsSet(false);
    this.number = 0;
    this.name = null;
    this.multiLangNames = null;
    this.positionName = null;
    this.multiLangPositionNames = null;
    setPositionOrderIsSet(false);
    this.positionOrder = 0;
    this.logo = null;
    setPositionIdIsSet(false);
    this.positionId = 0;
    this.nationality = null;
    this.multiLangNationalitys = null;
  }

  public long getPid() {
    return this.pid;
  }

  public void setPid(long pid) {
    this.pid = pid;
    setPidIsSet(true);
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public long getNumber() {
    return this.number;
  }

  public void setNumber(long number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMultiLangNamesSize() {
    return (this.multiLangNames == null) ? 0 : this.multiLangNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNamesIterator() {
    return (this.multiLangNames == null) ? null : this.multiLangNames.iterator();
  }

  public void addToMultiLangNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangNames == null) {
      this.multiLangNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNames() {
    return this.multiLangNames;
  }

  public void setMultiLangNames(List<com.lesports.api.common.LangString> multiLangNames) {
    this.multiLangNames = multiLangNames;
  }

  public void unsetMultiLangNames() {
    this.multiLangNames = null;
  }

  /** Returns true if field multiLangNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNames() {
    return this.multiLangNames != null;
  }

  public void setMultiLangNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangNames = null;
    }
  }

  public String getPositionName() {
    return this.positionName;
  }

  public void setPositionName(String positionName) {
    this.positionName = positionName;
  }

  public void unsetPositionName() {
    this.positionName = null;
  }

  /** Returns true if field positionName is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionName() {
    return this.positionName != null;
  }

  public void setPositionNameIsSet(boolean value) {
    if (!value) {
      this.positionName = null;
    }
  }

  public int getMultiLangPositionNamesSize() {
    return (this.multiLangPositionNames == null) ? 0 : this.multiLangPositionNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangPositionNamesIterator() {
    return (this.multiLangPositionNames == null) ? null : this.multiLangPositionNames.iterator();
  }

  public void addToMultiLangPositionNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangPositionNames == null) {
      this.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangPositionNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangPositionNames() {
    return this.multiLangPositionNames;
  }

  public void setMultiLangPositionNames(List<com.lesports.api.common.LangString> multiLangPositionNames) {
    this.multiLangPositionNames = multiLangPositionNames;
  }

  public void unsetMultiLangPositionNames() {
    this.multiLangPositionNames = null;
  }

  /** Returns true if field multiLangPositionNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangPositionNames() {
    return this.multiLangPositionNames != null;
  }

  public void setMultiLangPositionNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangPositionNames = null;
    }
  }

  public int getPositionOrder() {
    return this.positionOrder;
  }

  public void setPositionOrder(int positionOrder) {
    this.positionOrder = positionOrder;
    setPositionOrderIsSet(true);
  }

  public void unsetPositionOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONORDER_ISSET_ID);
  }

  /** Returns true if field positionOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONORDER_ISSET_ID);
  }

  public void setPositionOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONORDER_ISSET_ID, value);
  }

  public String getLogo() {
    return this.logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }

  public void unsetLogo() {
    this.logo = null;
  }

  /** Returns true if field logo is set (has been assigned a value) and false otherwise */
  public boolean isSetLogo() {
    return this.logo != null;
  }

  public void setLogoIsSet(boolean value) {
    if (!value) {
      this.logo = null;
    }
  }

  public long getPositionId() {
    return this.positionId;
  }

  public void setPositionId(long positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
  }

  public void unsetPositionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public String getNationality() {
    return this.nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  public int getMultiLangNationalitysSize() {
    return (this.multiLangNationalitys == null) ? 0 : this.multiLangNationalitys.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangNationalitysIterator() {
    return (this.multiLangNationalitys == null) ? null : this.multiLangNationalitys.iterator();
  }

  public void addToMultiLangNationalitys(com.lesports.api.common.LangString elem) {
    if (this.multiLangNationalitys == null) {
      this.multiLangNationalitys = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangNationalitys.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangNationalitys() {
    return this.multiLangNationalitys;
  }

  public void setMultiLangNationalitys(List<com.lesports.api.common.LangString> multiLangNationalitys) {
    this.multiLangNationalitys = multiLangNationalitys;
  }

  public void unsetMultiLangNationalitys() {
    this.multiLangNationalitys = null;
  }

  /** Returns true if field multiLangNationalitys is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangNationalitys() {
    return this.multiLangNationalitys != null;
  }

  public void setMultiLangNationalitysIsSet(boolean value) {
    if (!value) {
      this.multiLangNationalitys = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Long)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MULTI_LANG_NAMES:
      if (value == null) {
        unsetMultiLangNames();
      } else {
        setMultiLangNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case POSITION_NAME:
      if (value == null) {
        unsetPositionName();
      } else {
        setPositionName((String)value);
      }
      break;

    case MULTI_LANG_POSITION_NAMES:
      if (value == null) {
        unsetMultiLangPositionNames();
      } else {
        setMultiLangPositionNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case POSITION_ORDER:
      if (value == null) {
        unsetPositionOrder();
      } else {
        setPositionOrder((Integer)value);
      }
      break;

    case LOGO:
      if (value == null) {
        unsetLogo();
      } else {
        setLogo((String)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Long)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((String)value);
      }
      break;

    case MULTI_LANG_NATIONALITYS:
      if (value == null) {
        unsetMultiLangNationalitys();
      } else {
        setMultiLangNationalitys((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Long.valueOf(getPid());

    case NUMBER:
      return Long.valueOf(getNumber());

    case NAME:
      return getName();

    case MULTI_LANG_NAMES:
      return getMultiLangNames();

    case POSITION_NAME:
      return getPositionName();

    case MULTI_LANG_POSITION_NAMES:
      return getMultiLangPositionNames();

    case POSITION_ORDER:
      return Integer.valueOf(getPositionOrder());

    case LOGO:
      return getLogo();

    case POSITION_ID:
      return Long.valueOf(getPositionId());

    case NATIONALITY:
      return getNationality();

    case MULTI_LANG_NATIONALITYS:
      return getMultiLangNationalitys();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case NUMBER:
      return isSetNumber();
    case NAME:
      return isSetName();
    case MULTI_LANG_NAMES:
      return isSetMultiLangNames();
    case POSITION_NAME:
      return isSetPositionName();
    case MULTI_LANG_POSITION_NAMES:
      return isSetMultiLangPositionNames();
    case POSITION_ORDER:
      return isSetPositionOrder();
    case LOGO:
      return isSetLogo();
    case POSITION_ID:
      return isSetPositionId();
    case NATIONALITY:
      return isSetNationality();
    case MULTI_LANG_NATIONALITYS:
      return isSetMultiLangNationalitys();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTeamPlayer)
      return this.equals((TTeamPlayer)that);
    return false;
  }

  public boolean equals(TTeamPlayer that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_multiLangNames = true && this.isSetMultiLangNames();
    boolean that_present_multiLangNames = true && that.isSetMultiLangNames();
    if (this_present_multiLangNames || that_present_multiLangNames) {
      if (!(this_present_multiLangNames && that_present_multiLangNames))
        return false;
      if (!this.multiLangNames.equals(that.multiLangNames))
        return false;
    }

    boolean this_present_positionName = true && this.isSetPositionName();
    boolean that_present_positionName = true && that.isSetPositionName();
    if (this_present_positionName || that_present_positionName) {
      if (!(this_present_positionName && that_present_positionName))
        return false;
      if (!this.positionName.equals(that.positionName))
        return false;
    }

    boolean this_present_multiLangPositionNames = true && this.isSetMultiLangPositionNames();
    boolean that_present_multiLangPositionNames = true && that.isSetMultiLangPositionNames();
    if (this_present_multiLangPositionNames || that_present_multiLangPositionNames) {
      if (!(this_present_multiLangPositionNames && that_present_multiLangPositionNames))
        return false;
      if (!this.multiLangPositionNames.equals(that.multiLangPositionNames))
        return false;
    }

    boolean this_present_positionOrder = true && this.isSetPositionOrder();
    boolean that_present_positionOrder = true && that.isSetPositionOrder();
    if (this_present_positionOrder || that_present_positionOrder) {
      if (!(this_present_positionOrder && that_present_positionOrder))
        return false;
      if (this.positionOrder != that.positionOrder)
        return false;
    }

    boolean this_present_logo = true && this.isSetLogo();
    boolean that_present_logo = true && that.isSetLogo();
    if (this_present_logo || that_present_logo) {
      if (!(this_present_logo && that_present_logo))
        return false;
      if (!this.logo.equals(that.logo))
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_multiLangNationalitys = true && this.isSetMultiLangNationalitys();
    boolean that_present_multiLangNationalitys = true && that.isSetMultiLangNationalitys();
    if (this_present_multiLangNationalitys || that_present_multiLangNationalitys) {
      if (!(this_present_multiLangNationalitys && that_present_multiLangNationalitys))
        return false;
      if (!this.multiLangNationalitys.equals(that.multiLangNationalitys))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_number = true;
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_multiLangNames = true && (isSetMultiLangNames());
    list.add(present_multiLangNames);
    if (present_multiLangNames)
      list.add(multiLangNames);

    boolean present_positionName = true && (isSetPositionName());
    list.add(present_positionName);
    if (present_positionName)
      list.add(positionName);

    boolean present_multiLangPositionNames = true && (isSetMultiLangPositionNames());
    list.add(present_multiLangPositionNames);
    if (present_multiLangPositionNames)
      list.add(multiLangPositionNames);

    boolean present_positionOrder = true && (isSetPositionOrder());
    list.add(present_positionOrder);
    if (present_positionOrder)
      list.add(positionOrder);

    boolean present_logo = true && (isSetLogo());
    list.add(present_logo);
    if (present_logo)
      list.add(logo);

    boolean present_positionId = true && (isSetPositionId());
    list.add(present_positionId);
    if (present_positionId)
      list.add(positionId);

    boolean present_nationality = true && (isSetNationality());
    list.add(present_nationality);
    if (present_nationality)
      list.add(nationality);

    boolean present_multiLangNationalitys = true && (isSetMultiLangNationalitys());
    list.add(present_multiLangNationalitys);
    if (present_multiLangNationalitys)
      list.add(multiLangNationalitys);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTeamPlayer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNames()).compareTo(other.isSetMultiLangNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNames, other.multiLangNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionName()).compareTo(other.isSetPositionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionName, other.positionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangPositionNames()).compareTo(other.isSetMultiLangPositionNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangPositionNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangPositionNames, other.multiLangPositionNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionOrder()).compareTo(other.isSetPositionOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionOrder, other.positionOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogo()).compareTo(other.isSetLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logo, other.logo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationality()).compareTo(other.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, other.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangNationalitys()).compareTo(other.isSetMultiLangNationalitys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangNationalitys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangNationalitys, other.multiLangNationalitys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTeamPlayer(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetMultiLangNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNames:");
      if (this.multiLangNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNames);
      }
      first = false;
    }
    if (isSetPositionName()) {
      if (!first) sb.append(", ");
      sb.append("positionName:");
      if (this.positionName == null) {
        sb.append("null");
      } else {
        sb.append(this.positionName);
      }
      first = false;
    }
    if (isSetMultiLangPositionNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangPositionNames:");
      if (this.multiLangPositionNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangPositionNames);
      }
      first = false;
    }
    if (isSetPositionOrder()) {
      if (!first) sb.append(", ");
      sb.append("positionOrder:");
      sb.append(this.positionOrder);
      first = false;
    }
    if (isSetLogo()) {
      if (!first) sb.append(", ");
      sb.append("logo:");
      if (this.logo == null) {
        sb.append("null");
      } else {
        sb.append(this.logo);
      }
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetNationality()) {
      if (!first) sb.append(", ");
      sb.append("nationality:");
      if (this.nationality == null) {
        sb.append("null");
      } else {
        sb.append(this.nationality);
      }
      first = false;
    }
    if (isSetMultiLangNationalitys()) {
      if (!first) sb.append(", ");
      sb.append("multiLangNationalitys:");
      if (this.multiLangNationalitys == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangNationalitys);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTeamPlayerStandardSchemeFactory implements SchemeFactory {
    public TTeamPlayerStandardScheme getScheme() {
      return new TTeamPlayerStandardScheme();
    }
  }

  private static class TTeamPlayerStandardScheme extends StandardScheme<TTeamPlayer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTeamPlayer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.pid = iprot.readI64();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.number = iprot.readI64();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MULTI_LANG_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list128.size);
                com.lesports.api.common.LangString _elem129;
                for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                {
                  _elem129 = new com.lesports.api.common.LangString();
                  _elem129.read(iprot);
                  struct.multiLangNames.add(_elem129);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionName = iprot.readString();
              struct.setPositionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MULTI_LANG_POSITION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                struct.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(_list131.size);
                com.lesports.api.common.LangString _elem132;
                for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                {
                  _elem132 = new com.lesports.api.common.LangString();
                  _elem132.read(iprot);
                  struct.multiLangPositionNames.add(_elem132);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangPositionNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POSITION_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionOrder = iprot.readI32();
              struct.setPositionOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logo = iprot.readString();
              struct.setLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionId = iprot.readI64();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MULTI_LANG_NATIONALITYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                struct.multiLangNationalitys = new ArrayList<com.lesports.api.common.LangString>(_list134.size);
                com.lesports.api.common.LangString _elem135;
                for (int _i136 = 0; _i136 < _list134.size; ++_i136)
                {
                  _elem135 = new com.lesports.api.common.LangString();
                  _elem135.read(iprot);
                  struct.multiLangNationalitys.add(_elem135);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangNationalitysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTeamPlayer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI64(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_FIELD_DESC);
      oprot.writeI64(struct.number);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNames != null) {
        if (struct.isSetMultiLangNames()) {
          oprot.writeFieldBegin(MULTI_LANG_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNames.size()));
            for (com.lesports.api.common.LangString _iter137 : struct.multiLangNames)
            {
              _iter137.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionName != null) {
        if (struct.isSetPositionName()) {
          oprot.writeFieldBegin(POSITION_NAME_FIELD_DESC);
          oprot.writeString(struct.positionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangPositionNames != null) {
        if (struct.isSetMultiLangPositionNames()) {
          oprot.writeFieldBegin(MULTI_LANG_POSITION_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangPositionNames.size()));
            for (com.lesports.api.common.LangString _iter138 : struct.multiLangPositionNames)
            {
              _iter138.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionOrder()) {
        oprot.writeFieldBegin(POSITION_ORDER_FIELD_DESC);
        oprot.writeI32(struct.positionOrder);
        oprot.writeFieldEnd();
      }
      if (struct.logo != null) {
        if (struct.isSetLogo()) {
          oprot.writeFieldBegin(LOGO_FIELD_DESC);
          oprot.writeString(struct.logo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI64(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        if (struct.isSetNationality()) {
          oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
          oprot.writeString(struct.nationality);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangNationalitys != null) {
        if (struct.isSetMultiLangNationalitys()) {
          oprot.writeFieldBegin(MULTI_LANG_NATIONALITYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangNationalitys.size()));
            for (com.lesports.api.common.LangString _iter139 : struct.multiLangNationalitys)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTeamPlayerTupleSchemeFactory implements SchemeFactory {
    public TTeamPlayerTupleScheme getScheme() {
      return new TTeamPlayerTupleScheme();
    }
  }

  private static class TTeamPlayerTupleScheme extends TupleScheme<TTeamPlayer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTeamPlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetNumber()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetMultiLangNames()) {
        optionals.set(3);
      }
      if (struct.isSetPositionName()) {
        optionals.set(4);
      }
      if (struct.isSetMultiLangPositionNames()) {
        optionals.set(5);
      }
      if (struct.isSetPositionOrder()) {
        optionals.set(6);
      }
      if (struct.isSetLogo()) {
        optionals.set(7);
      }
      if (struct.isSetPositionId()) {
        optionals.set(8);
      }
      if (struct.isSetNationality()) {
        optionals.set(9);
      }
      if (struct.isSetMultiLangNationalitys()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI64(struct.pid);
      }
      if (struct.isSetNumber()) {
        oprot.writeI64(struct.number);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMultiLangNames()) {
        {
          oprot.writeI32(struct.multiLangNames.size());
          for (com.lesports.api.common.LangString _iter140 : struct.multiLangNames)
          {
            _iter140.write(oprot);
          }
        }
      }
      if (struct.isSetPositionName()) {
        oprot.writeString(struct.positionName);
      }
      if (struct.isSetMultiLangPositionNames()) {
        {
          oprot.writeI32(struct.multiLangPositionNames.size());
          for (com.lesports.api.common.LangString _iter141 : struct.multiLangPositionNames)
          {
            _iter141.write(oprot);
          }
        }
      }
      if (struct.isSetPositionOrder()) {
        oprot.writeI32(struct.positionOrder);
      }
      if (struct.isSetLogo()) {
        oprot.writeString(struct.logo);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI64(struct.positionId);
      }
      if (struct.isSetNationality()) {
        oprot.writeString(struct.nationality);
      }
      if (struct.isSetMultiLangNationalitys()) {
        {
          oprot.writeI32(struct.multiLangNationalitys.size());
          for (com.lesports.api.common.LangString _iter142 : struct.multiLangNationalitys)
          {
            _iter142.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTeamPlayer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI64();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.number = iprot.readI64();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNames = new ArrayList<com.lesports.api.common.LangString>(_list143.size);
          com.lesports.api.common.LangString _elem144;
          for (int _i145 = 0; _i145 < _list143.size; ++_i145)
          {
            _elem144 = new com.lesports.api.common.LangString();
            _elem144.read(iprot);
            struct.multiLangNames.add(_elem144);
          }
        }
        struct.setMultiLangNamesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.positionName = iprot.readString();
        struct.setPositionNameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list146 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(_list146.size);
          com.lesports.api.common.LangString _elem147;
          for (int _i148 = 0; _i148 < _list146.size; ++_i148)
          {
            _elem147 = new com.lesports.api.common.LangString();
            _elem147.read(iprot);
            struct.multiLangPositionNames.add(_elem147);
          }
        }
        struct.setMultiLangPositionNamesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.positionOrder = iprot.readI32();
        struct.setPositionOrderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.logo = iprot.readString();
        struct.setLogoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.positionId = iprot.readI64();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.nationality = iprot.readString();
        struct.setNationalityIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangNationalitys = new ArrayList<com.lesports.api.common.LangString>(_list149.size);
          com.lesports.api.common.LangString _elem150;
          for (int _i151 = 0; _i151 < _list149.size; ++_i151)
          {
            _elem150 = new com.lesports.api.common.LangString();
            _elem150.read(iprot);
            struct.multiLangNationalitys.add(_elem150);
          }
        }
        struct.setMultiLangNationalitysIsSet(true);
      }
    }
  }

}

