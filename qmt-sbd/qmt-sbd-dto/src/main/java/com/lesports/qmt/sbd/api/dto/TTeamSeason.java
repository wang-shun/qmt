/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TTeamSeason implements org.apache.thrift.TBase<TTeamSeason, TTeamSeason._Fields>, java.io.Serializable, Cloneable, Comparable<TTeamSeason> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTeamSeason");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PLAYERS_FIELD_DESC = new org.apache.thrift.protocol.TField("players", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COCAH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cocahId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField COCAH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cocahName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_COCAHNAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCocahnames", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField COCAH_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("cocahLogo", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TEAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TEAM_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTeamNames", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField TEAM_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("teamLogo", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTeamSeasonStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTeamSeasonTupleSchemeFactory());
  }

  private long id; // required
  private long tid; // required
  private long csid; // required
  private List<TTeamPlayer> players; // required
  private long cocahId; // optional
  private String cocahName; // optional
  private List<com.lesports.api.common.LangString> multiLangCocahnames; // optional
  private String cocahLogo; // optional
  private String teamName; // optional
  private List<com.lesports.api.common.LangString> multiLangTeamNames; // optional
  private String teamLogo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TID((short)2, "tid"),
    CSID((short)3, "csid"),
    PLAYERS((short)4, "players"),
    COCAH_ID((short)5, "cocahId"),
    COCAH_NAME((short)6, "cocahName"),
    MULTI_LANG_COCAHNAMES((short)7, "multiLangCocahnames"),
    COCAH_LOGO((short)8, "cocahLogo"),
    TEAM_NAME((short)9, "teamName"),
    MULTI_LANG_TEAM_NAMES((short)10, "multiLangTeamNames"),
    TEAM_LOGO((short)11, "teamLogo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TID
          return TID;
        case 3: // CSID
          return CSID;
        case 4: // PLAYERS
          return PLAYERS;
        case 5: // COCAH_ID
          return COCAH_ID;
        case 6: // COCAH_NAME
          return COCAH_NAME;
        case 7: // MULTI_LANG_COCAHNAMES
          return MULTI_LANG_COCAHNAMES;
        case 8: // COCAH_LOGO
          return COCAH_LOGO;
        case 9: // TEAM_NAME
          return TEAM_NAME;
        case 10: // MULTI_LANG_TEAM_NAMES
          return MULTI_LANG_TEAM_NAMES;
        case 11: // TEAM_LOGO
          return TEAM_LOGO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TID_ISSET_ID = 1;
  private static final int __CSID_ISSET_ID = 2;
  private static final int __COCAHID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COCAH_ID,_Fields.COCAH_NAME,_Fields.MULTI_LANG_COCAHNAMES,_Fields.COCAH_LOGO,_Fields.TEAM_NAME,_Fields.MULTI_LANG_TEAM_NAMES,_Fields.TEAM_LOGO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLAYERS, new org.apache.thrift.meta_data.FieldMetaData("players", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTeamPlayer.class))));
    tmpMap.put(_Fields.COCAH_ID, new org.apache.thrift.meta_data.FieldMetaData("cocahId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COCAH_NAME, new org.apache.thrift.meta_data.FieldMetaData("cocahName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_COCAHNAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCocahnames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.COCAH_LOGO, new org.apache.thrift.meta_data.FieldMetaData("cocahLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_TEAM_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTeamNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.TEAM_LOGO, new org.apache.thrift.meta_data.FieldMetaData("teamLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTeamSeason.class, metaDataMap);
  }

  public TTeamSeason() {
  }

  public TTeamSeason(
    long id,
    long tid,
    long csid,
    List<TTeamPlayer> players)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.tid = tid;
    setTidIsSet(true);
    this.csid = csid;
    setCsidIsSet(true);
    this.players = players;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTeamSeason(TTeamSeason other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.tid = other.tid;
    this.csid = other.csid;
    if (other.isSetPlayers()) {
      List<TTeamPlayer> __this__players = new ArrayList<TTeamPlayer>(other.players.size());
      for (TTeamPlayer other_element : other.players) {
        __this__players.add(new TTeamPlayer(other_element));
      }
      this.players = __this__players;
    }
    this.cocahId = other.cocahId;
    if (other.isSetCocahName()) {
      this.cocahName = other.cocahName;
    }
    if (other.isSetMultiLangCocahnames()) {
      List<com.lesports.api.common.LangString> __this__multiLangCocahnames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCocahnames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCocahnames) {
        __this__multiLangCocahnames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCocahnames = __this__multiLangCocahnames;
    }
    if (other.isSetCocahLogo()) {
      this.cocahLogo = other.cocahLogo;
    }
    if (other.isSetTeamName()) {
      this.teamName = other.teamName;
    }
    if (other.isSetMultiLangTeamNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTeamNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTeamNames) {
        __this__multiLangTeamNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTeamNames = __this__multiLangTeamNames;
    }
    if (other.isSetTeamLogo()) {
      this.teamLogo = other.teamLogo;
    }
  }

  public TTeamSeason deepCopy() {
    return new TTeamSeason(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTidIsSet(false);
    this.tid = 0;
    setCsidIsSet(false);
    this.csid = 0;
    this.players = null;
    setCocahIdIsSet(false);
    this.cocahId = 0;
    this.cocahName = null;
    this.multiLangCocahnames = null;
    this.cocahLogo = null;
    this.teamName = null;
    this.multiLangTeamNames = null;
    this.teamLogo = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getTid() {
    return this.tid;
  }

  public void setTid(long tid) {
    this.tid = tid;
    setTidIsSet(true);
  }

  public void unsetTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
  }

  public void setTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
  }

  public long getCsid() {
    return this.csid;
  }

  public void setCsid(long csid) {
    this.csid = csid;
    setCsidIsSet(true);
  }

  public void unsetCsid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  /** Returns true if field csid is set (has been assigned a value) and false otherwise */
  public boolean isSetCsid() {
    return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
  }

  public void setCsidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
  }

  public int getPlayersSize() {
    return (this.players == null) ? 0 : this.players.size();
  }

  public java.util.Iterator<TTeamPlayer> getPlayersIterator() {
    return (this.players == null) ? null : this.players.iterator();
  }

  public void addToPlayers(TTeamPlayer elem) {
    if (this.players == null) {
      this.players = new ArrayList<TTeamPlayer>();
    }
    this.players.add(elem);
  }

  public List<TTeamPlayer> getPlayers() {
    return this.players;
  }

  public void setPlayers(List<TTeamPlayer> players) {
    this.players = players;
  }

  public void unsetPlayers() {
    this.players = null;
  }

  /** Returns true if field players is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayers() {
    return this.players != null;
  }

  public void setPlayersIsSet(boolean value) {
    if (!value) {
      this.players = null;
    }
  }

  public long getCocahId() {
    return this.cocahId;
  }

  public void setCocahId(long cocahId) {
    this.cocahId = cocahId;
    setCocahIdIsSet(true);
  }

  public void unsetCocahId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COCAHID_ISSET_ID);
  }

  /** Returns true if field cocahId is set (has been assigned a value) and false otherwise */
  public boolean isSetCocahId() {
    return EncodingUtils.testBit(__isset_bitfield, __COCAHID_ISSET_ID);
  }

  public void setCocahIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COCAHID_ISSET_ID, value);
  }

  public String getCocahName() {
    return this.cocahName;
  }

  public void setCocahName(String cocahName) {
    this.cocahName = cocahName;
  }

  public void unsetCocahName() {
    this.cocahName = null;
  }

  /** Returns true if field cocahName is set (has been assigned a value) and false otherwise */
  public boolean isSetCocahName() {
    return this.cocahName != null;
  }

  public void setCocahNameIsSet(boolean value) {
    if (!value) {
      this.cocahName = null;
    }
  }

  public int getMultiLangCocahnamesSize() {
    return (this.multiLangCocahnames == null) ? 0 : this.multiLangCocahnames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCocahnamesIterator() {
    return (this.multiLangCocahnames == null) ? null : this.multiLangCocahnames.iterator();
  }

  public void addToMultiLangCocahnames(com.lesports.api.common.LangString elem) {
    if (this.multiLangCocahnames == null) {
      this.multiLangCocahnames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCocahnames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCocahnames() {
    return this.multiLangCocahnames;
  }

  public void setMultiLangCocahnames(List<com.lesports.api.common.LangString> multiLangCocahnames) {
    this.multiLangCocahnames = multiLangCocahnames;
  }

  public void unsetMultiLangCocahnames() {
    this.multiLangCocahnames = null;
  }

  /** Returns true if field multiLangCocahnames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCocahnames() {
    return this.multiLangCocahnames != null;
  }

  public void setMultiLangCocahnamesIsSet(boolean value) {
    if (!value) {
      this.multiLangCocahnames = null;
    }
  }

  public String getCocahLogo() {
    return this.cocahLogo;
  }

  public void setCocahLogo(String cocahLogo) {
    this.cocahLogo = cocahLogo;
  }

  public void unsetCocahLogo() {
    this.cocahLogo = null;
  }

  /** Returns true if field cocahLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetCocahLogo() {
    return this.cocahLogo != null;
  }

  public void setCocahLogoIsSet(boolean value) {
    if (!value) {
      this.cocahLogo = null;
    }
  }

  public String getTeamName() {
    return this.teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }

  public void unsetTeamName() {
    this.teamName = null;
  }

  /** Returns true if field teamName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamName() {
    return this.teamName != null;
  }

  public void setTeamNameIsSet(boolean value) {
    if (!value) {
      this.teamName = null;
    }
  }

  public int getMultiLangTeamNamesSize() {
    return (this.multiLangTeamNames == null) ? 0 : this.multiLangTeamNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTeamNamesIterator() {
    return (this.multiLangTeamNames == null) ? null : this.multiLangTeamNames.iterator();
  }

  public void addToMultiLangTeamNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangTeamNames == null) {
      this.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTeamNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTeamNames() {
    return this.multiLangTeamNames;
  }

  public void setMultiLangTeamNames(List<com.lesports.api.common.LangString> multiLangTeamNames) {
    this.multiLangTeamNames = multiLangTeamNames;
  }

  public void unsetMultiLangTeamNames() {
    this.multiLangTeamNames = null;
  }

  /** Returns true if field multiLangTeamNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTeamNames() {
    return this.multiLangTeamNames != null;
  }

  public void setMultiLangTeamNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangTeamNames = null;
    }
  }

  public String getTeamLogo() {
    return this.teamLogo;
  }

  public void setTeamLogo(String teamLogo) {
    this.teamLogo = teamLogo;
  }

  public void unsetTeamLogo() {
    this.teamLogo = null;
  }

  /** Returns true if field teamLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamLogo() {
    return this.teamLogo != null;
  }

  public void setTeamLogoIsSet(boolean value) {
    if (!value) {
      this.teamLogo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((Long)value);
      }
      break;

    case CSID:
      if (value == null) {
        unsetCsid();
      } else {
        setCsid((Long)value);
      }
      break;

    case PLAYERS:
      if (value == null) {
        unsetPlayers();
      } else {
        setPlayers((List<TTeamPlayer>)value);
      }
      break;

    case COCAH_ID:
      if (value == null) {
        unsetCocahId();
      } else {
        setCocahId((Long)value);
      }
      break;

    case COCAH_NAME:
      if (value == null) {
        unsetCocahName();
      } else {
        setCocahName((String)value);
      }
      break;

    case MULTI_LANG_COCAHNAMES:
      if (value == null) {
        unsetMultiLangCocahnames();
      } else {
        setMultiLangCocahnames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case COCAH_LOGO:
      if (value == null) {
        unsetCocahLogo();
      } else {
        setCocahLogo((String)value);
      }
      break;

    case TEAM_NAME:
      if (value == null) {
        unsetTeamName();
      } else {
        setTeamName((String)value);
      }
      break;

    case MULTI_LANG_TEAM_NAMES:
      if (value == null) {
        unsetMultiLangTeamNames();
      } else {
        setMultiLangTeamNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case TEAM_LOGO:
      if (value == null) {
        unsetTeamLogo();
      } else {
        setTeamLogo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TID:
      return Long.valueOf(getTid());

    case CSID:
      return Long.valueOf(getCsid());

    case PLAYERS:
      return getPlayers();

    case COCAH_ID:
      return Long.valueOf(getCocahId());

    case COCAH_NAME:
      return getCocahName();

    case MULTI_LANG_COCAHNAMES:
      return getMultiLangCocahnames();

    case COCAH_LOGO:
      return getCocahLogo();

    case TEAM_NAME:
      return getTeamName();

    case MULTI_LANG_TEAM_NAMES:
      return getMultiLangTeamNames();

    case TEAM_LOGO:
      return getTeamLogo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TID:
      return isSetTid();
    case CSID:
      return isSetCsid();
    case PLAYERS:
      return isSetPlayers();
    case COCAH_ID:
      return isSetCocahId();
    case COCAH_NAME:
      return isSetCocahName();
    case MULTI_LANG_COCAHNAMES:
      return isSetMultiLangCocahnames();
    case COCAH_LOGO:
      return isSetCocahLogo();
    case TEAM_NAME:
      return isSetTeamName();
    case MULTI_LANG_TEAM_NAMES:
      return isSetMultiLangTeamNames();
    case TEAM_LOGO:
      return isSetTeamLogo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTeamSeason)
      return this.equals((TTeamSeason)that);
    return false;
  }

  public boolean equals(TTeamSeason that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_tid = true;
    boolean that_present_tid = true;
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (this.tid != that.tid)
        return false;
    }

    boolean this_present_csid = true;
    boolean that_present_csid = true;
    if (this_present_csid || that_present_csid) {
      if (!(this_present_csid && that_present_csid))
        return false;
      if (this.csid != that.csid)
        return false;
    }

    boolean this_present_players = true && this.isSetPlayers();
    boolean that_present_players = true && that.isSetPlayers();
    if (this_present_players || that_present_players) {
      if (!(this_present_players && that_present_players))
        return false;
      if (!this.players.equals(that.players))
        return false;
    }

    boolean this_present_cocahId = true && this.isSetCocahId();
    boolean that_present_cocahId = true && that.isSetCocahId();
    if (this_present_cocahId || that_present_cocahId) {
      if (!(this_present_cocahId && that_present_cocahId))
        return false;
      if (this.cocahId != that.cocahId)
        return false;
    }

    boolean this_present_cocahName = true && this.isSetCocahName();
    boolean that_present_cocahName = true && that.isSetCocahName();
    if (this_present_cocahName || that_present_cocahName) {
      if (!(this_present_cocahName && that_present_cocahName))
        return false;
      if (!this.cocahName.equals(that.cocahName))
        return false;
    }

    boolean this_present_multiLangCocahnames = true && this.isSetMultiLangCocahnames();
    boolean that_present_multiLangCocahnames = true && that.isSetMultiLangCocahnames();
    if (this_present_multiLangCocahnames || that_present_multiLangCocahnames) {
      if (!(this_present_multiLangCocahnames && that_present_multiLangCocahnames))
        return false;
      if (!this.multiLangCocahnames.equals(that.multiLangCocahnames))
        return false;
    }

    boolean this_present_cocahLogo = true && this.isSetCocahLogo();
    boolean that_present_cocahLogo = true && that.isSetCocahLogo();
    if (this_present_cocahLogo || that_present_cocahLogo) {
      if (!(this_present_cocahLogo && that_present_cocahLogo))
        return false;
      if (!this.cocahLogo.equals(that.cocahLogo))
        return false;
    }

    boolean this_present_teamName = true && this.isSetTeamName();
    boolean that_present_teamName = true && that.isSetTeamName();
    if (this_present_teamName || that_present_teamName) {
      if (!(this_present_teamName && that_present_teamName))
        return false;
      if (!this.teamName.equals(that.teamName))
        return false;
    }

    boolean this_present_multiLangTeamNames = true && this.isSetMultiLangTeamNames();
    boolean that_present_multiLangTeamNames = true && that.isSetMultiLangTeamNames();
    if (this_present_multiLangTeamNames || that_present_multiLangTeamNames) {
      if (!(this_present_multiLangTeamNames && that_present_multiLangTeamNames))
        return false;
      if (!this.multiLangTeamNames.equals(that.multiLangTeamNames))
        return false;
    }

    boolean this_present_teamLogo = true && this.isSetTeamLogo();
    boolean that_present_teamLogo = true && that.isSetTeamLogo();
    if (this_present_teamLogo || that_present_teamLogo) {
      if (!(this_present_teamLogo && that_present_teamLogo))
        return false;
      if (!this.teamLogo.equals(that.teamLogo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_tid = true;
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_csid = true;
    list.add(present_csid);
    if (present_csid)
      list.add(csid);

    boolean present_players = true && (isSetPlayers());
    list.add(present_players);
    if (present_players)
      list.add(players);

    boolean present_cocahId = true && (isSetCocahId());
    list.add(present_cocahId);
    if (present_cocahId)
      list.add(cocahId);

    boolean present_cocahName = true && (isSetCocahName());
    list.add(present_cocahName);
    if (present_cocahName)
      list.add(cocahName);

    boolean present_multiLangCocahnames = true && (isSetMultiLangCocahnames());
    list.add(present_multiLangCocahnames);
    if (present_multiLangCocahnames)
      list.add(multiLangCocahnames);

    boolean present_cocahLogo = true && (isSetCocahLogo());
    list.add(present_cocahLogo);
    if (present_cocahLogo)
      list.add(cocahLogo);

    boolean present_teamName = true && (isSetTeamName());
    list.add(present_teamName);
    if (present_teamName)
      list.add(teamName);

    boolean present_multiLangTeamNames = true && (isSetMultiLangTeamNames());
    list.add(present_multiLangTeamNames);
    if (present_multiLangTeamNames)
      list.add(multiLangTeamNames);

    boolean present_teamLogo = true && (isSetTeamLogo());
    list.add(present_teamLogo);
    if (present_teamLogo)
      list.add(teamLogo);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTeamSeason other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayers()).compareTo(other.isSetPlayers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.players, other.players);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCocahId()).compareTo(other.isSetCocahId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCocahId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cocahId, other.cocahId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCocahName()).compareTo(other.isSetCocahName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCocahName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cocahName, other.cocahName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCocahnames()).compareTo(other.isSetMultiLangCocahnames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCocahnames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCocahnames, other.multiLangCocahnames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCocahLogo()).compareTo(other.isSetCocahLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCocahLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cocahLogo, other.cocahLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamName()).compareTo(other.isSetTeamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamName, other.teamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTeamNames()).compareTo(other.isSetMultiLangTeamNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTeamNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTeamNames, other.multiLangTeamNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamLogo()).compareTo(other.isSetTeamLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamLogo, other.teamLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTeamSeason(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tid:");
    sb.append(this.tid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("csid:");
    sb.append(this.csid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("players:");
    if (this.players == null) {
      sb.append("null");
    } else {
      sb.append(this.players);
    }
    first = false;
    if (isSetCocahId()) {
      if (!first) sb.append(", ");
      sb.append("cocahId:");
      sb.append(this.cocahId);
      first = false;
    }
    if (isSetCocahName()) {
      if (!first) sb.append(", ");
      sb.append("cocahName:");
      if (this.cocahName == null) {
        sb.append("null");
      } else {
        sb.append(this.cocahName);
      }
      first = false;
    }
    if (isSetMultiLangCocahnames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCocahnames:");
      if (this.multiLangCocahnames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCocahnames);
      }
      first = false;
    }
    if (isSetCocahLogo()) {
      if (!first) sb.append(", ");
      sb.append("cocahLogo:");
      if (this.cocahLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.cocahLogo);
      }
      first = false;
    }
    if (isSetTeamName()) {
      if (!first) sb.append(", ");
      sb.append("teamName:");
      if (this.teamName == null) {
        sb.append("null");
      } else {
        sb.append(this.teamName);
      }
      first = false;
    }
    if (isSetMultiLangTeamNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTeamNames:");
      if (this.multiLangTeamNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTeamNames);
      }
      first = false;
    }
    if (isSetTeamLogo()) {
      if (!first) sb.append(", ");
      sb.append("teamLogo:");
      if (this.teamLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.teamLogo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTeamSeasonStandardSchemeFactory implements SchemeFactory {
    public TTeamSeasonStandardScheme getScheme() {
      return new TTeamSeasonStandardScheme();
    }
  }

  private static class TTeamSeasonStandardScheme extends StandardScheme<TTeamSeason> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTeamSeason struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tid = iprot.readI64();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CSID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.csid = iprot.readI64();
              struct.setCsidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAYERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.players = new ArrayList<TTeamPlayer>(_list144.size);
                TTeamPlayer _elem145;
                for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                {
                  _elem145 = new TTeamPlayer();
                  _elem145.read(iprot);
                  struct.players.add(_elem145);
                }
                iprot.readListEnd();
              }
              struct.setPlayersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COCAH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cocahId = iprot.readI64();
              struct.setCocahIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COCAH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cocahName = iprot.readString();
              struct.setCocahNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MULTI_LANG_COCAHNAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                struct.multiLangCocahnames = new ArrayList<com.lesports.api.common.LangString>(_list147.size);
                com.lesports.api.common.LangString _elem148;
                for (int _i149 = 0; _i149 < _list147.size; ++_i149)
                {
                  _elem148 = new com.lesports.api.common.LangString();
                  _elem148.read(iprot);
                  struct.multiLangCocahnames.add(_elem148);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCocahnamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COCAH_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cocahLogo = iprot.readString();
              struct.setCocahLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamName = iprot.readString();
              struct.setTeamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MULTI_LANG_TEAM_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list150.size);
                com.lesports.api.common.LangString _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = new com.lesports.api.common.LangString();
                  _elem151.read(iprot);
                  struct.multiLangTeamNames.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTeamNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TEAM_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamLogo = iprot.readString();
              struct.setTeamLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTeamSeason struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TID_FIELD_DESC);
      oprot.writeI64(struct.tid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CSID_FIELD_DESC);
      oprot.writeI64(struct.csid);
      oprot.writeFieldEnd();
      if (struct.players != null) {
        oprot.writeFieldBegin(PLAYERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.players.size()));
          for (TTeamPlayer _iter153 : struct.players)
          {
            _iter153.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetCocahId()) {
        oprot.writeFieldBegin(COCAH_ID_FIELD_DESC);
        oprot.writeI64(struct.cocahId);
        oprot.writeFieldEnd();
      }
      if (struct.cocahName != null) {
        if (struct.isSetCocahName()) {
          oprot.writeFieldBegin(COCAH_NAME_FIELD_DESC);
          oprot.writeString(struct.cocahName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCocahnames != null) {
        if (struct.isSetMultiLangCocahnames()) {
          oprot.writeFieldBegin(MULTI_LANG_COCAHNAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCocahnames.size()));
            for (com.lesports.api.common.LangString _iter154 : struct.multiLangCocahnames)
            {
              _iter154.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cocahLogo != null) {
        if (struct.isSetCocahLogo()) {
          oprot.writeFieldBegin(COCAH_LOGO_FIELD_DESC);
          oprot.writeString(struct.cocahLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamName != null) {
        if (struct.isSetTeamName()) {
          oprot.writeFieldBegin(TEAM_NAME_FIELD_DESC);
          oprot.writeString(struct.teamName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTeamNames != null) {
        if (struct.isSetMultiLangTeamNames()) {
          oprot.writeFieldBegin(MULTI_LANG_TEAM_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTeamNames.size()));
            for (com.lesports.api.common.LangString _iter155 : struct.multiLangTeamNames)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamLogo != null) {
        if (struct.isSetTeamLogo()) {
          oprot.writeFieldBegin(TEAM_LOGO_FIELD_DESC);
          oprot.writeString(struct.teamLogo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTeamSeasonTupleSchemeFactory implements SchemeFactory {
    public TTeamSeasonTupleScheme getScheme() {
      return new TTeamSeasonTupleScheme();
    }
  }

  private static class TTeamSeasonTupleScheme extends TupleScheme<TTeamSeason> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTeamSeason struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTid()) {
        optionals.set(1);
      }
      if (struct.isSetCsid()) {
        optionals.set(2);
      }
      if (struct.isSetPlayers()) {
        optionals.set(3);
      }
      if (struct.isSetCocahId()) {
        optionals.set(4);
      }
      if (struct.isSetCocahName()) {
        optionals.set(5);
      }
      if (struct.isSetMultiLangCocahnames()) {
        optionals.set(6);
      }
      if (struct.isSetCocahLogo()) {
        optionals.set(7);
      }
      if (struct.isSetTeamName()) {
        optionals.set(8);
      }
      if (struct.isSetMultiLangTeamNames()) {
        optionals.set(9);
      }
      if (struct.isSetTeamLogo()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTid()) {
        oprot.writeI64(struct.tid);
      }
      if (struct.isSetCsid()) {
        oprot.writeI64(struct.csid);
      }
      if (struct.isSetPlayers()) {
        {
          oprot.writeI32(struct.players.size());
          for (TTeamPlayer _iter156 : struct.players)
          {
            _iter156.write(oprot);
          }
        }
      }
      if (struct.isSetCocahId()) {
        oprot.writeI64(struct.cocahId);
      }
      if (struct.isSetCocahName()) {
        oprot.writeString(struct.cocahName);
      }
      if (struct.isSetMultiLangCocahnames()) {
        {
          oprot.writeI32(struct.multiLangCocahnames.size());
          for (com.lesports.api.common.LangString _iter157 : struct.multiLangCocahnames)
          {
            _iter157.write(oprot);
          }
        }
      }
      if (struct.isSetCocahLogo()) {
        oprot.writeString(struct.cocahLogo);
      }
      if (struct.isSetTeamName()) {
        oprot.writeString(struct.teamName);
      }
      if (struct.isSetMultiLangTeamNames()) {
        {
          oprot.writeI32(struct.multiLangTeamNames.size());
          for (com.lesports.api.common.LangString _iter158 : struct.multiLangTeamNames)
          {
            _iter158.write(oprot);
          }
        }
      }
      if (struct.isSetTeamLogo()) {
        oprot.writeString(struct.teamLogo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTeamSeason struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tid = iprot.readI64();
        struct.setTidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.csid = iprot.readI64();
        struct.setCsidIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.players = new ArrayList<TTeamPlayer>(_list159.size);
          TTeamPlayer _elem160;
          for (int _i161 = 0; _i161 < _list159.size; ++_i161)
          {
            _elem160 = new TTeamPlayer();
            _elem160.read(iprot);
            struct.players.add(_elem160);
          }
        }
        struct.setPlayersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cocahId = iprot.readI64();
        struct.setCocahIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.cocahName = iprot.readString();
        struct.setCocahNameIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list162 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCocahnames = new ArrayList<com.lesports.api.common.LangString>(_list162.size);
          com.lesports.api.common.LangString _elem163;
          for (int _i164 = 0; _i164 < _list162.size; ++_i164)
          {
            _elem163 = new com.lesports.api.common.LangString();
            _elem163.read(iprot);
            struct.multiLangCocahnames.add(_elem163);
          }
        }
        struct.setMultiLangCocahnamesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cocahLogo = iprot.readString();
        struct.setCocahLogoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.teamName = iprot.readString();
        struct.setTeamNameIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list165.size);
          com.lesports.api.common.LangString _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = new com.lesports.api.common.LangString();
            _elem166.read(iprot);
            struct.multiLangTeamNames.add(_elem166);
          }
        }
        struct.setMultiLangTeamNamesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.teamLogo = iprot.readString();
        struct.setTeamLogoIsSet(true);
      }
    }
  }

}

