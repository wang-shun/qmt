/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TTopListItem implements org.apache.thrift.TBase<TTopListItem, TTopListItem._Fields>, java.io.Serializable, Cloneable, Comparable<TTopListItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTopListItem");

  private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPETITOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMPETITOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SHOW_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("showOrder", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("stats", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField LOGO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("logoUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TEAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("teamId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TEAM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TEAM_LOGO_FIELD_DESC = new org.apache.thrift.protocol.TField("teamLogo", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_COMPETITOR_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangCompetitorNames", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TEAM_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTeamNames", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionId", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_POSITION_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangPositionNames", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MULTI_COUN_LOGOS_FIELD_DESC = new org.apache.thrift.protocol.TField("multiCounLogos", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField TEAM_OFFICIAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("teamOfficialName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MULTI_LANG_TEAM_OFFICIAL_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("multiLangTeamOfficialNames", org.apache.thrift.protocol.TType.LIST, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTopListItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTopListItemTupleSchemeFactory());
  }

  private long competitorId; // required
  private String competitorName; // optional
  private com.lesports.qmt.sbd.api.common.CompetitorType competitorType; // optional
  private int rank; // optional
  private int showOrder; // optional
  private Map<String,String> stats; // optional
  private String logoUrl; // optional
  private long teamId; // optional
  private String teamName; // optional
  private String teamLogo; // optional
  private List<com.lesports.api.common.LangString> multiLangCompetitorNames; // optional
  private List<com.lesports.api.common.LangString> multiLangTeamNames; // optional
  private String position; // optional
  private long positionId; // optional
  private List<com.lesports.api.common.LangString> multiLangPositionNames; // optional
  private int number; // optional
  private List<com.lesports.api.common.CounString> multiCounLogos; // optional
  private String teamOfficialName; // optional
  private List<com.lesports.api.common.LangString> multiLangTeamOfficialNames; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPETITOR_ID((short)1, "competitorId"),
    COMPETITOR_NAME((short)2, "competitorName"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CompetitorType
     */
    COMPETITOR_TYPE((short)3, "competitorType"),
    RANK((short)4, "rank"),
    SHOW_ORDER((short)5, "showOrder"),
    STATS((short)6, "stats"),
    LOGO_URL((short)7, "logoUrl"),
    TEAM_ID((short)8, "teamId"),
    TEAM_NAME((short)9, "teamName"),
    TEAM_LOGO((short)10, "teamLogo"),
    MULTI_LANG_COMPETITOR_NAMES((short)11, "multiLangCompetitorNames"),
    MULTI_LANG_TEAM_NAMES((short)12, "multiLangTeamNames"),
    POSITION((short)13, "position"),
    POSITION_ID((short)14, "positionId"),
    MULTI_LANG_POSITION_NAMES((short)15, "multiLangPositionNames"),
    NUMBER((short)16, "number"),
    MULTI_COUN_LOGOS((short)17, "multiCounLogos"),
    TEAM_OFFICIAL_NAME((short)18, "teamOfficialName"),
    MULTI_LANG_TEAM_OFFICIAL_NAMES((short)19, "multiLangTeamOfficialNames");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPETITOR_ID
          return COMPETITOR_ID;
        case 2: // COMPETITOR_NAME
          return COMPETITOR_NAME;
        case 3: // COMPETITOR_TYPE
          return COMPETITOR_TYPE;
        case 4: // RANK
          return RANK;
        case 5: // SHOW_ORDER
          return SHOW_ORDER;
        case 6: // STATS
          return STATS;
        case 7: // LOGO_URL
          return LOGO_URL;
        case 8: // TEAM_ID
          return TEAM_ID;
        case 9: // TEAM_NAME
          return TEAM_NAME;
        case 10: // TEAM_LOGO
          return TEAM_LOGO;
        case 11: // MULTI_LANG_COMPETITOR_NAMES
          return MULTI_LANG_COMPETITOR_NAMES;
        case 12: // MULTI_LANG_TEAM_NAMES
          return MULTI_LANG_TEAM_NAMES;
        case 13: // POSITION
          return POSITION;
        case 14: // POSITION_ID
          return POSITION_ID;
        case 15: // MULTI_LANG_POSITION_NAMES
          return MULTI_LANG_POSITION_NAMES;
        case 16: // NUMBER
          return NUMBER;
        case 17: // MULTI_COUN_LOGOS
          return MULTI_COUN_LOGOS;
        case 18: // TEAM_OFFICIAL_NAME
          return TEAM_OFFICIAL_NAME;
        case 19: // MULTI_LANG_TEAM_OFFICIAL_NAMES
          return MULTI_LANG_TEAM_OFFICIAL_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPETITORID_ISSET_ID = 0;
  private static final int __RANK_ISSET_ID = 1;
  private static final int __SHOWORDER_ISSET_ID = 2;
  private static final int __TEAMID_ISSET_ID = 3;
  private static final int __POSITIONID_ISSET_ID = 4;
  private static final int __NUMBER_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMPETITOR_NAME,_Fields.COMPETITOR_TYPE,_Fields.RANK,_Fields.SHOW_ORDER,_Fields.STATS,_Fields.LOGO_URL,_Fields.TEAM_ID,_Fields.TEAM_NAME,_Fields.TEAM_LOGO,_Fields.MULTI_LANG_COMPETITOR_NAMES,_Fields.MULTI_LANG_TEAM_NAMES,_Fields.POSITION,_Fields.POSITION_ID,_Fields.MULTI_LANG_POSITION_NAMES,_Fields.NUMBER,_Fields.MULTI_COUN_LOGOS,_Fields.TEAM_OFFICIAL_NAME,_Fields.MULTI_LANG_TEAM_OFFICIAL_NAMES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPETITOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("competitorName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPETITOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("competitorType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CompetitorType.class)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW_ORDER, new org.apache.thrift.meta_data.FieldMetaData("showOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATS, new org.apache.thrift.meta_data.FieldMetaData("stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOGO_URL, new org.apache.thrift.meta_data.FieldMetaData("logoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_ID, new org.apache.thrift.meta_data.FieldMetaData("teamId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEAM_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_LOGO, new org.apache.thrift.meta_data.FieldMetaData("teamLogo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_COMPETITOR_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangCompetitorNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.MULTI_LANG_TEAM_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTeamNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("positionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MULTI_LANG_POSITION_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangPositionNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MULTI_COUN_LOGOS, new org.apache.thrift.meta_data.FieldMetaData("multiCounLogos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CounString.class))));
    tmpMap.put(_Fields.TEAM_OFFICIAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("teamOfficialName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTI_LANG_TEAM_OFFICIAL_NAMES, new org.apache.thrift.meta_data.FieldMetaData("multiLangTeamOfficialNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.LangString.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTopListItem.class, metaDataMap);
  }

  public TTopListItem() {
  }

  public TTopListItem(
    long competitorId)
  {
    this();
    this.competitorId = competitorId;
    setCompetitorIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTopListItem(TTopListItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.competitorId = other.competitorId;
    if (other.isSetCompetitorName()) {
      this.competitorName = other.competitorName;
    }
    if (other.isSetCompetitorType()) {
      this.competitorType = other.competitorType;
    }
    this.rank = other.rank;
    this.showOrder = other.showOrder;
    if (other.isSetStats()) {
      Map<String,String> __this__stats = new HashMap<String,String>(other.stats);
      this.stats = __this__stats;
    }
    if (other.isSetLogoUrl()) {
      this.logoUrl = other.logoUrl;
    }
    this.teamId = other.teamId;
    if (other.isSetTeamName()) {
      this.teamName = other.teamName;
    }
    if (other.isSetTeamLogo()) {
      this.teamLogo = other.teamLogo;
    }
    if (other.isSetMultiLangCompetitorNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangCompetitorNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangCompetitorNames) {
        __this__multiLangCompetitorNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangCompetitorNames = __this__multiLangCompetitorNames;
    }
    if (other.isSetMultiLangTeamNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTeamNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTeamNames) {
        __this__multiLangTeamNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTeamNames = __this__multiLangTeamNames;
    }
    if (other.isSetPosition()) {
      this.position = other.position;
    }
    this.positionId = other.positionId;
    if (other.isSetMultiLangPositionNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangPositionNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangPositionNames) {
        __this__multiLangPositionNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangPositionNames = __this__multiLangPositionNames;
    }
    this.number = other.number;
    if (other.isSetMultiCounLogos()) {
      List<com.lesports.api.common.CounString> __this__multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(other.multiCounLogos.size());
      for (com.lesports.api.common.CounString other_element : other.multiCounLogos) {
        __this__multiCounLogos.add(new com.lesports.api.common.CounString(other_element));
      }
      this.multiCounLogos = __this__multiCounLogos;
    }
    if (other.isSetTeamOfficialName()) {
      this.teamOfficialName = other.teamOfficialName;
    }
    if (other.isSetMultiLangTeamOfficialNames()) {
      List<com.lesports.api.common.LangString> __this__multiLangTeamOfficialNames = new ArrayList<com.lesports.api.common.LangString>(other.multiLangTeamOfficialNames.size());
      for (com.lesports.api.common.LangString other_element : other.multiLangTeamOfficialNames) {
        __this__multiLangTeamOfficialNames.add(new com.lesports.api.common.LangString(other_element));
      }
      this.multiLangTeamOfficialNames = __this__multiLangTeamOfficialNames;
    }
  }

  public TTopListItem deepCopy() {
    return new TTopListItem(this);
  }

  @Override
  public void clear() {
    setCompetitorIdIsSet(false);
    this.competitorId = 0;
    this.competitorName = null;
    this.competitorType = null;
    setRankIsSet(false);
    this.rank = 0;
    setShowOrderIsSet(false);
    this.showOrder = 0;
    this.stats = null;
    this.logoUrl = null;
    setTeamIdIsSet(false);
    this.teamId = 0;
    this.teamName = null;
    this.teamLogo = null;
    this.multiLangCompetitorNames = null;
    this.multiLangTeamNames = null;
    this.position = null;
    setPositionIdIsSet(false);
    this.positionId = 0;
    this.multiLangPositionNames = null;
    setNumberIsSet(false);
    this.number = 0;
    this.multiCounLogos = null;
    this.teamOfficialName = null;
    this.multiLangTeamOfficialNames = null;
  }

  public long getCompetitorId() {
    return this.competitorId;
  }

  public void setCompetitorId(long competitorId) {
    this.competitorId = competitorId;
    setCompetitorIdIsSet(true);
  }

  public void unsetCompetitorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
  }

  public void setCompetitorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
  }

  public String getCompetitorName() {
    return this.competitorName;
  }

  public void setCompetitorName(String competitorName) {
    this.competitorName = competitorName;
  }

  public void unsetCompetitorName() {
    this.competitorName = null;
  }

  /** Returns true if field competitorName is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorName() {
    return this.competitorName != null;
  }

  public void setCompetitorNameIsSet(boolean value) {
    if (!value) {
      this.competitorName = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public com.lesports.qmt.sbd.api.common.CompetitorType getCompetitorType() {
    return this.competitorType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CompetitorType
   */
  public void setCompetitorType(com.lesports.qmt.sbd.api.common.CompetitorType competitorType) {
    this.competitorType = competitorType;
  }

  public void unsetCompetitorType() {
    this.competitorType = null;
  }

  /** Returns true if field competitorType is set (has been assigned a value) and false otherwise */
  public boolean isSetCompetitorType() {
    return this.competitorType != null;
  }

  public void setCompetitorTypeIsSet(boolean value) {
    if (!value) {
      this.competitorType = null;
    }
  }

  public int getRank() {
    return this.rank;
  }

  public void setRank(int rank) {
    this.rank = rank;
    setRankIsSet(true);
  }

  public void unsetRank() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  public int getShowOrder() {
    return this.showOrder;
  }

  public void setShowOrder(int showOrder) {
    this.showOrder = showOrder;
    setShowOrderIsSet(true);
  }

  public void unsetShowOrder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOWORDER_ISSET_ID);
  }

  /** Returns true if field showOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetShowOrder() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOWORDER_ISSET_ID);
  }

  public void setShowOrderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOWORDER_ISSET_ID, value);
  }

  public int getStatsSize() {
    return (this.stats == null) ? 0 : this.stats.size();
  }

  public void putToStats(String key, String val) {
    if (this.stats == null) {
      this.stats = new HashMap<String,String>();
    }
    this.stats.put(key, val);
  }

  public Map<String,String> getStats() {
    return this.stats;
  }

  public void setStats(Map<String,String> stats) {
    this.stats = stats;
  }

  public void unsetStats() {
    this.stats = null;
  }

  /** Returns true if field stats is set (has been assigned a value) and false otherwise */
  public boolean isSetStats() {
    return this.stats != null;
  }

  public void setStatsIsSet(boolean value) {
    if (!value) {
      this.stats = null;
    }
  }

  public String getLogoUrl() {
    return this.logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public void unsetLogoUrl() {
    this.logoUrl = null;
  }

  /** Returns true if field logoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoUrl() {
    return this.logoUrl != null;
  }

  public void setLogoUrlIsSet(boolean value) {
    if (!value) {
      this.logoUrl = null;
    }
  }

  public long getTeamId() {
    return this.teamId;
  }

  public void setTeamId(long teamId) {
    this.teamId = teamId;
    setTeamIdIsSet(true);
  }

  public void unsetTeamId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  /** Returns true if field teamId is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEAMID_ISSET_ID);
  }

  public void setTeamIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEAMID_ISSET_ID, value);
  }

  public String getTeamName() {
    return this.teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }

  public void unsetTeamName() {
    this.teamName = null;
  }

  /** Returns true if field teamName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamName() {
    return this.teamName != null;
  }

  public void setTeamNameIsSet(boolean value) {
    if (!value) {
      this.teamName = null;
    }
  }

  public String getTeamLogo() {
    return this.teamLogo;
  }

  public void setTeamLogo(String teamLogo) {
    this.teamLogo = teamLogo;
  }

  public void unsetTeamLogo() {
    this.teamLogo = null;
  }

  /** Returns true if field teamLogo is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamLogo() {
    return this.teamLogo != null;
  }

  public void setTeamLogoIsSet(boolean value) {
    if (!value) {
      this.teamLogo = null;
    }
  }

  public int getMultiLangCompetitorNamesSize() {
    return (this.multiLangCompetitorNames == null) ? 0 : this.multiLangCompetitorNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangCompetitorNamesIterator() {
    return (this.multiLangCompetitorNames == null) ? null : this.multiLangCompetitorNames.iterator();
  }

  public void addToMultiLangCompetitorNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangCompetitorNames == null) {
      this.multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangCompetitorNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangCompetitorNames() {
    return this.multiLangCompetitorNames;
  }

  public void setMultiLangCompetitorNames(List<com.lesports.api.common.LangString> multiLangCompetitorNames) {
    this.multiLangCompetitorNames = multiLangCompetitorNames;
  }

  public void unsetMultiLangCompetitorNames() {
    this.multiLangCompetitorNames = null;
  }

  /** Returns true if field multiLangCompetitorNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangCompetitorNames() {
    return this.multiLangCompetitorNames != null;
  }

  public void setMultiLangCompetitorNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangCompetitorNames = null;
    }
  }

  public int getMultiLangTeamNamesSize() {
    return (this.multiLangTeamNames == null) ? 0 : this.multiLangTeamNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTeamNamesIterator() {
    return (this.multiLangTeamNames == null) ? null : this.multiLangTeamNames.iterator();
  }

  public void addToMultiLangTeamNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangTeamNames == null) {
      this.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTeamNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTeamNames() {
    return this.multiLangTeamNames;
  }

  public void setMultiLangTeamNames(List<com.lesports.api.common.LangString> multiLangTeamNames) {
    this.multiLangTeamNames = multiLangTeamNames;
  }

  public void unsetMultiLangTeamNames() {
    this.multiLangTeamNames = null;
  }

  /** Returns true if field multiLangTeamNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTeamNames() {
    return this.multiLangTeamNames != null;
  }

  public void setMultiLangTeamNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangTeamNames = null;
    }
  }

  public String getPosition() {
    return this.position;
  }

  public void setPosition(String position) {
    this.position = position;
  }

  public void unsetPosition() {
    this.position = null;
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.position = null;
    }
  }

  public long getPositionId() {
    return this.positionId;
  }

  public void setPositionId(long positionId) {
    this.positionId = positionId;
    setPositionIdIsSet(true);
  }

  public void unsetPositionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  /** Returns true if field positionId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONID_ISSET_ID);
  }

  public void setPositionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONID_ISSET_ID, value);
  }

  public int getMultiLangPositionNamesSize() {
    return (this.multiLangPositionNames == null) ? 0 : this.multiLangPositionNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangPositionNamesIterator() {
    return (this.multiLangPositionNames == null) ? null : this.multiLangPositionNames.iterator();
  }

  public void addToMultiLangPositionNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangPositionNames == null) {
      this.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangPositionNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangPositionNames() {
    return this.multiLangPositionNames;
  }

  public void setMultiLangPositionNames(List<com.lesports.api.common.LangString> multiLangPositionNames) {
    this.multiLangPositionNames = multiLangPositionNames;
  }

  public void unsetMultiLangPositionNames() {
    this.multiLangPositionNames = null;
  }

  /** Returns true if field multiLangPositionNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangPositionNames() {
    return this.multiLangPositionNames != null;
  }

  public void setMultiLangPositionNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangPositionNames = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
  }

  public int getMultiCounLogosSize() {
    return (this.multiCounLogos == null) ? 0 : this.multiCounLogos.size();
  }

  public java.util.Iterator<com.lesports.api.common.CounString> getMultiCounLogosIterator() {
    return (this.multiCounLogos == null) ? null : this.multiCounLogos.iterator();
  }

  public void addToMultiCounLogos(com.lesports.api.common.CounString elem) {
    if (this.multiCounLogos == null) {
      this.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>();
    }
    this.multiCounLogos.add(elem);
  }

  public List<com.lesports.api.common.CounString> getMultiCounLogos() {
    return this.multiCounLogos;
  }

  public void setMultiCounLogos(List<com.lesports.api.common.CounString> multiCounLogos) {
    this.multiCounLogos = multiCounLogos;
  }

  public void unsetMultiCounLogos() {
    this.multiCounLogos = null;
  }

  /** Returns true if field multiCounLogos is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiCounLogos() {
    return this.multiCounLogos != null;
  }

  public void setMultiCounLogosIsSet(boolean value) {
    if (!value) {
      this.multiCounLogos = null;
    }
  }

  public String getTeamOfficialName() {
    return this.teamOfficialName;
  }

  public void setTeamOfficialName(String teamOfficialName) {
    this.teamOfficialName = teamOfficialName;
  }

  public void unsetTeamOfficialName() {
    this.teamOfficialName = null;
  }

  /** Returns true if field teamOfficialName is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamOfficialName() {
    return this.teamOfficialName != null;
  }

  public void setTeamOfficialNameIsSet(boolean value) {
    if (!value) {
      this.teamOfficialName = null;
    }
  }

  public int getMultiLangTeamOfficialNamesSize() {
    return (this.multiLangTeamOfficialNames == null) ? 0 : this.multiLangTeamOfficialNames.size();
  }

  public java.util.Iterator<com.lesports.api.common.LangString> getMultiLangTeamOfficialNamesIterator() {
    return (this.multiLangTeamOfficialNames == null) ? null : this.multiLangTeamOfficialNames.iterator();
  }

  public void addToMultiLangTeamOfficialNames(com.lesports.api.common.LangString elem) {
    if (this.multiLangTeamOfficialNames == null) {
      this.multiLangTeamOfficialNames = new ArrayList<com.lesports.api.common.LangString>();
    }
    this.multiLangTeamOfficialNames.add(elem);
  }

  public List<com.lesports.api.common.LangString> getMultiLangTeamOfficialNames() {
    return this.multiLangTeamOfficialNames;
  }

  public void setMultiLangTeamOfficialNames(List<com.lesports.api.common.LangString> multiLangTeamOfficialNames) {
    this.multiLangTeamOfficialNames = multiLangTeamOfficialNames;
  }

  public void unsetMultiLangTeamOfficialNames() {
    this.multiLangTeamOfficialNames = null;
  }

  /** Returns true if field multiLangTeamOfficialNames is set (has been assigned a value) and false otherwise */
  public boolean isSetMultiLangTeamOfficialNames() {
    return this.multiLangTeamOfficialNames != null;
  }

  public void setMultiLangTeamOfficialNamesIsSet(boolean value) {
    if (!value) {
      this.multiLangTeamOfficialNames = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPETITOR_ID:
      if (value == null) {
        unsetCompetitorId();
      } else {
        setCompetitorId((Long)value);
      }
      break;

    case COMPETITOR_NAME:
      if (value == null) {
        unsetCompetitorName();
      } else {
        setCompetitorName((String)value);
      }
      break;

    case COMPETITOR_TYPE:
      if (value == null) {
        unsetCompetitorType();
      } else {
        setCompetitorType((com.lesports.qmt.sbd.api.common.CompetitorType)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((Integer)value);
      }
      break;

    case SHOW_ORDER:
      if (value == null) {
        unsetShowOrder();
      } else {
        setShowOrder((Integer)value);
      }
      break;

    case STATS:
      if (value == null) {
        unsetStats();
      } else {
        setStats((Map<String,String>)value);
      }
      break;

    case LOGO_URL:
      if (value == null) {
        unsetLogoUrl();
      } else {
        setLogoUrl((String)value);
      }
      break;

    case TEAM_ID:
      if (value == null) {
        unsetTeamId();
      } else {
        setTeamId((Long)value);
      }
      break;

    case TEAM_NAME:
      if (value == null) {
        unsetTeamName();
      } else {
        setTeamName((String)value);
      }
      break;

    case TEAM_LOGO:
      if (value == null) {
        unsetTeamLogo();
      } else {
        setTeamLogo((String)value);
      }
      break;

    case MULTI_LANG_COMPETITOR_NAMES:
      if (value == null) {
        unsetMultiLangCompetitorNames();
      } else {
        setMultiLangCompetitorNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case MULTI_LANG_TEAM_NAMES:
      if (value == null) {
        unsetMultiLangTeamNames();
      } else {
        setMultiLangTeamNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case POSITION_ID:
      if (value == null) {
        unsetPositionId();
      } else {
        setPositionId((Long)value);
      }
      break;

    case MULTI_LANG_POSITION_NAMES:
      if (value == null) {
        unsetMultiLangPositionNames();
      } else {
        setMultiLangPositionNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case MULTI_COUN_LOGOS:
      if (value == null) {
        unsetMultiCounLogos();
      } else {
        setMultiCounLogos((List<com.lesports.api.common.CounString>)value);
      }
      break;

    case TEAM_OFFICIAL_NAME:
      if (value == null) {
        unsetTeamOfficialName();
      } else {
        setTeamOfficialName((String)value);
      }
      break;

    case MULTI_LANG_TEAM_OFFICIAL_NAMES:
      if (value == null) {
        unsetMultiLangTeamOfficialNames();
      } else {
        setMultiLangTeamOfficialNames((List<com.lesports.api.common.LangString>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPETITOR_ID:
      return Long.valueOf(getCompetitorId());

    case COMPETITOR_NAME:
      return getCompetitorName();

    case COMPETITOR_TYPE:
      return getCompetitorType();

    case RANK:
      return Integer.valueOf(getRank());

    case SHOW_ORDER:
      return Integer.valueOf(getShowOrder());

    case STATS:
      return getStats();

    case LOGO_URL:
      return getLogoUrl();

    case TEAM_ID:
      return Long.valueOf(getTeamId());

    case TEAM_NAME:
      return getTeamName();

    case TEAM_LOGO:
      return getTeamLogo();

    case MULTI_LANG_COMPETITOR_NAMES:
      return getMultiLangCompetitorNames();

    case MULTI_LANG_TEAM_NAMES:
      return getMultiLangTeamNames();

    case POSITION:
      return getPosition();

    case POSITION_ID:
      return Long.valueOf(getPositionId());

    case MULTI_LANG_POSITION_NAMES:
      return getMultiLangPositionNames();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case MULTI_COUN_LOGOS:
      return getMultiCounLogos();

    case TEAM_OFFICIAL_NAME:
      return getTeamOfficialName();

    case MULTI_LANG_TEAM_OFFICIAL_NAMES:
      return getMultiLangTeamOfficialNames();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPETITOR_ID:
      return isSetCompetitorId();
    case COMPETITOR_NAME:
      return isSetCompetitorName();
    case COMPETITOR_TYPE:
      return isSetCompetitorType();
    case RANK:
      return isSetRank();
    case SHOW_ORDER:
      return isSetShowOrder();
    case STATS:
      return isSetStats();
    case LOGO_URL:
      return isSetLogoUrl();
    case TEAM_ID:
      return isSetTeamId();
    case TEAM_NAME:
      return isSetTeamName();
    case TEAM_LOGO:
      return isSetTeamLogo();
    case MULTI_LANG_COMPETITOR_NAMES:
      return isSetMultiLangCompetitorNames();
    case MULTI_LANG_TEAM_NAMES:
      return isSetMultiLangTeamNames();
    case POSITION:
      return isSetPosition();
    case POSITION_ID:
      return isSetPositionId();
    case MULTI_LANG_POSITION_NAMES:
      return isSetMultiLangPositionNames();
    case NUMBER:
      return isSetNumber();
    case MULTI_COUN_LOGOS:
      return isSetMultiCounLogos();
    case TEAM_OFFICIAL_NAME:
      return isSetTeamOfficialName();
    case MULTI_LANG_TEAM_OFFICIAL_NAMES:
      return isSetMultiLangTeamOfficialNames();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTopListItem)
      return this.equals((TTopListItem)that);
    return false;
  }

  public boolean equals(TTopListItem that) {
    if (that == null)
      return false;

    boolean this_present_competitorId = true;
    boolean that_present_competitorId = true;
    if (this_present_competitorId || that_present_competitorId) {
      if (!(this_present_competitorId && that_present_competitorId))
        return false;
      if (this.competitorId != that.competitorId)
        return false;
    }

    boolean this_present_competitorName = true && this.isSetCompetitorName();
    boolean that_present_competitorName = true && that.isSetCompetitorName();
    if (this_present_competitorName || that_present_competitorName) {
      if (!(this_present_competitorName && that_present_competitorName))
        return false;
      if (!this.competitorName.equals(that.competitorName))
        return false;
    }

    boolean this_present_competitorType = true && this.isSetCompetitorType();
    boolean that_present_competitorType = true && that.isSetCompetitorType();
    if (this_present_competitorType || that_present_competitorType) {
      if (!(this_present_competitorType && that_present_competitorType))
        return false;
      if (!this.competitorType.equals(that.competitorType))
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    boolean this_present_showOrder = true && this.isSetShowOrder();
    boolean that_present_showOrder = true && that.isSetShowOrder();
    if (this_present_showOrder || that_present_showOrder) {
      if (!(this_present_showOrder && that_present_showOrder))
        return false;
      if (this.showOrder != that.showOrder)
        return false;
    }

    boolean this_present_stats = true && this.isSetStats();
    boolean that_present_stats = true && that.isSetStats();
    if (this_present_stats || that_present_stats) {
      if (!(this_present_stats && that_present_stats))
        return false;
      if (!this.stats.equals(that.stats))
        return false;
    }

    boolean this_present_logoUrl = true && this.isSetLogoUrl();
    boolean that_present_logoUrl = true && that.isSetLogoUrl();
    if (this_present_logoUrl || that_present_logoUrl) {
      if (!(this_present_logoUrl && that_present_logoUrl))
        return false;
      if (!this.logoUrl.equals(that.logoUrl))
        return false;
    }

    boolean this_present_teamId = true && this.isSetTeamId();
    boolean that_present_teamId = true && that.isSetTeamId();
    if (this_present_teamId || that_present_teamId) {
      if (!(this_present_teamId && that_present_teamId))
        return false;
      if (this.teamId != that.teamId)
        return false;
    }

    boolean this_present_teamName = true && this.isSetTeamName();
    boolean that_present_teamName = true && that.isSetTeamName();
    if (this_present_teamName || that_present_teamName) {
      if (!(this_present_teamName && that_present_teamName))
        return false;
      if (!this.teamName.equals(that.teamName))
        return false;
    }

    boolean this_present_teamLogo = true && this.isSetTeamLogo();
    boolean that_present_teamLogo = true && that.isSetTeamLogo();
    if (this_present_teamLogo || that_present_teamLogo) {
      if (!(this_present_teamLogo && that_present_teamLogo))
        return false;
      if (!this.teamLogo.equals(that.teamLogo))
        return false;
    }

    boolean this_present_multiLangCompetitorNames = true && this.isSetMultiLangCompetitorNames();
    boolean that_present_multiLangCompetitorNames = true && that.isSetMultiLangCompetitorNames();
    if (this_present_multiLangCompetitorNames || that_present_multiLangCompetitorNames) {
      if (!(this_present_multiLangCompetitorNames && that_present_multiLangCompetitorNames))
        return false;
      if (!this.multiLangCompetitorNames.equals(that.multiLangCompetitorNames))
        return false;
    }

    boolean this_present_multiLangTeamNames = true && this.isSetMultiLangTeamNames();
    boolean that_present_multiLangTeamNames = true && that.isSetMultiLangTeamNames();
    if (this_present_multiLangTeamNames || that_present_multiLangTeamNames) {
      if (!(this_present_multiLangTeamNames && that_present_multiLangTeamNames))
        return false;
      if (!this.multiLangTeamNames.equals(that.multiLangTeamNames))
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (!this.position.equals(that.position))
        return false;
    }

    boolean this_present_positionId = true && this.isSetPositionId();
    boolean that_present_positionId = true && that.isSetPositionId();
    if (this_present_positionId || that_present_positionId) {
      if (!(this_present_positionId && that_present_positionId))
        return false;
      if (this.positionId != that.positionId)
        return false;
    }

    boolean this_present_multiLangPositionNames = true && this.isSetMultiLangPositionNames();
    boolean that_present_multiLangPositionNames = true && that.isSetMultiLangPositionNames();
    if (this_present_multiLangPositionNames || that_present_multiLangPositionNames) {
      if (!(this_present_multiLangPositionNames && that_present_multiLangPositionNames))
        return false;
      if (!this.multiLangPositionNames.equals(that.multiLangPositionNames))
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_multiCounLogos = true && this.isSetMultiCounLogos();
    boolean that_present_multiCounLogos = true && that.isSetMultiCounLogos();
    if (this_present_multiCounLogos || that_present_multiCounLogos) {
      if (!(this_present_multiCounLogos && that_present_multiCounLogos))
        return false;
      if (!this.multiCounLogos.equals(that.multiCounLogos))
        return false;
    }

    boolean this_present_teamOfficialName = true && this.isSetTeamOfficialName();
    boolean that_present_teamOfficialName = true && that.isSetTeamOfficialName();
    if (this_present_teamOfficialName || that_present_teamOfficialName) {
      if (!(this_present_teamOfficialName && that_present_teamOfficialName))
        return false;
      if (!this.teamOfficialName.equals(that.teamOfficialName))
        return false;
    }

    boolean this_present_multiLangTeamOfficialNames = true && this.isSetMultiLangTeamOfficialNames();
    boolean that_present_multiLangTeamOfficialNames = true && that.isSetMultiLangTeamOfficialNames();
    if (this_present_multiLangTeamOfficialNames || that_present_multiLangTeamOfficialNames) {
      if (!(this_present_multiLangTeamOfficialNames && that_present_multiLangTeamOfficialNames))
        return false;
      if (!this.multiLangTeamOfficialNames.equals(that.multiLangTeamOfficialNames))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_competitorId = true;
    list.add(present_competitorId);
    if (present_competitorId)
      list.add(competitorId);

    boolean present_competitorName = true && (isSetCompetitorName());
    list.add(present_competitorName);
    if (present_competitorName)
      list.add(competitorName);

    boolean present_competitorType = true && (isSetCompetitorType());
    list.add(present_competitorType);
    if (present_competitorType)
      list.add(competitorType.getValue());

    boolean present_rank = true && (isSetRank());
    list.add(present_rank);
    if (present_rank)
      list.add(rank);

    boolean present_showOrder = true && (isSetShowOrder());
    list.add(present_showOrder);
    if (present_showOrder)
      list.add(showOrder);

    boolean present_stats = true && (isSetStats());
    list.add(present_stats);
    if (present_stats)
      list.add(stats);

    boolean present_logoUrl = true && (isSetLogoUrl());
    list.add(present_logoUrl);
    if (present_logoUrl)
      list.add(logoUrl);

    boolean present_teamId = true && (isSetTeamId());
    list.add(present_teamId);
    if (present_teamId)
      list.add(teamId);

    boolean present_teamName = true && (isSetTeamName());
    list.add(present_teamName);
    if (present_teamName)
      list.add(teamName);

    boolean present_teamLogo = true && (isSetTeamLogo());
    list.add(present_teamLogo);
    if (present_teamLogo)
      list.add(teamLogo);

    boolean present_multiLangCompetitorNames = true && (isSetMultiLangCompetitorNames());
    list.add(present_multiLangCompetitorNames);
    if (present_multiLangCompetitorNames)
      list.add(multiLangCompetitorNames);

    boolean present_multiLangTeamNames = true && (isSetMultiLangTeamNames());
    list.add(present_multiLangTeamNames);
    if (present_multiLangTeamNames)
      list.add(multiLangTeamNames);

    boolean present_position = true && (isSetPosition());
    list.add(present_position);
    if (present_position)
      list.add(position);

    boolean present_positionId = true && (isSetPositionId());
    list.add(present_positionId);
    if (present_positionId)
      list.add(positionId);

    boolean present_multiLangPositionNames = true && (isSetMultiLangPositionNames());
    list.add(present_multiLangPositionNames);
    if (present_multiLangPositionNames)
      list.add(multiLangPositionNames);

    boolean present_number = true && (isSetNumber());
    list.add(present_number);
    if (present_number)
      list.add(number);

    boolean present_multiCounLogos = true && (isSetMultiCounLogos());
    list.add(present_multiCounLogos);
    if (present_multiCounLogos)
      list.add(multiCounLogos);

    boolean present_teamOfficialName = true && (isSetTeamOfficialName());
    list.add(present_teamOfficialName);
    if (present_teamOfficialName)
      list.add(teamOfficialName);

    boolean present_multiLangTeamOfficialNames = true && (isSetMultiLangTeamOfficialNames());
    list.add(present_multiLangTeamOfficialNames);
    if (present_multiLangTeamOfficialNames)
      list.add(multiLangTeamOfficialNames);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTopListItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorName()).compareTo(other.isSetCompetitorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorName, other.competitorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompetitorType()).compareTo(other.isSetCompetitorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompetitorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorType, other.competitorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShowOrder()).compareTo(other.isSetShowOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showOrder, other.showOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStats()).compareTo(other.isSetStats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stats, other.stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoUrl()).compareTo(other.isSetLogoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoUrl, other.logoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamId()).compareTo(other.isSetTeamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamId, other.teamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamName()).compareTo(other.isSetTeamName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamName, other.teamName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamLogo()).compareTo(other.isSetTeamLogo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamLogo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamLogo, other.teamLogo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangCompetitorNames()).compareTo(other.isSetMultiLangCompetitorNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangCompetitorNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangCompetitorNames, other.multiLangCompetitorNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTeamNames()).compareTo(other.isSetMultiLangTeamNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTeamNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTeamNames, other.multiLangTeamNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionId()).compareTo(other.isSetPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionId, other.positionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangPositionNames()).compareTo(other.isSetMultiLangPositionNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangPositionNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangPositionNames, other.multiLangPositionNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiCounLogos()).compareTo(other.isSetMultiCounLogos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiCounLogos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiCounLogos, other.multiCounLogos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTeamOfficialName()).compareTo(other.isSetTeamOfficialName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamOfficialName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamOfficialName, other.teamOfficialName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMultiLangTeamOfficialNames()).compareTo(other.isSetMultiLangTeamOfficialNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultiLangTeamOfficialNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multiLangTeamOfficialNames, other.multiLangTeamOfficialNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTopListItem(");
    boolean first = true;

    sb.append("competitorId:");
    sb.append(this.competitorId);
    first = false;
    if (isSetCompetitorName()) {
      if (!first) sb.append(", ");
      sb.append("competitorName:");
      if (this.competitorName == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorName);
      }
      first = false;
    }
    if (isSetCompetitorType()) {
      if (!first) sb.append(", ");
      sb.append("competitorType:");
      if (this.competitorType == null) {
        sb.append("null");
      } else {
        sb.append(this.competitorType);
      }
      first = false;
    }
    if (isSetRank()) {
      if (!first) sb.append(", ");
      sb.append("rank:");
      sb.append(this.rank);
      first = false;
    }
    if (isSetShowOrder()) {
      if (!first) sb.append(", ");
      sb.append("showOrder:");
      sb.append(this.showOrder);
      first = false;
    }
    if (isSetStats()) {
      if (!first) sb.append(", ");
      sb.append("stats:");
      if (this.stats == null) {
        sb.append("null");
      } else {
        sb.append(this.stats);
      }
      first = false;
    }
    if (isSetLogoUrl()) {
      if (!first) sb.append(", ");
      sb.append("logoUrl:");
      if (this.logoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.logoUrl);
      }
      first = false;
    }
    if (isSetTeamId()) {
      if (!first) sb.append(", ");
      sb.append("teamId:");
      sb.append(this.teamId);
      first = false;
    }
    if (isSetTeamName()) {
      if (!first) sb.append(", ");
      sb.append("teamName:");
      if (this.teamName == null) {
        sb.append("null");
      } else {
        sb.append(this.teamName);
      }
      first = false;
    }
    if (isSetTeamLogo()) {
      if (!first) sb.append(", ");
      sb.append("teamLogo:");
      if (this.teamLogo == null) {
        sb.append("null");
      } else {
        sb.append(this.teamLogo);
      }
      first = false;
    }
    if (isSetMultiLangCompetitorNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangCompetitorNames:");
      if (this.multiLangCompetitorNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangCompetitorNames);
      }
      first = false;
    }
    if (isSetMultiLangTeamNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTeamNames:");
      if (this.multiLangTeamNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTeamNames);
      }
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      if (this.position == null) {
        sb.append("null");
      } else {
        sb.append(this.position);
      }
      first = false;
    }
    if (isSetPositionId()) {
      if (!first) sb.append(", ");
      sb.append("positionId:");
      sb.append(this.positionId);
      first = false;
    }
    if (isSetMultiLangPositionNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangPositionNames:");
      if (this.multiLangPositionNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangPositionNames);
      }
      first = false;
    }
    if (isSetNumber()) {
      if (!first) sb.append(", ");
      sb.append("number:");
      sb.append(this.number);
      first = false;
    }
    if (isSetMultiCounLogos()) {
      if (!first) sb.append(", ");
      sb.append("multiCounLogos:");
      if (this.multiCounLogos == null) {
        sb.append("null");
      } else {
        sb.append(this.multiCounLogos);
      }
      first = false;
    }
    if (isSetTeamOfficialName()) {
      if (!first) sb.append(", ");
      sb.append("teamOfficialName:");
      if (this.teamOfficialName == null) {
        sb.append("null");
      } else {
        sb.append(this.teamOfficialName);
      }
      first = false;
    }
    if (isSetMultiLangTeamOfficialNames()) {
      if (!first) sb.append(", ");
      sb.append("multiLangTeamOfficialNames:");
      if (this.multiLangTeamOfficialNames == null) {
        sb.append("null");
      } else {
        sb.append(this.multiLangTeamOfficialNames);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTopListItemStandardSchemeFactory implements SchemeFactory {
    public TTopListItemStandardScheme getScheme() {
      return new TTopListItemStandardScheme();
    }
  }

  private static class TTopListItemStandardScheme extends StandardScheme<TTopListItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTopListItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPETITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.competitorId = iprot.readI64();
              struct.setCompetitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPETITOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.competitorName = iprot.readString();
              struct.setCompetitorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPETITOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
              struct.setCompetitorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rank = iprot.readI32();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOW_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.showOrder = iprot.readI32();
              struct.setShowOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.stats = new HashMap<String,String>(2*_map40.size);
                String _key41;
                String _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = iprot.readString();
                  _val42 = iprot.readString();
                  struct.stats.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setStatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOGO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoUrl = iprot.readString();
              struct.setLogoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.teamId = iprot.readI64();
              struct.setTeamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEAM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamName = iprot.readString();
              struct.setTeamNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEAM_LOGO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamLogo = iprot.readString();
              struct.setTeamLogoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MULTI_LANG_COMPETITOR_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>(_list44.size);
                com.lesports.api.common.LangString _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = new com.lesports.api.common.LangString();
                  _elem45.read(iprot);
                  struct.multiLangCompetitorNames.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangCompetitorNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MULTI_LANG_TEAM_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list47.size);
                com.lesports.api.common.LangString _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = new com.lesports.api.common.LangString();
                  _elem48.read(iprot);
                  struct.multiLangTeamNames.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTeamNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionId = iprot.readI64();
              struct.setPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MULTI_LANG_POSITION_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                struct.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(_list50.size);
                com.lesports.api.common.LangString _elem51;
                for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                {
                  _elem51 = new com.lesports.api.common.LangString();
                  _elem51.read(iprot);
                  struct.multiLangPositionNames.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangPositionNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number = iprot.readI32();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MULTI_COUN_LOGOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list53 = iprot.readListBegin();
                struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list53.size);
                com.lesports.api.common.CounString _elem54;
                for (int _i55 = 0; _i55 < _list53.size; ++_i55)
                {
                  _elem54 = new com.lesports.api.common.CounString();
                  _elem54.read(iprot);
                  struct.multiCounLogos.add(_elem54);
                }
                iprot.readListEnd();
              }
              struct.setMultiCounLogosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TEAM_OFFICIAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamOfficialName = iprot.readString();
              struct.setTeamOfficialNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MULTI_LANG_TEAM_OFFICIAL_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.multiLangTeamOfficialNames = new ArrayList<com.lesports.api.common.LangString>(_list56.size);
                com.lesports.api.common.LangString _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new com.lesports.api.common.LangString();
                  _elem57.read(iprot);
                  struct.multiLangTeamOfficialNames.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setMultiLangTeamOfficialNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTopListItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
      oprot.writeI64(struct.competitorId);
      oprot.writeFieldEnd();
      if (struct.competitorName != null) {
        if (struct.isSetCompetitorName()) {
          oprot.writeFieldBegin(COMPETITOR_NAME_FIELD_DESC);
          oprot.writeString(struct.competitorName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.competitorType != null) {
        if (struct.isSetCompetitorType()) {
          oprot.writeFieldBegin(COMPETITOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.competitorType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRank()) {
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeI32(struct.rank);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShowOrder()) {
        oprot.writeFieldBegin(SHOW_ORDER_FIELD_DESC);
        oprot.writeI32(struct.showOrder);
        oprot.writeFieldEnd();
      }
      if (struct.stats != null) {
        if (struct.isSetStats()) {
          oprot.writeFieldBegin(STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.stats.size()));
            for (Map.Entry<String, String> _iter59 : struct.stats.entrySet())
            {
              oprot.writeString(_iter59.getKey());
              oprot.writeString(_iter59.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.logoUrl != null) {
        if (struct.isSetLogoUrl()) {
          oprot.writeFieldBegin(LOGO_URL_FIELD_DESC);
          oprot.writeString(struct.logoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTeamId()) {
        oprot.writeFieldBegin(TEAM_ID_FIELD_DESC);
        oprot.writeI64(struct.teamId);
        oprot.writeFieldEnd();
      }
      if (struct.teamName != null) {
        if (struct.isSetTeamName()) {
          oprot.writeFieldBegin(TEAM_NAME_FIELD_DESC);
          oprot.writeString(struct.teamName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamLogo != null) {
        if (struct.isSetTeamLogo()) {
          oprot.writeFieldBegin(TEAM_LOGO_FIELD_DESC);
          oprot.writeString(struct.teamLogo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangCompetitorNames != null) {
        if (struct.isSetMultiLangCompetitorNames()) {
          oprot.writeFieldBegin(MULTI_LANG_COMPETITOR_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangCompetitorNames.size()));
            for (com.lesports.api.common.LangString _iter60 : struct.multiLangCompetitorNames)
            {
              _iter60.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTeamNames != null) {
        if (struct.isSetMultiLangTeamNames()) {
          oprot.writeFieldBegin(MULTI_LANG_TEAM_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTeamNames.size()));
            for (com.lesports.api.common.LangString _iter61 : struct.multiLangTeamNames)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.position != null) {
        if (struct.isSetPosition()) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.position);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionId()) {
        oprot.writeFieldBegin(POSITION_ID_FIELD_DESC);
        oprot.writeI64(struct.positionId);
        oprot.writeFieldEnd();
      }
      if (struct.multiLangPositionNames != null) {
        if (struct.isSetMultiLangPositionNames()) {
          oprot.writeFieldBegin(MULTI_LANG_POSITION_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangPositionNames.size()));
            for (com.lesports.api.common.LangString _iter62 : struct.multiLangPositionNames)
            {
              _iter62.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeI32(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.multiCounLogos != null) {
        if (struct.isSetMultiCounLogos()) {
          oprot.writeFieldBegin(MULTI_COUN_LOGOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiCounLogos.size()));
            for (com.lesports.api.common.CounString _iter63 : struct.multiCounLogos)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.teamOfficialName != null) {
        if (struct.isSetTeamOfficialName()) {
          oprot.writeFieldBegin(TEAM_OFFICIAL_NAME_FIELD_DESC);
          oprot.writeString(struct.teamOfficialName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.multiLangTeamOfficialNames != null) {
        if (struct.isSetMultiLangTeamOfficialNames()) {
          oprot.writeFieldBegin(MULTI_LANG_TEAM_OFFICIAL_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.multiLangTeamOfficialNames.size()));
            for (com.lesports.api.common.LangString _iter64 : struct.multiLangTeamOfficialNames)
            {
              _iter64.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTopListItemTupleSchemeFactory implements SchemeFactory {
    public TTopListItemTupleScheme getScheme() {
      return new TTopListItemTupleScheme();
    }
  }

  private static class TTopListItemTupleScheme extends TupleScheme<TTopListItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTopListItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompetitorId()) {
        optionals.set(0);
      }
      if (struct.isSetCompetitorName()) {
        optionals.set(1);
      }
      if (struct.isSetCompetitorType()) {
        optionals.set(2);
      }
      if (struct.isSetRank()) {
        optionals.set(3);
      }
      if (struct.isSetShowOrder()) {
        optionals.set(4);
      }
      if (struct.isSetStats()) {
        optionals.set(5);
      }
      if (struct.isSetLogoUrl()) {
        optionals.set(6);
      }
      if (struct.isSetTeamId()) {
        optionals.set(7);
      }
      if (struct.isSetTeamName()) {
        optionals.set(8);
      }
      if (struct.isSetTeamLogo()) {
        optionals.set(9);
      }
      if (struct.isSetMultiLangCompetitorNames()) {
        optionals.set(10);
      }
      if (struct.isSetMultiLangTeamNames()) {
        optionals.set(11);
      }
      if (struct.isSetPosition()) {
        optionals.set(12);
      }
      if (struct.isSetPositionId()) {
        optionals.set(13);
      }
      if (struct.isSetMultiLangPositionNames()) {
        optionals.set(14);
      }
      if (struct.isSetNumber()) {
        optionals.set(15);
      }
      if (struct.isSetMultiCounLogos()) {
        optionals.set(16);
      }
      if (struct.isSetTeamOfficialName()) {
        optionals.set(17);
      }
      if (struct.isSetMultiLangTeamOfficialNames()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetCompetitorId()) {
        oprot.writeI64(struct.competitorId);
      }
      if (struct.isSetCompetitorName()) {
        oprot.writeString(struct.competitorName);
      }
      if (struct.isSetCompetitorType()) {
        oprot.writeI32(struct.competitorType.getValue());
      }
      if (struct.isSetRank()) {
        oprot.writeI32(struct.rank);
      }
      if (struct.isSetShowOrder()) {
        oprot.writeI32(struct.showOrder);
      }
      if (struct.isSetStats()) {
        {
          oprot.writeI32(struct.stats.size());
          for (Map.Entry<String, String> _iter65 : struct.stats.entrySet())
          {
            oprot.writeString(_iter65.getKey());
            oprot.writeString(_iter65.getValue());
          }
        }
      }
      if (struct.isSetLogoUrl()) {
        oprot.writeString(struct.logoUrl);
      }
      if (struct.isSetTeamId()) {
        oprot.writeI64(struct.teamId);
      }
      if (struct.isSetTeamName()) {
        oprot.writeString(struct.teamName);
      }
      if (struct.isSetTeamLogo()) {
        oprot.writeString(struct.teamLogo);
      }
      if (struct.isSetMultiLangCompetitorNames()) {
        {
          oprot.writeI32(struct.multiLangCompetitorNames.size());
          for (com.lesports.api.common.LangString _iter66 : struct.multiLangCompetitorNames)
          {
            _iter66.write(oprot);
          }
        }
      }
      if (struct.isSetMultiLangTeamNames()) {
        {
          oprot.writeI32(struct.multiLangTeamNames.size());
          for (com.lesports.api.common.LangString _iter67 : struct.multiLangTeamNames)
          {
            _iter67.write(oprot);
          }
        }
      }
      if (struct.isSetPosition()) {
        oprot.writeString(struct.position);
      }
      if (struct.isSetPositionId()) {
        oprot.writeI64(struct.positionId);
      }
      if (struct.isSetMultiLangPositionNames()) {
        {
          oprot.writeI32(struct.multiLangPositionNames.size());
          for (com.lesports.api.common.LangString _iter68 : struct.multiLangPositionNames)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetNumber()) {
        oprot.writeI32(struct.number);
      }
      if (struct.isSetMultiCounLogos()) {
        {
          oprot.writeI32(struct.multiCounLogos.size());
          for (com.lesports.api.common.CounString _iter69 : struct.multiCounLogos)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetTeamOfficialName()) {
        oprot.writeString(struct.teamOfficialName);
      }
      if (struct.isSetMultiLangTeamOfficialNames()) {
        {
          oprot.writeI32(struct.multiLangTeamOfficialNames.size());
          for (com.lesports.api.common.LangString _iter70 : struct.multiLangTeamOfficialNames)
          {
            _iter70.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTopListItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.competitorId = iprot.readI64();
        struct.setCompetitorIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.competitorName = iprot.readString();
        struct.setCompetitorNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.competitorType = com.lesports.qmt.sbd.api.common.CompetitorType.findByValue(iprot.readI32());
        struct.setCompetitorTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rank = iprot.readI32();
        struct.setRankIsSet(true);
      }
      if (incoming.get(4)) {
        struct.showOrder = iprot.readI32();
        struct.setShowOrderIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map71 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stats = new HashMap<String,String>(2*_map71.size);
          String _key72;
          String _val73;
          for (int _i74 = 0; _i74 < _map71.size; ++_i74)
          {
            _key72 = iprot.readString();
            _val73 = iprot.readString();
            struct.stats.put(_key72, _val73);
          }
        }
        struct.setStatsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.logoUrl = iprot.readString();
        struct.setLogoUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.teamId = iprot.readI64();
        struct.setTeamIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.teamName = iprot.readString();
        struct.setTeamNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.teamLogo = iprot.readString();
        struct.setTeamLogoIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangCompetitorNames = new ArrayList<com.lesports.api.common.LangString>(_list75.size);
          com.lesports.api.common.LangString _elem76;
          for (int _i77 = 0; _i77 < _list75.size; ++_i77)
          {
            _elem76 = new com.lesports.api.common.LangString();
            _elem76.read(iprot);
            struct.multiLangCompetitorNames.add(_elem76);
          }
        }
        struct.setMultiLangCompetitorNamesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTeamNames = new ArrayList<com.lesports.api.common.LangString>(_list78.size);
          com.lesports.api.common.LangString _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            _elem79 = new com.lesports.api.common.LangString();
            _elem79.read(iprot);
            struct.multiLangTeamNames.add(_elem79);
          }
        }
        struct.setMultiLangTeamNamesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.position = iprot.readString();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.positionId = iprot.readI64();
        struct.setPositionIdIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangPositionNames = new ArrayList<com.lesports.api.common.LangString>(_list81.size);
          com.lesports.api.common.LangString _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new com.lesports.api.common.LangString();
            _elem82.read(iprot);
            struct.multiLangPositionNames.add(_elem82);
          }
        }
        struct.setMultiLangPositionNamesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.number = iprot.readI32();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiCounLogos = new ArrayList<com.lesports.api.common.CounString>(_list84.size);
          com.lesports.api.common.CounString _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = new com.lesports.api.common.CounString();
            _elem85.read(iprot);
            struct.multiCounLogos.add(_elem85);
          }
        }
        struct.setMultiCounLogosIsSet(true);
      }
      if (incoming.get(17)) {
        struct.teamOfficialName = iprot.readString();
        struct.setTeamOfficialNameIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.multiLangTeamOfficialNames = new ArrayList<com.lesports.api.common.LangString>(_list87.size);
          com.lesports.api.common.LangString _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new com.lesports.api.common.LangString();
            _elem88.read(iprot);
            struct.multiLangTeamOfficialNames.add(_elem88);
          }
        }
        struct.setMultiLangTeamOfficialNamesIsSet(true);
      }
    }
  }

}

