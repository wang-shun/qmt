/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-21")
public class TTotalCompetition implements org.apache.thrift.TBase<TTotalCompetition, TTotalCompetition._Fields>, java.io.Serializable, Cloneable, Comparable<TTotalCompetition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTotalCompetition");

  private static final org.apache.thrift.protocol.TField GAME_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gameType", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GAME_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("gameTypeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MATCH_TOTAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("matchTotalList", org.apache.thrift.protocol.TType.LIST, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTotalCompetitionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTotalCompetitionTupleSchemeFactory());
  }

  private long gameType; // optional
  private String gameTypeName; // optional
  private List<TMatchTotalList> matchTotalList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GAME_TYPE((short)2, "gameType"),
    GAME_TYPE_NAME((short)5, "gameTypeName"),
    MATCH_TOTAL_LIST((short)24, "matchTotalList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // GAME_TYPE
          return GAME_TYPE;
        case 5: // GAME_TYPE_NAME
          return GAME_TYPE_NAME;
        case 24: // MATCH_TOTAL_LIST
          return MATCH_TOTAL_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GAMETYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GAME_TYPE,_Fields.GAME_TYPE_NAME,_Fields.MATCH_TOTAL_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GAME_TYPE, new org.apache.thrift.meta_data.FieldMetaData("gameType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GAME_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("gameTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_TOTAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("matchTotalList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TMatchTotalList"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTotalCompetition.class, metaDataMap);
  }

  public TTotalCompetition() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTotalCompetition(TTotalCompetition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.gameType = other.gameType;
    if (other.isSetGameTypeName()) {
      this.gameTypeName = other.gameTypeName;
    }
    if (other.isSetMatchTotalList()) {
      List<TMatchTotalList> __this__matchTotalList = new ArrayList<TMatchTotalList>(other.matchTotalList.size());
      for (TMatchTotalList other_element : other.matchTotalList) {
        __this__matchTotalList.add(other_element);
      }
      this.matchTotalList = __this__matchTotalList;
    }
  }

  public TTotalCompetition deepCopy() {
    return new TTotalCompetition(this);
  }

  @Override
  public void clear() {
    setGameTypeIsSet(false);
    this.gameType = 0;
    this.gameTypeName = null;
    this.matchTotalList = null;
  }

  public long getGameType() {
    return this.gameType;
  }

  public void setGameType(long gameType) {
    this.gameType = gameType;
    setGameTypeIsSet(true);
  }

  public void unsetGameType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  /** Returns true if field gameType is set (has been assigned a value) and false otherwise */
  public boolean isSetGameType() {
    return EncodingUtils.testBit(__isset_bitfield, __GAMETYPE_ISSET_ID);
  }

  public void setGameTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GAMETYPE_ISSET_ID, value);
  }

  public String getGameTypeName() {
    return this.gameTypeName;
  }

  public void setGameTypeName(String gameTypeName) {
    this.gameTypeName = gameTypeName;
  }

  public void unsetGameTypeName() {
    this.gameTypeName = null;
  }

  /** Returns true if field gameTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetGameTypeName() {
    return this.gameTypeName != null;
  }

  public void setGameTypeNameIsSet(boolean value) {
    if (!value) {
      this.gameTypeName = null;
    }
  }

  public int getMatchTotalListSize() {
    return (this.matchTotalList == null) ? 0 : this.matchTotalList.size();
  }

  public java.util.Iterator<TMatchTotalList> getMatchTotalListIterator() {
    return (this.matchTotalList == null) ? null : this.matchTotalList.iterator();
  }

  public void addToMatchTotalList(TMatchTotalList elem) {
    if (this.matchTotalList == null) {
      this.matchTotalList = new ArrayList<TMatchTotalList>();
    }
    this.matchTotalList.add(elem);
  }

  public List<TMatchTotalList> getMatchTotalList() {
    return this.matchTotalList;
  }

  public void setMatchTotalList(List<TMatchTotalList> matchTotalList) {
    this.matchTotalList = matchTotalList;
  }

  public void unsetMatchTotalList() {
    this.matchTotalList = null;
  }

  /** Returns true if field matchTotalList is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchTotalList() {
    return this.matchTotalList != null;
  }

  public void setMatchTotalListIsSet(boolean value) {
    if (!value) {
      this.matchTotalList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GAME_TYPE:
      if (value == null) {
        unsetGameType();
      } else {
        setGameType((Long)value);
      }
      break;

    case GAME_TYPE_NAME:
      if (value == null) {
        unsetGameTypeName();
      } else {
        setGameTypeName((String)value);
      }
      break;

    case MATCH_TOTAL_LIST:
      if (value == null) {
        unsetMatchTotalList();
      } else {
        setMatchTotalList((List<TMatchTotalList>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GAME_TYPE:
      return Long.valueOf(getGameType());

    case GAME_TYPE_NAME:
      return getGameTypeName();

    case MATCH_TOTAL_LIST:
      return getMatchTotalList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GAME_TYPE:
      return isSetGameType();
    case GAME_TYPE_NAME:
      return isSetGameTypeName();
    case MATCH_TOTAL_LIST:
      return isSetMatchTotalList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTotalCompetition)
      return this.equals((TTotalCompetition)that);
    return false;
  }

  public boolean equals(TTotalCompetition that) {
    if (that == null)
      return false;

    boolean this_present_gameType = true && this.isSetGameType();
    boolean that_present_gameType = true && that.isSetGameType();
    if (this_present_gameType || that_present_gameType) {
      if (!(this_present_gameType && that_present_gameType))
        return false;
      if (this.gameType != that.gameType)
        return false;
    }

    boolean this_present_gameTypeName = true && this.isSetGameTypeName();
    boolean that_present_gameTypeName = true && that.isSetGameTypeName();
    if (this_present_gameTypeName || that_present_gameTypeName) {
      if (!(this_present_gameTypeName && that_present_gameTypeName))
        return false;
      if (!this.gameTypeName.equals(that.gameTypeName))
        return false;
    }

    boolean this_present_matchTotalList = true && this.isSetMatchTotalList();
    boolean that_present_matchTotalList = true && that.isSetMatchTotalList();
    if (this_present_matchTotalList || that_present_matchTotalList) {
      if (!(this_present_matchTotalList && that_present_matchTotalList))
        return false;
      if (!this.matchTotalList.equals(that.matchTotalList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gameType = true && (isSetGameType());
    list.add(present_gameType);
    if (present_gameType)
      list.add(gameType);

    boolean present_gameTypeName = true && (isSetGameTypeName());
    list.add(present_gameTypeName);
    if (present_gameTypeName)
      list.add(gameTypeName);

    boolean present_matchTotalList = true && (isSetMatchTotalList());
    list.add(present_matchTotalList);
    if (present_matchTotalList)
      list.add(matchTotalList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTotalCompetition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGameType()).compareTo(other.isSetGameType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameType, other.gameType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGameTypeName()).compareTo(other.isSetGameTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGameTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gameTypeName, other.gameTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchTotalList()).compareTo(other.isSetMatchTotalList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchTotalList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchTotalList, other.matchTotalList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTotalCompetition(");
    boolean first = true;

    if (isSetGameType()) {
      sb.append("gameType:");
      sb.append(this.gameType);
      first = false;
    }
    if (isSetGameTypeName()) {
      if (!first) sb.append(", ");
      sb.append("gameTypeName:");
      if (this.gameTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.gameTypeName);
      }
      first = false;
    }
    if (isSetMatchTotalList()) {
      if (!first) sb.append(", ");
      sb.append("matchTotalList:");
      if (this.matchTotalList == null) {
        sb.append("null");
      } else {
        sb.append(this.matchTotalList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTotalCompetitionStandardSchemeFactory implements SchemeFactory {
    public TTotalCompetitionStandardScheme getScheme() {
      return new TTotalCompetitionStandardScheme();
    }
  }

  private static class TTotalCompetitionStandardScheme extends StandardScheme<TTotalCompetition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTotalCompetition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // GAME_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gameType = iprot.readI64();
              struct.setGameTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GAME_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gameTypeName = iprot.readString();
              struct.setGameTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MATCH_TOTAL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.matchTotalList = new ArrayList<TMatchTotalList>(_list104.size);
                TMatchTotalList _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new TMatchTotalList();
                  _elem105.read(iprot);
                  struct.matchTotalList.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setMatchTotalListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTotalCompetition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetGameType()) {
        oprot.writeFieldBegin(GAME_TYPE_FIELD_DESC);
        oprot.writeI64(struct.gameType);
        oprot.writeFieldEnd();
      }
      if (struct.gameTypeName != null) {
        if (struct.isSetGameTypeName()) {
          oprot.writeFieldBegin(GAME_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.gameTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchTotalList != null) {
        if (struct.isSetMatchTotalList()) {
          oprot.writeFieldBegin(MATCH_TOTAL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.matchTotalList.size()));
            for (TMatchTotalList _iter107 : struct.matchTotalList)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTotalCompetitionTupleSchemeFactory implements SchemeFactory {
    public TTotalCompetitionTupleScheme getScheme() {
      return new TTotalCompetitionTupleScheme();
    }
  }

  private static class TTotalCompetitionTupleScheme extends TupleScheme<TTotalCompetition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTotalCompetition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGameType()) {
        optionals.set(0);
      }
      if (struct.isSetGameTypeName()) {
        optionals.set(1);
      }
      if (struct.isSetMatchTotalList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGameType()) {
        oprot.writeI64(struct.gameType);
      }
      if (struct.isSetGameTypeName()) {
        oprot.writeString(struct.gameTypeName);
      }
      if (struct.isSetMatchTotalList()) {
        {
          oprot.writeI32(struct.matchTotalList.size());
          for (TMatchTotalList _iter108 : struct.matchTotalList)
          {
            _iter108.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTotalCompetition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.gameType = iprot.readI64();
        struct.setGameTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.gameTypeName = iprot.readString();
        struct.setGameTypeNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.matchTotalList = new ArrayList<TMatchTotalList>(_list109.size);
          TMatchTotalList _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = new TMatchTotalList();
            _elem110.read(iprot);
            struct.matchTotalList.add(_elem110);
          }
        }
        struct.setMatchTotalListIsSet(true);
      }
    }
  }

}

