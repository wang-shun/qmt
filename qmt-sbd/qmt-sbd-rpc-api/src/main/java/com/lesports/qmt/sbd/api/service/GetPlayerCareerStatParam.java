/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 获取球员职业生涯统计请求参数
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-12-9")
public class GetPlayerCareerStatParam implements org.apache.thrift.TBase<GetPlayerCareerStatParam, GetPlayerCareerStatParam._Fields>, java.io.Serializable, Cloneable, Comparable<GetPlayerCareerStatParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPlayerCareerStatParam");

  private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCOPE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scopeType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCOPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("scopeId", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetPlayerCareerStatParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetPlayerCareerStatParamTupleSchemeFactory());
  }

  private long playerId; // optional
  private com.lesports.qmt.sbd.api.common.CareerScopeType scopeType; // optional
  private long scopeId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLAYER_ID((short)1, "playerId"),
    /**
     * 
     * @see com.lesports.qmt.sbd.api.common.CareerScopeType
     */
    SCOPE_TYPE((short)2, "scopeType"),
    SCOPE_ID((short)3, "scopeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLAYER_ID
          return PLAYER_ID;
        case 2: // SCOPE_TYPE
          return SCOPE_TYPE;
        case 3: // SCOPE_ID
          return SCOPE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAYERID_ISSET_ID = 0;
  private static final int __SCOPEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PLAYER_ID,_Fields.SCOPE_TYPE,_Fields.SCOPE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCOPE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scopeType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.sbd.api.common.CareerScopeType.class)));
    tmpMap.put(_Fields.SCOPE_ID, new org.apache.thrift.meta_data.FieldMetaData("scopeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPlayerCareerStatParam.class, metaDataMap);
  }

  public GetPlayerCareerStatParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetPlayerCareerStatParam(GetPlayerCareerStatParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.playerId = other.playerId;
    if (other.isSetScopeType()) {
      this.scopeType = other.scopeType;
    }
    this.scopeId = other.scopeId;
  }

  public GetPlayerCareerStatParam deepCopy() {
    return new GetPlayerCareerStatParam(this);
  }

  @Override
  public void clear() {
    setPlayerIdIsSet(false);
    this.playerId = 0;
    this.scopeType = null;
    setScopeIdIsSet(false);
    this.scopeId = 0;
  }

  public long getPlayerId() {
    return this.playerId;
  }

  public void setPlayerId(long playerId) {
    this.playerId = playerId;
    setPlayerIdIsSet(true);
  }

  public void unsetPlayerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  public void setPlayerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CareerScopeType
   */
  public com.lesports.qmt.sbd.api.common.CareerScopeType getScopeType() {
    return this.scopeType;
  }

  /**
   * 
   * @see com.lesports.qmt.sbd.api.common.CareerScopeType
   */
  public void setScopeType(com.lesports.qmt.sbd.api.common.CareerScopeType scopeType) {
    this.scopeType = scopeType;
  }

  public void unsetScopeType() {
    this.scopeType = null;
  }

  /** Returns true if field scopeType is set (has been assigned a value) and false otherwise */
  public boolean isSetScopeType() {
    return this.scopeType != null;
  }

  public void setScopeTypeIsSet(boolean value) {
    if (!value) {
      this.scopeType = null;
    }
  }

  public long getScopeId() {
    return this.scopeId;
  }

  public void setScopeId(long scopeId) {
    this.scopeId = scopeId;
    setScopeIdIsSet(true);
  }

  public void unsetScopeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCOPEID_ISSET_ID);
  }

  /** Returns true if field scopeId is set (has been assigned a value) and false otherwise */
  public boolean isSetScopeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SCOPEID_ISSET_ID);
  }

  public void setScopeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCOPEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLAYER_ID:
      if (value == null) {
        unsetPlayerId();
      } else {
        setPlayerId((Long)value);
      }
      break;

    case SCOPE_TYPE:
      if (value == null) {
        unsetScopeType();
      } else {
        setScopeType((com.lesports.qmt.sbd.api.common.CareerScopeType)value);
      }
      break;

    case SCOPE_ID:
      if (value == null) {
        unsetScopeId();
      } else {
        setScopeId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLAYER_ID:
      return Long.valueOf(getPlayerId());

    case SCOPE_TYPE:
      return getScopeType();

    case SCOPE_ID:
      return Long.valueOf(getScopeId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLAYER_ID:
      return isSetPlayerId();
    case SCOPE_TYPE:
      return isSetScopeType();
    case SCOPE_ID:
      return isSetScopeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetPlayerCareerStatParam)
      return this.equals((GetPlayerCareerStatParam)that);
    return false;
  }

  public boolean equals(GetPlayerCareerStatParam that) {
    if (that == null)
      return false;

    boolean this_present_playerId = true && this.isSetPlayerId();
    boolean that_present_playerId = true && that.isSetPlayerId();
    if (this_present_playerId || that_present_playerId) {
      if (!(this_present_playerId && that_present_playerId))
        return false;
      if (this.playerId != that.playerId)
        return false;
    }

    boolean this_present_scopeType = true && this.isSetScopeType();
    boolean that_present_scopeType = true && that.isSetScopeType();
    if (this_present_scopeType || that_present_scopeType) {
      if (!(this_present_scopeType && that_present_scopeType))
        return false;
      if (!this.scopeType.equals(that.scopeType))
        return false;
    }

    boolean this_present_scopeId = true && this.isSetScopeId();
    boolean that_present_scopeId = true && that.isSetScopeId();
    if (this_present_scopeId || that_present_scopeId) {
      if (!(this_present_scopeId && that_present_scopeId))
        return false;
      if (this.scopeId != that.scopeId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_playerId = true && (isSetPlayerId());
    list.add(present_playerId);
    if (present_playerId)
      list.add(playerId);

    boolean present_scopeType = true && (isSetScopeType());
    list.add(present_scopeType);
    if (present_scopeType)
      list.add(scopeType.getValue());

    boolean present_scopeId = true && (isSetScopeId());
    list.add(present_scopeId);
    if (present_scopeId)
      list.add(scopeId);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetPlayerCareerStatParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(other.isSetPlayerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, other.playerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScopeType()).compareTo(other.isSetScopeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScopeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scopeType, other.scopeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScopeId()).compareTo(other.isSetScopeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScopeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scopeId, other.scopeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetPlayerCareerStatParam(");
    boolean first = true;

    if (isSetPlayerId()) {
      sb.append("playerId:");
      sb.append(this.playerId);
      first = false;
    }
    if (isSetScopeType()) {
      if (!first) sb.append(", ");
      sb.append("scopeType:");
      if (this.scopeType == null) {
        sb.append("null");
      } else {
        sb.append(this.scopeType);
      }
      first = false;
    }
    if (isSetScopeId()) {
      if (!first) sb.append(", ");
      sb.append("scopeId:");
      sb.append(this.scopeId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetPlayerCareerStatParamStandardSchemeFactory implements SchemeFactory {
    public GetPlayerCareerStatParamStandardScheme getScheme() {
      return new GetPlayerCareerStatParamStandardScheme();
    }
  }

  private static class GetPlayerCareerStatParamStandardScheme extends StandardScheme<GetPlayerCareerStatParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetPlayerCareerStatParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLAYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.playerId = iprot.readI64();
              struct.setPlayerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCOPE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scopeType = com.lesports.qmt.sbd.api.common.CareerScopeType.findByValue(iprot.readI32());
              struct.setScopeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCOPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scopeId = iprot.readI64();
              struct.setScopeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetPlayerCareerStatParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPlayerId()) {
        oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
        oprot.writeI64(struct.playerId);
        oprot.writeFieldEnd();
      }
      if (struct.scopeType != null) {
        if (struct.isSetScopeType()) {
          oprot.writeFieldBegin(SCOPE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.scopeType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScopeId()) {
        oprot.writeFieldBegin(SCOPE_ID_FIELD_DESC);
        oprot.writeI64(struct.scopeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetPlayerCareerStatParamTupleSchemeFactory implements SchemeFactory {
    public GetPlayerCareerStatParamTupleScheme getScheme() {
      return new GetPlayerCareerStatParamTupleScheme();
    }
  }

  private static class GetPlayerCareerStatParamTupleScheme extends TupleScheme<GetPlayerCareerStatParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetPlayerCareerStatParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlayerId()) {
        optionals.set(0);
      }
      if (struct.isSetScopeType()) {
        optionals.set(1);
      }
      if (struct.isSetScopeId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPlayerId()) {
        oprot.writeI64(struct.playerId);
      }
      if (struct.isSetScopeType()) {
        oprot.writeI32(struct.scopeType.getValue());
      }
      if (struct.isSetScopeId()) {
        oprot.writeI64(struct.scopeId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetPlayerCareerStatParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.playerId = iprot.readI64();
        struct.setPlayerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.scopeType = com.lesports.qmt.sbd.api.common.CareerScopeType.findByValue(iprot.readI32());
        struct.setScopeTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.scopeId = iprot.readI64();
        struct.setScopeIdIsSet(true);
      }
    }
  }

}

