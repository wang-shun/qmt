/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.sbd.api.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-10")
public class TSbdService {

  /**
   * Lesports Manage System Service Definition.
   * @author ellios
   * 过滤调用者平台的赛事接口服务
   */
  public interface Iface {

    /**
     * 通过id获取球员信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TPlayer getTPlayerById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 批量获取球员
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TPlayer> getTPlayersByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过首字母或者模糊匹配查找队员信息
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getPlayerIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    public List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> getPlayerCareerStat(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过id查找球队
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TTeam getTTeamById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过阵营id查找球队
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TTeam getTTeamByCampId(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过id列表查询球队
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TTeam> getTTeamsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过首字母查找队伍信息
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTeamIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某赛事或者赛季的所有球队
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTeamIdsOfSeason(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某赛事的所有球队
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTeamIdsOfCompetition(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     *  * 根据id获取球队赛季
     * *
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TTeamSeason getTTeamSeasonById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     *  * 根据id列表获取球队赛季
     * *
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TTeamSeason> getTTeamSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     *  * 根据条件查询球队赛季
     * *
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTeamSeasonIds(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取比赛详情
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TDetailMatch getTDetailMatchById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取比赛基本信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TMatch getTMatchById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 批量获取比赛基本信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TMatch> getTMatchesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过球队id获取该球队的赛程
     * 
     * 
     * @param competitorId
     * @param csid
     * @param pageParam
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TMatch> getMatchesByCompetitorId(long competitorId, int csid, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 滚球精英接口-获取某天有章鱼猜球的数据
     * 
     */
    public Map<String,String> syncZhangyuGames() throws org.apache.thrift.TException;

    /**
     * 根据球员id批量获取比赛
     * 
     * 
     * @param pid
     * @param status
     * @param pageParam
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getTDetailMatchesByPid(long pid, com.lesports.api.common.MatchStatus status, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据条件批量获取比赛
     * 
     * 
     * @param p
     * @param pageParam
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getTDetailMatches(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 按轮次、阶段、分站等查询赛程
     * 
     * 
     * @param cid
     * @param csid
     * @param entryId
     * @param pageParam
     */
    public List<Long> getMatchIdsByCidAndMetaEntryId(long cid, long csid, long entryId, com.lesports.api.common.PageParam pageParam) throws org.apache.thrift.TException;

    /**
     * 获取比赛实况基本信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TMatchAction getTMatchActionById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 批量获取比赛实况基本信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TMatchAction> getTMatchActionsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 通过动作类型获取本场比赛的所有实况
     * mid : 比赛id
     * type : 哪个类型的实况(进球,黄牌,红牌)
     * 
     * 
     * @param p
     * @param caller
     */
    public List<Long> getMatchActionsOfMatch(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取比赛统计基本信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TMatchStats getTMatchStatsById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    public com.lesports.qmt.sbd.api.dto.TCompetition getTCompetitionById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 批量查询赛事
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TCompetition> getTCompetitionByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据赛事类型获取赛事信息
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getTCompetitonIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据赛事code获取赛事
     * 
     * 
     * @param code
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TCompetition getTCompetitionByCode(String code, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getTCompetitionSeasonById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    public List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getTCompetitionSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取某赛事的赛季
     * 
     * 
     * @param cid
     * @param caller
     */
    public List<Long> getSeasonIdsOfCompetition(long cid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取最新赛季数据
     * 
     * 
     * @param cid
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getLatestTCompetitionSeasonsByCid(long cid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取最新赛季数据
     * 
     * 
     * @param cid
     * @param season
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getTCompetitionSeasonByCidAndSeason(long cid, String season, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据榜单id获取榜单信息
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TTopList getTTopListById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据榜单id列表获取榜单信息
     * 
     * 
     * @param ids
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TTopList> getTTopListsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 查询赛季榜单
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<Long> getSeasonTopListIds(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 获取球队或球员的技术榜单
     * 
     * 
     * @param p
     * @param page
     * @param caller
     */
    public List<com.lesports.qmt.sbd.api.dto.TTopList> getCompetitorTTopLists(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

    /**
     * 根据id列表获取赛季统计信息
     * 
     * 
     * @param ids
     */
    public List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> getTCompetitorSeasonStatsByIds(List<Long> ids) throws org.apache.thrift.TException;

    /**
     * 获取赛季球队或者球员技术统计
     * 
     * 
     * @param p
     */
    public List<Long> getCompetitorSeasonStatIds(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p) throws org.apache.thrift.TException;

    /**
     * 获取比赛历史对阵
     * 
     * 
     * @param id
     * @param caller
     */
    public com.lesports.qmt.sbd.api.dto.TMatchReview getTMatchReviewById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getTPlayerById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTPlayersByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPlayerIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPlayerCareerStat(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTeamById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTeamByCampId(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTeamsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTeamIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTeamIdsOfSeason(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTeamIdsOfCompetition(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTeamSeasonById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTeamSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTeamSeasonIds(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTDetailMatchById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTMatchById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTMatchesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchesByCompetitorId(long competitorId, int csid, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void syncZhangyuGames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTDetailMatchesByPid(long pid, com.lesports.api.common.MatchStatus status, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTDetailMatches(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchIdsByCidAndMetaEntryId(long cid, long csid, long entryId, com.lesports.api.common.PageParam pageParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTMatchActionById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTMatchActionsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMatchActionsOfMatch(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTMatchStatsById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitionById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitionByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitonIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitionByCode(String code, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitionSeasonById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitionSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSeasonIdsOfCompetition(long cid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestTCompetitionSeasonsByCid(long cid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitionSeasonByCidAndSeason(long cid, String season, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTopListById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTTopListsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSeasonTopListIds(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCompetitorTTopLists(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTCompetitorSeasonStatsByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCompetitorSeasonStatIds(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTMatchReviewById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.lesports.qmt.sbd.api.dto.TPlayer getTPlayerById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTPlayerById(id, caller);
      return recv_getTPlayerById();
    }

    public void send_getTPlayerById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTPlayerById_args args = new getTPlayerById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTPlayerById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TPlayer recv_getTPlayerById() throws org.apache.thrift.TException
    {
      getTPlayerById_result result = new getTPlayerById_result();
      receiveBase(result, "getTPlayerById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTPlayerById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TPlayer> getTPlayersByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTPlayersByIds(ids, caller);
      return recv_getTPlayersByIds();
    }

    public void send_getTPlayersByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTPlayersByIds_args args = new getTPlayersByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTPlayersByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TPlayer> recv_getTPlayersByIds() throws org.apache.thrift.TException
    {
      getTPlayersByIds_result result = new getTPlayersByIds_result();
      receiveBase(result, "getTPlayersByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTPlayersByIds failed: unknown result");
    }

    public List<Long> getPlayerIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getPlayerIds4SimpleSearch(p, page, caller);
      return recv_getPlayerIds4SimpleSearch();
    }

    public void send_getPlayerIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getPlayerIds4SimpleSearch_args args = new getPlayerIds4SimpleSearch_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getPlayerIds4SimpleSearch", args);
    }

    public List<Long> recv_getPlayerIds4SimpleSearch() throws org.apache.thrift.TException
    {
      getPlayerIds4SimpleSearch_result result = new getPlayerIds4SimpleSearch_result();
      receiveBase(result, "getPlayerIds4SimpleSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlayerIds4SimpleSearch failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> getPlayerCareerStat(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getPlayerCareerStat(p, caller);
      return recv_getPlayerCareerStat();
    }

    public void send_getPlayerCareerStat(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getPlayerCareerStat_args args = new getPlayerCareerStat_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("getPlayerCareerStat", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> recv_getPlayerCareerStat() throws org.apache.thrift.TException
    {
      getPlayerCareerStat_result result = new getPlayerCareerStat_result();
      receiveBase(result, "getPlayerCareerStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPlayerCareerStat failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TTeam getTTeamById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTeamById(id, caller);
      return recv_getTTeamById();
    }

    public void send_getTTeamById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTeamById_args args = new getTTeamById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTTeamById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TTeam recv_getTTeamById() throws org.apache.thrift.TException
    {
      getTTeamById_result result = new getTTeamById_result();
      receiveBase(result, "getTTeamById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTeamById failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TTeam getTTeamByCampId(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTeamByCampId(id, caller);
      return recv_getTTeamByCampId();
    }

    public void send_getTTeamByCampId(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTeamByCampId_args args = new getTTeamByCampId_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTTeamByCampId", args);
    }

    public com.lesports.qmt.sbd.api.dto.TTeam recv_getTTeamByCampId() throws org.apache.thrift.TException
    {
      getTTeamByCampId_result result = new getTTeamByCampId_result();
      receiveBase(result, "getTTeamByCampId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTeamByCampId failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TTeam> getTTeamsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTeamsByIds(ids, caller);
      return recv_getTTeamsByIds();
    }

    public void send_getTTeamsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTeamsByIds_args args = new getTTeamsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTTeamsByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTeam> recv_getTTeamsByIds() throws org.apache.thrift.TException
    {
      getTTeamsByIds_result result = new getTTeamsByIds_result();
      receiveBase(result, "getTTeamsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTeamsByIds failed: unknown result");
    }

    public List<Long> getTeamIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTeamIds4SimpleSearch(p, page, caller);
      return recv_getTeamIds4SimpleSearch();
    }

    public void send_getTeamIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTeamIds4SimpleSearch_args args = new getTeamIds4SimpleSearch_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTeamIds4SimpleSearch", args);
    }

    public List<Long> recv_getTeamIds4SimpleSearch() throws org.apache.thrift.TException
    {
      getTeamIds4SimpleSearch_result result = new getTeamIds4SimpleSearch_result();
      receiveBase(result, "getTeamIds4SimpleSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeamIds4SimpleSearch failed: unknown result");
    }

    public List<Long> getTeamIdsOfSeason(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTeamIdsOfSeason(p, page, caller);
      return recv_getTeamIdsOfSeason();
    }

    public void send_getTeamIdsOfSeason(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTeamIdsOfSeason_args args = new getTeamIdsOfSeason_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTeamIdsOfSeason", args);
    }

    public List<Long> recv_getTeamIdsOfSeason() throws org.apache.thrift.TException
    {
      getTeamIdsOfSeason_result result = new getTeamIdsOfSeason_result();
      receiveBase(result, "getTeamIdsOfSeason");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeamIdsOfSeason failed: unknown result");
    }

    public List<Long> getTeamIdsOfCompetition(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTeamIdsOfCompetition(p, page, caller);
      return recv_getTeamIdsOfCompetition();
    }

    public void send_getTeamIdsOfCompetition(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTeamIdsOfCompetition_args args = new getTeamIdsOfCompetition_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTeamIdsOfCompetition", args);
    }

    public List<Long> recv_getTeamIdsOfCompetition() throws org.apache.thrift.TException
    {
      getTeamIdsOfCompetition_result result = new getTeamIdsOfCompetition_result();
      receiveBase(result, "getTeamIdsOfCompetition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeamIdsOfCompetition failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TTeamSeason getTTeamSeasonById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTeamSeasonById(id, caller);
      return recv_getTTeamSeasonById();
    }

    public void send_getTTeamSeasonById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTeamSeasonById_args args = new getTTeamSeasonById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTTeamSeasonById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TTeamSeason recv_getTTeamSeasonById() throws org.apache.thrift.TException
    {
      getTTeamSeasonById_result result = new getTTeamSeasonById_result();
      receiveBase(result, "getTTeamSeasonById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTeamSeasonById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TTeamSeason> getTTeamSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTeamSeasonsByIds(ids, caller);
      return recv_getTTeamSeasonsByIds();
    }

    public void send_getTTeamSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTeamSeasonsByIds_args args = new getTTeamSeasonsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTTeamSeasonsByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTeamSeason> recv_getTTeamSeasonsByIds() throws org.apache.thrift.TException
    {
      getTTeamSeasonsByIds_result result = new getTTeamSeasonsByIds_result();
      receiveBase(result, "getTTeamSeasonsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTeamSeasonsByIds failed: unknown result");
    }

    public List<Long> getTeamSeasonIds(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTeamSeasonIds(p, page, caller);
      return recv_getTeamSeasonIds();
    }

    public void send_getTeamSeasonIds(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTeamSeasonIds_args args = new getTeamSeasonIds_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTeamSeasonIds", args);
    }

    public List<Long> recv_getTeamSeasonIds() throws org.apache.thrift.TException
    {
      getTeamSeasonIds_result result = new getTeamSeasonIds_result();
      receiveBase(result, "getTeamSeasonIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTeamSeasonIds failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TDetailMatch getTDetailMatchById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTDetailMatchById(id, caller);
      return recv_getTDetailMatchById();
    }

    public void send_getTDetailMatchById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTDetailMatchById_args args = new getTDetailMatchById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTDetailMatchById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TDetailMatch recv_getTDetailMatchById() throws org.apache.thrift.TException
    {
      getTDetailMatchById_result result = new getTDetailMatchById_result();
      receiveBase(result, "getTDetailMatchById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTDetailMatchById failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TMatch getTMatchById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTMatchById(id, caller);
      return recv_getTMatchById();
    }

    public void send_getTMatchById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTMatchById_args args = new getTMatchById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTMatchById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TMatch recv_getTMatchById() throws org.apache.thrift.TException
    {
      getTMatchById_result result = new getTMatchById_result();
      receiveBase(result, "getTMatchById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTMatchById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatch> getTMatchesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTMatchesByIds(ids, caller);
      return recv_getTMatchesByIds();
    }

    public void send_getTMatchesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTMatchesByIds_args args = new getTMatchesByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTMatchesByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatch> recv_getTMatchesByIds() throws org.apache.thrift.TException
    {
      getTMatchesByIds_result result = new getTMatchesByIds_result();
      receiveBase(result, "getTMatchesByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTMatchesByIds failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatch> getMatchesByCompetitorId(long competitorId, int csid, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getMatchesByCompetitorId(competitorId, csid, pageParam, caller);
      return recv_getMatchesByCompetitorId();
    }

    public void send_getMatchesByCompetitorId(long competitorId, int csid, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getMatchesByCompetitorId_args args = new getMatchesByCompetitorId_args();
      args.setCompetitorId(competitorId);
      args.setCsid(csid);
      args.setPageParam(pageParam);
      args.setCaller(caller);
      sendBase("getMatchesByCompetitorId", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatch> recv_getMatchesByCompetitorId() throws org.apache.thrift.TException
    {
      getMatchesByCompetitorId_result result = new getMatchesByCompetitorId_result();
      receiveBase(result, "getMatchesByCompetitorId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchesByCompetitorId failed: unknown result");
    }

    public Map<String,String> syncZhangyuGames() throws org.apache.thrift.TException
    {
      send_syncZhangyuGames();
      return recv_syncZhangyuGames();
    }

    public void send_syncZhangyuGames() throws org.apache.thrift.TException
    {
      syncZhangyuGames_args args = new syncZhangyuGames_args();
      sendBase("syncZhangyuGames", args);
    }

    public Map<String,String> recv_syncZhangyuGames() throws org.apache.thrift.TException
    {
      syncZhangyuGames_result result = new syncZhangyuGames_result();
      receiveBase(result, "syncZhangyuGames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "syncZhangyuGames failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getTDetailMatchesByPid(long pid, com.lesports.api.common.MatchStatus status, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTDetailMatchesByPid(pid, status, pageParam, caller);
      return recv_getTDetailMatchesByPid();
    }

    public void send_getTDetailMatchesByPid(long pid, com.lesports.api.common.MatchStatus status, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTDetailMatchesByPid_args args = new getTDetailMatchesByPid_args();
      args.setPid(pid);
      args.setStatus(status);
      args.setPageParam(pageParam);
      args.setCaller(caller);
      sendBase("getTDetailMatchesByPid", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> recv_getTDetailMatchesByPid() throws org.apache.thrift.TException
    {
      getTDetailMatchesByPid_result result = new getTDetailMatchesByPid_result();
      receiveBase(result, "getTDetailMatchesByPid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTDetailMatchesByPid failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getTDetailMatches(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTDetailMatches(p, pageParam, caller);
      return recv_getTDetailMatches();
    }

    public void send_getTDetailMatches(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTDetailMatches_args args = new getTDetailMatches_args();
      args.setP(p);
      args.setPageParam(pageParam);
      args.setCaller(caller);
      sendBase("getTDetailMatches", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> recv_getTDetailMatches() throws org.apache.thrift.TException
    {
      getTDetailMatches_result result = new getTDetailMatches_result();
      receiveBase(result, "getTDetailMatches");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTDetailMatches failed: unknown result");
    }

    public List<Long> getMatchIdsByCidAndMetaEntryId(long cid, long csid, long entryId, com.lesports.api.common.PageParam pageParam) throws org.apache.thrift.TException
    {
      send_getMatchIdsByCidAndMetaEntryId(cid, csid, entryId, pageParam);
      return recv_getMatchIdsByCidAndMetaEntryId();
    }

    public void send_getMatchIdsByCidAndMetaEntryId(long cid, long csid, long entryId, com.lesports.api.common.PageParam pageParam) throws org.apache.thrift.TException
    {
      getMatchIdsByCidAndMetaEntryId_args args = new getMatchIdsByCidAndMetaEntryId_args();
      args.setCid(cid);
      args.setCsid(csid);
      args.setEntryId(entryId);
      args.setPageParam(pageParam);
      sendBase("getMatchIdsByCidAndMetaEntryId", args);
    }

    public List<Long> recv_getMatchIdsByCidAndMetaEntryId() throws org.apache.thrift.TException
    {
      getMatchIdsByCidAndMetaEntryId_result result = new getMatchIdsByCidAndMetaEntryId_result();
      receiveBase(result, "getMatchIdsByCidAndMetaEntryId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchIdsByCidAndMetaEntryId failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TMatchAction getTMatchActionById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTMatchActionById(id, caller);
      return recv_getTMatchActionById();
    }

    public void send_getTMatchActionById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTMatchActionById_args args = new getTMatchActionById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTMatchActionById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TMatchAction recv_getTMatchActionById() throws org.apache.thrift.TException
    {
      getTMatchActionById_result result = new getTMatchActionById_result();
      receiveBase(result, "getTMatchActionById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTMatchActionById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatchAction> getTMatchActionsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTMatchActionsByIds(ids, caller);
      return recv_getTMatchActionsByIds();
    }

    public void send_getTMatchActionsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTMatchActionsByIds_args args = new getTMatchActionsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTMatchActionsByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatchAction> recv_getTMatchActionsByIds() throws org.apache.thrift.TException
    {
      getTMatchActionsByIds_result result = new getTMatchActionsByIds_result();
      receiveBase(result, "getTMatchActionsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTMatchActionsByIds failed: unknown result");
    }

    public List<Long> getMatchActionsOfMatch(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getMatchActionsOfMatch(p, caller);
      return recv_getMatchActionsOfMatch();
    }

    public void send_getMatchActionsOfMatch(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getMatchActionsOfMatch_args args = new getMatchActionsOfMatch_args();
      args.setP(p);
      args.setCaller(caller);
      sendBase("getMatchActionsOfMatch", args);
    }

    public List<Long> recv_getMatchActionsOfMatch() throws org.apache.thrift.TException
    {
      getMatchActionsOfMatch_result result = new getMatchActionsOfMatch_result();
      receiveBase(result, "getMatchActionsOfMatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMatchActionsOfMatch failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TMatchStats getTMatchStatsById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTMatchStatsById(id, caller);
      return recv_getTMatchStatsById();
    }

    public void send_getTMatchStatsById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTMatchStatsById_args args = new getTMatchStatsById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTMatchStatsById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TMatchStats recv_getTMatchStatsById() throws org.apache.thrift.TException
    {
      getTMatchStatsById_result result = new getTMatchStatsById_result();
      receiveBase(result, "getTMatchStatsById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTMatchStatsById failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TCompetition getTCompetitionById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitionById(id, caller);
      return recv_getTCompetitionById();
    }

    public void send_getTCompetitionById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitionById_args args = new getTCompetitionById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTCompetitionById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TCompetition recv_getTCompetitionById() throws org.apache.thrift.TException
    {
      getTCompetitionById_result result = new getTCompetitionById_result();
      receiveBase(result, "getTCompetitionById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitionById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetition> getTCompetitionByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitionByIds(ids, caller);
      return recv_getTCompetitionByIds();
    }

    public void send_getTCompetitionByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitionByIds_args args = new getTCompetitionByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTCompetitionByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetition> recv_getTCompetitionByIds() throws org.apache.thrift.TException
    {
      getTCompetitionByIds_result result = new getTCompetitionByIds_result();
      receiveBase(result, "getTCompetitionByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitionByIds failed: unknown result");
    }

    public List<Long> getTCompetitonIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitonIds4SimpleSearch(p, page, caller);
      return recv_getTCompetitonIds4SimpleSearch();
    }

    public void send_getTCompetitonIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitonIds4SimpleSearch_args args = new getTCompetitonIds4SimpleSearch_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getTCompetitonIds4SimpleSearch", args);
    }

    public List<Long> recv_getTCompetitonIds4SimpleSearch() throws org.apache.thrift.TException
    {
      getTCompetitonIds4SimpleSearch_result result = new getTCompetitonIds4SimpleSearch_result();
      receiveBase(result, "getTCompetitonIds4SimpleSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitonIds4SimpleSearch failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TCompetition getTCompetitionByCode(String code, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitionByCode(code, caller);
      return recv_getTCompetitionByCode();
    }

    public void send_getTCompetitionByCode(String code, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitionByCode_args args = new getTCompetitionByCode_args();
      args.setCode(code);
      args.setCaller(caller);
      sendBase("getTCompetitionByCode", args);
    }

    public com.lesports.qmt.sbd.api.dto.TCompetition recv_getTCompetitionByCode() throws org.apache.thrift.TException
    {
      getTCompetitionByCode_result result = new getTCompetitionByCode_result();
      receiveBase(result, "getTCompetitionByCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitionByCode failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getTCompetitionSeasonById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitionSeasonById(id, caller);
      return recv_getTCompetitionSeasonById();
    }

    public void send_getTCompetitionSeasonById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitionSeasonById_args args = new getTCompetitionSeasonById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTCompetitionSeasonById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason recv_getTCompetitionSeasonById() throws org.apache.thrift.TException
    {
      getTCompetitionSeasonById_result result = new getTCompetitionSeasonById_result();
      receiveBase(result, "getTCompetitionSeasonById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitionSeasonById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getTCompetitionSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitionSeasonsByIds(ids, caller);
      return recv_getTCompetitionSeasonsByIds();
    }

    public void send_getTCompetitionSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitionSeasonsByIds_args args = new getTCompetitionSeasonsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTCompetitionSeasonsByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> recv_getTCompetitionSeasonsByIds() throws org.apache.thrift.TException
    {
      getTCompetitionSeasonsByIds_result result = new getTCompetitionSeasonsByIds_result();
      receiveBase(result, "getTCompetitionSeasonsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitionSeasonsByIds failed: unknown result");
    }

    public List<Long> getSeasonIdsOfCompetition(long cid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getSeasonIdsOfCompetition(cid, caller);
      return recv_getSeasonIdsOfCompetition();
    }

    public void send_getSeasonIdsOfCompetition(long cid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getSeasonIdsOfCompetition_args args = new getSeasonIdsOfCompetition_args();
      args.setCid(cid);
      args.setCaller(caller);
      sendBase("getSeasonIdsOfCompetition", args);
    }

    public List<Long> recv_getSeasonIdsOfCompetition() throws org.apache.thrift.TException
    {
      getSeasonIdsOfCompetition_result result = new getSeasonIdsOfCompetition_result();
      receiveBase(result, "getSeasonIdsOfCompetition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSeasonIdsOfCompetition failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getLatestTCompetitionSeasonsByCid(long cid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getLatestTCompetitionSeasonsByCid(cid, caller);
      return recv_getLatestTCompetitionSeasonsByCid();
    }

    public void send_getLatestTCompetitionSeasonsByCid(long cid, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getLatestTCompetitionSeasonsByCid_args args = new getLatestTCompetitionSeasonsByCid_args();
      args.setCid(cid);
      args.setCaller(caller);
      sendBase("getLatestTCompetitionSeasonsByCid", args);
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason recv_getLatestTCompetitionSeasonsByCid() throws org.apache.thrift.TException
    {
      getLatestTCompetitionSeasonsByCid_result result = new getLatestTCompetitionSeasonsByCid_result();
      receiveBase(result, "getLatestTCompetitionSeasonsByCid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestTCompetitionSeasonsByCid failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getTCompetitionSeasonByCidAndSeason(long cid, String season, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTCompetitionSeasonByCidAndSeason(cid, season, caller);
      return recv_getTCompetitionSeasonByCidAndSeason();
    }

    public void send_getTCompetitionSeasonByCidAndSeason(long cid, String season, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTCompetitionSeasonByCidAndSeason_args args = new getTCompetitionSeasonByCidAndSeason_args();
      args.setCid(cid);
      args.setSeason(season);
      args.setCaller(caller);
      sendBase("getTCompetitionSeasonByCidAndSeason", args);
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason recv_getTCompetitionSeasonByCidAndSeason() throws org.apache.thrift.TException
    {
      getTCompetitionSeasonByCidAndSeason_result result = new getTCompetitionSeasonByCidAndSeason_result();
      receiveBase(result, "getTCompetitionSeasonByCidAndSeason");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitionSeasonByCidAndSeason failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TTopList getTTopListById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTopListById(id, caller);
      return recv_getTTopListById();
    }

    public void send_getTTopListById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTopListById_args args = new getTTopListById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTTopListById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TTopList recv_getTTopListById() throws org.apache.thrift.TException
    {
      getTTopListById_result result = new getTTopListById_result();
      receiveBase(result, "getTTopListById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTopListById failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TTopList> getTTopListsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTTopListsByIds(ids, caller);
      return recv_getTTopListsByIds();
    }

    public void send_getTTopListsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTTopListsByIds_args args = new getTTopListsByIds_args();
      args.setIds(ids);
      args.setCaller(caller);
      sendBase("getTTopListsByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTopList> recv_getTTopListsByIds() throws org.apache.thrift.TException
    {
      getTTopListsByIds_result result = new getTTopListsByIds_result();
      receiveBase(result, "getTTopListsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTTopListsByIds failed: unknown result");
    }

    public List<Long> getSeasonTopListIds(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getSeasonTopListIds(p, page, caller);
      return recv_getSeasonTopListIds();
    }

    public void send_getSeasonTopListIds(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getSeasonTopListIds_args args = new getSeasonTopListIds_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getSeasonTopListIds", args);
    }

    public List<Long> recv_getSeasonTopListIds() throws org.apache.thrift.TException
    {
      getSeasonTopListIds_result result = new getSeasonTopListIds_result();
      receiveBase(result, "getSeasonTopListIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSeasonTopListIds failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TTopList> getCompetitorTTopLists(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getCompetitorTTopLists(p, page, caller);
      return recv_getCompetitorTTopLists();
    }

    public void send_getCompetitorTTopLists(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getCompetitorTTopLists_args args = new getCompetitorTTopLists_args();
      args.setP(p);
      args.setPage(page);
      args.setCaller(caller);
      sendBase("getCompetitorTTopLists", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTopList> recv_getCompetitorTTopLists() throws org.apache.thrift.TException
    {
      getCompetitorTTopLists_result result = new getCompetitorTTopLists_result();
      receiveBase(result, "getCompetitorTTopLists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompetitorTTopLists failed: unknown result");
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> getTCompetitorSeasonStatsByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      send_getTCompetitorSeasonStatsByIds(ids);
      return recv_getTCompetitorSeasonStatsByIds();
    }

    public void send_getTCompetitorSeasonStatsByIds(List<Long> ids) throws org.apache.thrift.TException
    {
      getTCompetitorSeasonStatsByIds_args args = new getTCompetitorSeasonStatsByIds_args();
      args.setIds(ids);
      sendBase("getTCompetitorSeasonStatsByIds", args);
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> recv_getTCompetitorSeasonStatsByIds() throws org.apache.thrift.TException
    {
      getTCompetitorSeasonStatsByIds_result result = new getTCompetitorSeasonStatsByIds_result();
      receiveBase(result, "getTCompetitorSeasonStatsByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCompetitorSeasonStatsByIds failed: unknown result");
    }

    public List<Long> getCompetitorSeasonStatIds(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p) throws org.apache.thrift.TException
    {
      send_getCompetitorSeasonStatIds(p);
      return recv_getCompetitorSeasonStatIds();
    }

    public void send_getCompetitorSeasonStatIds(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p) throws org.apache.thrift.TException
    {
      getCompetitorSeasonStatIds_args args = new getCompetitorSeasonStatIds_args();
      args.setP(p);
      sendBase("getCompetitorSeasonStatIds", args);
    }

    public List<Long> recv_getCompetitorSeasonStatIds() throws org.apache.thrift.TException
    {
      getCompetitorSeasonStatIds_result result = new getCompetitorSeasonStatIds_result();
      receiveBase(result, "getCompetitorSeasonStatIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCompetitorSeasonStatIds failed: unknown result");
    }

    public com.lesports.qmt.sbd.api.dto.TMatchReview getTMatchReviewById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      send_getTMatchReviewById(id, caller);
      return recv_getTMatchReviewById();
    }

    public void send_getTMatchReviewById(long id, com.lesports.api.common.CallerParam caller) throws org.apache.thrift.TException
    {
      getTMatchReviewById_args args = new getTMatchReviewById_args();
      args.setId(id);
      args.setCaller(caller);
      sendBase("getTMatchReviewById", args);
    }

    public com.lesports.qmt.sbd.api.dto.TMatchReview recv_getTMatchReviewById() throws org.apache.thrift.TException
    {
      getTMatchReviewById_result result = new getTMatchReviewById_result();
      receiveBase(result, "getTMatchReviewById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTMatchReviewById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getTPlayerById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTPlayerById_call method_call = new getTPlayerById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTPlayerById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTPlayerById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTPlayerById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTPlayerById_args args = new getTPlayerById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TPlayer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTPlayerById();
      }
    }

    public void getTPlayersByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTPlayersByIds_call method_call = new getTPlayersByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTPlayersByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTPlayersByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTPlayersByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTPlayersByIds_args args = new getTPlayersByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TPlayer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTPlayersByIds();
      }
    }

    public void getPlayerIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlayerIds4SimpleSearch_call method_call = new getPlayerIds4SimpleSearch_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlayerIds4SimpleSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getPlayerIds4SimpleSearch_call(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlayerIds4SimpleSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlayerIds4SimpleSearch_args args = new getPlayerIds4SimpleSearch_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlayerIds4SimpleSearch();
      }
    }

    public void getPlayerCareerStat(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPlayerCareerStat_call method_call = new getPlayerCareerStat_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPlayerCareerStat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p;
      private com.lesports.api.common.CallerParam caller;
      public getPlayerCareerStat_call(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPlayerCareerStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPlayerCareerStat_args args = new getPlayerCareerStat_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPlayerCareerStat();
      }
    }

    public void getTTeamById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTeamById_call method_call = new getTTeamById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTeamById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTTeamById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTeamById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTeamById_args args = new getTTeamById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TTeam getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTeamById();
      }
    }

    public void getTTeamByCampId(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTeamByCampId_call method_call = new getTTeamByCampId_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTeamByCampId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTTeamByCampId_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTeamByCampId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTeamByCampId_args args = new getTTeamByCampId_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TTeam getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTeamByCampId();
      }
    }

    public void getTTeamsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTeamsByIds_call method_call = new getTTeamsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTeamsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTTeamsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTeamsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTeamsByIds_args args = new getTTeamsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TTeam> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTeamsByIds();
      }
    }

    public void getTeamIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeamIds4SimpleSearch_call method_call = new getTeamIds4SimpleSearch_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeamIds4SimpleSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTeamIds4SimpleSearch_call(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeamIds4SimpleSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeamIds4SimpleSearch_args args = new getTeamIds4SimpleSearch_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeamIds4SimpleSearch();
      }
    }

    public void getTeamIdsOfSeason(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeamIdsOfSeason_call method_call = new getTeamIdsOfSeason_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeamIdsOfSeason_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTeamIdsOfSeason_call(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeamIdsOfSeason", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeamIdsOfSeason_args args = new getTeamIdsOfSeason_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeamIdsOfSeason();
      }
    }

    public void getTeamIdsOfCompetition(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeamIdsOfCompetition_call method_call = new getTeamIdsOfCompetition_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeamIdsOfCompetition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTeamIdsOfCompetition_call(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeamIdsOfCompetition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeamIdsOfCompetition_args args = new getTeamIdsOfCompetition_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeamIdsOfCompetition();
      }
    }

    public void getTTeamSeasonById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTeamSeasonById_call method_call = new getTTeamSeasonById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTeamSeasonById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTTeamSeasonById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTeamSeasonById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTeamSeasonById_args args = new getTTeamSeasonById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TTeamSeason getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTeamSeasonById();
      }
    }

    public void getTTeamSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTeamSeasonsByIds_call method_call = new getTTeamSeasonsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTeamSeasonsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTTeamSeasonsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTeamSeasonsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTeamSeasonsByIds_args args = new getTTeamSeasonsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TTeamSeason> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTeamSeasonsByIds();
      }
    }

    public void getTeamSeasonIds(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTeamSeasonIds_call method_call = new getTeamSeasonIds_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTeamSeasonIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTeamSeasonIds_call(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTeamSeasonIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTeamSeasonIds_args args = new getTeamSeasonIds_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTeamSeasonIds();
      }
    }

    public void getTDetailMatchById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTDetailMatchById_call method_call = new getTDetailMatchById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTDetailMatchById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTDetailMatchById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTDetailMatchById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTDetailMatchById_args args = new getTDetailMatchById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TDetailMatch getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTDetailMatchById();
      }
    }

    public void getTMatchById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTMatchById_call method_call = new getTMatchById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTMatchById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTMatchById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTMatchById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTMatchById_args args = new getTMatchById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TMatch getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTMatchById();
      }
    }

    public void getTMatchesByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTMatchesByIds_call method_call = new getTMatchesByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTMatchesByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTMatchesByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTMatchesByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTMatchesByIds_args args = new getTMatchesByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TMatch> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTMatchesByIds();
      }
    }

    public void getMatchesByCompetitorId(long competitorId, int csid, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchesByCompetitorId_call method_call = new getMatchesByCompetitorId_call(competitorId, csid, pageParam, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchesByCompetitorId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long competitorId;
      private int csid;
      private com.lesports.api.common.PageParam pageParam;
      private com.lesports.api.common.CallerParam caller;
      public getMatchesByCompetitorId_call(long competitorId, int csid, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.competitorId = competitorId;
        this.csid = csid;
        this.pageParam = pageParam;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchesByCompetitorId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchesByCompetitorId_args args = new getMatchesByCompetitorId_args();
        args.setCompetitorId(competitorId);
        args.setCsid(csid);
        args.setPageParam(pageParam);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TMatch> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchesByCompetitorId();
      }
    }

    public void syncZhangyuGames(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      syncZhangyuGames_call method_call = new syncZhangyuGames_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class syncZhangyuGames_call extends org.apache.thrift.async.TAsyncMethodCall {
      public syncZhangyuGames_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("syncZhangyuGames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        syncZhangyuGames_args args = new syncZhangyuGames_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_syncZhangyuGames();
      }
    }

    public void getTDetailMatchesByPid(long pid, com.lesports.api.common.MatchStatus status, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTDetailMatchesByPid_call method_call = new getTDetailMatchesByPid_call(pid, status, pageParam, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTDetailMatchesByPid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long pid;
      private com.lesports.api.common.MatchStatus status;
      private com.lesports.api.common.PageParam pageParam;
      private com.lesports.api.common.CallerParam caller;
      public getTDetailMatchesByPid_call(long pid, com.lesports.api.common.MatchStatus status, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
        this.status = status;
        this.pageParam = pageParam;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTDetailMatchesByPid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTDetailMatchesByPid_args args = new getTDetailMatchesByPid_args();
        args.setPid(pid);
        args.setStatus(status);
        args.setPageParam(pageParam);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTDetailMatchesByPid();
      }
    }

    public void getTDetailMatches(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTDetailMatches_call method_call = new getTDetailMatches_call(p, pageParam, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTDetailMatches_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p;
      private com.lesports.api.common.PageParam pageParam;
      private com.lesports.api.common.CallerParam caller;
      public getTDetailMatches_call(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p, com.lesports.api.common.PageParam pageParam, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.pageParam = pageParam;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTDetailMatches", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTDetailMatches_args args = new getTDetailMatches_args();
        args.setP(p);
        args.setPageParam(pageParam);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTDetailMatches();
      }
    }

    public void getMatchIdsByCidAndMetaEntryId(long cid, long csid, long entryId, com.lesports.api.common.PageParam pageParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchIdsByCidAndMetaEntryId_call method_call = new getMatchIdsByCidAndMetaEntryId_call(cid, csid, entryId, pageParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchIdsByCidAndMetaEntryId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cid;
      private long csid;
      private long entryId;
      private com.lesports.api.common.PageParam pageParam;
      public getMatchIdsByCidAndMetaEntryId_call(long cid, long csid, long entryId, com.lesports.api.common.PageParam pageParam, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.csid = csid;
        this.entryId = entryId;
        this.pageParam = pageParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchIdsByCidAndMetaEntryId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchIdsByCidAndMetaEntryId_args args = new getMatchIdsByCidAndMetaEntryId_args();
        args.setCid(cid);
        args.setCsid(csid);
        args.setEntryId(entryId);
        args.setPageParam(pageParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchIdsByCidAndMetaEntryId();
      }
    }

    public void getTMatchActionById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTMatchActionById_call method_call = new getTMatchActionById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTMatchActionById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTMatchActionById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTMatchActionById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTMatchActionById_args args = new getTMatchActionById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TMatchAction getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTMatchActionById();
      }
    }

    public void getTMatchActionsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTMatchActionsByIds_call method_call = new getTMatchActionsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTMatchActionsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTMatchActionsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTMatchActionsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTMatchActionsByIds_args args = new getTMatchActionsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TMatchAction> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTMatchActionsByIds();
      }
    }

    public void getMatchActionsOfMatch(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMatchActionsOfMatch_call method_call = new getMatchActionsOfMatch_call(p, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMatchActionsOfMatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetMacthActionsParam p;
      private com.lesports.api.common.CallerParam caller;
      public getMatchActionsOfMatch_call(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMatchActionsOfMatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMatchActionsOfMatch_args args = new getMatchActionsOfMatch_args();
        args.setP(p);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMatchActionsOfMatch();
      }
    }

    public void getTMatchStatsById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTMatchStatsById_call method_call = new getTMatchStatsById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTMatchStatsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTMatchStatsById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTMatchStatsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTMatchStatsById_args args = new getTMatchStatsById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TMatchStats getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTMatchStatsById();
      }
    }

    public void getTCompetitionById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitionById_call method_call = new getTCompetitionById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitionById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitionById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitionById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitionById_args args = new getTCompetitionById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TCompetition getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitionById();
      }
    }

    public void getTCompetitionByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitionByIds_call method_call = new getTCompetitionByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitionByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitionByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitionByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitionByIds_args args = new getTCompetitionByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TCompetition> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitionByIds();
      }
    }

    public void getTCompetitonIds4SimpleSearch(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitonIds4SimpleSearch_call method_call = new getTCompetitonIds4SimpleSearch_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitonIds4SimpleSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetCompetitionsParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitonIds4SimpleSearch_call(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitonIds4SimpleSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitonIds4SimpleSearch_args args = new getTCompetitonIds4SimpleSearch_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitonIds4SimpleSearch();
      }
    }

    public void getTCompetitionByCode(String code, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitionByCode_call method_call = new getTCompetitionByCode_call(code, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitionByCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitionByCode_call(String code, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitionByCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitionByCode_args args = new getTCompetitionByCode_args();
        args.setCode(code);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TCompetition getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitionByCode();
      }
    }

    public void getTCompetitionSeasonById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitionSeasonById_call method_call = new getTCompetitionSeasonById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitionSeasonById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitionSeasonById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitionSeasonById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitionSeasonById_args args = new getTCompetitionSeasonById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitionSeasonById();
      }
    }

    public void getTCompetitionSeasonsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitionSeasonsByIds_call method_call = new getTCompetitionSeasonsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitionSeasonsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitionSeasonsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitionSeasonsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitionSeasonsByIds_args args = new getTCompetitionSeasonsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitionSeasonsByIds();
      }
    }

    public void getSeasonIdsOfCompetition(long cid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSeasonIdsOfCompetition_call method_call = new getSeasonIdsOfCompetition_call(cid, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSeasonIdsOfCompetition_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cid;
      private com.lesports.api.common.CallerParam caller;
      public getSeasonIdsOfCompetition_call(long cid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSeasonIdsOfCompetition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSeasonIdsOfCompetition_args args = new getSeasonIdsOfCompetition_args();
        args.setCid(cid);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSeasonIdsOfCompetition();
      }
    }

    public void getLatestTCompetitionSeasonsByCid(long cid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestTCompetitionSeasonsByCid_call method_call = new getLatestTCompetitionSeasonsByCid_call(cid, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestTCompetitionSeasonsByCid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cid;
      private com.lesports.api.common.CallerParam caller;
      public getLatestTCompetitionSeasonsByCid_call(long cid, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestTCompetitionSeasonsByCid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestTCompetitionSeasonsByCid_args args = new getLatestTCompetitionSeasonsByCid_args();
        args.setCid(cid);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestTCompetitionSeasonsByCid();
      }
    }

    public void getTCompetitionSeasonByCidAndSeason(long cid, String season, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitionSeasonByCidAndSeason_call method_call = new getTCompetitionSeasonByCidAndSeason_call(cid, season, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitionSeasonByCidAndSeason_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cid;
      private String season;
      private com.lesports.api.common.CallerParam caller;
      public getTCompetitionSeasonByCidAndSeason_call(long cid, String season, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.season = season;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitionSeasonByCidAndSeason", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitionSeasonByCidAndSeason_args args = new getTCompetitionSeasonByCidAndSeason_args();
        args.setCid(cid);
        args.setSeason(season);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitionSeasonByCidAndSeason();
      }
    }

    public void getTTopListById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTopListById_call method_call = new getTTopListById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTopListById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTTopListById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTopListById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTopListById_args args = new getTTopListById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TTopList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTopListById();
      }
    }

    public void getTTopListsByIds(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTTopListsByIds_call method_call = new getTTopListsByIds_call(ids, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTTopListsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private com.lesports.api.common.CallerParam caller;
      public getTTopListsByIds_call(List<Long> ids, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTTopListsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTTopListsByIds_args args = new getTTopListsByIds_args();
        args.setIds(ids);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TTopList> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTTopListsByIds();
      }
    }

    public void getSeasonTopListIds(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSeasonTopListIds_call method_call = new getSeasonTopListIds_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSeasonTopListIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getSeasonTopListIds_call(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSeasonTopListIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSeasonTopListIds_args args = new getSeasonTopListIds_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSeasonTopListIds();
      }
    }

    public void getCompetitorTTopLists(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompetitorTTopLists_call method_call = new getCompetitorTTopLists_call(p, page, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompetitorTTopLists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p;
      private com.lesports.api.common.PageParam page;
      private com.lesports.api.common.CallerParam caller;
      public getCompetitorTTopLists_call(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p, com.lesports.api.common.PageParam page, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.page = page;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompetitorTTopLists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompetitorTTopLists_args args = new getCompetitorTTopLists_args();
        args.setP(p);
        args.setPage(page);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TTopList> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompetitorTTopLists();
      }
    }

    public void getTCompetitorSeasonStatsByIds(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCompetitorSeasonStatsByIds_call method_call = new getTCompetitorSeasonStatsByIds_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCompetitorSeasonStatsByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      public getTCompetitorSeasonStatsByIds_call(List<Long> ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCompetitorSeasonStatsByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCompetitorSeasonStatsByIds_args args = new getTCompetitorSeasonStatsByIds_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCompetitorSeasonStatsByIds();
      }
    }

    public void getCompetitorSeasonStatIds(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCompetitorSeasonStatIds_call method_call = new getCompetitorSeasonStatIds_call(p, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCompetitorSeasonStatIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p;
      public getCompetitorSeasonStatIds_call(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCompetitorSeasonStatIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCompetitorSeasonStatIds_args args = new getCompetitorSeasonStatIds_args();
        args.setP(p);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCompetitorSeasonStatIds();
      }
    }

    public void getTMatchReviewById(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTMatchReviewById_call method_call = new getTMatchReviewById_call(id, caller, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTMatchReviewById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private com.lesports.api.common.CallerParam caller;
      public getTMatchReviewById_call(long id, com.lesports.api.common.CallerParam caller, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.caller = caller;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTMatchReviewById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTMatchReviewById_args args = new getTMatchReviewById_args();
        args.setId(id);
        args.setCaller(caller);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.sbd.api.dto.TMatchReview getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTMatchReviewById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getTPlayerById", new getTPlayerById());
      processMap.put("getTPlayersByIds", new getTPlayersByIds());
      processMap.put("getPlayerIds4SimpleSearch", new getPlayerIds4SimpleSearch());
      processMap.put("getPlayerCareerStat", new getPlayerCareerStat());
      processMap.put("getTTeamById", new getTTeamById());
      processMap.put("getTTeamByCampId", new getTTeamByCampId());
      processMap.put("getTTeamsByIds", new getTTeamsByIds());
      processMap.put("getTeamIds4SimpleSearch", new getTeamIds4SimpleSearch());
      processMap.put("getTeamIdsOfSeason", new getTeamIdsOfSeason());
      processMap.put("getTeamIdsOfCompetition", new getTeamIdsOfCompetition());
      processMap.put("getTTeamSeasonById", new getTTeamSeasonById());
      processMap.put("getTTeamSeasonsByIds", new getTTeamSeasonsByIds());
      processMap.put("getTeamSeasonIds", new getTeamSeasonIds());
      processMap.put("getTDetailMatchById", new getTDetailMatchById());
      processMap.put("getTMatchById", new getTMatchById());
      processMap.put("getTMatchesByIds", new getTMatchesByIds());
      processMap.put("getMatchesByCompetitorId", new getMatchesByCompetitorId());
      processMap.put("syncZhangyuGames", new syncZhangyuGames());
      processMap.put("getTDetailMatchesByPid", new getTDetailMatchesByPid());
      processMap.put("getTDetailMatches", new getTDetailMatches());
      processMap.put("getMatchIdsByCidAndMetaEntryId", new getMatchIdsByCidAndMetaEntryId());
      processMap.put("getTMatchActionById", new getTMatchActionById());
      processMap.put("getTMatchActionsByIds", new getTMatchActionsByIds());
      processMap.put("getMatchActionsOfMatch", new getMatchActionsOfMatch());
      processMap.put("getTMatchStatsById", new getTMatchStatsById());
      processMap.put("getTCompetitionById", new getTCompetitionById());
      processMap.put("getTCompetitionByIds", new getTCompetitionByIds());
      processMap.put("getTCompetitonIds4SimpleSearch", new getTCompetitonIds4SimpleSearch());
      processMap.put("getTCompetitionByCode", new getTCompetitionByCode());
      processMap.put("getTCompetitionSeasonById", new getTCompetitionSeasonById());
      processMap.put("getTCompetitionSeasonsByIds", new getTCompetitionSeasonsByIds());
      processMap.put("getSeasonIdsOfCompetition", new getSeasonIdsOfCompetition());
      processMap.put("getLatestTCompetitionSeasonsByCid", new getLatestTCompetitionSeasonsByCid());
      processMap.put("getTCompetitionSeasonByCidAndSeason", new getTCompetitionSeasonByCidAndSeason());
      processMap.put("getTTopListById", new getTTopListById());
      processMap.put("getTTopListsByIds", new getTTopListsByIds());
      processMap.put("getSeasonTopListIds", new getSeasonTopListIds());
      processMap.put("getCompetitorTTopLists", new getCompetitorTTopLists());
      processMap.put("getTCompetitorSeasonStatsByIds", new getTCompetitorSeasonStatsByIds());
      processMap.put("getCompetitorSeasonStatIds", new getCompetitorSeasonStatIds());
      processMap.put("getTMatchReviewById", new getTMatchReviewById());
      return processMap;
    }

    public static class getTPlayerById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTPlayerById_args> {
      public getTPlayerById() {
        super("getTPlayerById");
      }

      public getTPlayerById_args getEmptyArgsInstance() {
        return new getTPlayerById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTPlayerById_result getResult(I iface, getTPlayerById_args args) throws org.apache.thrift.TException {
        getTPlayerById_result result = new getTPlayerById_result();
        result.success = iface.getTPlayerById(args.id, args.caller);
        return result;
      }
    }

    public static class getTPlayersByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTPlayersByIds_args> {
      public getTPlayersByIds() {
        super("getTPlayersByIds");
      }

      public getTPlayersByIds_args getEmptyArgsInstance() {
        return new getTPlayersByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTPlayersByIds_result getResult(I iface, getTPlayersByIds_args args) throws org.apache.thrift.TException {
        getTPlayersByIds_result result = new getTPlayersByIds_result();
        result.success = iface.getTPlayersByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getPlayerIds4SimpleSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlayerIds4SimpleSearch_args> {
      public getPlayerIds4SimpleSearch() {
        super("getPlayerIds4SimpleSearch");
      }

      public getPlayerIds4SimpleSearch_args getEmptyArgsInstance() {
        return new getPlayerIds4SimpleSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlayerIds4SimpleSearch_result getResult(I iface, getPlayerIds4SimpleSearch_args args) throws org.apache.thrift.TException {
        getPlayerIds4SimpleSearch_result result = new getPlayerIds4SimpleSearch_result();
        result.success = iface.getPlayerIds4SimpleSearch(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getPlayerCareerStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPlayerCareerStat_args> {
      public getPlayerCareerStat() {
        super("getPlayerCareerStat");
      }

      public getPlayerCareerStat_args getEmptyArgsInstance() {
        return new getPlayerCareerStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPlayerCareerStat_result getResult(I iface, getPlayerCareerStat_args args) throws org.apache.thrift.TException {
        getPlayerCareerStat_result result = new getPlayerCareerStat_result();
        result.success = iface.getPlayerCareerStat(args.p, args.caller);
        return result;
      }
    }

    public static class getTTeamById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTeamById_args> {
      public getTTeamById() {
        super("getTTeamById");
      }

      public getTTeamById_args getEmptyArgsInstance() {
        return new getTTeamById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTeamById_result getResult(I iface, getTTeamById_args args) throws org.apache.thrift.TException {
        getTTeamById_result result = new getTTeamById_result();
        result.success = iface.getTTeamById(args.id, args.caller);
        return result;
      }
    }

    public static class getTTeamByCampId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTeamByCampId_args> {
      public getTTeamByCampId() {
        super("getTTeamByCampId");
      }

      public getTTeamByCampId_args getEmptyArgsInstance() {
        return new getTTeamByCampId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTeamByCampId_result getResult(I iface, getTTeamByCampId_args args) throws org.apache.thrift.TException {
        getTTeamByCampId_result result = new getTTeamByCampId_result();
        result.success = iface.getTTeamByCampId(args.id, args.caller);
        return result;
      }
    }

    public static class getTTeamsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTeamsByIds_args> {
      public getTTeamsByIds() {
        super("getTTeamsByIds");
      }

      public getTTeamsByIds_args getEmptyArgsInstance() {
        return new getTTeamsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTeamsByIds_result getResult(I iface, getTTeamsByIds_args args) throws org.apache.thrift.TException {
        getTTeamsByIds_result result = new getTTeamsByIds_result();
        result.success = iface.getTTeamsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTeamIds4SimpleSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeamIds4SimpleSearch_args> {
      public getTeamIds4SimpleSearch() {
        super("getTeamIds4SimpleSearch");
      }

      public getTeamIds4SimpleSearch_args getEmptyArgsInstance() {
        return new getTeamIds4SimpleSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeamIds4SimpleSearch_result getResult(I iface, getTeamIds4SimpleSearch_args args) throws org.apache.thrift.TException {
        getTeamIds4SimpleSearch_result result = new getTeamIds4SimpleSearch_result();
        result.success = iface.getTeamIds4SimpleSearch(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTeamIdsOfSeason<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeamIdsOfSeason_args> {
      public getTeamIdsOfSeason() {
        super("getTeamIdsOfSeason");
      }

      public getTeamIdsOfSeason_args getEmptyArgsInstance() {
        return new getTeamIdsOfSeason_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeamIdsOfSeason_result getResult(I iface, getTeamIdsOfSeason_args args) throws org.apache.thrift.TException {
        getTeamIdsOfSeason_result result = new getTeamIdsOfSeason_result();
        result.success = iface.getTeamIdsOfSeason(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTeamIdsOfCompetition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeamIdsOfCompetition_args> {
      public getTeamIdsOfCompetition() {
        super("getTeamIdsOfCompetition");
      }

      public getTeamIdsOfCompetition_args getEmptyArgsInstance() {
        return new getTeamIdsOfCompetition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeamIdsOfCompetition_result getResult(I iface, getTeamIdsOfCompetition_args args) throws org.apache.thrift.TException {
        getTeamIdsOfCompetition_result result = new getTeamIdsOfCompetition_result();
        result.success = iface.getTeamIdsOfCompetition(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTTeamSeasonById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTeamSeasonById_args> {
      public getTTeamSeasonById() {
        super("getTTeamSeasonById");
      }

      public getTTeamSeasonById_args getEmptyArgsInstance() {
        return new getTTeamSeasonById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTeamSeasonById_result getResult(I iface, getTTeamSeasonById_args args) throws org.apache.thrift.TException {
        getTTeamSeasonById_result result = new getTTeamSeasonById_result();
        result.success = iface.getTTeamSeasonById(args.id, args.caller);
        return result;
      }
    }

    public static class getTTeamSeasonsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTeamSeasonsByIds_args> {
      public getTTeamSeasonsByIds() {
        super("getTTeamSeasonsByIds");
      }

      public getTTeamSeasonsByIds_args getEmptyArgsInstance() {
        return new getTTeamSeasonsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTeamSeasonsByIds_result getResult(I iface, getTTeamSeasonsByIds_args args) throws org.apache.thrift.TException {
        getTTeamSeasonsByIds_result result = new getTTeamSeasonsByIds_result();
        result.success = iface.getTTeamSeasonsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTeamSeasonIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTeamSeasonIds_args> {
      public getTeamSeasonIds() {
        super("getTeamSeasonIds");
      }

      public getTeamSeasonIds_args getEmptyArgsInstance() {
        return new getTeamSeasonIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTeamSeasonIds_result getResult(I iface, getTeamSeasonIds_args args) throws org.apache.thrift.TException {
        getTeamSeasonIds_result result = new getTeamSeasonIds_result();
        result.success = iface.getTeamSeasonIds(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTDetailMatchById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTDetailMatchById_args> {
      public getTDetailMatchById() {
        super("getTDetailMatchById");
      }

      public getTDetailMatchById_args getEmptyArgsInstance() {
        return new getTDetailMatchById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTDetailMatchById_result getResult(I iface, getTDetailMatchById_args args) throws org.apache.thrift.TException {
        getTDetailMatchById_result result = new getTDetailMatchById_result();
        result.success = iface.getTDetailMatchById(args.id, args.caller);
        return result;
      }
    }

    public static class getTMatchById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTMatchById_args> {
      public getTMatchById() {
        super("getTMatchById");
      }

      public getTMatchById_args getEmptyArgsInstance() {
        return new getTMatchById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTMatchById_result getResult(I iface, getTMatchById_args args) throws org.apache.thrift.TException {
        getTMatchById_result result = new getTMatchById_result();
        result.success = iface.getTMatchById(args.id, args.caller);
        return result;
      }
    }

    public static class getTMatchesByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTMatchesByIds_args> {
      public getTMatchesByIds() {
        super("getTMatchesByIds");
      }

      public getTMatchesByIds_args getEmptyArgsInstance() {
        return new getTMatchesByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTMatchesByIds_result getResult(I iface, getTMatchesByIds_args args) throws org.apache.thrift.TException {
        getTMatchesByIds_result result = new getTMatchesByIds_result();
        result.success = iface.getTMatchesByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getMatchesByCompetitorId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchesByCompetitorId_args> {
      public getMatchesByCompetitorId() {
        super("getMatchesByCompetitorId");
      }

      public getMatchesByCompetitorId_args getEmptyArgsInstance() {
        return new getMatchesByCompetitorId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchesByCompetitorId_result getResult(I iface, getMatchesByCompetitorId_args args) throws org.apache.thrift.TException {
        getMatchesByCompetitorId_result result = new getMatchesByCompetitorId_result();
        result.success = iface.getMatchesByCompetitorId(args.competitorId, args.csid, args.pageParam, args.caller);
        return result;
      }
    }

    public static class syncZhangyuGames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, syncZhangyuGames_args> {
      public syncZhangyuGames() {
        super("syncZhangyuGames");
      }

      public syncZhangyuGames_args getEmptyArgsInstance() {
        return new syncZhangyuGames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public syncZhangyuGames_result getResult(I iface, syncZhangyuGames_args args) throws org.apache.thrift.TException {
        syncZhangyuGames_result result = new syncZhangyuGames_result();
        result.success = iface.syncZhangyuGames();
        return result;
      }
    }

    public static class getTDetailMatchesByPid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTDetailMatchesByPid_args> {
      public getTDetailMatchesByPid() {
        super("getTDetailMatchesByPid");
      }

      public getTDetailMatchesByPid_args getEmptyArgsInstance() {
        return new getTDetailMatchesByPid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTDetailMatchesByPid_result getResult(I iface, getTDetailMatchesByPid_args args) throws org.apache.thrift.TException {
        getTDetailMatchesByPid_result result = new getTDetailMatchesByPid_result();
        result.success = iface.getTDetailMatchesByPid(args.pid, args.status, args.pageParam, args.caller);
        return result;
      }
    }

    public static class getTDetailMatches<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTDetailMatches_args> {
      public getTDetailMatches() {
        super("getTDetailMatches");
      }

      public getTDetailMatches_args getEmptyArgsInstance() {
        return new getTDetailMatches_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTDetailMatches_result getResult(I iface, getTDetailMatches_args args) throws org.apache.thrift.TException {
        getTDetailMatches_result result = new getTDetailMatches_result();
        result.success = iface.getTDetailMatches(args.p, args.pageParam, args.caller);
        return result;
      }
    }

    public static class getMatchIdsByCidAndMetaEntryId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchIdsByCidAndMetaEntryId_args> {
      public getMatchIdsByCidAndMetaEntryId() {
        super("getMatchIdsByCidAndMetaEntryId");
      }

      public getMatchIdsByCidAndMetaEntryId_args getEmptyArgsInstance() {
        return new getMatchIdsByCidAndMetaEntryId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchIdsByCidAndMetaEntryId_result getResult(I iface, getMatchIdsByCidAndMetaEntryId_args args) throws org.apache.thrift.TException {
        getMatchIdsByCidAndMetaEntryId_result result = new getMatchIdsByCidAndMetaEntryId_result();
        result.success = iface.getMatchIdsByCidAndMetaEntryId(args.cid, args.csid, args.entryId, args.pageParam);
        return result;
      }
    }

    public static class getTMatchActionById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTMatchActionById_args> {
      public getTMatchActionById() {
        super("getTMatchActionById");
      }

      public getTMatchActionById_args getEmptyArgsInstance() {
        return new getTMatchActionById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTMatchActionById_result getResult(I iface, getTMatchActionById_args args) throws org.apache.thrift.TException {
        getTMatchActionById_result result = new getTMatchActionById_result();
        result.success = iface.getTMatchActionById(args.id, args.caller);
        return result;
      }
    }

    public static class getTMatchActionsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTMatchActionsByIds_args> {
      public getTMatchActionsByIds() {
        super("getTMatchActionsByIds");
      }

      public getTMatchActionsByIds_args getEmptyArgsInstance() {
        return new getTMatchActionsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTMatchActionsByIds_result getResult(I iface, getTMatchActionsByIds_args args) throws org.apache.thrift.TException {
        getTMatchActionsByIds_result result = new getTMatchActionsByIds_result();
        result.success = iface.getTMatchActionsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getMatchActionsOfMatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMatchActionsOfMatch_args> {
      public getMatchActionsOfMatch() {
        super("getMatchActionsOfMatch");
      }

      public getMatchActionsOfMatch_args getEmptyArgsInstance() {
        return new getMatchActionsOfMatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMatchActionsOfMatch_result getResult(I iface, getMatchActionsOfMatch_args args) throws org.apache.thrift.TException {
        getMatchActionsOfMatch_result result = new getMatchActionsOfMatch_result();
        result.success = iface.getMatchActionsOfMatch(args.p, args.caller);
        return result;
      }
    }

    public static class getTMatchStatsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTMatchStatsById_args> {
      public getTMatchStatsById() {
        super("getTMatchStatsById");
      }

      public getTMatchStatsById_args getEmptyArgsInstance() {
        return new getTMatchStatsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTMatchStatsById_result getResult(I iface, getTMatchStatsById_args args) throws org.apache.thrift.TException {
        getTMatchStatsById_result result = new getTMatchStatsById_result();
        result.success = iface.getTMatchStatsById(args.id, args.caller);
        return result;
      }
    }

    public static class getTCompetitionById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitionById_args> {
      public getTCompetitionById() {
        super("getTCompetitionById");
      }

      public getTCompetitionById_args getEmptyArgsInstance() {
        return new getTCompetitionById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitionById_result getResult(I iface, getTCompetitionById_args args) throws org.apache.thrift.TException {
        getTCompetitionById_result result = new getTCompetitionById_result();
        result.success = iface.getTCompetitionById(args.id, args.caller);
        return result;
      }
    }

    public static class getTCompetitionByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitionByIds_args> {
      public getTCompetitionByIds() {
        super("getTCompetitionByIds");
      }

      public getTCompetitionByIds_args getEmptyArgsInstance() {
        return new getTCompetitionByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitionByIds_result getResult(I iface, getTCompetitionByIds_args args) throws org.apache.thrift.TException {
        getTCompetitionByIds_result result = new getTCompetitionByIds_result();
        result.success = iface.getTCompetitionByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getTCompetitonIds4SimpleSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitonIds4SimpleSearch_args> {
      public getTCompetitonIds4SimpleSearch() {
        super("getTCompetitonIds4SimpleSearch");
      }

      public getTCompetitonIds4SimpleSearch_args getEmptyArgsInstance() {
        return new getTCompetitonIds4SimpleSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitonIds4SimpleSearch_result getResult(I iface, getTCompetitonIds4SimpleSearch_args args) throws org.apache.thrift.TException {
        getTCompetitonIds4SimpleSearch_result result = new getTCompetitonIds4SimpleSearch_result();
        result.success = iface.getTCompetitonIds4SimpleSearch(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTCompetitionByCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitionByCode_args> {
      public getTCompetitionByCode() {
        super("getTCompetitionByCode");
      }

      public getTCompetitionByCode_args getEmptyArgsInstance() {
        return new getTCompetitionByCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitionByCode_result getResult(I iface, getTCompetitionByCode_args args) throws org.apache.thrift.TException {
        getTCompetitionByCode_result result = new getTCompetitionByCode_result();
        result.success = iface.getTCompetitionByCode(args.code, args.caller);
        return result;
      }
    }

    public static class getTCompetitionSeasonById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitionSeasonById_args> {
      public getTCompetitionSeasonById() {
        super("getTCompetitionSeasonById");
      }

      public getTCompetitionSeasonById_args getEmptyArgsInstance() {
        return new getTCompetitionSeasonById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitionSeasonById_result getResult(I iface, getTCompetitionSeasonById_args args) throws org.apache.thrift.TException {
        getTCompetitionSeasonById_result result = new getTCompetitionSeasonById_result();
        result.success = iface.getTCompetitionSeasonById(args.id, args.caller);
        return result;
      }
    }

    public static class getTCompetitionSeasonsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitionSeasonsByIds_args> {
      public getTCompetitionSeasonsByIds() {
        super("getTCompetitionSeasonsByIds");
      }

      public getTCompetitionSeasonsByIds_args getEmptyArgsInstance() {
        return new getTCompetitionSeasonsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitionSeasonsByIds_result getResult(I iface, getTCompetitionSeasonsByIds_args args) throws org.apache.thrift.TException {
        getTCompetitionSeasonsByIds_result result = new getTCompetitionSeasonsByIds_result();
        result.success = iface.getTCompetitionSeasonsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getSeasonIdsOfCompetition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSeasonIdsOfCompetition_args> {
      public getSeasonIdsOfCompetition() {
        super("getSeasonIdsOfCompetition");
      }

      public getSeasonIdsOfCompetition_args getEmptyArgsInstance() {
        return new getSeasonIdsOfCompetition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSeasonIdsOfCompetition_result getResult(I iface, getSeasonIdsOfCompetition_args args) throws org.apache.thrift.TException {
        getSeasonIdsOfCompetition_result result = new getSeasonIdsOfCompetition_result();
        result.success = iface.getSeasonIdsOfCompetition(args.cid, args.caller);
        return result;
      }
    }

    public static class getLatestTCompetitionSeasonsByCid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestTCompetitionSeasonsByCid_args> {
      public getLatestTCompetitionSeasonsByCid() {
        super("getLatestTCompetitionSeasonsByCid");
      }

      public getLatestTCompetitionSeasonsByCid_args getEmptyArgsInstance() {
        return new getLatestTCompetitionSeasonsByCid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestTCompetitionSeasonsByCid_result getResult(I iface, getLatestTCompetitionSeasonsByCid_args args) throws org.apache.thrift.TException {
        getLatestTCompetitionSeasonsByCid_result result = new getLatestTCompetitionSeasonsByCid_result();
        result.success = iface.getLatestTCompetitionSeasonsByCid(args.cid, args.caller);
        return result;
      }
    }

    public static class getTCompetitionSeasonByCidAndSeason<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitionSeasonByCidAndSeason_args> {
      public getTCompetitionSeasonByCidAndSeason() {
        super("getTCompetitionSeasonByCidAndSeason");
      }

      public getTCompetitionSeasonByCidAndSeason_args getEmptyArgsInstance() {
        return new getTCompetitionSeasonByCidAndSeason_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitionSeasonByCidAndSeason_result getResult(I iface, getTCompetitionSeasonByCidAndSeason_args args) throws org.apache.thrift.TException {
        getTCompetitionSeasonByCidAndSeason_result result = new getTCompetitionSeasonByCidAndSeason_result();
        result.success = iface.getTCompetitionSeasonByCidAndSeason(args.cid, args.season, args.caller);
        return result;
      }
    }

    public static class getTTopListById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTopListById_args> {
      public getTTopListById() {
        super("getTTopListById");
      }

      public getTTopListById_args getEmptyArgsInstance() {
        return new getTTopListById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTopListById_result getResult(I iface, getTTopListById_args args) throws org.apache.thrift.TException {
        getTTopListById_result result = new getTTopListById_result();
        result.success = iface.getTTopListById(args.id, args.caller);
        return result;
      }
    }

    public static class getTTopListsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTTopListsByIds_args> {
      public getTTopListsByIds() {
        super("getTTopListsByIds");
      }

      public getTTopListsByIds_args getEmptyArgsInstance() {
        return new getTTopListsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTTopListsByIds_result getResult(I iface, getTTopListsByIds_args args) throws org.apache.thrift.TException {
        getTTopListsByIds_result result = new getTTopListsByIds_result();
        result.success = iface.getTTopListsByIds(args.ids, args.caller);
        return result;
      }
    }

    public static class getSeasonTopListIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSeasonTopListIds_args> {
      public getSeasonTopListIds() {
        super("getSeasonTopListIds");
      }

      public getSeasonTopListIds_args getEmptyArgsInstance() {
        return new getSeasonTopListIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSeasonTopListIds_result getResult(I iface, getSeasonTopListIds_args args) throws org.apache.thrift.TException {
        getSeasonTopListIds_result result = new getSeasonTopListIds_result();
        result.success = iface.getSeasonTopListIds(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getCompetitorTTopLists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompetitorTTopLists_args> {
      public getCompetitorTTopLists() {
        super("getCompetitorTTopLists");
      }

      public getCompetitorTTopLists_args getEmptyArgsInstance() {
        return new getCompetitorTTopLists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompetitorTTopLists_result getResult(I iface, getCompetitorTTopLists_args args) throws org.apache.thrift.TException {
        getCompetitorTTopLists_result result = new getCompetitorTTopLists_result();
        result.success = iface.getCompetitorTTopLists(args.p, args.page, args.caller);
        return result;
      }
    }

    public static class getTCompetitorSeasonStatsByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCompetitorSeasonStatsByIds_args> {
      public getTCompetitorSeasonStatsByIds() {
        super("getTCompetitorSeasonStatsByIds");
      }

      public getTCompetitorSeasonStatsByIds_args getEmptyArgsInstance() {
        return new getTCompetitorSeasonStatsByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTCompetitorSeasonStatsByIds_result getResult(I iface, getTCompetitorSeasonStatsByIds_args args) throws org.apache.thrift.TException {
        getTCompetitorSeasonStatsByIds_result result = new getTCompetitorSeasonStatsByIds_result();
        result.success = iface.getTCompetitorSeasonStatsByIds(args.ids);
        return result;
      }
    }

    public static class getCompetitorSeasonStatIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCompetitorSeasonStatIds_args> {
      public getCompetitorSeasonStatIds() {
        super("getCompetitorSeasonStatIds");
      }

      public getCompetitorSeasonStatIds_args getEmptyArgsInstance() {
        return new getCompetitorSeasonStatIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCompetitorSeasonStatIds_result getResult(I iface, getCompetitorSeasonStatIds_args args) throws org.apache.thrift.TException {
        getCompetitorSeasonStatIds_result result = new getCompetitorSeasonStatIds_result();
        result.success = iface.getCompetitorSeasonStatIds(args.p);
        return result;
      }
    }

    public static class getTMatchReviewById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTMatchReviewById_args> {
      public getTMatchReviewById() {
        super("getTMatchReviewById");
      }

      public getTMatchReviewById_args getEmptyArgsInstance() {
        return new getTMatchReviewById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTMatchReviewById_result getResult(I iface, getTMatchReviewById_args args) throws org.apache.thrift.TException {
        getTMatchReviewById_result result = new getTMatchReviewById_result();
        result.success = iface.getTMatchReviewById(args.id, args.caller);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getTPlayerById", new getTPlayerById());
      processMap.put("getTPlayersByIds", new getTPlayersByIds());
      processMap.put("getPlayerIds4SimpleSearch", new getPlayerIds4SimpleSearch());
      processMap.put("getPlayerCareerStat", new getPlayerCareerStat());
      processMap.put("getTTeamById", new getTTeamById());
      processMap.put("getTTeamByCampId", new getTTeamByCampId());
      processMap.put("getTTeamsByIds", new getTTeamsByIds());
      processMap.put("getTeamIds4SimpleSearch", new getTeamIds4SimpleSearch());
      processMap.put("getTeamIdsOfSeason", new getTeamIdsOfSeason());
      processMap.put("getTeamIdsOfCompetition", new getTeamIdsOfCompetition());
      processMap.put("getTTeamSeasonById", new getTTeamSeasonById());
      processMap.put("getTTeamSeasonsByIds", new getTTeamSeasonsByIds());
      processMap.put("getTeamSeasonIds", new getTeamSeasonIds());
      processMap.put("getTDetailMatchById", new getTDetailMatchById());
      processMap.put("getTMatchById", new getTMatchById());
      processMap.put("getTMatchesByIds", new getTMatchesByIds());
      processMap.put("getMatchesByCompetitorId", new getMatchesByCompetitorId());
      processMap.put("syncZhangyuGames", new syncZhangyuGames());
      processMap.put("getTDetailMatchesByPid", new getTDetailMatchesByPid());
      processMap.put("getTDetailMatches", new getTDetailMatches());
      processMap.put("getMatchIdsByCidAndMetaEntryId", new getMatchIdsByCidAndMetaEntryId());
      processMap.put("getTMatchActionById", new getTMatchActionById());
      processMap.put("getTMatchActionsByIds", new getTMatchActionsByIds());
      processMap.put("getMatchActionsOfMatch", new getMatchActionsOfMatch());
      processMap.put("getTMatchStatsById", new getTMatchStatsById());
      processMap.put("getTCompetitionById", new getTCompetitionById());
      processMap.put("getTCompetitionByIds", new getTCompetitionByIds());
      processMap.put("getTCompetitonIds4SimpleSearch", new getTCompetitonIds4SimpleSearch());
      processMap.put("getTCompetitionByCode", new getTCompetitionByCode());
      processMap.put("getTCompetitionSeasonById", new getTCompetitionSeasonById());
      processMap.put("getTCompetitionSeasonsByIds", new getTCompetitionSeasonsByIds());
      processMap.put("getSeasonIdsOfCompetition", new getSeasonIdsOfCompetition());
      processMap.put("getLatestTCompetitionSeasonsByCid", new getLatestTCompetitionSeasonsByCid());
      processMap.put("getTCompetitionSeasonByCidAndSeason", new getTCompetitionSeasonByCidAndSeason());
      processMap.put("getTTopListById", new getTTopListById());
      processMap.put("getTTopListsByIds", new getTTopListsByIds());
      processMap.put("getSeasonTopListIds", new getSeasonTopListIds());
      processMap.put("getCompetitorTTopLists", new getCompetitorTTopLists());
      processMap.put("getTCompetitorSeasonStatsByIds", new getTCompetitorSeasonStatsByIds());
      processMap.put("getCompetitorSeasonStatIds", new getCompetitorSeasonStatIds());
      processMap.put("getTMatchReviewById", new getTMatchReviewById());
      return processMap;
    }

    public static class getTPlayerById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTPlayerById_args, com.lesports.qmt.sbd.api.dto.TPlayer> {
      public getTPlayerById() {
        super("getTPlayerById");
      }

      public getTPlayerById_args getEmptyArgsInstance() {
        return new getTPlayerById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TPlayer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TPlayer>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TPlayer o) {
            getTPlayerById_result result = new getTPlayerById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTPlayerById_result result = new getTPlayerById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTPlayerById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TPlayer> resultHandler) throws TException {
        iface.getTPlayerById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTPlayersByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTPlayersByIds_args, List<com.lesports.qmt.sbd.api.dto.TPlayer>> {
      public getTPlayersByIds() {
        super("getTPlayersByIds");
      }

      public getTPlayersByIds_args getEmptyArgsInstance() {
        return new getTPlayersByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TPlayer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TPlayer>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TPlayer> o) {
            getTPlayersByIds_result result = new getTPlayersByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTPlayersByIds_result result = new getTPlayersByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTPlayersByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TPlayer>> resultHandler) throws TException {
        iface.getTPlayersByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getPlayerIds4SimpleSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlayerIds4SimpleSearch_args, List<Long>> {
      public getPlayerIds4SimpleSearch() {
        super("getPlayerIds4SimpleSearch");
      }

      public getPlayerIds4SimpleSearch_args getEmptyArgsInstance() {
        return new getPlayerIds4SimpleSearch_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getPlayerIds4SimpleSearch_result result = new getPlayerIds4SimpleSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlayerIds4SimpleSearch_result result = new getPlayerIds4SimpleSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlayerIds4SimpleSearch_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getPlayerIds4SimpleSearch(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getPlayerCareerStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPlayerCareerStat_args, List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>> {
      public getPlayerCareerStat() {
        super("getPlayerCareerStat");
      }

      public getPlayerCareerStat_args getEmptyArgsInstance() {
        return new getPlayerCareerStat_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> o) {
            getPlayerCareerStat_result result = new getPlayerCareerStat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPlayerCareerStat_result result = new getPlayerCareerStat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPlayerCareerStat_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>> resultHandler) throws TException {
        iface.getPlayerCareerStat(args.p, args.caller,resultHandler);
      }
    }

    public static class getTTeamById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTeamById_args, com.lesports.qmt.sbd.api.dto.TTeam> {
      public getTTeamById() {
        super("getTTeamById");
      }

      public getTTeamById_args getEmptyArgsInstance() {
        return new getTTeamById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeam> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeam>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TTeam o) {
            getTTeamById_result result = new getTTeamById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTeamById_result result = new getTTeamById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTeamById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeam> resultHandler) throws TException {
        iface.getTTeamById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTTeamByCampId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTeamByCampId_args, com.lesports.qmt.sbd.api.dto.TTeam> {
      public getTTeamByCampId() {
        super("getTTeamByCampId");
      }

      public getTTeamByCampId_args getEmptyArgsInstance() {
        return new getTTeamByCampId_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeam> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeam>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TTeam o) {
            getTTeamByCampId_result result = new getTTeamByCampId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTeamByCampId_result result = new getTTeamByCampId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTeamByCampId_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeam> resultHandler) throws TException {
        iface.getTTeamByCampId(args.id, args.caller,resultHandler);
      }
    }

    public static class getTTeamsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTeamsByIds_args, List<com.lesports.qmt.sbd.api.dto.TTeam>> {
      public getTTeamsByIds() {
        super("getTTeamsByIds");
      }

      public getTTeamsByIds_args getEmptyArgsInstance() {
        return new getTTeamsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTeam>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTeam>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TTeam> o) {
            getTTeamsByIds_result result = new getTTeamsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTeamsByIds_result result = new getTTeamsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTeamsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTeam>> resultHandler) throws TException {
        iface.getTTeamsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTeamIds4SimpleSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeamIds4SimpleSearch_args, List<Long>> {
      public getTeamIds4SimpleSearch() {
        super("getTeamIds4SimpleSearch");
      }

      public getTeamIds4SimpleSearch_args getEmptyArgsInstance() {
        return new getTeamIds4SimpleSearch_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTeamIds4SimpleSearch_result result = new getTeamIds4SimpleSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTeamIds4SimpleSearch_result result = new getTeamIds4SimpleSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeamIds4SimpleSearch_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTeamIds4SimpleSearch(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTeamIdsOfSeason<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeamIdsOfSeason_args, List<Long>> {
      public getTeamIdsOfSeason() {
        super("getTeamIdsOfSeason");
      }

      public getTeamIdsOfSeason_args getEmptyArgsInstance() {
        return new getTeamIdsOfSeason_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTeamIdsOfSeason_result result = new getTeamIdsOfSeason_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTeamIdsOfSeason_result result = new getTeamIdsOfSeason_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeamIdsOfSeason_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTeamIdsOfSeason(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTeamIdsOfCompetition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeamIdsOfCompetition_args, List<Long>> {
      public getTeamIdsOfCompetition() {
        super("getTeamIdsOfCompetition");
      }

      public getTeamIdsOfCompetition_args getEmptyArgsInstance() {
        return new getTeamIdsOfCompetition_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTeamIdsOfCompetition_result result = new getTeamIdsOfCompetition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTeamIdsOfCompetition_result result = new getTeamIdsOfCompetition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeamIdsOfCompetition_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTeamIdsOfCompetition(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTTeamSeasonById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTeamSeasonById_args, com.lesports.qmt.sbd.api.dto.TTeamSeason> {
      public getTTeamSeasonById() {
        super("getTTeamSeasonById");
      }

      public getTTeamSeasonById_args getEmptyArgsInstance() {
        return new getTTeamSeasonById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeamSeason> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeamSeason>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TTeamSeason o) {
            getTTeamSeasonById_result result = new getTTeamSeasonById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTeamSeasonById_result result = new getTTeamSeasonById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTeamSeasonById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTeamSeason> resultHandler) throws TException {
        iface.getTTeamSeasonById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTTeamSeasonsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTeamSeasonsByIds_args, List<com.lesports.qmt.sbd.api.dto.TTeamSeason>> {
      public getTTeamSeasonsByIds() {
        super("getTTeamSeasonsByIds");
      }

      public getTTeamSeasonsByIds_args getEmptyArgsInstance() {
        return new getTTeamSeasonsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTeamSeason>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTeamSeason>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TTeamSeason> o) {
            getTTeamSeasonsByIds_result result = new getTTeamSeasonsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTeamSeasonsByIds_result result = new getTTeamSeasonsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTeamSeasonsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTeamSeason>> resultHandler) throws TException {
        iface.getTTeamSeasonsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTeamSeasonIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTeamSeasonIds_args, List<Long>> {
      public getTeamSeasonIds() {
        super("getTeamSeasonIds");
      }

      public getTeamSeasonIds_args getEmptyArgsInstance() {
        return new getTeamSeasonIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTeamSeasonIds_result result = new getTeamSeasonIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTeamSeasonIds_result result = new getTeamSeasonIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTeamSeasonIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTeamSeasonIds(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTDetailMatchById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTDetailMatchById_args, com.lesports.qmt.sbd.api.dto.TDetailMatch> {
      public getTDetailMatchById() {
        super("getTDetailMatchById");
      }

      public getTDetailMatchById_args getEmptyArgsInstance() {
        return new getTDetailMatchById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TDetailMatch> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TDetailMatch>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TDetailMatch o) {
            getTDetailMatchById_result result = new getTDetailMatchById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTDetailMatchById_result result = new getTDetailMatchById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTDetailMatchById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TDetailMatch> resultHandler) throws TException {
        iface.getTDetailMatchById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTMatchById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTMatchById_args, com.lesports.qmt.sbd.api.dto.TMatch> {
      public getTMatchById() {
        super("getTMatchById");
      }

      public getTMatchById_args getEmptyArgsInstance() {
        return new getTMatchById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatch> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatch>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TMatch o) {
            getTMatchById_result result = new getTMatchById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTMatchById_result result = new getTMatchById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTMatchById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatch> resultHandler) throws TException {
        iface.getTMatchById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTMatchesByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTMatchesByIds_args, List<com.lesports.qmt.sbd.api.dto.TMatch>> {
      public getTMatchesByIds() {
        super("getTMatchesByIds");
      }

      public getTMatchesByIds_args getEmptyArgsInstance() {
        return new getTMatchesByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatch>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatch>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TMatch> o) {
            getTMatchesByIds_result result = new getTMatchesByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTMatchesByIds_result result = new getTMatchesByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTMatchesByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatch>> resultHandler) throws TException {
        iface.getTMatchesByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getMatchesByCompetitorId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchesByCompetitorId_args, List<com.lesports.qmt.sbd.api.dto.TMatch>> {
      public getMatchesByCompetitorId() {
        super("getMatchesByCompetitorId");
      }

      public getMatchesByCompetitorId_args getEmptyArgsInstance() {
        return new getMatchesByCompetitorId_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatch>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatch>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TMatch> o) {
            getMatchesByCompetitorId_result result = new getMatchesByCompetitorId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchesByCompetitorId_result result = new getMatchesByCompetitorId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchesByCompetitorId_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatch>> resultHandler) throws TException {
        iface.getMatchesByCompetitorId(args.competitorId, args.csid, args.pageParam, args.caller,resultHandler);
      }
    }

    public static class syncZhangyuGames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, syncZhangyuGames_args, Map<String,String>> {
      public syncZhangyuGames() {
        super("syncZhangyuGames");
      }

      public syncZhangyuGames_args getEmptyArgsInstance() {
        return new syncZhangyuGames_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            syncZhangyuGames_result result = new syncZhangyuGames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            syncZhangyuGames_result result = new syncZhangyuGames_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, syncZhangyuGames_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.syncZhangyuGames(resultHandler);
      }
    }

    public static class getTDetailMatchesByPid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTDetailMatchesByPid_args, List<com.lesports.qmt.sbd.api.dto.TDetailMatch>> {
      public getTDetailMatchesByPid() {
        super("getTDetailMatchesByPid");
      }

      public getTDetailMatchesByPid_args getEmptyArgsInstance() {
        return new getTDetailMatchesByPid_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TDetailMatch>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TDetailMatch>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TDetailMatch> o) {
            getTDetailMatchesByPid_result result = new getTDetailMatchesByPid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTDetailMatchesByPid_result result = new getTDetailMatchesByPid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTDetailMatchesByPid_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TDetailMatch>> resultHandler) throws TException {
        iface.getTDetailMatchesByPid(args.pid, args.status, args.pageParam, args.caller,resultHandler);
      }
    }

    public static class getTDetailMatches<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTDetailMatches_args, List<com.lesports.qmt.sbd.api.dto.TDetailMatch>> {
      public getTDetailMatches() {
        super("getTDetailMatches");
      }

      public getTDetailMatches_args getEmptyArgsInstance() {
        return new getTDetailMatches_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TDetailMatch>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TDetailMatch>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TDetailMatch> o) {
            getTDetailMatches_result result = new getTDetailMatches_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTDetailMatches_result result = new getTDetailMatches_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTDetailMatches_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TDetailMatch>> resultHandler) throws TException {
        iface.getTDetailMatches(args.p, args.pageParam, args.caller,resultHandler);
      }
    }

    public static class getMatchIdsByCidAndMetaEntryId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchIdsByCidAndMetaEntryId_args, List<Long>> {
      public getMatchIdsByCidAndMetaEntryId() {
        super("getMatchIdsByCidAndMetaEntryId");
      }

      public getMatchIdsByCidAndMetaEntryId_args getEmptyArgsInstance() {
        return new getMatchIdsByCidAndMetaEntryId_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getMatchIdsByCidAndMetaEntryId_result result = new getMatchIdsByCidAndMetaEntryId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchIdsByCidAndMetaEntryId_result result = new getMatchIdsByCidAndMetaEntryId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchIdsByCidAndMetaEntryId_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getMatchIdsByCidAndMetaEntryId(args.cid, args.csid, args.entryId, args.pageParam,resultHandler);
      }
    }

    public static class getTMatchActionById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTMatchActionById_args, com.lesports.qmt.sbd.api.dto.TMatchAction> {
      public getTMatchActionById() {
        super("getTMatchActionById");
      }

      public getTMatchActionById_args getEmptyArgsInstance() {
        return new getTMatchActionById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchAction> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchAction>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TMatchAction o) {
            getTMatchActionById_result result = new getTMatchActionById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTMatchActionById_result result = new getTMatchActionById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTMatchActionById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchAction> resultHandler) throws TException {
        iface.getTMatchActionById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTMatchActionsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTMatchActionsByIds_args, List<com.lesports.qmt.sbd.api.dto.TMatchAction>> {
      public getTMatchActionsByIds() {
        super("getTMatchActionsByIds");
      }

      public getTMatchActionsByIds_args getEmptyArgsInstance() {
        return new getTMatchActionsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatchAction>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatchAction>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TMatchAction> o) {
            getTMatchActionsByIds_result result = new getTMatchActionsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTMatchActionsByIds_result result = new getTMatchActionsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTMatchActionsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TMatchAction>> resultHandler) throws TException {
        iface.getTMatchActionsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getMatchActionsOfMatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMatchActionsOfMatch_args, List<Long>> {
      public getMatchActionsOfMatch() {
        super("getMatchActionsOfMatch");
      }

      public getMatchActionsOfMatch_args getEmptyArgsInstance() {
        return new getMatchActionsOfMatch_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getMatchActionsOfMatch_result result = new getMatchActionsOfMatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMatchActionsOfMatch_result result = new getMatchActionsOfMatch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMatchActionsOfMatch_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getMatchActionsOfMatch(args.p, args.caller,resultHandler);
      }
    }

    public static class getTMatchStatsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTMatchStatsById_args, com.lesports.qmt.sbd.api.dto.TMatchStats> {
      public getTMatchStatsById() {
        super("getTMatchStatsById");
      }

      public getTMatchStatsById_args getEmptyArgsInstance() {
        return new getTMatchStatsById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchStats> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchStats>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TMatchStats o) {
            getTMatchStatsById_result result = new getTMatchStatsById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTMatchStatsById_result result = new getTMatchStatsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTMatchStatsById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchStats> resultHandler) throws TException {
        iface.getTMatchStatsById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTCompetitionById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitionById_args, com.lesports.qmt.sbd.api.dto.TCompetition> {
      public getTCompetitionById() {
        super("getTCompetitionById");
      }

      public getTCompetitionById_args getEmptyArgsInstance() {
        return new getTCompetitionById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetition> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetition>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TCompetition o) {
            getTCompetitionById_result result = new getTCompetitionById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitionById_result result = new getTCompetitionById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitionById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetition> resultHandler) throws TException {
        iface.getTCompetitionById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTCompetitionByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitionByIds_args, List<com.lesports.qmt.sbd.api.dto.TCompetition>> {
      public getTCompetitionByIds() {
        super("getTCompetitionByIds");
      }

      public getTCompetitionByIds_args getEmptyArgsInstance() {
        return new getTCompetitionByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetition>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetition>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TCompetition> o) {
            getTCompetitionByIds_result result = new getTCompetitionByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitionByIds_result result = new getTCompetitionByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitionByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetition>> resultHandler) throws TException {
        iface.getTCompetitionByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getTCompetitonIds4SimpleSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitonIds4SimpleSearch_args, List<Long>> {
      public getTCompetitonIds4SimpleSearch() {
        super("getTCompetitonIds4SimpleSearch");
      }

      public getTCompetitonIds4SimpleSearch_args getEmptyArgsInstance() {
        return new getTCompetitonIds4SimpleSearch_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getTCompetitonIds4SimpleSearch_result result = new getTCompetitonIds4SimpleSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitonIds4SimpleSearch_result result = new getTCompetitonIds4SimpleSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitonIds4SimpleSearch_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getTCompetitonIds4SimpleSearch(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTCompetitionByCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitionByCode_args, com.lesports.qmt.sbd.api.dto.TCompetition> {
      public getTCompetitionByCode() {
        super("getTCompetitionByCode");
      }

      public getTCompetitionByCode_args getEmptyArgsInstance() {
        return new getTCompetitionByCode_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetition> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetition>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TCompetition o) {
            getTCompetitionByCode_result result = new getTCompetitionByCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitionByCode_result result = new getTCompetitionByCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitionByCode_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetition> resultHandler) throws TException {
        iface.getTCompetitionByCode(args.code, args.caller,resultHandler);
      }
    }

    public static class getTCompetitionSeasonById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitionSeasonById_args, com.lesports.qmt.sbd.api.dto.TCompetitionSeason> {
      public getTCompetitionSeasonById() {
        super("getTCompetitionSeasonById");
      }

      public getTCompetitionSeasonById_args getEmptyArgsInstance() {
        return new getTCompetitionSeasonById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TCompetitionSeason o) {
            getTCompetitionSeasonById_result result = new getTCompetitionSeasonById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitionSeasonById_result result = new getTCompetitionSeasonById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitionSeasonById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> resultHandler) throws TException {
        iface.getTCompetitionSeasonById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTCompetitionSeasonsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitionSeasonsByIds_args, List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>> {
      public getTCompetitionSeasonsByIds() {
        super("getTCompetitionSeasonsByIds");
      }

      public getTCompetitionSeasonsByIds_args getEmptyArgsInstance() {
        return new getTCompetitionSeasonsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> o) {
            getTCompetitionSeasonsByIds_result result = new getTCompetitionSeasonsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitionSeasonsByIds_result result = new getTCompetitionSeasonsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitionSeasonsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>> resultHandler) throws TException {
        iface.getTCompetitionSeasonsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getSeasonIdsOfCompetition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSeasonIdsOfCompetition_args, List<Long>> {
      public getSeasonIdsOfCompetition() {
        super("getSeasonIdsOfCompetition");
      }

      public getSeasonIdsOfCompetition_args getEmptyArgsInstance() {
        return new getSeasonIdsOfCompetition_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getSeasonIdsOfCompetition_result result = new getSeasonIdsOfCompetition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSeasonIdsOfCompetition_result result = new getSeasonIdsOfCompetition_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSeasonIdsOfCompetition_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getSeasonIdsOfCompetition(args.cid, args.caller,resultHandler);
      }
    }

    public static class getLatestTCompetitionSeasonsByCid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestTCompetitionSeasonsByCid_args, com.lesports.qmt.sbd.api.dto.TCompetitionSeason> {
      public getLatestTCompetitionSeasonsByCid() {
        super("getLatestTCompetitionSeasonsByCid");
      }

      public getLatestTCompetitionSeasonsByCid_args getEmptyArgsInstance() {
        return new getLatestTCompetitionSeasonsByCid_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TCompetitionSeason o) {
            getLatestTCompetitionSeasonsByCid_result result = new getLatestTCompetitionSeasonsByCid_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestTCompetitionSeasonsByCid_result result = new getLatestTCompetitionSeasonsByCid_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestTCompetitionSeasonsByCid_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> resultHandler) throws TException {
        iface.getLatestTCompetitionSeasonsByCid(args.cid, args.caller,resultHandler);
      }
    }

    public static class getTCompetitionSeasonByCidAndSeason<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitionSeasonByCidAndSeason_args, com.lesports.qmt.sbd.api.dto.TCompetitionSeason> {
      public getTCompetitionSeasonByCidAndSeason() {
        super("getTCompetitionSeasonByCidAndSeason");
      }

      public getTCompetitionSeasonByCidAndSeason_args getEmptyArgsInstance() {
        return new getTCompetitionSeasonByCidAndSeason_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TCompetitionSeason o) {
            getTCompetitionSeasonByCidAndSeason_result result = new getTCompetitionSeasonByCidAndSeason_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitionSeasonByCidAndSeason_result result = new getTCompetitionSeasonByCidAndSeason_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitionSeasonByCidAndSeason_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> resultHandler) throws TException {
        iface.getTCompetitionSeasonByCidAndSeason(args.cid, args.season, args.caller,resultHandler);
      }
    }

    public static class getTTopListById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTopListById_args, com.lesports.qmt.sbd.api.dto.TTopList> {
      public getTTopListById() {
        super("getTTopListById");
      }

      public getTTopListById_args getEmptyArgsInstance() {
        return new getTTopListById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTopList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTopList>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TTopList o) {
            getTTopListById_result result = new getTTopListById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTopListById_result result = new getTTopListById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTopListById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TTopList> resultHandler) throws TException {
        iface.getTTopListById(args.id, args.caller,resultHandler);
      }
    }

    public static class getTTopListsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTTopListsByIds_args, List<com.lesports.qmt.sbd.api.dto.TTopList>> {
      public getTTopListsByIds() {
        super("getTTopListsByIds");
      }

      public getTTopListsByIds_args getEmptyArgsInstance() {
        return new getTTopListsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTopList>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTopList>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TTopList> o) {
            getTTopListsByIds_result result = new getTTopListsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTTopListsByIds_result result = new getTTopListsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTTopListsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTopList>> resultHandler) throws TException {
        iface.getTTopListsByIds(args.ids, args.caller,resultHandler);
      }
    }

    public static class getSeasonTopListIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSeasonTopListIds_args, List<Long>> {
      public getSeasonTopListIds() {
        super("getSeasonTopListIds");
      }

      public getSeasonTopListIds_args getEmptyArgsInstance() {
        return new getSeasonTopListIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getSeasonTopListIds_result result = new getSeasonTopListIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSeasonTopListIds_result result = new getSeasonTopListIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSeasonTopListIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getSeasonTopListIds(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getCompetitorTTopLists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompetitorTTopLists_args, List<com.lesports.qmt.sbd.api.dto.TTopList>> {
      public getCompetitorTTopLists() {
        super("getCompetitorTTopLists");
      }

      public getCompetitorTTopLists_args getEmptyArgsInstance() {
        return new getCompetitorTTopLists_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTopList>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTopList>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TTopList> o) {
            getCompetitorTTopLists_result result = new getCompetitorTTopLists_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCompetitorTTopLists_result result = new getCompetitorTTopLists_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompetitorTTopLists_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TTopList>> resultHandler) throws TException {
        iface.getCompetitorTTopLists(args.p, args.page, args.caller,resultHandler);
      }
    }

    public static class getTCompetitorSeasonStatsByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCompetitorSeasonStatsByIds_args, List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>> {
      public getTCompetitorSeasonStatsByIds() {
        super("getTCompetitorSeasonStatsByIds");
      }

      public getTCompetitorSeasonStatsByIds_args getEmptyArgsInstance() {
        return new getTCompetitorSeasonStatsByIds_args();
      }

      public AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>>() { 
          public void onComplete(List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> o) {
            getTCompetitorSeasonStatsByIds_result result = new getTCompetitorSeasonStatsByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTCompetitorSeasonStatsByIds_result result = new getTCompetitorSeasonStatsByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTCompetitorSeasonStatsByIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>> resultHandler) throws TException {
        iface.getTCompetitorSeasonStatsByIds(args.ids,resultHandler);
      }
    }

    public static class getCompetitorSeasonStatIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCompetitorSeasonStatIds_args, List<Long>> {
      public getCompetitorSeasonStatIds() {
        super("getCompetitorSeasonStatIds");
      }

      public getCompetitorSeasonStatIds_args getEmptyArgsInstance() {
        return new getCompetitorSeasonStatIds_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getCompetitorSeasonStatIds_result result = new getCompetitorSeasonStatIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCompetitorSeasonStatIds_result result = new getCompetitorSeasonStatIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCompetitorSeasonStatIds_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getCompetitorSeasonStatIds(args.p,resultHandler);
      }
    }

    public static class getTMatchReviewById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTMatchReviewById_args, com.lesports.qmt.sbd.api.dto.TMatchReview> {
      public getTMatchReviewById() {
        super("getTMatchReviewById");
      }

      public getTMatchReviewById_args getEmptyArgsInstance() {
        return new getTMatchReviewById_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchReview> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchReview>() { 
          public void onComplete(com.lesports.qmt.sbd.api.dto.TMatchReview o) {
            getTMatchReviewById_result result = new getTMatchReviewById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTMatchReviewById_result result = new getTMatchReviewById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTMatchReviewById_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.sbd.api.dto.TMatchReview> resultHandler) throws TException {
        iface.getTMatchReviewById(args.id, args.caller,resultHandler);
      }
    }

  }

  public static class getTPlayerById_args implements org.apache.thrift.TBase<getTPlayerById_args, getTPlayerById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTPlayerById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTPlayerById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTPlayerById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTPlayerById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTPlayerById_args.class, metaDataMap);
    }

    public getTPlayerById_args() {
    }

    public getTPlayerById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTPlayerById_args(getTPlayerById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTPlayerById_args deepCopy() {
      return new getTPlayerById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTPlayerById_args)
        return this.equals((getTPlayerById_args)that);
      return false;
    }

    public boolean equals(getTPlayerById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTPlayerById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTPlayerById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTPlayerById_argsStandardSchemeFactory implements SchemeFactory {
      public getTPlayerById_argsStandardScheme getScheme() {
        return new getTPlayerById_argsStandardScheme();
      }
    }

    private static class getTPlayerById_argsStandardScheme extends StandardScheme<getTPlayerById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTPlayerById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTPlayerById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTPlayerById_argsTupleSchemeFactory implements SchemeFactory {
      public getTPlayerById_argsTupleScheme getScheme() {
        return new getTPlayerById_argsTupleScheme();
      }
    }

    private static class getTPlayerById_argsTupleScheme extends TupleScheme<getTPlayerById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTPlayerById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTPlayerById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTPlayerById_result implements org.apache.thrift.TBase<getTPlayerById_result, getTPlayerById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTPlayerById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTPlayerById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTPlayerById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTPlayerById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TPlayer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TPlayer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTPlayerById_result.class, metaDataMap);
    }

    public getTPlayerById_result() {
    }

    public getTPlayerById_result(
      com.lesports.qmt.sbd.api.dto.TPlayer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTPlayerById_result(getTPlayerById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TPlayer(other.success);
      }
    }

    public getTPlayerById_result deepCopy() {
      return new getTPlayerById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TPlayer getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TPlayer success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TPlayer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTPlayerById_result)
        return this.equals((getTPlayerById_result)that);
      return false;
    }

    public boolean equals(getTPlayerById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTPlayerById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTPlayerById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTPlayerById_resultStandardSchemeFactory implements SchemeFactory {
      public getTPlayerById_resultStandardScheme getScheme() {
        return new getTPlayerById_resultStandardScheme();
      }
    }

    private static class getTPlayerById_resultStandardScheme extends StandardScheme<getTPlayerById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTPlayerById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TPlayer();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTPlayerById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTPlayerById_resultTupleSchemeFactory implements SchemeFactory {
      public getTPlayerById_resultTupleScheme getScheme() {
        return new getTPlayerById_resultTupleScheme();
      }
    }

    private static class getTPlayerById_resultTupleScheme extends TupleScheme<getTPlayerById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTPlayerById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTPlayerById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TPlayer();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTPlayersByIds_args implements org.apache.thrift.TBase<getTPlayersByIds_args, getTPlayersByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTPlayersByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTPlayersByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTPlayersByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTPlayersByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTPlayersByIds_args.class, metaDataMap);
    }

    public getTPlayersByIds_args() {
    }

    public getTPlayersByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTPlayersByIds_args(getTPlayersByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTPlayersByIds_args deepCopy() {
      return new getTPlayersByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTPlayersByIds_args)
        return this.equals((getTPlayersByIds_args)that);
      return false;
    }

    public boolean equals(getTPlayersByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTPlayersByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTPlayersByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTPlayersByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTPlayersByIds_argsStandardScheme getScheme() {
        return new getTPlayersByIds_argsStandardScheme();
      }
    }

    private static class getTPlayersByIds_argsStandardScheme extends StandardScheme<getTPlayersByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTPlayersByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.ids.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTPlayersByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter3 : struct.ids)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTPlayersByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTPlayersByIds_argsTupleScheme getScheme() {
        return new getTPlayersByIds_argsTupleScheme();
      }
    }

    private static class getTPlayersByIds_argsTupleScheme extends TupleScheme<getTPlayersByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTPlayersByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter4 : struct.ids)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTPlayersByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.ids.add(_elem6);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTPlayersByIds_result implements org.apache.thrift.TBase<getTPlayersByIds_result, getTPlayersByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTPlayersByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTPlayersByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTPlayersByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTPlayersByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TPlayer> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TPlayer.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTPlayersByIds_result.class, metaDataMap);
    }

    public getTPlayersByIds_result() {
    }

    public getTPlayersByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TPlayer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTPlayersByIds_result(getTPlayersByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TPlayer> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayer>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TPlayer other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TPlayer(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTPlayersByIds_result deepCopy() {
      return new getTPlayersByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TPlayer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TPlayer elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayer>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TPlayer> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TPlayer> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TPlayer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTPlayersByIds_result)
        return this.equals((getTPlayersByIds_result)that);
      return false;
    }

    public boolean equals(getTPlayersByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTPlayersByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTPlayersByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTPlayersByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTPlayersByIds_resultStandardScheme getScheme() {
        return new getTPlayersByIds_resultStandardScheme();
      }
    }

    private static class getTPlayersByIds_resultStandardScheme extends StandardScheme<getTPlayersByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTPlayersByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayer>(_list8.size);
                  com.lesports.qmt.sbd.api.dto.TPlayer _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.lesports.qmt.sbd.api.dto.TPlayer();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTPlayersByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TPlayer _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTPlayersByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTPlayersByIds_resultTupleScheme getScheme() {
        return new getTPlayersByIds_resultTupleScheme();
      }
    }

    private static class getTPlayersByIds_resultTupleScheme extends TupleScheme<getTPlayersByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTPlayersByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TPlayer _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTPlayersByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayer>(_list13.size);
            com.lesports.qmt.sbd.api.dto.TPlayer _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.lesports.qmt.sbd.api.dto.TPlayer();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPlayerIds4SimpleSearch_args implements org.apache.thrift.TBase<getPlayerIds4SimpleSearch_args, getPlayerIds4SimpleSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayerIds4SimpleSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayerIds4SimpleSearch_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayerIds4SimpleSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayerIds4SimpleSearch_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayerIds4SimpleSearch_args.class, metaDataMap);
    }

    public getPlayerIds4SimpleSearch_args() {
    }

    public getPlayerIds4SimpleSearch_args(
      com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayerIds4SimpleSearch_args(getPlayerIds4SimpleSearch_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getPlayerIds4SimpleSearch_args deepCopy() {
      return new getPlayerIds4SimpleSearch_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayerIds4SimpleSearch_args)
        return this.equals((getPlayerIds4SimpleSearch_args)that);
      return false;
    }

    public boolean equals(getPlayerIds4SimpleSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPlayerIds4SimpleSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayerIds4SimpleSearch_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayerIds4SimpleSearch_argsStandardSchemeFactory implements SchemeFactory {
      public getPlayerIds4SimpleSearch_argsStandardScheme getScheme() {
        return new getPlayerIds4SimpleSearch_argsStandardScheme();
      }
    }

    private static class getPlayerIds4SimpleSearch_argsStandardScheme extends StandardScheme<getPlayerIds4SimpleSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayerIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayerIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayerIds4SimpleSearch_argsTupleSchemeFactory implements SchemeFactory {
      public getPlayerIds4SimpleSearch_argsTupleScheme getScheme() {
        return new getPlayerIds4SimpleSearch_argsTupleScheme();
      }
    }

    private static class getPlayerIds4SimpleSearch_argsTupleScheme extends TupleScheme<getPlayerIds4SimpleSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayerIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayerIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetPlayers4SimpleSearchParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getPlayerIds4SimpleSearch_result implements org.apache.thrift.TBase<getPlayerIds4SimpleSearch_result, getPlayerIds4SimpleSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayerIds4SimpleSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayerIds4SimpleSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayerIds4SimpleSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayerIds4SimpleSearch_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayerIds4SimpleSearch_result.class, metaDataMap);
    }

    public getPlayerIds4SimpleSearch_result() {
    }

    public getPlayerIds4SimpleSearch_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayerIds4SimpleSearch_result(getPlayerIds4SimpleSearch_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getPlayerIds4SimpleSearch_result deepCopy() {
      return new getPlayerIds4SimpleSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayerIds4SimpleSearch_result)
        return this.equals((getPlayerIds4SimpleSearch_result)that);
      return false;
    }

    public boolean equals(getPlayerIds4SimpleSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPlayerIds4SimpleSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayerIds4SimpleSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayerIds4SimpleSearch_resultStandardSchemeFactory implements SchemeFactory {
      public getPlayerIds4SimpleSearch_resultStandardScheme getScheme() {
        return new getPlayerIds4SimpleSearch_resultStandardScheme();
      }
    }

    private static class getPlayerIds4SimpleSearch_resultStandardScheme extends StandardScheme<getPlayerIds4SimpleSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayerIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list16.size);
                  long _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readI64();
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayerIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter19 : struct.success)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayerIds4SimpleSearch_resultTupleSchemeFactory implements SchemeFactory {
      public getPlayerIds4SimpleSearch_resultTupleScheme getScheme() {
        return new getPlayerIds4SimpleSearch_resultTupleScheme();
      }
    }

    private static class getPlayerIds4SimpleSearch_resultTupleScheme extends TupleScheme<getPlayerIds4SimpleSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayerIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter20 : struct.success)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayerIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list21.size);
            long _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI64();
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPlayerCareerStat_args implements org.apache.thrift.TBase<getPlayerCareerStat_args, getPlayerCareerStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayerCareerStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayerCareerStat_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayerCareerStat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayerCareerStat_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayerCareerStat_args.class, metaDataMap);
    }

    public getPlayerCareerStat_args() {
    }

    public getPlayerCareerStat_args(
      com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayerCareerStat_args(getPlayerCareerStat_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getPlayerCareerStat_args deepCopy() {
      return new getPlayerCareerStat_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayerCareerStat_args)
        return this.equals((getPlayerCareerStat_args)that);
      return false;
    }

    public boolean equals(getPlayerCareerStat_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPlayerCareerStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayerCareerStat_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayerCareerStat_argsStandardSchemeFactory implements SchemeFactory {
      public getPlayerCareerStat_argsStandardScheme getScheme() {
        return new getPlayerCareerStat_argsStandardScheme();
      }
    }

    private static class getPlayerCareerStat_argsStandardScheme extends StandardScheme<getPlayerCareerStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayerCareerStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayerCareerStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayerCareerStat_argsTupleSchemeFactory implements SchemeFactory {
      public getPlayerCareerStat_argsTupleScheme getScheme() {
        return new getPlayerCareerStat_argsTupleScheme();
      }
    }

    private static class getPlayerCareerStat_argsTupleScheme extends TupleScheme<getPlayerCareerStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayerCareerStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayerCareerStat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetPlayerCareerStatParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getPlayerCareerStat_result implements org.apache.thrift.TBase<getPlayerCareerStat_result, getPlayerCareerStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPlayerCareerStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPlayerCareerStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPlayerCareerStat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPlayerCareerStat_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TPlayerCareerStat.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPlayerCareerStat_result.class, metaDataMap);
    }

    public getPlayerCareerStat_result() {
    }

    public getPlayerCareerStat_result(
      List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPlayerCareerStat_result(getPlayerCareerStat_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TPlayerCareerStat other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TPlayerCareerStat(other_element));
        }
        this.success = __this__success;
      }
    }

    public getPlayerCareerStat_result deepCopy() {
      return new getPlayerCareerStat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TPlayerCareerStat elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPlayerCareerStat_result)
        return this.equals((getPlayerCareerStat_result)that);
      return false;
    }

    public boolean equals(getPlayerCareerStat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPlayerCareerStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPlayerCareerStat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPlayerCareerStat_resultStandardSchemeFactory implements SchemeFactory {
      public getPlayerCareerStat_resultStandardScheme getScheme() {
        return new getPlayerCareerStat_resultStandardScheme();
      }
    }

    private static class getPlayerCareerStat_resultStandardScheme extends StandardScheme<getPlayerCareerStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPlayerCareerStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>(_list24.size);
                  com.lesports.qmt.sbd.api.dto.TPlayerCareerStat _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.lesports.qmt.sbd.api.dto.TPlayerCareerStat();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPlayerCareerStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TPlayerCareerStat _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPlayerCareerStat_resultTupleSchemeFactory implements SchemeFactory {
      public getPlayerCareerStat_resultTupleScheme getScheme() {
        return new getPlayerCareerStat_resultTupleScheme();
      }
    }

    private static class getPlayerCareerStat_resultTupleScheme extends TupleScheme<getPlayerCareerStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPlayerCareerStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TPlayerCareerStat _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPlayerCareerStat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TPlayerCareerStat>(_list29.size);
            com.lesports.qmt.sbd.api.dto.TPlayerCareerStat _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.lesports.qmt.sbd.api.dto.TPlayerCareerStat();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTeamById_args implements org.apache.thrift.TBase<getTTeamById_args, getTTeamById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamById_args.class, metaDataMap);
    }

    public getTTeamById_args() {
    }

    public getTTeamById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamById_args(getTTeamById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTeamById_args deepCopy() {
      return new getTTeamById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamById_args)
        return this.equals((getTTeamById_args)that);
      return false;
    }

    public boolean equals(getTTeamById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamById_argsStandardSchemeFactory implements SchemeFactory {
      public getTTeamById_argsStandardScheme getScheme() {
        return new getTTeamById_argsStandardScheme();
      }
    }

    private static class getTTeamById_argsStandardScheme extends StandardScheme<getTTeamById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamById_argsTupleSchemeFactory implements SchemeFactory {
      public getTTeamById_argsTupleScheme getScheme() {
        return new getTTeamById_argsTupleScheme();
      }
    }

    private static class getTTeamById_argsTupleScheme extends TupleScheme<getTTeamById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTeamById_result implements org.apache.thrift.TBase<getTTeamById_result, getTTeamById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TTeam success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTeam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamById_result.class, metaDataMap);
    }

    public getTTeamById_result() {
    }

    public getTTeamById_result(
      com.lesports.qmt.sbd.api.dto.TTeam success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamById_result(getTTeamById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TTeam(other.success);
      }
    }

    public getTTeamById_result deepCopy() {
      return new getTTeamById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TTeam getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TTeam success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TTeam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamById_result)
        return this.equals((getTTeamById_result)that);
      return false;
    }

    public boolean equals(getTTeamById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamById_resultStandardSchemeFactory implements SchemeFactory {
      public getTTeamById_resultStandardScheme getScheme() {
        return new getTTeamById_resultStandardScheme();
      }
    }

    private static class getTTeamById_resultStandardScheme extends StandardScheme<getTTeamById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TTeam();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamById_resultTupleSchemeFactory implements SchemeFactory {
      public getTTeamById_resultTupleScheme getScheme() {
        return new getTTeamById_resultTupleScheme();
      }
    }

    private static class getTTeamById_resultTupleScheme extends TupleScheme<getTTeamById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TTeam();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTeamByCampId_args implements org.apache.thrift.TBase<getTTeamByCampId_args, getTTeamByCampId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamByCampId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamByCampId_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamByCampId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamByCampId_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamByCampId_args.class, metaDataMap);
    }

    public getTTeamByCampId_args() {
    }

    public getTTeamByCampId_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamByCampId_args(getTTeamByCampId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTeamByCampId_args deepCopy() {
      return new getTTeamByCampId_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamByCampId_args)
        return this.equals((getTTeamByCampId_args)that);
      return false;
    }

    public boolean equals(getTTeamByCampId_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamByCampId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamByCampId_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamByCampId_argsStandardSchemeFactory implements SchemeFactory {
      public getTTeamByCampId_argsStandardScheme getScheme() {
        return new getTTeamByCampId_argsStandardScheme();
      }
    }

    private static class getTTeamByCampId_argsStandardScheme extends StandardScheme<getTTeamByCampId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamByCampId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamByCampId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamByCampId_argsTupleSchemeFactory implements SchemeFactory {
      public getTTeamByCampId_argsTupleScheme getScheme() {
        return new getTTeamByCampId_argsTupleScheme();
      }
    }

    private static class getTTeamByCampId_argsTupleScheme extends TupleScheme<getTTeamByCampId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamByCampId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamByCampId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTeamByCampId_result implements org.apache.thrift.TBase<getTTeamByCampId_result, getTTeamByCampId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamByCampId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamByCampId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamByCampId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamByCampId_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TTeam success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTeam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamByCampId_result.class, metaDataMap);
    }

    public getTTeamByCampId_result() {
    }

    public getTTeamByCampId_result(
      com.lesports.qmt.sbd.api.dto.TTeam success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamByCampId_result(getTTeamByCampId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TTeam(other.success);
      }
    }

    public getTTeamByCampId_result deepCopy() {
      return new getTTeamByCampId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TTeam getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TTeam success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TTeam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamByCampId_result)
        return this.equals((getTTeamByCampId_result)that);
      return false;
    }

    public boolean equals(getTTeamByCampId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamByCampId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamByCampId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamByCampId_resultStandardSchemeFactory implements SchemeFactory {
      public getTTeamByCampId_resultStandardScheme getScheme() {
        return new getTTeamByCampId_resultStandardScheme();
      }
    }

    private static class getTTeamByCampId_resultStandardScheme extends StandardScheme<getTTeamByCampId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamByCampId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TTeam();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamByCampId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamByCampId_resultTupleSchemeFactory implements SchemeFactory {
      public getTTeamByCampId_resultTupleScheme getScheme() {
        return new getTTeamByCampId_resultTupleScheme();
      }
    }

    private static class getTTeamByCampId_resultTupleScheme extends TupleScheme<getTTeamByCampId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamByCampId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamByCampId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TTeam();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTeamsByIds_args implements org.apache.thrift.TBase<getTTeamsByIds_args, getTTeamsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamsByIds_args.class, metaDataMap);
    }

    public getTTeamsByIds_args() {
    }

    public getTTeamsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamsByIds_args(getTTeamsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTeamsByIds_args deepCopy() {
      return new getTTeamsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamsByIds_args)
        return this.equals((getTTeamsByIds_args)that);
      return false;
    }

    public boolean equals(getTTeamsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTTeamsByIds_argsStandardScheme getScheme() {
        return new getTTeamsByIds_argsStandardScheme();
      }
    }

    private static class getTTeamsByIds_argsStandardScheme extends StandardScheme<getTTeamsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    struct.ids.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter35 : struct.ids)
            {
              oprot.writeI64(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTTeamsByIds_argsTupleScheme getScheme() {
        return new getTTeamsByIds_argsTupleScheme();
      }
    }

    private static class getTTeamsByIds_argsTupleScheme extends TupleScheme<getTTeamsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter36 : struct.ids)
            {
              oprot.writeI64(_iter36);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list37.size);
            long _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI64();
              struct.ids.add(_elem38);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTeamsByIds_result implements org.apache.thrift.TBase<getTTeamsByIds_result, getTTeamsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TTeam> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTeam.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamsByIds_result.class, metaDataMap);
    }

    public getTTeamsByIds_result() {
    }

    public getTTeamsByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TTeam> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamsByIds_result(getTTeamsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TTeam> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeam>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TTeam other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TTeam(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTTeamsByIds_result deepCopy() {
      return new getTTeamsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TTeam> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TTeam elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeam>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTeam> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TTeam> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TTeam>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamsByIds_result)
        return this.equals((getTTeamsByIds_result)that);
      return false;
    }

    public boolean equals(getTTeamsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTTeamsByIds_resultStandardScheme getScheme() {
        return new getTTeamsByIds_resultStandardScheme();
      }
    }

    private static class getTTeamsByIds_resultStandardScheme extends StandardScheme<getTTeamsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeam>(_list40.size);
                  com.lesports.qmt.sbd.api.dto.TTeam _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.lesports.qmt.sbd.api.dto.TTeam();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TTeam _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTTeamsByIds_resultTupleScheme getScheme() {
        return new getTTeamsByIds_resultTupleScheme();
      }
    }

    private static class getTTeamsByIds_resultTupleScheme extends TupleScheme<getTTeamsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TTeam _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeam>(_list45.size);
            com.lesports.qmt.sbd.api.dto.TTeam _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.lesports.qmt.sbd.api.dto.TTeam();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTeamIds4SimpleSearch_args implements org.apache.thrift.TBase<getTeamIds4SimpleSearch_args, getTeamIds4SimpleSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIds4SimpleSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIds4SimpleSearch_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamIds4SimpleSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamIds4SimpleSearch_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIds4SimpleSearch_args.class, metaDataMap);
    }

    public getTeamIds4SimpleSearch_args() {
    }

    public getTeamIds4SimpleSearch_args(
      com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamIds4SimpleSearch_args(getTeamIds4SimpleSearch_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTeamIds4SimpleSearch_args deepCopy() {
      return new getTeamIds4SimpleSearch_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamIds4SimpleSearch_args)
        return this.equals((getTeamIds4SimpleSearch_args)that);
      return false;
    }

    public boolean equals(getTeamIds4SimpleSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamIds4SimpleSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamIds4SimpleSearch_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamIds4SimpleSearch_argsStandardSchemeFactory implements SchemeFactory {
      public getTeamIds4SimpleSearch_argsStandardScheme getScheme() {
        return new getTeamIds4SimpleSearch_argsStandardScheme();
      }
    }

    private static class getTeamIds4SimpleSearch_argsStandardScheme extends StandardScheme<getTeamIds4SimpleSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamIds4SimpleSearch_argsTupleSchemeFactory implements SchemeFactory {
      public getTeamIds4SimpleSearch_argsTupleScheme getScheme() {
        return new getTeamIds4SimpleSearch_argsTupleScheme();
      }
    }

    private static class getTeamIds4SimpleSearch_argsTupleScheme extends TupleScheme<getTeamIds4SimpleSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetTeams4SimpleSearchParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTeamIds4SimpleSearch_result implements org.apache.thrift.TBase<getTeamIds4SimpleSearch_result, getTeamIds4SimpleSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIds4SimpleSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIds4SimpleSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamIds4SimpleSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamIds4SimpleSearch_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIds4SimpleSearch_result.class, metaDataMap);
    }

    public getTeamIds4SimpleSearch_result() {
    }

    public getTeamIds4SimpleSearch_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamIds4SimpleSearch_result(getTeamIds4SimpleSearch_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTeamIds4SimpleSearch_result deepCopy() {
      return new getTeamIds4SimpleSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamIds4SimpleSearch_result)
        return this.equals((getTeamIds4SimpleSearch_result)that);
      return false;
    }

    public boolean equals(getTeamIds4SimpleSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamIds4SimpleSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamIds4SimpleSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamIds4SimpleSearch_resultStandardSchemeFactory implements SchemeFactory {
      public getTeamIds4SimpleSearch_resultStandardScheme getScheme() {
        return new getTeamIds4SimpleSearch_resultStandardScheme();
      }
    }

    private static class getTeamIds4SimpleSearch_resultStandardScheme extends StandardScheme<getTeamIds4SimpleSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list48.size);
                  long _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI64();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter51 : struct.success)
            {
              oprot.writeI64(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamIds4SimpleSearch_resultTupleSchemeFactory implements SchemeFactory {
      public getTeamIds4SimpleSearch_resultTupleScheme getScheme() {
        return new getTeamIds4SimpleSearch_resultTupleScheme();
      }
    }

    private static class getTeamIds4SimpleSearch_resultTupleScheme extends TupleScheme<getTeamIds4SimpleSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter52 : struct.success)
            {
              oprot.writeI64(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list53.size);
            long _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readI64();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTeamIdsOfSeason_args implements org.apache.thrift.TBase<getTeamIdsOfSeason_args, getTeamIdsOfSeason_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIdsOfSeason_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIdsOfSeason_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamIdsOfSeason_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamIdsOfSeason_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIdsOfSeason_args.class, metaDataMap);
    }

    public getTeamIdsOfSeason_args() {
    }

    public getTeamIdsOfSeason_args(
      com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamIdsOfSeason_args(getTeamIdsOfSeason_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTeamIdsOfSeason_args deepCopy() {
      return new getTeamIdsOfSeason_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamIdsOfSeason_args)
        return this.equals((getTeamIdsOfSeason_args)that);
      return false;
    }

    public boolean equals(getTeamIdsOfSeason_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamIdsOfSeason_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamIdsOfSeason_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamIdsOfSeason_argsStandardSchemeFactory implements SchemeFactory {
      public getTeamIdsOfSeason_argsStandardScheme getScheme() {
        return new getTeamIdsOfSeason_argsStandardScheme();
      }
    }

    private static class getTeamIdsOfSeason_argsStandardScheme extends StandardScheme<getTeamIdsOfSeason_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIdsOfSeason_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIdsOfSeason_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamIdsOfSeason_argsTupleSchemeFactory implements SchemeFactory {
      public getTeamIdsOfSeason_argsTupleScheme getScheme() {
        return new getTeamIdsOfSeason_argsTupleScheme();
      }
    }

    private static class getTeamIdsOfSeason_argsTupleScheme extends TupleScheme<getTeamIdsOfSeason_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfSeason_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfSeason_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetTeamsOfSeasonParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTeamIdsOfSeason_result implements org.apache.thrift.TBase<getTeamIdsOfSeason_result, getTeamIdsOfSeason_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIdsOfSeason_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIdsOfSeason_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamIdsOfSeason_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamIdsOfSeason_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIdsOfSeason_result.class, metaDataMap);
    }

    public getTeamIdsOfSeason_result() {
    }

    public getTeamIdsOfSeason_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamIdsOfSeason_result(getTeamIdsOfSeason_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTeamIdsOfSeason_result deepCopy() {
      return new getTeamIdsOfSeason_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamIdsOfSeason_result)
        return this.equals((getTeamIdsOfSeason_result)that);
      return false;
    }

    public boolean equals(getTeamIdsOfSeason_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamIdsOfSeason_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamIdsOfSeason_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamIdsOfSeason_resultStandardSchemeFactory implements SchemeFactory {
      public getTeamIdsOfSeason_resultStandardScheme getScheme() {
        return new getTeamIdsOfSeason_resultStandardScheme();
      }
    }

    private static class getTeamIdsOfSeason_resultStandardScheme extends StandardScheme<getTeamIdsOfSeason_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIdsOfSeason_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list56.size);
                  long _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI64();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIdsOfSeason_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter59 : struct.success)
            {
              oprot.writeI64(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamIdsOfSeason_resultTupleSchemeFactory implements SchemeFactory {
      public getTeamIdsOfSeason_resultTupleScheme getScheme() {
        return new getTeamIdsOfSeason_resultTupleScheme();
      }
    }

    private static class getTeamIdsOfSeason_resultTupleScheme extends TupleScheme<getTeamIdsOfSeason_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfSeason_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter60 : struct.success)
            {
              oprot.writeI64(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfSeason_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list61.size);
            long _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readI64();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTeamIdsOfCompetition_args implements org.apache.thrift.TBase<getTeamIdsOfCompetition_args, getTeamIdsOfCompetition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIdsOfCompetition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIdsOfCompetition_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamIdsOfCompetition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamIdsOfCompetition_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIdsOfCompetition_args.class, metaDataMap);
    }

    public getTeamIdsOfCompetition_args() {
    }

    public getTeamIdsOfCompetition_args(
      com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamIdsOfCompetition_args(getTeamIdsOfCompetition_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTeamIdsOfCompetition_args deepCopy() {
      return new getTeamIdsOfCompetition_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamIdsOfCompetition_args)
        return this.equals((getTeamIdsOfCompetition_args)that);
      return false;
    }

    public boolean equals(getTeamIdsOfCompetition_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamIdsOfCompetition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamIdsOfCompetition_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamIdsOfCompetition_argsStandardSchemeFactory implements SchemeFactory {
      public getTeamIdsOfCompetition_argsStandardScheme getScheme() {
        return new getTeamIdsOfCompetition_argsStandardScheme();
      }
    }

    private static class getTeamIdsOfCompetition_argsStandardScheme extends StandardScheme<getTeamIdsOfCompetition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamIdsOfCompetition_argsTupleSchemeFactory implements SchemeFactory {
      public getTeamIdsOfCompetition_argsTupleScheme getScheme() {
        return new getTeamIdsOfCompetition_argsTupleScheme();
      }
    }

    private static class getTeamIdsOfCompetition_argsTupleScheme extends TupleScheme<getTeamIdsOfCompetition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetTeamsOfCompetitionParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTeamIdsOfCompetition_result implements org.apache.thrift.TBase<getTeamIdsOfCompetition_result, getTeamIdsOfCompetition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamIdsOfCompetition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamIdsOfCompetition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamIdsOfCompetition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamIdsOfCompetition_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamIdsOfCompetition_result.class, metaDataMap);
    }

    public getTeamIdsOfCompetition_result() {
    }

    public getTeamIdsOfCompetition_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamIdsOfCompetition_result(getTeamIdsOfCompetition_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTeamIdsOfCompetition_result deepCopy() {
      return new getTeamIdsOfCompetition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamIdsOfCompetition_result)
        return this.equals((getTeamIdsOfCompetition_result)that);
      return false;
    }

    public boolean equals(getTeamIdsOfCompetition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamIdsOfCompetition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamIdsOfCompetition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamIdsOfCompetition_resultStandardSchemeFactory implements SchemeFactory {
      public getTeamIdsOfCompetition_resultStandardScheme getScheme() {
        return new getTeamIdsOfCompetition_resultStandardScheme();
      }
    }

    private static class getTeamIdsOfCompetition_resultStandardScheme extends StandardScheme<getTeamIdsOfCompetition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list64.size);
                  long _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readI64();
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter67 : struct.success)
            {
              oprot.writeI64(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamIdsOfCompetition_resultTupleSchemeFactory implements SchemeFactory {
      public getTeamIdsOfCompetition_resultTupleScheme getScheme() {
        return new getTeamIdsOfCompetition_resultTupleScheme();
      }
    }

    private static class getTeamIdsOfCompetition_resultTupleScheme extends TupleScheme<getTeamIdsOfCompetition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter68 : struct.success)
            {
              oprot.writeI64(_iter68);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list69.size);
            long _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readI64();
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTeamSeasonById_args implements org.apache.thrift.TBase<getTTeamSeasonById_args, getTTeamSeasonById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamSeasonById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamSeasonById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamSeasonById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamSeasonById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamSeasonById_args.class, metaDataMap);
    }

    public getTTeamSeasonById_args() {
    }

    public getTTeamSeasonById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamSeasonById_args(getTTeamSeasonById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTeamSeasonById_args deepCopy() {
      return new getTTeamSeasonById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamSeasonById_args)
        return this.equals((getTTeamSeasonById_args)that);
      return false;
    }

    public boolean equals(getTTeamSeasonById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamSeasonById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamSeasonById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamSeasonById_argsStandardSchemeFactory implements SchemeFactory {
      public getTTeamSeasonById_argsStandardScheme getScheme() {
        return new getTTeamSeasonById_argsStandardScheme();
      }
    }

    private static class getTTeamSeasonById_argsStandardScheme extends StandardScheme<getTTeamSeasonById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamSeasonById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamSeasonById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamSeasonById_argsTupleSchemeFactory implements SchemeFactory {
      public getTTeamSeasonById_argsTupleScheme getScheme() {
        return new getTTeamSeasonById_argsTupleScheme();
      }
    }

    private static class getTTeamSeasonById_argsTupleScheme extends TupleScheme<getTTeamSeasonById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTeamSeasonById_result implements org.apache.thrift.TBase<getTTeamSeasonById_result, getTTeamSeasonById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamSeasonById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamSeasonById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamSeasonById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamSeasonById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TTeamSeason success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTeamSeason.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamSeasonById_result.class, metaDataMap);
    }

    public getTTeamSeasonById_result() {
    }

    public getTTeamSeasonById_result(
      com.lesports.qmt.sbd.api.dto.TTeamSeason success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamSeasonById_result(getTTeamSeasonById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TTeamSeason(other.success);
      }
    }

    public getTTeamSeasonById_result deepCopy() {
      return new getTTeamSeasonById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TTeamSeason getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TTeamSeason success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TTeamSeason)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamSeasonById_result)
        return this.equals((getTTeamSeasonById_result)that);
      return false;
    }

    public boolean equals(getTTeamSeasonById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamSeasonById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamSeasonById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamSeasonById_resultStandardSchemeFactory implements SchemeFactory {
      public getTTeamSeasonById_resultStandardScheme getScheme() {
        return new getTTeamSeasonById_resultStandardScheme();
      }
    }

    private static class getTTeamSeasonById_resultStandardScheme extends StandardScheme<getTTeamSeasonById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamSeasonById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TTeamSeason();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamSeasonById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamSeasonById_resultTupleSchemeFactory implements SchemeFactory {
      public getTTeamSeasonById_resultTupleScheme getScheme() {
        return new getTTeamSeasonById_resultTupleScheme();
      }
    }

    private static class getTTeamSeasonById_resultTupleScheme extends TupleScheme<getTTeamSeasonById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TTeamSeason();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTeamSeasonsByIds_args implements org.apache.thrift.TBase<getTTeamSeasonsByIds_args, getTTeamSeasonsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamSeasonsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamSeasonsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamSeasonsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamSeasonsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamSeasonsByIds_args.class, metaDataMap);
    }

    public getTTeamSeasonsByIds_args() {
    }

    public getTTeamSeasonsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamSeasonsByIds_args(getTTeamSeasonsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTeamSeasonsByIds_args deepCopy() {
      return new getTTeamSeasonsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamSeasonsByIds_args)
        return this.equals((getTTeamSeasonsByIds_args)that);
      return false;
    }

    public boolean equals(getTTeamSeasonsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamSeasonsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamSeasonsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamSeasonsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTTeamSeasonsByIds_argsStandardScheme getScheme() {
        return new getTTeamSeasonsByIds_argsStandardScheme();
      }
    }

    private static class getTTeamSeasonsByIds_argsStandardScheme extends StandardScheme<getTTeamSeasonsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamSeasonsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list72.size);
                  long _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = iprot.readI64();
                    struct.ids.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamSeasonsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter75 : struct.ids)
            {
              oprot.writeI64(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamSeasonsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTTeamSeasonsByIds_argsTupleScheme getScheme() {
        return new getTTeamSeasonsByIds_argsTupleScheme();
      }
    }

    private static class getTTeamSeasonsByIds_argsTupleScheme extends TupleScheme<getTTeamSeasonsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter76 : struct.ids)
            {
              oprot.writeI64(_iter76);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list77.size);
            long _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = iprot.readI64();
              struct.ids.add(_elem78);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTeamSeasonsByIds_result implements org.apache.thrift.TBase<getTTeamSeasonsByIds_result, getTTeamSeasonsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTeamSeasonsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTeamSeasonsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTeamSeasonsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTeamSeasonsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TTeamSeason> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTeamSeason.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTeamSeasonsByIds_result.class, metaDataMap);
    }

    public getTTeamSeasonsByIds_result() {
    }

    public getTTeamSeasonsByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TTeamSeason> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTeamSeasonsByIds_result(getTTeamSeasonsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TTeamSeason> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeamSeason>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TTeamSeason other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TTeamSeason(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTTeamSeasonsByIds_result deepCopy() {
      return new getTTeamSeasonsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TTeamSeason> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TTeamSeason elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeamSeason>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTeamSeason> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TTeamSeason> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TTeamSeason>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTeamSeasonsByIds_result)
        return this.equals((getTTeamSeasonsByIds_result)that);
      return false;
    }

    public boolean equals(getTTeamSeasonsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTeamSeasonsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTeamSeasonsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTeamSeasonsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTTeamSeasonsByIds_resultStandardScheme getScheme() {
        return new getTTeamSeasonsByIds_resultStandardScheme();
      }
    }

    private static class getTTeamSeasonsByIds_resultStandardScheme extends StandardScheme<getTTeamSeasonsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTeamSeasonsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeamSeason>(_list80.size);
                  com.lesports.qmt.sbd.api.dto.TTeamSeason _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new com.lesports.qmt.sbd.api.dto.TTeamSeason();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTeamSeasonsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TTeamSeason _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTeamSeasonsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTTeamSeasonsByIds_resultTupleScheme getScheme() {
        return new getTTeamSeasonsByIds_resultTupleScheme();
      }
    }

    private static class getTTeamSeasonsByIds_resultTupleScheme extends TupleScheme<getTTeamSeasonsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TTeamSeason _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTeamSeasonsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTeamSeason>(_list85.size);
            com.lesports.qmt.sbd.api.dto.TTeamSeason _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new com.lesports.qmt.sbd.api.dto.TTeamSeason();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTeamSeasonIds_args implements org.apache.thrift.TBase<getTeamSeasonIds_args, getTeamSeasonIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamSeasonIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamSeasonIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamSeasonIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamSeasonIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamSeasonIds_args.class, metaDataMap);
    }

    public getTeamSeasonIds_args() {
    }

    public getTeamSeasonIds_args(
      com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamSeasonIds_args(getTeamSeasonIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTeamSeasonIds_args deepCopy() {
      return new getTeamSeasonIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamSeasonIds_args)
        return this.equals((getTeamSeasonIds_args)that);
      return false;
    }

    public boolean equals(getTeamSeasonIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamSeasonIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamSeasonIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamSeasonIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTeamSeasonIds_argsStandardScheme getScheme() {
        return new getTeamSeasonIds_argsStandardScheme();
      }
    }

    private static class getTeamSeasonIds_argsStandardScheme extends StandardScheme<getTeamSeasonIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamSeasonIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamSeasonIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamSeasonIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTeamSeasonIds_argsTupleScheme getScheme() {
        return new getTeamSeasonIds_argsTupleScheme();
      }
    }

    private static class getTeamSeasonIds_argsTupleScheme extends TupleScheme<getTeamSeasonIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamSeasonIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamSeasonIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetTeamSeasonsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTeamSeasonIds_result implements org.apache.thrift.TBase<getTeamSeasonIds_result, getTeamSeasonIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTeamSeasonIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTeamSeasonIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTeamSeasonIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTeamSeasonIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTeamSeasonIds_result.class, metaDataMap);
    }

    public getTeamSeasonIds_result() {
    }

    public getTeamSeasonIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTeamSeasonIds_result(getTeamSeasonIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTeamSeasonIds_result deepCopy() {
      return new getTeamSeasonIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTeamSeasonIds_result)
        return this.equals((getTeamSeasonIds_result)that);
      return false;
    }

    public boolean equals(getTeamSeasonIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTeamSeasonIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTeamSeasonIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTeamSeasonIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTeamSeasonIds_resultStandardScheme getScheme() {
        return new getTeamSeasonIds_resultStandardScheme();
      }
    }

    private static class getTeamSeasonIds_resultStandardScheme extends StandardScheme<getTeamSeasonIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTeamSeasonIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list88.size);
                  long _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readI64();
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTeamSeasonIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter91 : struct.success)
            {
              oprot.writeI64(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTeamSeasonIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTeamSeasonIds_resultTupleScheme getScheme() {
        return new getTeamSeasonIds_resultTupleScheme();
      }
    }

    private static class getTeamSeasonIds_resultTupleScheme extends TupleScheme<getTeamSeasonIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTeamSeasonIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter92 : struct.success)
            {
              oprot.writeI64(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTeamSeasonIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list93.size);
            long _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readI64();
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTDetailMatchById_args implements org.apache.thrift.TBase<getTDetailMatchById_args, getTDetailMatchById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTDetailMatchById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTDetailMatchById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTDetailMatchById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTDetailMatchById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTDetailMatchById_args.class, metaDataMap);
    }

    public getTDetailMatchById_args() {
    }

    public getTDetailMatchById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTDetailMatchById_args(getTDetailMatchById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTDetailMatchById_args deepCopy() {
      return new getTDetailMatchById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTDetailMatchById_args)
        return this.equals((getTDetailMatchById_args)that);
      return false;
    }

    public boolean equals(getTDetailMatchById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTDetailMatchById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTDetailMatchById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTDetailMatchById_argsStandardSchemeFactory implements SchemeFactory {
      public getTDetailMatchById_argsStandardScheme getScheme() {
        return new getTDetailMatchById_argsStandardScheme();
      }
    }

    private static class getTDetailMatchById_argsStandardScheme extends StandardScheme<getTDetailMatchById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTDetailMatchById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTDetailMatchById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTDetailMatchById_argsTupleSchemeFactory implements SchemeFactory {
      public getTDetailMatchById_argsTupleScheme getScheme() {
        return new getTDetailMatchById_argsTupleScheme();
      }
    }

    private static class getTDetailMatchById_argsTupleScheme extends TupleScheme<getTDetailMatchById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTDetailMatchById_result implements org.apache.thrift.TBase<getTDetailMatchById_result, getTDetailMatchById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTDetailMatchById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTDetailMatchById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTDetailMatchById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTDetailMatchById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TDetailMatch success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TDetailMatch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTDetailMatchById_result.class, metaDataMap);
    }

    public getTDetailMatchById_result() {
    }

    public getTDetailMatchById_result(
      com.lesports.qmt.sbd.api.dto.TDetailMatch success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTDetailMatchById_result(getTDetailMatchById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TDetailMatch(other.success);
      }
    }

    public getTDetailMatchById_result deepCopy() {
      return new getTDetailMatchById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TDetailMatch getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TDetailMatch success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TDetailMatch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTDetailMatchById_result)
        return this.equals((getTDetailMatchById_result)that);
      return false;
    }

    public boolean equals(getTDetailMatchById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTDetailMatchById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTDetailMatchById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTDetailMatchById_resultStandardSchemeFactory implements SchemeFactory {
      public getTDetailMatchById_resultStandardScheme getScheme() {
        return new getTDetailMatchById_resultStandardScheme();
      }
    }

    private static class getTDetailMatchById_resultStandardScheme extends StandardScheme<getTDetailMatchById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTDetailMatchById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TDetailMatch();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTDetailMatchById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTDetailMatchById_resultTupleSchemeFactory implements SchemeFactory {
      public getTDetailMatchById_resultTupleScheme getScheme() {
        return new getTDetailMatchById_resultTupleScheme();
      }
    }

    private static class getTDetailMatchById_resultTupleScheme extends TupleScheme<getTDetailMatchById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TDetailMatch();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTMatchById_args implements org.apache.thrift.TBase<getTMatchById_args, getTMatchById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchById_args.class, metaDataMap);
    }

    public getTMatchById_args() {
    }

    public getTMatchById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchById_args(getTMatchById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTMatchById_args deepCopy() {
      return new getTMatchById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchById_args)
        return this.equals((getTMatchById_args)that);
      return false;
    }

    public boolean equals(getTMatchById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchById_argsStandardSchemeFactory implements SchemeFactory {
      public getTMatchById_argsStandardScheme getScheme() {
        return new getTMatchById_argsStandardScheme();
      }
    }

    private static class getTMatchById_argsStandardScheme extends StandardScheme<getTMatchById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchById_argsTupleSchemeFactory implements SchemeFactory {
      public getTMatchById_argsTupleScheme getScheme() {
        return new getTMatchById_argsTupleScheme();
      }
    }

    private static class getTMatchById_argsTupleScheme extends TupleScheme<getTMatchById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTMatchById_result implements org.apache.thrift.TBase<getTMatchById_result, getTMatchById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TMatch success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatch.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchById_result.class, metaDataMap);
    }

    public getTMatchById_result() {
    }

    public getTMatchById_result(
      com.lesports.qmt.sbd.api.dto.TMatch success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchById_result(getTMatchById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TMatch(other.success);
      }
    }

    public getTMatchById_result deepCopy() {
      return new getTMatchById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TMatch getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TMatch success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TMatch)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchById_result)
        return this.equals((getTMatchById_result)that);
      return false;
    }

    public boolean equals(getTMatchById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchById_resultStandardSchemeFactory implements SchemeFactory {
      public getTMatchById_resultStandardScheme getScheme() {
        return new getTMatchById_resultStandardScheme();
      }
    }

    private static class getTMatchById_resultStandardScheme extends StandardScheme<getTMatchById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TMatch();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchById_resultTupleSchemeFactory implements SchemeFactory {
      public getTMatchById_resultTupleScheme getScheme() {
        return new getTMatchById_resultTupleScheme();
      }
    }

    private static class getTMatchById_resultTupleScheme extends TupleScheme<getTMatchById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TMatch();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTMatchesByIds_args implements org.apache.thrift.TBase<getTMatchesByIds_args, getTMatchesByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchesByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchesByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchesByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchesByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchesByIds_args.class, metaDataMap);
    }

    public getTMatchesByIds_args() {
    }

    public getTMatchesByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchesByIds_args(getTMatchesByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTMatchesByIds_args deepCopy() {
      return new getTMatchesByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchesByIds_args)
        return this.equals((getTMatchesByIds_args)that);
      return false;
    }

    public boolean equals(getTMatchesByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchesByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchesByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchesByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTMatchesByIds_argsStandardScheme getScheme() {
        return new getTMatchesByIds_argsStandardScheme();
      }
    }

    private static class getTMatchesByIds_argsStandardScheme extends StandardScheme<getTMatchesByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchesByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list96.size);
                  long _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = iprot.readI64();
                    struct.ids.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchesByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter99 : struct.ids)
            {
              oprot.writeI64(_iter99);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchesByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTMatchesByIds_argsTupleScheme getScheme() {
        return new getTMatchesByIds_argsTupleScheme();
      }
    }

    private static class getTMatchesByIds_argsTupleScheme extends TupleScheme<getTMatchesByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter100 : struct.ids)
            {
              oprot.writeI64(_iter100);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list101.size);
            long _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = iprot.readI64();
              struct.ids.add(_elem102);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTMatchesByIds_result implements org.apache.thrift.TBase<getTMatchesByIds_result, getTMatchesByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchesByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchesByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchesByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchesByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TMatch> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatch.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchesByIds_result.class, metaDataMap);
    }

    public getTMatchesByIds_result() {
    }

    public getTMatchesByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TMatch> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchesByIds_result(getTMatchesByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TMatch> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TMatch other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TMatch(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTMatchesByIds_result deepCopy() {
      return new getTMatchesByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TMatch> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TMatch elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatch> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TMatch> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TMatch>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchesByIds_result)
        return this.equals((getTMatchesByIds_result)that);
      return false;
    }

    public boolean equals(getTMatchesByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchesByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchesByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchesByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTMatchesByIds_resultStandardScheme getScheme() {
        return new getTMatchesByIds_resultStandardScheme();
      }
    }

    private static class getTMatchesByIds_resultStandardScheme extends StandardScheme<getTMatchesByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchesByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>(_list104.size);
                  com.lesports.qmt.sbd.api.dto.TMatch _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.lesports.qmt.sbd.api.dto.TMatch();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchesByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TMatch _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchesByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTMatchesByIds_resultTupleScheme getScheme() {
        return new getTMatchesByIds_resultTupleScheme();
      }
    }

    private static class getTMatchesByIds_resultTupleScheme extends TupleScheme<getTMatchesByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TMatch _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>(_list109.size);
            com.lesports.qmt.sbd.api.dto.TMatch _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.lesports.qmt.sbd.api.dto.TMatch();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchesByCompetitorId_args implements org.apache.thrift.TBase<getMatchesByCompetitorId_args, getMatchesByCompetitorId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchesByCompetitorId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchesByCompetitorId_args");

    private static final org.apache.thrift.protocol.TField COMPETITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("competitorId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageParam", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchesByCompetitorId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchesByCompetitorId_argsTupleSchemeFactory());
    }

    private long competitorId; // required
    private int csid; // required
    private com.lesports.api.common.PageParam pageParam; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPETITOR_ID((short)1, "competitorId"),
      CSID((short)2, "csid"),
      PAGE_PARAM((short)3, "pageParam"),
      CALLER((short)4, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPETITOR_ID
            return COMPETITOR_ID;
          case 2: // CSID
            return CSID;
          case 3: // PAGE_PARAM
            return PAGE_PARAM;
          case 4: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMPETITORID_ISSET_ID = 0;
    private static final int __CSID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPETITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("competitorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("pageParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchesByCompetitorId_args.class, metaDataMap);
    }

    public getMatchesByCompetitorId_args() {
    }

    public getMatchesByCompetitorId_args(
      long competitorId,
      int csid,
      com.lesports.api.common.PageParam pageParam,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.competitorId = competitorId;
      setCompetitorIdIsSet(true);
      this.csid = csid;
      setCsidIsSet(true);
      this.pageParam = pageParam;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchesByCompetitorId_args(getMatchesByCompetitorId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.competitorId = other.competitorId;
      this.csid = other.csid;
      if (other.isSetPageParam()) {
        this.pageParam = new com.lesports.api.common.PageParam(other.pageParam);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getMatchesByCompetitorId_args deepCopy() {
      return new getMatchesByCompetitorId_args(this);
    }

    @Override
    public void clear() {
      setCompetitorIdIsSet(false);
      this.competitorId = 0;
      setCsidIsSet(false);
      this.csid = 0;
      this.pageParam = null;
      this.caller = null;
    }

    public long getCompetitorId() {
      return this.competitorId;
    }

    public void setCompetitorId(long competitorId) {
      this.competitorId = competitorId;
      setCompetitorIdIsSet(true);
    }

    public void unsetCompetitorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
    }

    /** Returns true if field competitorId is set (has been assigned a value) and false otherwise */
    public boolean isSetCompetitorId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMPETITORID_ISSET_ID);
    }

    public void setCompetitorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPETITORID_ISSET_ID, value);
    }

    public int getCsid() {
      return this.csid;
    }

    public void setCsid(int csid) {
      this.csid = csid;
      setCsidIsSet(true);
    }

    public void unsetCsid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
    }

    /** Returns true if field csid is set (has been assigned a value) and false otherwise */
    public boolean isSetCsid() {
      return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
    }

    public void setCsidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPageParam() {
      return this.pageParam;
    }

    public void setPageParam(com.lesports.api.common.PageParam pageParam) {
      this.pageParam = pageParam;
    }

    public void unsetPageParam() {
      this.pageParam = null;
    }

    /** Returns true if field pageParam is set (has been assigned a value) and false otherwise */
    public boolean isSetPageParam() {
      return this.pageParam != null;
    }

    public void setPageParamIsSet(boolean value) {
      if (!value) {
        this.pageParam = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPETITOR_ID:
        if (value == null) {
          unsetCompetitorId();
        } else {
          setCompetitorId((Long)value);
        }
        break;

      case CSID:
        if (value == null) {
          unsetCsid();
        } else {
          setCsid((Integer)value);
        }
        break;

      case PAGE_PARAM:
        if (value == null) {
          unsetPageParam();
        } else {
          setPageParam((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPETITOR_ID:
        return Long.valueOf(getCompetitorId());

      case CSID:
        return Integer.valueOf(getCsid());

      case PAGE_PARAM:
        return getPageParam();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPETITOR_ID:
        return isSetCompetitorId();
      case CSID:
        return isSetCsid();
      case PAGE_PARAM:
        return isSetPageParam();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchesByCompetitorId_args)
        return this.equals((getMatchesByCompetitorId_args)that);
      return false;
    }

    public boolean equals(getMatchesByCompetitorId_args that) {
      if (that == null)
        return false;

      boolean this_present_competitorId = true;
      boolean that_present_competitorId = true;
      if (this_present_competitorId || that_present_competitorId) {
        if (!(this_present_competitorId && that_present_competitorId))
          return false;
        if (this.competitorId != that.competitorId)
          return false;
      }

      boolean this_present_csid = true;
      boolean that_present_csid = true;
      if (this_present_csid || that_present_csid) {
        if (!(this_present_csid && that_present_csid))
          return false;
        if (this.csid != that.csid)
          return false;
      }

      boolean this_present_pageParam = true && this.isSetPageParam();
      boolean that_present_pageParam = true && that.isSetPageParam();
      if (this_present_pageParam || that_present_pageParam) {
        if (!(this_present_pageParam && that_present_pageParam))
          return false;
        if (!this.pageParam.equals(that.pageParam))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_competitorId = true;
      list.add(present_competitorId);
      if (present_competitorId)
        list.add(competitorId);

      boolean present_csid = true;
      list.add(present_csid);
      if (present_csid)
        list.add(csid);

      boolean present_pageParam = true && (isSetPageParam());
      list.add(present_pageParam);
      if (present_pageParam)
        list.add(pageParam);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMatchesByCompetitorId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCompetitorId()).compareTo(other.isSetCompetitorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompetitorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.competitorId, other.competitorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageParam()).compareTo(other.isSetPageParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageParam, other.pageParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchesByCompetitorId_args(");
      boolean first = true;

      sb.append("competitorId:");
      sb.append(this.competitorId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageParam:");
      if (this.pageParam == null) {
        sb.append("null");
      } else {
        sb.append(this.pageParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageParam != null) {
        pageParam.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchesByCompetitorId_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchesByCompetitorId_argsStandardScheme getScheme() {
        return new getMatchesByCompetitorId_argsStandardScheme();
      }
    }

    private static class getMatchesByCompetitorId_argsStandardScheme extends StandardScheme<getMatchesByCompetitorId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchesByCompetitorId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPETITOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.competitorId = iprot.readI64();
                struct.setCompetitorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CSID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.csid = iprot.readI32();
                struct.setCsidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageParam = new com.lesports.api.common.PageParam();
                struct.pageParam.read(iprot);
                struct.setPageParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchesByCompetitorId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COMPETITOR_ID_FIELD_DESC);
        oprot.writeI64(struct.competitorId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI32(struct.csid);
        oprot.writeFieldEnd();
        if (struct.pageParam != null) {
          oprot.writeFieldBegin(PAGE_PARAM_FIELD_DESC);
          struct.pageParam.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchesByCompetitorId_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchesByCompetitorId_argsTupleScheme getScheme() {
        return new getMatchesByCompetitorId_argsTupleScheme();
      }
    }

    private static class getMatchesByCompetitorId_argsTupleScheme extends TupleScheme<getMatchesByCompetitorId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchesByCompetitorId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCompetitorId()) {
          optionals.set(0);
        }
        if (struct.isSetCsid()) {
          optionals.set(1);
        }
        if (struct.isSetPageParam()) {
          optionals.set(2);
        }
        if (struct.isSetCaller()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCompetitorId()) {
          oprot.writeI64(struct.competitorId);
        }
        if (struct.isSetCsid()) {
          oprot.writeI32(struct.csid);
        }
        if (struct.isSetPageParam()) {
          struct.pageParam.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchesByCompetitorId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.competitorId = iprot.readI64();
          struct.setCompetitorIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.csid = iprot.readI32();
          struct.setCsidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageParam = new com.lesports.api.common.PageParam();
          struct.pageParam.read(iprot);
          struct.setPageParamIsSet(true);
        }
        if (incoming.get(3)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getMatchesByCompetitorId_result implements org.apache.thrift.TBase<getMatchesByCompetitorId_result, getMatchesByCompetitorId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchesByCompetitorId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchesByCompetitorId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchesByCompetitorId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchesByCompetitorId_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TMatch> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatch.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchesByCompetitorId_result.class, metaDataMap);
    }

    public getMatchesByCompetitorId_result() {
    }

    public getMatchesByCompetitorId_result(
      List<com.lesports.qmt.sbd.api.dto.TMatch> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchesByCompetitorId_result(getMatchesByCompetitorId_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TMatch> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TMatch other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TMatch(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMatchesByCompetitorId_result deepCopy() {
      return new getMatchesByCompetitorId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TMatch> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TMatch elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatch> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TMatch> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TMatch>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchesByCompetitorId_result)
        return this.equals((getMatchesByCompetitorId_result)that);
      return false;
    }

    public boolean equals(getMatchesByCompetitorId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMatchesByCompetitorId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchesByCompetitorId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchesByCompetitorId_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchesByCompetitorId_resultStandardScheme getScheme() {
        return new getMatchesByCompetitorId_resultStandardScheme();
      }
    }

    private static class getMatchesByCompetitorId_resultStandardScheme extends StandardScheme<getMatchesByCompetitorId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchesByCompetitorId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>(_list112.size);
                  com.lesports.qmt.sbd.api.dto.TMatch _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.lesports.qmt.sbd.api.dto.TMatch();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchesByCompetitorId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TMatch _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchesByCompetitorId_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchesByCompetitorId_resultTupleScheme getScheme() {
        return new getMatchesByCompetitorId_resultTupleScheme();
      }
    }

    private static class getMatchesByCompetitorId_resultTupleScheme extends TupleScheme<getMatchesByCompetitorId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchesByCompetitorId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TMatch _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchesByCompetitorId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatch>(_list117.size);
            com.lesports.qmt.sbd.api.dto.TMatch _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.lesports.qmt.sbd.api.dto.TMatch();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class syncZhangyuGames_args implements org.apache.thrift.TBase<syncZhangyuGames_args, syncZhangyuGames_args._Fields>, java.io.Serializable, Cloneable, Comparable<syncZhangyuGames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncZhangyuGames_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncZhangyuGames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncZhangyuGames_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncZhangyuGames_args.class, metaDataMap);
    }

    public syncZhangyuGames_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncZhangyuGames_args(syncZhangyuGames_args other) {
    }

    public syncZhangyuGames_args deepCopy() {
      return new syncZhangyuGames_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncZhangyuGames_args)
        return this.equals((syncZhangyuGames_args)that);
      return false;
    }

    public boolean equals(syncZhangyuGames_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(syncZhangyuGames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncZhangyuGames_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncZhangyuGames_argsStandardSchemeFactory implements SchemeFactory {
      public syncZhangyuGames_argsStandardScheme getScheme() {
        return new syncZhangyuGames_argsStandardScheme();
      }
    }

    private static class syncZhangyuGames_argsStandardScheme extends StandardScheme<syncZhangyuGames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncZhangyuGames_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncZhangyuGames_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncZhangyuGames_argsTupleSchemeFactory implements SchemeFactory {
      public syncZhangyuGames_argsTupleScheme getScheme() {
        return new syncZhangyuGames_argsTupleScheme();
      }
    }

    private static class syncZhangyuGames_argsTupleScheme extends TupleScheme<syncZhangyuGames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncZhangyuGames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncZhangyuGames_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class syncZhangyuGames_result implements org.apache.thrift.TBase<syncZhangyuGames_result, syncZhangyuGames_result._Fields>, java.io.Serializable, Cloneable, Comparable<syncZhangyuGames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("syncZhangyuGames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new syncZhangyuGames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new syncZhangyuGames_resultTupleSchemeFactory());
    }

    private Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(syncZhangyuGames_result.class, metaDataMap);
    }

    public syncZhangyuGames_result() {
    }

    public syncZhangyuGames_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncZhangyuGames_result(syncZhangyuGames_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public syncZhangyuGames_result deepCopy() {
      return new syncZhangyuGames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncZhangyuGames_result)
        return this.equals((syncZhangyuGames_result)that);
      return false;
    }

    public boolean equals(syncZhangyuGames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(syncZhangyuGames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("syncZhangyuGames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class syncZhangyuGames_resultStandardSchemeFactory implements SchemeFactory {
      public syncZhangyuGames_resultStandardScheme getScheme() {
        return new syncZhangyuGames_resultStandardScheme();
      }
    }

    private static class syncZhangyuGames_resultStandardScheme extends StandardScheme<syncZhangyuGames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, syncZhangyuGames_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map120.size);
                  String _key121;
                  String _val122;
                  for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                  {
                    _key121 = iprot.readString();
                    _val122 = iprot.readString();
                    struct.success.put(_key121, _val122);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, syncZhangyuGames_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter124 : struct.success.entrySet())
            {
              oprot.writeString(_iter124.getKey());
              oprot.writeString(_iter124.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class syncZhangyuGames_resultTupleSchemeFactory implements SchemeFactory {
      public syncZhangyuGames_resultTupleScheme getScheme() {
        return new syncZhangyuGames_resultTupleScheme();
      }
    }

    private static class syncZhangyuGames_resultTupleScheme extends TupleScheme<syncZhangyuGames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, syncZhangyuGames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter125 : struct.success.entrySet())
            {
              oprot.writeString(_iter125.getKey());
              oprot.writeString(_iter125.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, syncZhangyuGames_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map126.size);
            String _key127;
            String _val128;
            for (int _i129 = 0; _i129 < _map126.size; ++_i129)
            {
              _key127 = iprot.readString();
              _val128 = iprot.readString();
              struct.success.put(_key127, _val128);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTDetailMatchesByPid_args implements org.apache.thrift.TBase<getTDetailMatchesByPid_args, getTDetailMatchesByPid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTDetailMatchesByPid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTDetailMatchesByPid_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageParam", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTDetailMatchesByPid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTDetailMatchesByPid_argsTupleSchemeFactory());
    }

    private long pid; // required
    private com.lesports.api.common.MatchStatus status; // required
    private com.lesports.api.common.PageParam pageParam; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid"),
      /**
       * 
       * @see com.lesports.api.common.MatchStatus
       */
      STATUS((short)2, "status"),
      PAGE_PARAM((short)3, "pageParam"),
      CALLER((short)4, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          case 2: // STATUS
            return STATUS;
          case 3: // PAGE_PARAM
            return PAGE_PARAM;
          case 4: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.MatchStatus.class)));
      tmpMap.put(_Fields.PAGE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("pageParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTDetailMatchesByPid_args.class, metaDataMap);
    }

    public getTDetailMatchesByPid_args() {
    }

    public getTDetailMatchesByPid_args(
      long pid,
      com.lesports.api.common.MatchStatus status,
      com.lesports.api.common.PageParam pageParam,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
      this.status = status;
      this.pageParam = pageParam;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTDetailMatchesByPid_args(getTDetailMatchesByPid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      if (other.isSetPageParam()) {
        this.pageParam = new com.lesports.api.common.PageParam(other.pageParam);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTDetailMatchesByPid_args deepCopy() {
      return new getTDetailMatchesByPid_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
      this.status = null;
      this.pageParam = null;
      this.caller = null;
    }

    public long getPid() {
      return this.pid;
    }

    public void setPid(long pid) {
      this.pid = pid;
      setPidIsSet(true);
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    /**
     * 
     * @see com.lesports.api.common.MatchStatus
     */
    public com.lesports.api.common.MatchStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see com.lesports.api.common.MatchStatus
     */
    public void setStatus(com.lesports.api.common.MatchStatus status) {
      this.status = status;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public com.lesports.api.common.PageParam getPageParam() {
      return this.pageParam;
    }

    public void setPageParam(com.lesports.api.common.PageParam pageParam) {
      this.pageParam = pageParam;
    }

    public void unsetPageParam() {
      this.pageParam = null;
    }

    /** Returns true if field pageParam is set (has been assigned a value) and false otherwise */
    public boolean isSetPageParam() {
      return this.pageParam != null;
    }

    public void setPageParamIsSet(boolean value) {
      if (!value) {
        this.pageParam = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Long)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((com.lesports.api.common.MatchStatus)value);
        }
        break;

      case PAGE_PARAM:
        if (value == null) {
          unsetPageParam();
        } else {
          setPageParam((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Long.valueOf(getPid());

      case STATUS:
        return getStatus();

      case PAGE_PARAM:
        return getPageParam();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      case STATUS:
        return isSetStatus();
      case PAGE_PARAM:
        return isSetPageParam();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTDetailMatchesByPid_args)
        return this.equals((getTDetailMatchesByPid_args)that);
      return false;
    }

    public boolean equals(getTDetailMatchesByPid_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_pageParam = true && this.isSetPageParam();
      boolean that_present_pageParam = true && that.isSetPageParam();
      if (this_present_pageParam || that_present_pageParam) {
        if (!(this_present_pageParam && that_present_pageParam))
          return false;
        if (!this.pageParam.equals(that.pageParam))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status.getValue());

      boolean present_pageParam = true && (isSetPageParam());
      list.add(present_pageParam);
      if (present_pageParam)
        list.add(pageParam);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTDetailMatchesByPid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageParam()).compareTo(other.isSetPageParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageParam, other.pageParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTDetailMatchesByPid_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageParam:");
      if (this.pageParam == null) {
        sb.append("null");
      } else {
        sb.append(this.pageParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageParam != null) {
        pageParam.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTDetailMatchesByPid_argsStandardSchemeFactory implements SchemeFactory {
      public getTDetailMatchesByPid_argsStandardScheme getScheme() {
        return new getTDetailMatchesByPid_argsStandardScheme();
      }
    }

    private static class getTDetailMatchesByPid_argsStandardScheme extends StandardScheme<getTDetailMatchesByPid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTDetailMatchesByPid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.pid = iprot.readI64();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageParam = new com.lesports.api.common.PageParam();
                struct.pageParam.read(iprot);
                struct.setPageParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTDetailMatchesByPid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI64(struct.pid);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.pageParam != null) {
          oprot.writeFieldBegin(PAGE_PARAM_FIELD_DESC);
          struct.pageParam.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTDetailMatchesByPid_argsTupleSchemeFactory implements SchemeFactory {
      public getTDetailMatchesByPid_argsTupleScheme getScheme() {
        return new getTDetailMatchesByPid_argsTupleScheme();
      }
    }

    private static class getTDetailMatchesByPid_argsTupleScheme extends TupleScheme<getTDetailMatchesByPid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchesByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        if (struct.isSetPageParam()) {
          optionals.set(2);
        }
        if (struct.isSetCaller()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPid()) {
          oprot.writeI64(struct.pid);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
        if (struct.isSetPageParam()) {
          struct.pageParam.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchesByPid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pid = iprot.readI64();
          struct.setPidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = com.lesports.api.common.MatchStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageParam = new com.lesports.api.common.PageParam();
          struct.pageParam.read(iprot);
          struct.setPageParamIsSet(true);
        }
        if (incoming.get(3)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTDetailMatchesByPid_result implements org.apache.thrift.TBase<getTDetailMatchesByPid_result, getTDetailMatchesByPid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTDetailMatchesByPid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTDetailMatchesByPid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTDetailMatchesByPid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTDetailMatchesByPid_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TDetailMatch> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TDetailMatch.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTDetailMatchesByPid_result.class, metaDataMap);
    }

    public getTDetailMatchesByPid_result() {
    }

    public getTDetailMatchesByPid_result(
      List<com.lesports.qmt.sbd.api.dto.TDetailMatch> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTDetailMatchesByPid_result(getTDetailMatchesByPid_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TDetailMatch> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TDetailMatch other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TDetailMatch(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTDetailMatchesByPid_result deepCopy() {
      return new getTDetailMatchesByPid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TDetailMatch> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TDetailMatch elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TDetailMatch> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TDetailMatch>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTDetailMatchesByPid_result)
        return this.equals((getTDetailMatchesByPid_result)that);
      return false;
    }

    public boolean equals(getTDetailMatchesByPid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTDetailMatchesByPid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTDetailMatchesByPid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTDetailMatchesByPid_resultStandardSchemeFactory implements SchemeFactory {
      public getTDetailMatchesByPid_resultStandardScheme getScheme() {
        return new getTDetailMatchesByPid_resultStandardScheme();
      }
    }

    private static class getTDetailMatchesByPid_resultStandardScheme extends StandardScheme<getTDetailMatchesByPid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTDetailMatchesByPid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>(_list130.size);
                  com.lesports.qmt.sbd.api.dto.TDetailMatch _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = new com.lesports.qmt.sbd.api.dto.TDetailMatch();
                    _elem131.read(iprot);
                    struct.success.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTDetailMatchesByPid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TDetailMatch _iter133 : struct.success)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTDetailMatchesByPid_resultTupleSchemeFactory implements SchemeFactory {
      public getTDetailMatchesByPid_resultTupleScheme getScheme() {
        return new getTDetailMatchesByPid_resultTupleScheme();
      }
    }

    private static class getTDetailMatchesByPid_resultTupleScheme extends TupleScheme<getTDetailMatchesByPid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchesByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TDetailMatch _iter134 : struct.success)
            {
              _iter134.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTDetailMatchesByPid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>(_list135.size);
            com.lesports.qmt.sbd.api.dto.TDetailMatch _elem136;
            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
            {
              _elem136 = new com.lesports.qmt.sbd.api.dto.TDetailMatch();
              _elem136.read(iprot);
              struct.success.add(_elem136);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTDetailMatches_args implements org.apache.thrift.TBase<getTDetailMatches_args, getTDetailMatches_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTDetailMatches_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTDetailMatches_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageParam", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTDetailMatches_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTDetailMatches_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p; // required
    private com.lesports.api.common.PageParam pageParam; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE_PARAM((short)2, "pageParam"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE_PARAM
            return PAGE_PARAM;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam.class)));
      tmpMap.put(_Fields.PAGE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("pageParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTDetailMatches_args.class, metaDataMap);
    }

    public getTDetailMatches_args() {
    }

    public getTDetailMatches_args(
      com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p,
      com.lesports.api.common.PageParam pageParam,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.pageParam = pageParam;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTDetailMatches_args(getTDetailMatches_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam(other.p);
      }
      if (other.isSetPageParam()) {
        this.pageParam = new com.lesports.api.common.PageParam(other.pageParam);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTDetailMatches_args deepCopy() {
      return new getTDetailMatches_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.pageParam = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPageParam() {
      return this.pageParam;
    }

    public void setPageParam(com.lesports.api.common.PageParam pageParam) {
      this.pageParam = pageParam;
    }

    public void unsetPageParam() {
      this.pageParam = null;
    }

    /** Returns true if field pageParam is set (has been assigned a value) and false otherwise */
    public boolean isSetPageParam() {
      return this.pageParam != null;
    }

    public void setPageParamIsSet(boolean value) {
      if (!value) {
        this.pageParam = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam)value);
        }
        break;

      case PAGE_PARAM:
        if (value == null) {
          unsetPageParam();
        } else {
          setPageParam((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE_PARAM:
        return getPageParam();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE_PARAM:
        return isSetPageParam();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTDetailMatches_args)
        return this.equals((getTDetailMatches_args)that);
      return false;
    }

    public boolean equals(getTDetailMatches_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_pageParam = true && this.isSetPageParam();
      boolean that_present_pageParam = true && that.isSetPageParam();
      if (this_present_pageParam || that_present_pageParam) {
        if (!(this_present_pageParam && that_present_pageParam))
          return false;
        if (!this.pageParam.equals(that.pageParam))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_pageParam = true && (isSetPageParam());
      list.add(present_pageParam);
      if (present_pageParam)
        list.add(pageParam);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTDetailMatches_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageParam()).compareTo(other.isSetPageParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageParam, other.pageParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTDetailMatches_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageParam:");
      if (this.pageParam == null) {
        sb.append("null");
      } else {
        sb.append(this.pageParam);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (pageParam != null) {
        pageParam.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTDetailMatches_argsStandardSchemeFactory implements SchemeFactory {
      public getTDetailMatches_argsStandardScheme getScheme() {
        return new getTDetailMatches_argsStandardScheme();
      }
    }

    private static class getTDetailMatches_argsStandardScheme extends StandardScheme<getTDetailMatches_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTDetailMatches_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageParam = new com.lesports.api.common.PageParam();
                struct.pageParam.read(iprot);
                struct.setPageParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTDetailMatches_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageParam != null) {
          oprot.writeFieldBegin(PAGE_PARAM_FIELD_DESC);
          struct.pageParam.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTDetailMatches_argsTupleSchemeFactory implements SchemeFactory {
      public getTDetailMatches_argsTupleScheme getScheme() {
        return new getTDetailMatches_argsTupleScheme();
      }
    }

    private static class getTDetailMatches_argsTupleScheme extends TupleScheme<getTDetailMatches_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTDetailMatches_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPageParam()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPageParam()) {
          struct.pageParam.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTDetailMatches_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetPlayerMatchesParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageParam = new com.lesports.api.common.PageParam();
          struct.pageParam.read(iprot);
          struct.setPageParamIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTDetailMatches_result implements org.apache.thrift.TBase<getTDetailMatches_result, getTDetailMatches_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTDetailMatches_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTDetailMatches_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTDetailMatches_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTDetailMatches_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TDetailMatch> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TDetailMatch.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTDetailMatches_result.class, metaDataMap);
    }

    public getTDetailMatches_result() {
    }

    public getTDetailMatches_result(
      List<com.lesports.qmt.sbd.api.dto.TDetailMatch> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTDetailMatches_result(getTDetailMatches_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TDetailMatch> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TDetailMatch other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TDetailMatch(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTDetailMatches_result deepCopy() {
      return new getTDetailMatches_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TDetailMatch> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TDetailMatch elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TDetailMatch> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TDetailMatch> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TDetailMatch>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTDetailMatches_result)
        return this.equals((getTDetailMatches_result)that);
      return false;
    }

    public boolean equals(getTDetailMatches_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTDetailMatches_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTDetailMatches_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTDetailMatches_resultStandardSchemeFactory implements SchemeFactory {
      public getTDetailMatches_resultStandardScheme getScheme() {
        return new getTDetailMatches_resultStandardScheme();
      }
    }

    private static class getTDetailMatches_resultStandardScheme extends StandardScheme<getTDetailMatches_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTDetailMatches_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>(_list138.size);
                  com.lesports.qmt.sbd.api.dto.TDetailMatch _elem139;
                  for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                  {
                    _elem139 = new com.lesports.qmt.sbd.api.dto.TDetailMatch();
                    _elem139.read(iprot);
                    struct.success.add(_elem139);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTDetailMatches_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TDetailMatch _iter141 : struct.success)
            {
              _iter141.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTDetailMatches_resultTupleSchemeFactory implements SchemeFactory {
      public getTDetailMatches_resultTupleScheme getScheme() {
        return new getTDetailMatches_resultTupleScheme();
      }
    }

    private static class getTDetailMatches_resultTupleScheme extends TupleScheme<getTDetailMatches_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTDetailMatches_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TDetailMatch _iter142 : struct.success)
            {
              _iter142.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTDetailMatches_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TDetailMatch>(_list143.size);
            com.lesports.qmt.sbd.api.dto.TDetailMatch _elem144;
            for (int _i145 = 0; _i145 < _list143.size; ++_i145)
            {
              _elem144 = new com.lesports.qmt.sbd.api.dto.TDetailMatch();
              _elem144.read(iprot);
              struct.success.add(_elem144);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchIdsByCidAndMetaEntryId_args implements org.apache.thrift.TBase<getMatchIdsByCidAndMetaEntryId_args, getMatchIdsByCidAndMetaEntryId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchIdsByCidAndMetaEntryId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchIdsByCidAndMetaEntryId_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CSID_FIELD_DESC = new org.apache.thrift.protocol.TField("csid", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageParam", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchIdsByCidAndMetaEntryId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchIdsByCidAndMetaEntryId_argsTupleSchemeFactory());
    }

    private long cid; // required
    private long csid; // required
    private long entryId; // required
    private com.lesports.api.common.PageParam pageParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      CSID((short)2, "csid"),
      ENTRY_ID((short)3, "entryId"),
      PAGE_PARAM((short)4, "pageParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // CSID
            return CSID;
          case 3: // ENTRY_ID
            return ENTRY_ID;
          case 4: // PAGE_PARAM
            return PAGE_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private static final int __CSID_ISSET_ID = 1;
    private static final int __ENTRYID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CSID, new org.apache.thrift.meta_data.FieldMetaData("csid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PAGE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("pageParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchIdsByCidAndMetaEntryId_args.class, metaDataMap);
    }

    public getMatchIdsByCidAndMetaEntryId_args() {
    }

    public getMatchIdsByCidAndMetaEntryId_args(
      long cid,
      long csid,
      long entryId,
      com.lesports.api.common.PageParam pageParam)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.csid = csid;
      setCsidIsSet(true);
      this.entryId = entryId;
      setEntryIdIsSet(true);
      this.pageParam = pageParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchIdsByCidAndMetaEntryId_args(getMatchIdsByCidAndMetaEntryId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      this.csid = other.csid;
      this.entryId = other.entryId;
      if (other.isSetPageParam()) {
        this.pageParam = new com.lesports.api.common.PageParam(other.pageParam);
      }
    }

    public getMatchIdsByCidAndMetaEntryId_args deepCopy() {
      return new getMatchIdsByCidAndMetaEntryId_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      setCsidIsSet(false);
      this.csid = 0;
      setEntryIdIsSet(false);
      this.entryId = 0;
      this.pageParam = null;
    }

    public long getCid() {
      return this.cid;
    }

    public void setCid(long cid) {
      this.cid = cid;
      setCidIsSet(true);
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public long getCsid() {
      return this.csid;
    }

    public void setCsid(long csid) {
      this.csid = csid;
      setCsidIsSet(true);
    }

    public void unsetCsid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CSID_ISSET_ID);
    }

    /** Returns true if field csid is set (has been assigned a value) and false otherwise */
    public boolean isSetCsid() {
      return EncodingUtils.testBit(__isset_bitfield, __CSID_ISSET_ID);
    }

    public void setCsidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CSID_ISSET_ID, value);
    }

    public long getEntryId() {
      return this.entryId;
    }

    public void setEntryId(long entryId) {
      this.entryId = entryId;
      setEntryIdIsSet(true);
    }

    public void unsetEntryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRYID_ISSET_ID);
    }

    /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntryId() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRYID_ISSET_ID);
    }

    public void setEntryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRYID_ISSET_ID, value);
    }

    public com.lesports.api.common.PageParam getPageParam() {
      return this.pageParam;
    }

    public void setPageParam(com.lesports.api.common.PageParam pageParam) {
      this.pageParam = pageParam;
    }

    public void unsetPageParam() {
      this.pageParam = null;
    }

    /** Returns true if field pageParam is set (has been assigned a value) and false otherwise */
    public boolean isSetPageParam() {
      return this.pageParam != null;
    }

    public void setPageParamIsSet(boolean value) {
      if (!value) {
        this.pageParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Long)value);
        }
        break;

      case CSID:
        if (value == null) {
          unsetCsid();
        } else {
          setCsid((Long)value);
        }
        break;

      case ENTRY_ID:
        if (value == null) {
          unsetEntryId();
        } else {
          setEntryId((Long)value);
        }
        break;

      case PAGE_PARAM:
        if (value == null) {
          unsetPageParam();
        } else {
          setPageParam((com.lesports.api.common.PageParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Long.valueOf(getCid());

      case CSID:
        return Long.valueOf(getCsid());

      case ENTRY_ID:
        return Long.valueOf(getEntryId());

      case PAGE_PARAM:
        return getPageParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case CSID:
        return isSetCsid();
      case ENTRY_ID:
        return isSetEntryId();
      case PAGE_PARAM:
        return isSetPageParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchIdsByCidAndMetaEntryId_args)
        return this.equals((getMatchIdsByCidAndMetaEntryId_args)that);
      return false;
    }

    public boolean equals(getMatchIdsByCidAndMetaEntryId_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_csid = true;
      boolean that_present_csid = true;
      if (this_present_csid || that_present_csid) {
        if (!(this_present_csid && that_present_csid))
          return false;
        if (this.csid != that.csid)
          return false;
      }

      boolean this_present_entryId = true;
      boolean that_present_entryId = true;
      if (this_present_entryId || that_present_entryId) {
        if (!(this_present_entryId && that_present_entryId))
          return false;
        if (this.entryId != that.entryId)
          return false;
      }

      boolean this_present_pageParam = true && this.isSetPageParam();
      boolean that_present_pageParam = true && that.isSetPageParam();
      if (this_present_pageParam || that_present_pageParam) {
        if (!(this_present_pageParam && that_present_pageParam))
          return false;
        if (!this.pageParam.equals(that.pageParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_csid = true;
      list.add(present_csid);
      if (present_csid)
        list.add(csid);

      boolean present_entryId = true;
      list.add(present_entryId);
      if (present_entryId)
        list.add(entryId);

      boolean present_pageParam = true && (isSetPageParam());
      list.add(present_pageParam);
      if (present_pageParam)
        list.add(pageParam);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMatchIdsByCidAndMetaEntryId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCsid()).compareTo(other.isSetCsid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCsid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csid, other.csid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(other.isSetEntryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, other.entryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageParam()).compareTo(other.isSetPageParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageParam, other.pageParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchIdsByCidAndMetaEntryId_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("csid:");
      sb.append(this.csid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entryId:");
      sb.append(this.entryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageParam:");
      if (this.pageParam == null) {
        sb.append("null");
      } else {
        sb.append(this.pageParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pageParam != null) {
        pageParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchIdsByCidAndMetaEntryId_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchIdsByCidAndMetaEntryId_argsStandardScheme getScheme() {
        return new getMatchIdsByCidAndMetaEntryId_argsStandardScheme();
      }
    }

    private static class getMatchIdsByCidAndMetaEntryId_argsStandardScheme extends StandardScheme<getMatchIdsByCidAndMetaEntryId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchIdsByCidAndMetaEntryId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cid = iprot.readI64();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CSID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.csid = iprot.readI64();
                struct.setCsidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENTRY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.entryId = iprot.readI64();
                struct.setEntryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageParam = new com.lesports.api.common.PageParam();
                struct.pageParam.read(iprot);
                struct.setPageParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchIdsByCidAndMetaEntryId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CSID_FIELD_DESC);
        oprot.writeI64(struct.csid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.entryId);
        oprot.writeFieldEnd();
        if (struct.pageParam != null) {
          oprot.writeFieldBegin(PAGE_PARAM_FIELD_DESC);
          struct.pageParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchIdsByCidAndMetaEntryId_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchIdsByCidAndMetaEntryId_argsTupleScheme getScheme() {
        return new getMatchIdsByCidAndMetaEntryId_argsTupleScheme();
      }
    }

    private static class getMatchIdsByCidAndMetaEntryId_argsTupleScheme extends TupleScheme<getMatchIdsByCidAndMetaEntryId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchIdsByCidAndMetaEntryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetCsid()) {
          optionals.set(1);
        }
        if (struct.isSetEntryId()) {
          optionals.set(2);
        }
        if (struct.isSetPageParam()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCid()) {
          oprot.writeI64(struct.cid);
        }
        if (struct.isSetCsid()) {
          oprot.writeI64(struct.csid);
        }
        if (struct.isSetEntryId()) {
          oprot.writeI64(struct.entryId);
        }
        if (struct.isSetPageParam()) {
          struct.pageParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchIdsByCidAndMetaEntryId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cid = iprot.readI64();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.csid = iprot.readI64();
          struct.setCsidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.entryId = iprot.readI64();
          struct.setEntryIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageParam = new com.lesports.api.common.PageParam();
          struct.pageParam.read(iprot);
          struct.setPageParamIsSet(true);
        }
      }
    }

  }

  public static class getMatchIdsByCidAndMetaEntryId_result implements org.apache.thrift.TBase<getMatchIdsByCidAndMetaEntryId_result, getMatchIdsByCidAndMetaEntryId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchIdsByCidAndMetaEntryId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchIdsByCidAndMetaEntryId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchIdsByCidAndMetaEntryId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchIdsByCidAndMetaEntryId_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchIdsByCidAndMetaEntryId_result.class, metaDataMap);
    }

    public getMatchIdsByCidAndMetaEntryId_result() {
    }

    public getMatchIdsByCidAndMetaEntryId_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchIdsByCidAndMetaEntryId_result(getMatchIdsByCidAndMetaEntryId_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getMatchIdsByCidAndMetaEntryId_result deepCopy() {
      return new getMatchIdsByCidAndMetaEntryId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchIdsByCidAndMetaEntryId_result)
        return this.equals((getMatchIdsByCidAndMetaEntryId_result)that);
      return false;
    }

    public boolean equals(getMatchIdsByCidAndMetaEntryId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMatchIdsByCidAndMetaEntryId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchIdsByCidAndMetaEntryId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchIdsByCidAndMetaEntryId_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchIdsByCidAndMetaEntryId_resultStandardScheme getScheme() {
        return new getMatchIdsByCidAndMetaEntryId_resultStandardScheme();
      }
    }

    private static class getMatchIdsByCidAndMetaEntryId_resultStandardScheme extends StandardScheme<getMatchIdsByCidAndMetaEntryId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchIdsByCidAndMetaEntryId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list146.size);
                  long _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = iprot.readI64();
                    struct.success.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchIdsByCidAndMetaEntryId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter149 : struct.success)
            {
              oprot.writeI64(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchIdsByCidAndMetaEntryId_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchIdsByCidAndMetaEntryId_resultTupleScheme getScheme() {
        return new getMatchIdsByCidAndMetaEntryId_resultTupleScheme();
      }
    }

    private static class getMatchIdsByCidAndMetaEntryId_resultTupleScheme extends TupleScheme<getMatchIdsByCidAndMetaEntryId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchIdsByCidAndMetaEntryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter150 : struct.success)
            {
              oprot.writeI64(_iter150);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchIdsByCidAndMetaEntryId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list151.size);
            long _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = iprot.readI64();
              struct.success.add(_elem152);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTMatchActionById_args implements org.apache.thrift.TBase<getTMatchActionById_args, getTMatchActionById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchActionById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchActionById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchActionById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchActionById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchActionById_args.class, metaDataMap);
    }

    public getTMatchActionById_args() {
    }

    public getTMatchActionById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchActionById_args(getTMatchActionById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTMatchActionById_args deepCopy() {
      return new getTMatchActionById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchActionById_args)
        return this.equals((getTMatchActionById_args)that);
      return false;
    }

    public boolean equals(getTMatchActionById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchActionById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchActionById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchActionById_argsStandardSchemeFactory implements SchemeFactory {
      public getTMatchActionById_argsStandardScheme getScheme() {
        return new getTMatchActionById_argsStandardScheme();
      }
    }

    private static class getTMatchActionById_argsStandardScheme extends StandardScheme<getTMatchActionById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchActionById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchActionById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchActionById_argsTupleSchemeFactory implements SchemeFactory {
      public getTMatchActionById_argsTupleScheme getScheme() {
        return new getTMatchActionById_argsTupleScheme();
      }
    }

    private static class getTMatchActionById_argsTupleScheme extends TupleScheme<getTMatchActionById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchActionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchActionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTMatchActionById_result implements org.apache.thrift.TBase<getTMatchActionById_result, getTMatchActionById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchActionById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchActionById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchActionById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchActionById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TMatchAction success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatchAction.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchActionById_result.class, metaDataMap);
    }

    public getTMatchActionById_result() {
    }

    public getTMatchActionById_result(
      com.lesports.qmt.sbd.api.dto.TMatchAction success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchActionById_result(getTMatchActionById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TMatchAction(other.success);
      }
    }

    public getTMatchActionById_result deepCopy() {
      return new getTMatchActionById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TMatchAction getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TMatchAction success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TMatchAction)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchActionById_result)
        return this.equals((getTMatchActionById_result)that);
      return false;
    }

    public boolean equals(getTMatchActionById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchActionById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchActionById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchActionById_resultStandardSchemeFactory implements SchemeFactory {
      public getTMatchActionById_resultStandardScheme getScheme() {
        return new getTMatchActionById_resultStandardScheme();
      }
    }

    private static class getTMatchActionById_resultStandardScheme extends StandardScheme<getTMatchActionById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchActionById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TMatchAction();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchActionById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchActionById_resultTupleSchemeFactory implements SchemeFactory {
      public getTMatchActionById_resultTupleScheme getScheme() {
        return new getTMatchActionById_resultTupleScheme();
      }
    }

    private static class getTMatchActionById_resultTupleScheme extends TupleScheme<getTMatchActionById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchActionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchActionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TMatchAction();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTMatchActionsByIds_args implements org.apache.thrift.TBase<getTMatchActionsByIds_args, getTMatchActionsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchActionsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchActionsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchActionsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchActionsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchActionsByIds_args.class, metaDataMap);
    }

    public getTMatchActionsByIds_args() {
    }

    public getTMatchActionsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchActionsByIds_args(getTMatchActionsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTMatchActionsByIds_args deepCopy() {
      return new getTMatchActionsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchActionsByIds_args)
        return this.equals((getTMatchActionsByIds_args)that);
      return false;
    }

    public boolean equals(getTMatchActionsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchActionsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchActionsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchActionsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTMatchActionsByIds_argsStandardScheme getScheme() {
        return new getTMatchActionsByIds_argsStandardScheme();
      }
    }

    private static class getTMatchActionsByIds_argsStandardScheme extends StandardScheme<getTMatchActionsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchActionsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list154.size);
                  long _elem155;
                  for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                  {
                    _elem155 = iprot.readI64();
                    struct.ids.add(_elem155);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchActionsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter157 : struct.ids)
            {
              oprot.writeI64(_iter157);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchActionsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTMatchActionsByIds_argsTupleScheme getScheme() {
        return new getTMatchActionsByIds_argsTupleScheme();
      }
    }

    private static class getTMatchActionsByIds_argsTupleScheme extends TupleScheme<getTMatchActionsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchActionsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter158 : struct.ids)
            {
              oprot.writeI64(_iter158);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchActionsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list159 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list159.size);
            long _elem160;
            for (int _i161 = 0; _i161 < _list159.size; ++_i161)
            {
              _elem160 = iprot.readI64();
              struct.ids.add(_elem160);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTMatchActionsByIds_result implements org.apache.thrift.TBase<getTMatchActionsByIds_result, getTMatchActionsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchActionsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchActionsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchActionsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchActionsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TMatchAction> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatchAction.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchActionsByIds_result.class, metaDataMap);
    }

    public getTMatchActionsByIds_result() {
    }

    public getTMatchActionsByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TMatchAction> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchActionsByIds_result(getTMatchActionsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TMatchAction> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatchAction>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TMatchAction other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TMatchAction(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTMatchActionsByIds_result deepCopy() {
      return new getTMatchActionsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TMatchAction> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TMatchAction elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatchAction>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TMatchAction> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TMatchAction> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TMatchAction>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchActionsByIds_result)
        return this.equals((getTMatchActionsByIds_result)that);
      return false;
    }

    public boolean equals(getTMatchActionsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchActionsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchActionsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchActionsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTMatchActionsByIds_resultStandardScheme getScheme() {
        return new getTMatchActionsByIds_resultStandardScheme();
      }
    }

    private static class getTMatchActionsByIds_resultStandardScheme extends StandardScheme<getTMatchActionsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchActionsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatchAction>(_list162.size);
                  com.lesports.qmt.sbd.api.dto.TMatchAction _elem163;
                  for (int _i164 = 0; _i164 < _list162.size; ++_i164)
                  {
                    _elem163 = new com.lesports.qmt.sbd.api.dto.TMatchAction();
                    _elem163.read(iprot);
                    struct.success.add(_elem163);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchActionsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TMatchAction _iter165 : struct.success)
            {
              _iter165.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchActionsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTMatchActionsByIds_resultTupleScheme getScheme() {
        return new getTMatchActionsByIds_resultTupleScheme();
      }
    }

    private static class getTMatchActionsByIds_resultTupleScheme extends TupleScheme<getTMatchActionsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchActionsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TMatchAction _iter166 : struct.success)
            {
              _iter166.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchActionsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TMatchAction>(_list167.size);
            com.lesports.qmt.sbd.api.dto.TMatchAction _elem168;
            for (int _i169 = 0; _i169 < _list167.size; ++_i169)
            {
              _elem168 = new com.lesports.qmt.sbd.api.dto.TMatchAction();
              _elem168.read(iprot);
              struct.success.add(_elem168);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMatchActionsOfMatch_args implements org.apache.thrift.TBase<getMatchActionsOfMatch_args, getMatchActionsOfMatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchActionsOfMatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchActionsOfMatch_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchActionsOfMatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchActionsOfMatch_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetMacthActionsParam p; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetMacthActionsParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchActionsOfMatch_args.class, metaDataMap);
    }

    public getMatchActionsOfMatch_args() {
    }

    public getMatchActionsOfMatch_args(
      com.lesports.qmt.sbd.api.service.GetMacthActionsParam p,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchActionsOfMatch_args(getMatchActionsOfMatch_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetMacthActionsParam(other.p);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getMatchActionsOfMatch_args deepCopy() {
      return new getMatchActionsOfMatch_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetMacthActionsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetMacthActionsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetMacthActionsParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchActionsOfMatch_args)
        return this.equals((getMatchActionsOfMatch_args)that);
      return false;
    }

    public boolean equals(getMatchActionsOfMatch_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMatchActionsOfMatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchActionsOfMatch_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchActionsOfMatch_argsStandardSchemeFactory implements SchemeFactory {
      public getMatchActionsOfMatch_argsStandardScheme getScheme() {
        return new getMatchActionsOfMatch_argsStandardScheme();
      }
    }

    private static class getMatchActionsOfMatch_argsStandardScheme extends StandardScheme<getMatchActionsOfMatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchActionsOfMatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetMacthActionsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchActionsOfMatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchActionsOfMatch_argsTupleSchemeFactory implements SchemeFactory {
      public getMatchActionsOfMatch_argsTupleScheme getScheme() {
        return new getMatchActionsOfMatch_argsTupleScheme();
      }
    }

    private static class getMatchActionsOfMatch_argsTupleScheme extends TupleScheme<getMatchActionsOfMatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchActionsOfMatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchActionsOfMatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetMacthActionsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getMatchActionsOfMatch_result implements org.apache.thrift.TBase<getMatchActionsOfMatch_result, getMatchActionsOfMatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMatchActionsOfMatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMatchActionsOfMatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMatchActionsOfMatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMatchActionsOfMatch_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMatchActionsOfMatch_result.class, metaDataMap);
    }

    public getMatchActionsOfMatch_result() {
    }

    public getMatchActionsOfMatch_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMatchActionsOfMatch_result(getMatchActionsOfMatch_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getMatchActionsOfMatch_result deepCopy() {
      return new getMatchActionsOfMatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMatchActionsOfMatch_result)
        return this.equals((getMatchActionsOfMatch_result)that);
      return false;
    }

    public boolean equals(getMatchActionsOfMatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMatchActionsOfMatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMatchActionsOfMatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMatchActionsOfMatch_resultStandardSchemeFactory implements SchemeFactory {
      public getMatchActionsOfMatch_resultStandardScheme getScheme() {
        return new getMatchActionsOfMatch_resultStandardScheme();
      }
    }

    private static class getMatchActionsOfMatch_resultStandardScheme extends StandardScheme<getMatchActionsOfMatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMatchActionsOfMatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list170.size);
                  long _elem171;
                  for (int _i172 = 0; _i172 < _list170.size; ++_i172)
                  {
                    _elem171 = iprot.readI64();
                    struct.success.add(_elem171);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMatchActionsOfMatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter173 : struct.success)
            {
              oprot.writeI64(_iter173);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMatchActionsOfMatch_resultTupleSchemeFactory implements SchemeFactory {
      public getMatchActionsOfMatch_resultTupleScheme getScheme() {
        return new getMatchActionsOfMatch_resultTupleScheme();
      }
    }

    private static class getMatchActionsOfMatch_resultTupleScheme extends TupleScheme<getMatchActionsOfMatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMatchActionsOfMatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter174 : struct.success)
            {
              oprot.writeI64(_iter174);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMatchActionsOfMatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list175.size);
            long _elem176;
            for (int _i177 = 0; _i177 < _list175.size; ++_i177)
            {
              _elem176 = iprot.readI64();
              struct.success.add(_elem176);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTMatchStatsById_args implements org.apache.thrift.TBase<getTMatchStatsById_args, getTMatchStatsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchStatsById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchStatsById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchStatsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchStatsById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchStatsById_args.class, metaDataMap);
    }

    public getTMatchStatsById_args() {
    }

    public getTMatchStatsById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchStatsById_args(getTMatchStatsById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTMatchStatsById_args deepCopy() {
      return new getTMatchStatsById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchStatsById_args)
        return this.equals((getTMatchStatsById_args)that);
      return false;
    }

    public boolean equals(getTMatchStatsById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchStatsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchStatsById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchStatsById_argsStandardSchemeFactory implements SchemeFactory {
      public getTMatchStatsById_argsStandardScheme getScheme() {
        return new getTMatchStatsById_argsStandardScheme();
      }
    }

    private static class getTMatchStatsById_argsStandardScheme extends StandardScheme<getTMatchStatsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchStatsById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchStatsById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchStatsById_argsTupleSchemeFactory implements SchemeFactory {
      public getTMatchStatsById_argsTupleScheme getScheme() {
        return new getTMatchStatsById_argsTupleScheme();
      }
    }

    private static class getTMatchStatsById_argsTupleScheme extends TupleScheme<getTMatchStatsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchStatsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchStatsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTMatchStatsById_result implements org.apache.thrift.TBase<getTMatchStatsById_result, getTMatchStatsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchStatsById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchStatsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchStatsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchStatsById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TMatchStats success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatchStats.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchStatsById_result.class, metaDataMap);
    }

    public getTMatchStatsById_result() {
    }

    public getTMatchStatsById_result(
      com.lesports.qmt.sbd.api.dto.TMatchStats success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchStatsById_result(getTMatchStatsById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TMatchStats(other.success);
      }
    }

    public getTMatchStatsById_result deepCopy() {
      return new getTMatchStatsById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TMatchStats getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TMatchStats success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TMatchStats)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchStatsById_result)
        return this.equals((getTMatchStatsById_result)that);
      return false;
    }

    public boolean equals(getTMatchStatsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchStatsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchStatsById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchStatsById_resultStandardSchemeFactory implements SchemeFactory {
      public getTMatchStatsById_resultStandardScheme getScheme() {
        return new getTMatchStatsById_resultStandardScheme();
      }
    }

    private static class getTMatchStatsById_resultStandardScheme extends StandardScheme<getTMatchStatsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchStatsById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TMatchStats();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchStatsById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchStatsById_resultTupleSchemeFactory implements SchemeFactory {
      public getTMatchStatsById_resultTupleScheme getScheme() {
        return new getTMatchStatsById_resultTupleScheme();
      }
    }

    private static class getTMatchStatsById_resultTupleScheme extends TupleScheme<getTMatchStatsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchStatsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchStatsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TMatchStats();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionById_args implements org.apache.thrift.TBase<getTCompetitionById_args, getTCompetitionById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionById_args.class, metaDataMap);
    }

    public getTCompetitionById_args() {
    }

    public getTCompetitionById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionById_args(getTCompetitionById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitionById_args deepCopy() {
      return new getTCompetitionById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionById_args)
        return this.equals((getTCompetitionById_args)that);
      return false;
    }

    public boolean equals(getTCompetitionById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionById_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionById_argsStandardScheme getScheme() {
        return new getTCompetitionById_argsStandardScheme();
      }
    }

    private static class getTCompetitionById_argsStandardScheme extends StandardScheme<getTCompetitionById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionById_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionById_argsTupleScheme getScheme() {
        return new getTCompetitionById_argsTupleScheme();
      }
    }

    private static class getTCompetitionById_argsTupleScheme extends TupleScheme<getTCompetitionById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionById_result implements org.apache.thrift.TBase<getTCompetitionById_result, getTCompetitionById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TCompetition success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionById_result.class, metaDataMap);
    }

    public getTCompetitionById_result() {
    }

    public getTCompetitionById_result(
      com.lesports.qmt.sbd.api.dto.TCompetition success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionById_result(getTCompetitionById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TCompetition(other.success);
      }
    }

    public getTCompetitionById_result deepCopy() {
      return new getTCompetitionById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TCompetition getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TCompetition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TCompetition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionById_result)
        return this.equals((getTCompetitionById_result)that);
      return false;
    }

    public boolean equals(getTCompetitionById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionById_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionById_resultStandardScheme getScheme() {
        return new getTCompetitionById_resultStandardScheme();
      }
    }

    private static class getTCompetitionById_resultStandardScheme extends StandardScheme<getTCompetitionById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TCompetition();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionById_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionById_resultTupleScheme getScheme() {
        return new getTCompetitionById_resultTupleScheme();
      }
    }

    private static class getTCompetitionById_resultTupleScheme extends TupleScheme<getTCompetitionById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TCompetition();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionByIds_args implements org.apache.thrift.TBase<getTCompetitionByIds_args, getTCompetitionByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionByIds_args.class, metaDataMap);
    }

    public getTCompetitionByIds_args() {
    }

    public getTCompetitionByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionByIds_args(getTCompetitionByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitionByIds_args deepCopy() {
      return new getTCompetitionByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionByIds_args)
        return this.equals((getTCompetitionByIds_args)that);
      return false;
    }

    public boolean equals(getTCompetitionByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionByIds_argsStandardScheme getScheme() {
        return new getTCompetitionByIds_argsStandardScheme();
      }
    }

    private static class getTCompetitionByIds_argsStandardScheme extends StandardScheme<getTCompetitionByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list178.size);
                  long _elem179;
                  for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                  {
                    _elem179 = iprot.readI64();
                    struct.ids.add(_elem179);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter181 : struct.ids)
            {
              oprot.writeI64(_iter181);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionByIds_argsTupleScheme getScheme() {
        return new getTCompetitionByIds_argsTupleScheme();
      }
    }

    private static class getTCompetitionByIds_argsTupleScheme extends TupleScheme<getTCompetitionByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter182 : struct.ids)
            {
              oprot.writeI64(_iter182);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list183.size);
            long _elem184;
            for (int _i185 = 0; _i185 < _list183.size; ++_i185)
            {
              _elem184 = iprot.readI64();
              struct.ids.add(_elem184);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionByIds_result implements org.apache.thrift.TBase<getTCompetitionByIds_result, getTCompetitionByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TCompetition> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetition.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionByIds_result.class, metaDataMap);
    }

    public getTCompetitionByIds_result() {
    }

    public getTCompetitionByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TCompetition> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionByIds_result(getTCompetitionByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TCompetition> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetition>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TCompetition other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TCompetition(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTCompetitionByIds_result deepCopy() {
      return new getTCompetitionByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TCompetition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TCompetition elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetition>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetition> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TCompetition> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TCompetition>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionByIds_result)
        return this.equals((getTCompetitionByIds_result)that);
      return false;
    }

    public boolean equals(getTCompetitionByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionByIds_resultStandardScheme getScheme() {
        return new getTCompetitionByIds_resultStandardScheme();
      }
    }

    private static class getTCompetitionByIds_resultStandardScheme extends StandardScheme<getTCompetitionByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetition>(_list186.size);
                  com.lesports.qmt.sbd.api.dto.TCompetition _elem187;
                  for (int _i188 = 0; _i188 < _list186.size; ++_i188)
                  {
                    _elem187 = new com.lesports.qmt.sbd.api.dto.TCompetition();
                    _elem187.read(iprot);
                    struct.success.add(_elem187);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TCompetition _iter189 : struct.success)
            {
              _iter189.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionByIds_resultTupleScheme getScheme() {
        return new getTCompetitionByIds_resultTupleScheme();
      }
    }

    private static class getTCompetitionByIds_resultTupleScheme extends TupleScheme<getTCompetitionByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TCompetition _iter190 : struct.success)
            {
              _iter190.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list191 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetition>(_list191.size);
            com.lesports.qmt.sbd.api.dto.TCompetition _elem192;
            for (int _i193 = 0; _i193 < _list191.size; ++_i193)
            {
              _elem192 = new com.lesports.qmt.sbd.api.dto.TCompetition();
              _elem192.read(iprot);
              struct.success.add(_elem192);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitonIds4SimpleSearch_args implements org.apache.thrift.TBase<getTCompetitonIds4SimpleSearch_args, getTCompetitonIds4SimpleSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitonIds4SimpleSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitonIds4SimpleSearch_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitonIds4SimpleSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitonIds4SimpleSearch_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetCompetitionsParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetCompetitionsParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitonIds4SimpleSearch_args.class, metaDataMap);
    }

    public getTCompetitonIds4SimpleSearch_args() {
    }

    public getTCompetitonIds4SimpleSearch_args(
      com.lesports.qmt.sbd.api.service.GetCompetitionsParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitonIds4SimpleSearch_args(getTCompetitonIds4SimpleSearch_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetCompetitionsParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitonIds4SimpleSearch_args deepCopy() {
      return new getTCompetitonIds4SimpleSearch_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetCompetitionsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetCompetitionsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetCompetitionsParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitonIds4SimpleSearch_args)
        return this.equals((getTCompetitonIds4SimpleSearch_args)that);
      return false;
    }

    public boolean equals(getTCompetitonIds4SimpleSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitonIds4SimpleSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitonIds4SimpleSearch_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitonIds4SimpleSearch_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitonIds4SimpleSearch_argsStandardScheme getScheme() {
        return new getTCompetitonIds4SimpleSearch_argsStandardScheme();
      }
    }

    private static class getTCompetitonIds4SimpleSearch_argsStandardScheme extends StandardScheme<getTCompetitonIds4SimpleSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitonIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetCompetitionsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitonIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitonIds4SimpleSearch_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitonIds4SimpleSearch_argsTupleScheme getScheme() {
        return new getTCompetitonIds4SimpleSearch_argsTupleScheme();
      }
    }

    private static class getTCompetitonIds4SimpleSearch_argsTupleScheme extends TupleScheme<getTCompetitonIds4SimpleSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitonIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitonIds4SimpleSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetCompetitionsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitonIds4SimpleSearch_result implements org.apache.thrift.TBase<getTCompetitonIds4SimpleSearch_result, getTCompetitonIds4SimpleSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitonIds4SimpleSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitonIds4SimpleSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitonIds4SimpleSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitonIds4SimpleSearch_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitonIds4SimpleSearch_result.class, metaDataMap);
    }

    public getTCompetitonIds4SimpleSearch_result() {
    }

    public getTCompetitonIds4SimpleSearch_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitonIds4SimpleSearch_result(getTCompetitonIds4SimpleSearch_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getTCompetitonIds4SimpleSearch_result deepCopy() {
      return new getTCompetitonIds4SimpleSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitonIds4SimpleSearch_result)
        return this.equals((getTCompetitonIds4SimpleSearch_result)that);
      return false;
    }

    public boolean equals(getTCompetitonIds4SimpleSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitonIds4SimpleSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitonIds4SimpleSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitonIds4SimpleSearch_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitonIds4SimpleSearch_resultStandardScheme getScheme() {
        return new getTCompetitonIds4SimpleSearch_resultStandardScheme();
      }
    }

    private static class getTCompetitonIds4SimpleSearch_resultStandardScheme extends StandardScheme<getTCompetitonIds4SimpleSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitonIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list194.size);
                  long _elem195;
                  for (int _i196 = 0; _i196 < _list194.size; ++_i196)
                  {
                    _elem195 = iprot.readI64();
                    struct.success.add(_elem195);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitonIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter197 : struct.success)
            {
              oprot.writeI64(_iter197);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitonIds4SimpleSearch_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitonIds4SimpleSearch_resultTupleScheme getScheme() {
        return new getTCompetitonIds4SimpleSearch_resultTupleScheme();
      }
    }

    private static class getTCompetitonIds4SimpleSearch_resultTupleScheme extends TupleScheme<getTCompetitonIds4SimpleSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitonIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter198 : struct.success)
            {
              oprot.writeI64(_iter198);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitonIds4SimpleSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list199 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list199.size);
            long _elem200;
            for (int _i201 = 0; _i201 < _list199.size; ++_i201)
            {
              _elem200 = iprot.readI64();
              struct.success.add(_elem200);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionByCode_args implements org.apache.thrift.TBase<getTCompetitionByCode_args, getTCompetitionByCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionByCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionByCode_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionByCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionByCode_argsTupleSchemeFactory());
    }

    private String code; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionByCode_args.class, metaDataMap);
    }

    public getTCompetitionByCode_args() {
    }

    public getTCompetitionByCode_args(
      String code,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.code = code;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionByCode_args(getTCompetitionByCode_args other) {
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitionByCode_args deepCopy() {
      return new getTCompetitionByCode_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      this.caller = null;
    }

    public String getCode() {
      return this.code;
    }

    public void setCode(String code) {
      this.code = code;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionByCode_args)
        return this.equals((getTCompetitionByCode_args)that);
      return false;
    }

    public boolean equals(getTCompetitionByCode_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionByCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionByCode_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionByCode_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionByCode_argsStandardScheme getScheme() {
        return new getTCompetitionByCode_argsStandardScheme();
      }
    }

    private static class getTCompetitionByCode_argsStandardScheme extends StandardScheme<getTCompetitionByCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionByCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionByCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionByCode_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionByCode_argsTupleScheme getScheme() {
        return new getTCompetitionByCode_argsTupleScheme();
      }
    }

    private static class getTCompetitionByCode_argsTupleScheme extends TupleScheme<getTCompetitionByCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionByCode_result implements org.apache.thrift.TBase<getTCompetitionByCode_result, getTCompetitionByCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionByCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionByCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionByCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionByCode_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TCompetition success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionByCode_result.class, metaDataMap);
    }

    public getTCompetitionByCode_result() {
    }

    public getTCompetitionByCode_result(
      com.lesports.qmt.sbd.api.dto.TCompetition success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionByCode_result(getTCompetitionByCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TCompetition(other.success);
      }
    }

    public getTCompetitionByCode_result deepCopy() {
      return new getTCompetitionByCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TCompetition getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TCompetition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TCompetition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionByCode_result)
        return this.equals((getTCompetitionByCode_result)that);
      return false;
    }

    public boolean equals(getTCompetitionByCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionByCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionByCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionByCode_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionByCode_resultStandardScheme getScheme() {
        return new getTCompetitionByCode_resultStandardScheme();
      }
    }

    private static class getTCompetitionByCode_resultStandardScheme extends StandardScheme<getTCompetitionByCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionByCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TCompetition();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionByCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionByCode_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionByCode_resultTupleScheme getScheme() {
        return new getTCompetitionByCode_resultTupleScheme();
      }
    }

    private static class getTCompetitionByCode_resultTupleScheme extends TupleScheme<getTCompetitionByCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TCompetition();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionSeasonById_args implements org.apache.thrift.TBase<getTCompetitionSeasonById_args, getTCompetitionSeasonById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionSeasonById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionSeasonById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionSeasonById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionSeasonById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionSeasonById_args.class, metaDataMap);
    }

    public getTCompetitionSeasonById_args() {
    }

    public getTCompetitionSeasonById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionSeasonById_args(getTCompetitionSeasonById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitionSeasonById_args deepCopy() {
      return new getTCompetitionSeasonById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionSeasonById_args)
        return this.equals((getTCompetitionSeasonById_args)that);
      return false;
    }

    public boolean equals(getTCompetitionSeasonById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionSeasonById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionSeasonById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionSeasonById_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonById_argsStandardScheme getScheme() {
        return new getTCompetitionSeasonById_argsStandardScheme();
      }
    }

    private static class getTCompetitionSeasonById_argsStandardScheme extends StandardScheme<getTCompetitionSeasonById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionSeasonById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionSeasonById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionSeasonById_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonById_argsTupleScheme getScheme() {
        return new getTCompetitionSeasonById_argsTupleScheme();
      }
    }

    private static class getTCompetitionSeasonById_argsTupleScheme extends TupleScheme<getTCompetitionSeasonById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionSeasonById_result implements org.apache.thrift.TBase<getTCompetitionSeasonById_result, getTCompetitionSeasonById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionSeasonById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionSeasonById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionSeasonById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionSeasonById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TCompetitionSeason success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitionSeason.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionSeasonById_result.class, metaDataMap);
    }

    public getTCompetitionSeasonById_result() {
    }

    public getTCompetitionSeasonById_result(
      com.lesports.qmt.sbd.api.dto.TCompetitionSeason success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionSeasonById_result(getTCompetitionSeasonById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason(other.success);
      }
    }

    public getTCompetitionSeasonById_result deepCopy() {
      return new getTCompetitionSeasonById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TCompetitionSeason success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TCompetitionSeason)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionSeasonById_result)
        return this.equals((getTCompetitionSeasonById_result)that);
      return false;
    }

    public boolean equals(getTCompetitionSeasonById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionSeasonById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionSeasonById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionSeasonById_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonById_resultStandardScheme getScheme() {
        return new getTCompetitionSeasonById_resultStandardScheme();
      }
    }

    private static class getTCompetitionSeasonById_resultStandardScheme extends StandardScheme<getTCompetitionSeasonById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionSeasonById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionSeasonById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionSeasonById_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonById_resultTupleScheme getScheme() {
        return new getTCompetitionSeasonById_resultTupleScheme();
      }
    }

    private static class getTCompetitionSeasonById_resultTupleScheme extends TupleScheme<getTCompetitionSeasonById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionSeasonsByIds_args implements org.apache.thrift.TBase<getTCompetitionSeasonsByIds_args, getTCompetitionSeasonsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionSeasonsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionSeasonsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionSeasonsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionSeasonsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionSeasonsByIds_args.class, metaDataMap);
    }

    public getTCompetitionSeasonsByIds_args() {
    }

    public getTCompetitionSeasonsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionSeasonsByIds_args(getTCompetitionSeasonsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitionSeasonsByIds_args deepCopy() {
      return new getTCompetitionSeasonsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionSeasonsByIds_args)
        return this.equals((getTCompetitionSeasonsByIds_args)that);
      return false;
    }

    public boolean equals(getTCompetitionSeasonsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionSeasonsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionSeasonsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionSeasonsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonsByIds_argsStandardScheme getScheme() {
        return new getTCompetitionSeasonsByIds_argsStandardScheme();
      }
    }

    private static class getTCompetitionSeasonsByIds_argsStandardScheme extends StandardScheme<getTCompetitionSeasonsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionSeasonsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list202.size);
                  long _elem203;
                  for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                  {
                    _elem203 = iprot.readI64();
                    struct.ids.add(_elem203);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionSeasonsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter205 : struct.ids)
            {
              oprot.writeI64(_iter205);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionSeasonsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonsByIds_argsTupleScheme getScheme() {
        return new getTCompetitionSeasonsByIds_argsTupleScheme();
      }
    }

    private static class getTCompetitionSeasonsByIds_argsTupleScheme extends TupleScheme<getTCompetitionSeasonsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter206 : struct.ids)
            {
              oprot.writeI64(_iter206);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list207.size);
            long _elem208;
            for (int _i209 = 0; _i209 < _list207.size; ++_i209)
            {
              _elem208 = iprot.readI64();
              struct.ids.add(_elem208);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionSeasonsByIds_result implements org.apache.thrift.TBase<getTCompetitionSeasonsByIds_result, getTCompetitionSeasonsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionSeasonsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionSeasonsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionSeasonsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionSeasonsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitionSeason.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionSeasonsByIds_result.class, metaDataMap);
    }

    public getTCompetitionSeasonsByIds_result() {
    }

    public getTCompetitionSeasonsByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionSeasonsByIds_result(getTCompetitionSeasonsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TCompetitionSeason other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TCompetitionSeason(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTCompetitionSeasonsByIds_result deepCopy() {
      return new getTCompetitionSeasonsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TCompetitionSeason elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionSeasonsByIds_result)
        return this.equals((getTCompetitionSeasonsByIds_result)that);
      return false;
    }

    public boolean equals(getTCompetitionSeasonsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionSeasonsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionSeasonsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionSeasonsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonsByIds_resultStandardScheme getScheme() {
        return new getTCompetitionSeasonsByIds_resultStandardScheme();
      }
    }

    private static class getTCompetitionSeasonsByIds_resultStandardScheme extends StandardScheme<getTCompetitionSeasonsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionSeasonsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>(_list210.size);
                  com.lesports.qmt.sbd.api.dto.TCompetitionSeason _elem211;
                  for (int _i212 = 0; _i212 < _list210.size; ++_i212)
                  {
                    _elem211 = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
                    _elem211.read(iprot);
                    struct.success.add(_elem211);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionSeasonsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TCompetitionSeason _iter213 : struct.success)
            {
              _iter213.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionSeasonsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonsByIds_resultTupleScheme getScheme() {
        return new getTCompetitionSeasonsByIds_resultTupleScheme();
      }
    }

    private static class getTCompetitionSeasonsByIds_resultTupleScheme extends TupleScheme<getTCompetitionSeasonsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TCompetitionSeason _iter214 : struct.success)
            {
              _iter214.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list215 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitionSeason>(_list215.size);
            com.lesports.qmt.sbd.api.dto.TCompetitionSeason _elem216;
            for (int _i217 = 0; _i217 < _list215.size; ++_i217)
            {
              _elem216 = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
              _elem216.read(iprot);
              struct.success.add(_elem216);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSeasonIdsOfCompetition_args implements org.apache.thrift.TBase<getSeasonIdsOfCompetition_args, getSeasonIdsOfCompetition_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSeasonIdsOfCompetition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSeasonIdsOfCompetition_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSeasonIdsOfCompetition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSeasonIdsOfCompetition_argsTupleSchemeFactory());
    }

    private long cid; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSeasonIdsOfCompetition_args.class, metaDataMap);
    }

    public getSeasonIdsOfCompetition_args() {
    }

    public getSeasonIdsOfCompetition_args(
      long cid,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSeasonIdsOfCompetition_args(getSeasonIdsOfCompetition_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getSeasonIdsOfCompetition_args deepCopy() {
      return new getSeasonIdsOfCompetition_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.caller = null;
    }

    public long getCid() {
      return this.cid;
    }

    public void setCid(long cid) {
      this.cid = cid;
      setCidIsSet(true);
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Long.valueOf(getCid());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSeasonIdsOfCompetition_args)
        return this.equals((getSeasonIdsOfCompetition_args)that);
      return false;
    }

    public boolean equals(getSeasonIdsOfCompetition_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSeasonIdsOfCompetition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSeasonIdsOfCompetition_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSeasonIdsOfCompetition_argsStandardSchemeFactory implements SchemeFactory {
      public getSeasonIdsOfCompetition_argsStandardScheme getScheme() {
        return new getSeasonIdsOfCompetition_argsStandardScheme();
      }
    }

    private static class getSeasonIdsOfCompetition_argsStandardScheme extends StandardScheme<getSeasonIdsOfCompetition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSeasonIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cid = iprot.readI64();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSeasonIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSeasonIdsOfCompetition_argsTupleSchemeFactory implements SchemeFactory {
      public getSeasonIdsOfCompetition_argsTupleScheme getScheme() {
        return new getSeasonIdsOfCompetition_argsTupleScheme();
      }
    }

    private static class getSeasonIdsOfCompetition_argsTupleScheme extends TupleScheme<getSeasonIdsOfCompetition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSeasonIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCid()) {
          oprot.writeI64(struct.cid);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSeasonIdsOfCompetition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cid = iprot.readI64();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getSeasonIdsOfCompetition_result implements org.apache.thrift.TBase<getSeasonIdsOfCompetition_result, getSeasonIdsOfCompetition_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSeasonIdsOfCompetition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSeasonIdsOfCompetition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSeasonIdsOfCompetition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSeasonIdsOfCompetition_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSeasonIdsOfCompetition_result.class, metaDataMap);
    }

    public getSeasonIdsOfCompetition_result() {
    }

    public getSeasonIdsOfCompetition_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSeasonIdsOfCompetition_result(getSeasonIdsOfCompetition_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getSeasonIdsOfCompetition_result deepCopy() {
      return new getSeasonIdsOfCompetition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSeasonIdsOfCompetition_result)
        return this.equals((getSeasonIdsOfCompetition_result)that);
      return false;
    }

    public boolean equals(getSeasonIdsOfCompetition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSeasonIdsOfCompetition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSeasonIdsOfCompetition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSeasonIdsOfCompetition_resultStandardSchemeFactory implements SchemeFactory {
      public getSeasonIdsOfCompetition_resultStandardScheme getScheme() {
        return new getSeasonIdsOfCompetition_resultStandardScheme();
      }
    }

    private static class getSeasonIdsOfCompetition_resultStandardScheme extends StandardScheme<getSeasonIdsOfCompetition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSeasonIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list218.size);
                  long _elem219;
                  for (int _i220 = 0; _i220 < _list218.size; ++_i220)
                  {
                    _elem219 = iprot.readI64();
                    struct.success.add(_elem219);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSeasonIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter221 : struct.success)
            {
              oprot.writeI64(_iter221);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSeasonIdsOfCompetition_resultTupleSchemeFactory implements SchemeFactory {
      public getSeasonIdsOfCompetition_resultTupleScheme getScheme() {
        return new getSeasonIdsOfCompetition_resultTupleScheme();
      }
    }

    private static class getSeasonIdsOfCompetition_resultTupleScheme extends TupleScheme<getSeasonIdsOfCompetition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSeasonIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter222 : struct.success)
            {
              oprot.writeI64(_iter222);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSeasonIdsOfCompetition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list223 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list223.size);
            long _elem224;
            for (int _i225 = 0; _i225 < _list223.size; ++_i225)
            {
              _elem224 = iprot.readI64();
              struct.success.add(_elem224);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLatestTCompetitionSeasonsByCid_args implements org.apache.thrift.TBase<getLatestTCompetitionSeasonsByCid_args, getLatestTCompetitionSeasonsByCid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestTCompetitionSeasonsByCid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestTCompetitionSeasonsByCid_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestTCompetitionSeasonsByCid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestTCompetitionSeasonsByCid_argsTupleSchemeFactory());
    }

    private long cid; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestTCompetitionSeasonsByCid_args.class, metaDataMap);
    }

    public getLatestTCompetitionSeasonsByCid_args() {
    }

    public getLatestTCompetitionSeasonsByCid_args(
      long cid,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestTCompetitionSeasonsByCid_args(getLatestTCompetitionSeasonsByCid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getLatestTCompetitionSeasonsByCid_args deepCopy() {
      return new getLatestTCompetitionSeasonsByCid_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.caller = null;
    }

    public long getCid() {
      return this.cid;
    }

    public void setCid(long cid) {
      this.cid = cid;
      setCidIsSet(true);
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Long.valueOf(getCid());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestTCompetitionSeasonsByCid_args)
        return this.equals((getLatestTCompetitionSeasonsByCid_args)that);
      return false;
    }

    public boolean equals(getLatestTCompetitionSeasonsByCid_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLatestTCompetitionSeasonsByCid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestTCompetitionSeasonsByCid_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestTCompetitionSeasonsByCid_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestTCompetitionSeasonsByCid_argsStandardScheme getScheme() {
        return new getLatestTCompetitionSeasonsByCid_argsStandardScheme();
      }
    }

    private static class getLatestTCompetitionSeasonsByCid_argsStandardScheme extends StandardScheme<getLatestTCompetitionSeasonsByCid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestTCompetitionSeasonsByCid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cid = iprot.readI64();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestTCompetitionSeasonsByCid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestTCompetitionSeasonsByCid_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestTCompetitionSeasonsByCid_argsTupleScheme getScheme() {
        return new getLatestTCompetitionSeasonsByCid_argsTupleScheme();
      }
    }

    private static class getLatestTCompetitionSeasonsByCid_argsTupleScheme extends TupleScheme<getLatestTCompetitionSeasonsByCid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestTCompetitionSeasonsByCid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCid()) {
          oprot.writeI64(struct.cid);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestTCompetitionSeasonsByCid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cid = iprot.readI64();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getLatestTCompetitionSeasonsByCid_result implements org.apache.thrift.TBase<getLatestTCompetitionSeasonsByCid_result, getLatestTCompetitionSeasonsByCid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestTCompetitionSeasonsByCid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestTCompetitionSeasonsByCid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestTCompetitionSeasonsByCid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestTCompetitionSeasonsByCid_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TCompetitionSeason success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitionSeason.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestTCompetitionSeasonsByCid_result.class, metaDataMap);
    }

    public getLatestTCompetitionSeasonsByCid_result() {
    }

    public getLatestTCompetitionSeasonsByCid_result(
      com.lesports.qmt.sbd.api.dto.TCompetitionSeason success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestTCompetitionSeasonsByCid_result(getLatestTCompetitionSeasonsByCid_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason(other.success);
      }
    }

    public getLatestTCompetitionSeasonsByCid_result deepCopy() {
      return new getLatestTCompetitionSeasonsByCid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TCompetitionSeason success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TCompetitionSeason)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestTCompetitionSeasonsByCid_result)
        return this.equals((getLatestTCompetitionSeasonsByCid_result)that);
      return false;
    }

    public boolean equals(getLatestTCompetitionSeasonsByCid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLatestTCompetitionSeasonsByCid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestTCompetitionSeasonsByCid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestTCompetitionSeasonsByCid_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestTCompetitionSeasonsByCid_resultStandardScheme getScheme() {
        return new getLatestTCompetitionSeasonsByCid_resultStandardScheme();
      }
    }

    private static class getLatestTCompetitionSeasonsByCid_resultStandardScheme extends StandardScheme<getLatestTCompetitionSeasonsByCid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestTCompetitionSeasonsByCid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestTCompetitionSeasonsByCid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestTCompetitionSeasonsByCid_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestTCompetitionSeasonsByCid_resultTupleScheme getScheme() {
        return new getLatestTCompetitionSeasonsByCid_resultTupleScheme();
      }
    }

    private static class getLatestTCompetitionSeasonsByCid_resultTupleScheme extends TupleScheme<getLatestTCompetitionSeasonsByCid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestTCompetitionSeasonsByCid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestTCompetitionSeasonsByCid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionSeasonByCidAndSeason_args implements org.apache.thrift.TBase<getTCompetitionSeasonByCidAndSeason_args, getTCompetitionSeasonByCidAndSeason_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionSeasonByCidAndSeason_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionSeasonByCidAndSeason_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SEASON_FIELD_DESC = new org.apache.thrift.protocol.TField("season", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionSeasonByCidAndSeason_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionSeasonByCidAndSeason_argsTupleSchemeFactory());
    }

    private long cid; // required
    private String season; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      SEASON((short)2, "season"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // SEASON
            return SEASON;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SEASON, new org.apache.thrift.meta_data.FieldMetaData("season", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionSeasonByCidAndSeason_args.class, metaDataMap);
    }

    public getTCompetitionSeasonByCidAndSeason_args() {
    }

    public getTCompetitionSeasonByCidAndSeason_args(
      long cid,
      String season,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.season = season;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionSeasonByCidAndSeason_args(getTCompetitionSeasonByCidAndSeason_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetSeason()) {
        this.season = other.season;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTCompetitionSeasonByCidAndSeason_args deepCopy() {
      return new getTCompetitionSeasonByCidAndSeason_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.season = null;
      this.caller = null;
    }

    public long getCid() {
      return this.cid;
    }

    public void setCid(long cid) {
      this.cid = cid;
      setCidIsSet(true);
    }

    public void unsetCid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public String getSeason() {
      return this.season;
    }

    public void setSeason(String season) {
      this.season = season;
    }

    public void unsetSeason() {
      this.season = null;
    }

    /** Returns true if field season is set (has been assigned a value) and false otherwise */
    public boolean isSetSeason() {
      return this.season != null;
    }

    public void setSeasonIsSet(boolean value) {
      if (!value) {
        this.season = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((Long)value);
        }
        break;

      case SEASON:
        if (value == null) {
          unsetSeason();
        } else {
          setSeason((String)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return Long.valueOf(getCid());

      case SEASON:
        return getSeason();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case SEASON:
        return isSetSeason();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionSeasonByCidAndSeason_args)
        return this.equals((getTCompetitionSeasonByCidAndSeason_args)that);
      return false;
    }

    public boolean equals(getTCompetitionSeasonByCidAndSeason_args that) {
      if (that == null)
        return false;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_season = true && this.isSetSeason();
      boolean that_present_season = true && that.isSetSeason();
      if (this_present_season || that_present_season) {
        if (!(this_present_season && that_present_season))
          return false;
        if (!this.season.equals(that.season))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_cid = true;
      list.add(present_cid);
      if (present_cid)
        list.add(cid);

      boolean present_season = true && (isSetSeason());
      list.add(present_season);
      if (present_season)
        list.add(season);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionSeasonByCidAndSeason_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSeason()).compareTo(other.isSetSeason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.season, other.season);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionSeasonByCidAndSeason_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("season:");
      if (this.season == null) {
        sb.append("null");
      } else {
        sb.append(this.season);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionSeasonByCidAndSeason_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonByCidAndSeason_argsStandardScheme getScheme() {
        return new getTCompetitionSeasonByCidAndSeason_argsStandardScheme();
      }
    }

    private static class getTCompetitionSeasonByCidAndSeason_argsStandardScheme extends StandardScheme<getTCompetitionSeasonByCidAndSeason_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionSeasonByCidAndSeason_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cid = iprot.readI64();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.season = iprot.readString();
                struct.setSeasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionSeasonByCidAndSeason_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
        if (struct.season != null) {
          oprot.writeFieldBegin(SEASON_FIELD_DESC);
          oprot.writeString(struct.season);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionSeasonByCidAndSeason_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonByCidAndSeason_argsTupleScheme getScheme() {
        return new getTCompetitionSeasonByCidAndSeason_argsTupleScheme();
      }
    }

    private static class getTCompetitionSeasonByCidAndSeason_argsTupleScheme extends TupleScheme<getTCompetitionSeasonByCidAndSeason_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonByCidAndSeason_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetSeason()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCid()) {
          oprot.writeI64(struct.cid);
        }
        if (struct.isSetSeason()) {
          oprot.writeString(struct.season);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonByCidAndSeason_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cid = iprot.readI64();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.season = iprot.readString();
          struct.setSeasonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitionSeasonByCidAndSeason_result implements org.apache.thrift.TBase<getTCompetitionSeasonByCidAndSeason_result, getTCompetitionSeasonByCidAndSeason_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitionSeasonByCidAndSeason_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitionSeasonByCidAndSeason_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitionSeasonByCidAndSeason_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitionSeasonByCidAndSeason_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TCompetitionSeason success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitionSeason.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitionSeasonByCidAndSeason_result.class, metaDataMap);
    }

    public getTCompetitionSeasonByCidAndSeason_result() {
    }

    public getTCompetitionSeasonByCidAndSeason_result(
      com.lesports.qmt.sbd.api.dto.TCompetitionSeason success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitionSeasonByCidAndSeason_result(getTCompetitionSeasonByCidAndSeason_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason(other.success);
      }
    }

    public getTCompetitionSeasonByCidAndSeason_result deepCopy() {
      return new getTCompetitionSeasonByCidAndSeason_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TCompetitionSeason getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TCompetitionSeason success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TCompetitionSeason)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitionSeasonByCidAndSeason_result)
        return this.equals((getTCompetitionSeasonByCidAndSeason_result)that);
      return false;
    }

    public boolean equals(getTCompetitionSeasonByCidAndSeason_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitionSeasonByCidAndSeason_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitionSeasonByCidAndSeason_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitionSeasonByCidAndSeason_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonByCidAndSeason_resultStandardScheme getScheme() {
        return new getTCompetitionSeasonByCidAndSeason_resultStandardScheme();
      }
    }

    private static class getTCompetitionSeasonByCidAndSeason_resultStandardScheme extends StandardScheme<getTCompetitionSeasonByCidAndSeason_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitionSeasonByCidAndSeason_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitionSeasonByCidAndSeason_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitionSeasonByCidAndSeason_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitionSeasonByCidAndSeason_resultTupleScheme getScheme() {
        return new getTCompetitionSeasonByCidAndSeason_resultTupleScheme();
      }
    }

    private static class getTCompetitionSeasonByCidAndSeason_resultTupleScheme extends TupleScheme<getTCompetitionSeasonByCidAndSeason_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonByCidAndSeason_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitionSeasonByCidAndSeason_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TCompetitionSeason();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTopListById_args implements org.apache.thrift.TBase<getTTopListById_args, getTTopListById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopListById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopListById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopListById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopListById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopListById_args.class, metaDataMap);
    }

    public getTTopListById_args() {
    }

    public getTTopListById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopListById_args(getTTopListById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTopListById_args deepCopy() {
      return new getTTopListById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopListById_args)
        return this.equals((getTTopListById_args)that);
      return false;
    }

    public boolean equals(getTTopListById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopListById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopListById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopListById_argsStandardSchemeFactory implements SchemeFactory {
      public getTTopListById_argsStandardScheme getScheme() {
        return new getTTopListById_argsStandardScheme();
      }
    }

    private static class getTTopListById_argsStandardScheme extends StandardScheme<getTTopListById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopListById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopListById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopListById_argsTupleSchemeFactory implements SchemeFactory {
      public getTTopListById_argsTupleScheme getScheme() {
        return new getTTopListById_argsTupleScheme();
      }
    }

    private static class getTTopListById_argsTupleScheme extends TupleScheme<getTTopListById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopListById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopListById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTopListById_result implements org.apache.thrift.TBase<getTTopListById_result, getTTopListById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopListById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopListById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopListById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopListById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TTopList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTopList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopListById_result.class, metaDataMap);
    }

    public getTTopListById_result() {
    }

    public getTTopListById_result(
      com.lesports.qmt.sbd.api.dto.TTopList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopListById_result(getTTopListById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TTopList(other.success);
      }
    }

    public getTTopListById_result deepCopy() {
      return new getTTopListById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TTopList getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TTopList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TTopList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopListById_result)
        return this.equals((getTTopListById_result)that);
      return false;
    }

    public boolean equals(getTTopListById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopListById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopListById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopListById_resultStandardSchemeFactory implements SchemeFactory {
      public getTTopListById_resultStandardScheme getScheme() {
        return new getTTopListById_resultStandardScheme();
      }
    }

    private static class getTTopListById_resultStandardScheme extends StandardScheme<getTTopListById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopListById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TTopList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopListById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopListById_resultTupleSchemeFactory implements SchemeFactory {
      public getTTopListById_resultTupleScheme getScheme() {
        return new getTTopListById_resultTupleScheme();
      }
    }

    private static class getTTopListById_resultTupleScheme extends TupleScheme<getTTopListById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopListById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopListById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TTopList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTTopListsByIds_args implements org.apache.thrift.TBase<getTTopListsByIds_args, getTTopListsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopListsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopListsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopListsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopListsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopListsByIds_args.class, metaDataMap);
    }

    public getTTopListsByIds_args() {
    }

    public getTTopListsByIds_args(
      List<Long> ids,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.ids = ids;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopListsByIds_args(getTTopListsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTTopListsByIds_args deepCopy() {
      return new getTTopListsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.caller = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopListsByIds_args)
        return this.equals((getTTopListsByIds_args)that);
      return false;
    }

    public boolean equals(getTTopListsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopListsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopListsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopListsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTTopListsByIds_argsStandardScheme getScheme() {
        return new getTTopListsByIds_argsStandardScheme();
      }
    }

    private static class getTTopListsByIds_argsStandardScheme extends StandardScheme<getTTopListsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopListsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list226.size);
                  long _elem227;
                  for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                  {
                    _elem227 = iprot.readI64();
                    struct.ids.add(_elem227);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopListsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter229 : struct.ids)
            {
              oprot.writeI64(_iter229);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopListsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTTopListsByIds_argsTupleScheme getScheme() {
        return new getTTopListsByIds_argsTupleScheme();
      }
    }

    private static class getTTopListsByIds_argsTupleScheme extends TupleScheme<getTTopListsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopListsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter230 : struct.ids)
            {
              oprot.writeI64(_iter230);
            }
          }
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopListsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list231 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list231.size);
            long _elem232;
            for (int _i233 = 0; _i233 < _list231.size; ++_i233)
            {
              _elem232 = iprot.readI64();
              struct.ids.add(_elem232);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTTopListsByIds_result implements org.apache.thrift.TBase<getTTopListsByIds_result, getTTopListsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTTopListsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTTopListsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTTopListsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTTopListsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TTopList> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTopList.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTTopListsByIds_result.class, metaDataMap);
    }

    public getTTopListsByIds_result() {
    }

    public getTTopListsByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TTopList> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTTopListsByIds_result(getTTopListsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TTopList> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TTopList other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TTopList(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTTopListsByIds_result deepCopy() {
      return new getTTopListsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TTopList> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TTopList elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTopList> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TTopList> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TTopList>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTTopListsByIds_result)
        return this.equals((getTTopListsByIds_result)that);
      return false;
    }

    public boolean equals(getTTopListsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTTopListsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTTopListsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTTopListsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTTopListsByIds_resultStandardScheme getScheme() {
        return new getTTopListsByIds_resultStandardScheme();
      }
    }

    private static class getTTopListsByIds_resultStandardScheme extends StandardScheme<getTTopListsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTTopListsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list234 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>(_list234.size);
                  com.lesports.qmt.sbd.api.dto.TTopList _elem235;
                  for (int _i236 = 0; _i236 < _list234.size; ++_i236)
                  {
                    _elem235 = new com.lesports.qmt.sbd.api.dto.TTopList();
                    _elem235.read(iprot);
                    struct.success.add(_elem235);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTTopListsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TTopList _iter237 : struct.success)
            {
              _iter237.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTTopListsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTTopListsByIds_resultTupleScheme getScheme() {
        return new getTTopListsByIds_resultTupleScheme();
      }
    }

    private static class getTTopListsByIds_resultTupleScheme extends TupleScheme<getTTopListsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTTopListsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TTopList _iter238 : struct.success)
            {
              _iter238.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTTopListsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>(_list239.size);
            com.lesports.qmt.sbd.api.dto.TTopList _elem240;
            for (int _i241 = 0; _i241 < _list239.size; ++_i241)
            {
              _elem240 = new com.lesports.qmt.sbd.api.dto.TTopList();
              _elem240.read(iprot);
              struct.success.add(_elem240);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSeasonTopListIds_args implements org.apache.thrift.TBase<getSeasonTopListIds_args, getSeasonTopListIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSeasonTopListIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSeasonTopListIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSeasonTopListIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSeasonTopListIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSeasonTopListIds_args.class, metaDataMap);
    }

    public getSeasonTopListIds_args() {
    }

    public getSeasonTopListIds_args(
      com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSeasonTopListIds_args(getSeasonTopListIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getSeasonTopListIds_args deepCopy() {
      return new getSeasonTopListIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSeasonTopListIds_args)
        return this.equals((getSeasonTopListIds_args)that);
      return false;
    }

    public boolean equals(getSeasonTopListIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSeasonTopListIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSeasonTopListIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSeasonTopListIds_argsStandardSchemeFactory implements SchemeFactory {
      public getSeasonTopListIds_argsStandardScheme getScheme() {
        return new getSeasonTopListIds_argsStandardScheme();
      }
    }

    private static class getSeasonTopListIds_argsStandardScheme extends StandardScheme<getSeasonTopListIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSeasonTopListIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSeasonTopListIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSeasonTopListIds_argsTupleSchemeFactory implements SchemeFactory {
      public getSeasonTopListIds_argsTupleScheme getScheme() {
        return new getSeasonTopListIds_argsTupleScheme();
      }
    }

    private static class getSeasonTopListIds_argsTupleScheme extends TupleScheme<getSeasonTopListIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSeasonTopListIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSeasonTopListIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getSeasonTopListIds_result implements org.apache.thrift.TBase<getSeasonTopListIds_result, getSeasonTopListIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSeasonTopListIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSeasonTopListIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSeasonTopListIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSeasonTopListIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSeasonTopListIds_result.class, metaDataMap);
    }

    public getSeasonTopListIds_result() {
    }

    public getSeasonTopListIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSeasonTopListIds_result(getSeasonTopListIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getSeasonTopListIds_result deepCopy() {
      return new getSeasonTopListIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSeasonTopListIds_result)
        return this.equals((getSeasonTopListIds_result)that);
      return false;
    }

    public boolean equals(getSeasonTopListIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSeasonTopListIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSeasonTopListIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSeasonTopListIds_resultStandardSchemeFactory implements SchemeFactory {
      public getSeasonTopListIds_resultStandardScheme getScheme() {
        return new getSeasonTopListIds_resultStandardScheme();
      }
    }

    private static class getSeasonTopListIds_resultStandardScheme extends StandardScheme<getSeasonTopListIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSeasonTopListIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list242.size);
                  long _elem243;
                  for (int _i244 = 0; _i244 < _list242.size; ++_i244)
                  {
                    _elem243 = iprot.readI64();
                    struct.success.add(_elem243);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSeasonTopListIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter245 : struct.success)
            {
              oprot.writeI64(_iter245);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSeasonTopListIds_resultTupleSchemeFactory implements SchemeFactory {
      public getSeasonTopListIds_resultTupleScheme getScheme() {
        return new getSeasonTopListIds_resultTupleScheme();
      }
    }

    private static class getSeasonTopListIds_resultTupleScheme extends TupleScheme<getSeasonTopListIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSeasonTopListIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter246 : struct.success)
            {
              oprot.writeI64(_iter246);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSeasonTopListIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list247 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list247.size);
            long _elem248;
            for (int _i249 = 0; _i249 < _list247.size; ++_i249)
            {
              _elem248 = iprot.readI64();
              struct.success.add(_elem248);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCompetitorTTopLists_args implements org.apache.thrift.TBase<getCompetitorTTopLists_args, getCompetitorTTopLists_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompetitorTTopLists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompetitorTTopLists_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompetitorTTopLists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompetitorTTopLists_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p; // required
    private com.lesports.api.common.PageParam page; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      PAGE((short)2, "page"),
      CALLER((short)3, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // PAGE
            return PAGE;
          case 3: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam.class)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.PageParam.class)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompetitorTTopLists_args.class, metaDataMap);
    }

    public getCompetitorTTopLists_args() {
    }

    public getCompetitorTTopLists_args(
      com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p,
      com.lesports.api.common.PageParam page,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.p = p;
      this.page = page;
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompetitorTTopLists_args(getCompetitorTTopLists_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam(other.p);
      }
      if (other.isSetPage()) {
        this.page = new com.lesports.api.common.PageParam(other.page);
      }
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getCompetitorTTopLists_args deepCopy() {
      return new getCompetitorTTopLists_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
      this.page = null;
      this.caller = null;
    }

    public com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public com.lesports.api.common.PageParam getPage() {
      return this.page;
    }

    public void setPage(com.lesports.api.common.PageParam page) {
      this.page = page;
    }

    public void unsetPage() {
      this.page = null;
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return this.page != null;
    }

    public void setPageIsSet(boolean value) {
      if (!value) {
        this.page = null;
      }
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((com.lesports.api.common.PageParam)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      case PAGE:
        return getPage();

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case PAGE:
        return isSetPage();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompetitorTTopLists_args)
        return this.equals((getCompetitorTTopLists_args)that);
      return false;
    }

    public boolean equals(getCompetitorTTopLists_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      boolean this_present_page = true && this.isSetPage();
      boolean that_present_page = true && that.isSetPage();
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (!this.page.equals(that.page))
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_page = true && (isSetPage());
      list.add(present_page);
      if (present_page)
        list.add(page);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompetitorTTopLists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompetitorTTopLists_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
      if (page != null) {
        page.validate();
      }
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompetitorTTopLists_argsStandardSchemeFactory implements SchemeFactory {
      public getCompetitorTTopLists_argsStandardScheme getScheme() {
        return new getCompetitorTTopLists_argsStandardScheme();
      }
    }

    private static class getCompetitorTTopLists_argsStandardScheme extends StandardScheme<getCompetitorTTopLists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompetitorTTopLists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.page = new com.lesports.api.common.PageParam();
                struct.page.read(iprot);
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompetitorTTopLists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.page != null) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompetitorTTopLists_argsTupleSchemeFactory implements SchemeFactory {
      public getCompetitorTTopLists_argsTupleScheme getScheme() {
        return new getCompetitorTTopLists_argsTupleScheme();
      }
    }

    private static class getCompetitorTTopLists_argsTupleScheme extends TupleScheme<getCompetitorTTopLists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompetitorTTopLists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetCaller()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
        if (struct.isSetPage()) {
          struct.page.write(oprot);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompetitorTTopLists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetSeasonTopListsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = new com.lesports.api.common.PageParam();
          struct.page.read(iprot);
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getCompetitorTTopLists_result implements org.apache.thrift.TBase<getCompetitorTTopLists_result, getCompetitorTTopLists_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompetitorTTopLists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompetitorTTopLists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompetitorTTopLists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompetitorTTopLists_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TTopList> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TTopList.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompetitorTTopLists_result.class, metaDataMap);
    }

    public getCompetitorTTopLists_result() {
    }

    public getCompetitorTTopLists_result(
      List<com.lesports.qmt.sbd.api.dto.TTopList> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompetitorTTopLists_result(getCompetitorTTopLists_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TTopList> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TTopList other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TTopList(other_element));
        }
        this.success = __this__success;
      }
    }

    public getCompetitorTTopLists_result deepCopy() {
      return new getCompetitorTTopLists_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TTopList> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TTopList elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TTopList> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TTopList> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TTopList>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompetitorTTopLists_result)
        return this.equals((getCompetitorTTopLists_result)that);
      return false;
    }

    public boolean equals(getCompetitorTTopLists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompetitorTTopLists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompetitorTTopLists_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompetitorTTopLists_resultStandardSchemeFactory implements SchemeFactory {
      public getCompetitorTTopLists_resultStandardScheme getScheme() {
        return new getCompetitorTTopLists_resultStandardScheme();
      }
    }

    private static class getCompetitorTTopLists_resultStandardScheme extends StandardScheme<getCompetitorTTopLists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompetitorTTopLists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>(_list250.size);
                  com.lesports.qmt.sbd.api.dto.TTopList _elem251;
                  for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                  {
                    _elem251 = new com.lesports.qmt.sbd.api.dto.TTopList();
                    _elem251.read(iprot);
                    struct.success.add(_elem251);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompetitorTTopLists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TTopList _iter253 : struct.success)
            {
              _iter253.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompetitorTTopLists_resultTupleSchemeFactory implements SchemeFactory {
      public getCompetitorTTopLists_resultTupleScheme getScheme() {
        return new getCompetitorTTopLists_resultTupleScheme();
      }
    }

    private static class getCompetitorTTopLists_resultTupleScheme extends TupleScheme<getCompetitorTTopLists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompetitorTTopLists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TTopList _iter254 : struct.success)
            {
              _iter254.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompetitorTTopLists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list255 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TTopList>(_list255.size);
            com.lesports.qmt.sbd.api.dto.TTopList _elem256;
            for (int _i257 = 0; _i257 < _list255.size; ++_i257)
            {
              _elem256 = new com.lesports.qmt.sbd.api.dto.TTopList();
              _elem256.read(iprot);
              struct.success.add(_elem256);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitorSeasonStatsByIds_args implements org.apache.thrift.TBase<getTCompetitorSeasonStatsByIds_args, getTCompetitorSeasonStatsByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitorSeasonStatsByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitorSeasonStatsByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitorSeasonStatsByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitorSeasonStatsByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitorSeasonStatsByIds_args.class, metaDataMap);
    }

    public getTCompetitorSeasonStatsByIds_args() {
    }

    public getTCompetitorSeasonStatsByIds_args(
      List<Long> ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitorSeasonStatsByIds_args(getTCompetitorSeasonStatsByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
    }

    public getTCompetitorSeasonStatsByIds_args deepCopy() {
      return new getTCompetitorSeasonStatsByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitorSeasonStatsByIds_args)
        return this.equals((getTCompetitorSeasonStatsByIds_args)that);
      return false;
    }

    public boolean equals(getTCompetitorSeasonStatsByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitorSeasonStatsByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitorSeasonStatsByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitorSeasonStatsByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getTCompetitorSeasonStatsByIds_argsStandardScheme getScheme() {
        return new getTCompetitorSeasonStatsByIds_argsStandardScheme();
      }
    }

    private static class getTCompetitorSeasonStatsByIds_argsStandardScheme extends StandardScheme<getTCompetitorSeasonStatsByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitorSeasonStatsByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list258 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list258.size);
                  long _elem259;
                  for (int _i260 = 0; _i260 < _list258.size; ++_i260)
                  {
                    _elem259 = iprot.readI64();
                    struct.ids.add(_elem259);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitorSeasonStatsByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter261 : struct.ids)
            {
              oprot.writeI64(_iter261);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitorSeasonStatsByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getTCompetitorSeasonStatsByIds_argsTupleScheme getScheme() {
        return new getTCompetitorSeasonStatsByIds_argsTupleScheme();
      }
    }

    private static class getTCompetitorSeasonStatsByIds_argsTupleScheme extends TupleScheme<getTCompetitorSeasonStatsByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitorSeasonStatsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter262 : struct.ids)
            {
              oprot.writeI64(_iter262);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitorSeasonStatsByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list263.size);
            long _elem264;
            for (int _i265 = 0; _i265 < _list263.size; ++_i265)
            {
              _elem264 = iprot.readI64();
              struct.ids.add(_elem264);
            }
          }
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class getTCompetitorSeasonStatsByIds_result implements org.apache.thrift.TBase<getTCompetitorSeasonStatsByIds_result, getTCompetitorSeasonStatsByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCompetitorSeasonStatsByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCompetitorSeasonStatsByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTCompetitorSeasonStatsByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTCompetitorSeasonStatsByIds_resultTupleSchemeFactory());
    }

    private List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCompetitorSeasonStatsByIds_result.class, metaDataMap);
    }

    public getTCompetitorSeasonStatsByIds_result() {
    }

    public getTCompetitorSeasonStatsByIds_result(
      List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCompetitorSeasonStatsByIds_result(getTCompetitorSeasonStatsByIds_result other) {
      if (other.isSetSuccess()) {
        List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> __this__success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>(other.success.size());
        for (com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat other_element : other.success) {
          __this__success.add(new com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTCompetitorSeasonStatsByIds_result deepCopy() {
      return new getTCompetitorSeasonStatsByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>();
      }
      this.success.add(elem);
    }

    public List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTCompetitorSeasonStatsByIds_result)
        return this.equals((getTCompetitorSeasonStatsByIds_result)that);
      return false;
    }

    public boolean equals(getTCompetitorSeasonStatsByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTCompetitorSeasonStatsByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTCompetitorSeasonStatsByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCompetitorSeasonStatsByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getTCompetitorSeasonStatsByIds_resultStandardScheme getScheme() {
        return new getTCompetitorSeasonStatsByIds_resultStandardScheme();
      }
    }

    private static class getTCompetitorSeasonStatsByIds_resultStandardScheme extends StandardScheme<getTCompetitorSeasonStatsByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCompetitorSeasonStatsByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list266 = iprot.readListBegin();
                  struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>(_list266.size);
                  com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat _elem267;
                  for (int _i268 = 0; _i268 < _list266.size; ++_i268)
                  {
                    _elem267 = new com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat();
                    _elem267.read(iprot);
                    struct.success.add(_elem267);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCompetitorSeasonStatsByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat _iter269 : struct.success)
            {
              _iter269.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCompetitorSeasonStatsByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getTCompetitorSeasonStatsByIds_resultTupleScheme getScheme() {
        return new getTCompetitorSeasonStatsByIds_resultTupleScheme();
      }
    }

    private static class getTCompetitorSeasonStatsByIds_resultTupleScheme extends TupleScheme<getTCompetitorSeasonStatsByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCompetitorSeasonStatsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat _iter270 : struct.success)
            {
              _iter270.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCompetitorSeasonStatsByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat>(_list271.size);
            com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat _elem272;
            for (int _i273 = 0; _i273 < _list271.size; ++_i273)
            {
              _elem272 = new com.lesports.qmt.sbd.api.dto.TCompetitorSeasonStat();
              _elem272.read(iprot);
              struct.success.add(_elem272);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCompetitorSeasonStatIds_args implements org.apache.thrift.TBase<getCompetitorSeasonStatIds_args, getCompetitorSeasonStatIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCompetitorSeasonStatIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompetitorSeasonStatIds_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompetitorSeasonStatIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompetitorSeasonStatIds_argsTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompetitorSeasonStatIds_args.class, metaDataMap);
    }

    public getCompetitorSeasonStatIds_args() {
    }

    public getCompetitorSeasonStatIds_args(
      com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p)
    {
      this();
      this.p = p;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompetitorSeasonStatIds_args(getCompetitorSeasonStatIds_args other) {
      if (other.isSetP()) {
        this.p = new com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam(other.p);
      }
    }

    public getCompetitorSeasonStatIds_args deepCopy() {
      return new getCompetitorSeasonStatIds_args(this);
    }

    @Override
    public void clear() {
      this.p = null;
    }

    public com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam getP() {
      return this.p;
    }

    public void setP(com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam p) {
      this.p = p;
    }

    public void unsetP() {
      this.p = null;
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return this.p != null;
    }

    public void setPIsSet(boolean value) {
      if (!value) {
        this.p = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return getP();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompetitorSeasonStatIds_args)
        return this.equals((getCompetitorSeasonStatIds_args)that);
      return false;
    }

    public boolean equals(getCompetitorSeasonStatIds_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true && this.isSetP();
      boolean that_present_p = true && that.isSetP();
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (!this.p.equals(that.p))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true && (isSetP());
      list.add(present_p);
      if (present_p)
        list.add(p);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompetitorSeasonStatIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompetitorSeasonStatIds_args(");
      boolean first = true;

      sb.append("p:");
      if (this.p == null) {
        sb.append("null");
      } else {
        sb.append(this.p);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (p != null) {
        p.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompetitorSeasonStatIds_argsStandardSchemeFactory implements SchemeFactory {
      public getCompetitorSeasonStatIds_argsStandardScheme getScheme() {
        return new getCompetitorSeasonStatIds_argsStandardScheme();
      }
    }

    private static class getCompetitorSeasonStatIds_argsStandardScheme extends StandardScheme<getCompetitorSeasonStatIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompetitorSeasonStatIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.p = new com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam();
                struct.p.read(iprot);
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompetitorSeasonStatIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.p != null) {
          oprot.writeFieldBegin(P_FIELD_DESC);
          struct.p.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompetitorSeasonStatIds_argsTupleSchemeFactory implements SchemeFactory {
      public getCompetitorSeasonStatIds_argsTupleScheme getScheme() {
        return new getCompetitorSeasonStatIds_argsTupleScheme();
      }
    }

    private static class getCompetitorSeasonStatIds_argsTupleScheme extends TupleScheme<getCompetitorSeasonStatIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompetitorSeasonStatIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetP()) {
          struct.p.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompetitorSeasonStatIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.p = new com.lesports.qmt.sbd.api.service.GetCompetitorSeasonStatsParam();
          struct.p.read(iprot);
          struct.setPIsSet(true);
        }
      }
    }

  }

  public static class getCompetitorSeasonStatIds_result implements org.apache.thrift.TBase<getCompetitorSeasonStatIds_result, getCompetitorSeasonStatIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCompetitorSeasonStatIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCompetitorSeasonStatIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCompetitorSeasonStatIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCompetitorSeasonStatIds_resultTupleSchemeFactory());
    }

    private List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCompetitorSeasonStatIds_result.class, metaDataMap);
    }

    public getCompetitorSeasonStatIds_result() {
    }

    public getCompetitorSeasonStatIds_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompetitorSeasonStatIds_result(getCompetitorSeasonStatIds_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getCompetitorSeasonStatIds_result deepCopy() {
      return new getCompetitorSeasonStatIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<Long> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompetitorSeasonStatIds_result)
        return this.equals((getCompetitorSeasonStatIds_result)that);
      return false;
    }

    public boolean equals(getCompetitorSeasonStatIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCompetitorSeasonStatIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCompetitorSeasonStatIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCompetitorSeasonStatIds_resultStandardSchemeFactory implements SchemeFactory {
      public getCompetitorSeasonStatIds_resultStandardScheme getScheme() {
        return new getCompetitorSeasonStatIds_resultStandardScheme();
      }
    }

    private static class getCompetitorSeasonStatIds_resultStandardScheme extends StandardScheme<getCompetitorSeasonStatIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCompetitorSeasonStatIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list274 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list274.size);
                  long _elem275;
                  for (int _i276 = 0; _i276 < _list274.size; ++_i276)
                  {
                    _elem275 = iprot.readI64();
                    struct.success.add(_elem275);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCompetitorSeasonStatIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter277 : struct.success)
            {
              oprot.writeI64(_iter277);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCompetitorSeasonStatIds_resultTupleSchemeFactory implements SchemeFactory {
      public getCompetitorSeasonStatIds_resultTupleScheme getScheme() {
        return new getCompetitorSeasonStatIds_resultTupleScheme();
      }
    }

    private static class getCompetitorSeasonStatIds_resultTupleScheme extends TupleScheme<getCompetitorSeasonStatIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCompetitorSeasonStatIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter278 : struct.success)
            {
              oprot.writeI64(_iter278);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCompetitorSeasonStatIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list279.size);
            long _elem280;
            for (int _i281 = 0; _i281 < _list279.size; ++_i281)
            {
              _elem280 = iprot.readI64();
              struct.success.add(_elem280);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTMatchReviewById_args implements org.apache.thrift.TBase<getTMatchReviewById_args, getTMatchReviewById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchReviewById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchReviewById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchReviewById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchReviewById_argsTupleSchemeFactory());
    }

    private long id; // required
    private com.lesports.api.common.CallerParam caller; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CALLER((short)2, "caller");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CALLER
            return CALLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.api.common.CallerParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchReviewById_args.class, metaDataMap);
    }

    public getTMatchReviewById_args() {
    }

    public getTMatchReviewById_args(
      long id,
      com.lesports.api.common.CallerParam caller)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.caller = caller;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchReviewById_args(getTMatchReviewById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetCaller()) {
        this.caller = new com.lesports.api.common.CallerParam(other.caller);
      }
    }

    public getTMatchReviewById_args deepCopy() {
      return new getTMatchReviewById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.caller = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public com.lesports.api.common.CallerParam getCaller() {
      return this.caller;
    }

    public void setCaller(com.lesports.api.common.CallerParam caller) {
      this.caller = caller;
    }

    public void unsetCaller() {
      this.caller = null;
    }

    /** Returns true if field caller is set (has been assigned a value) and false otherwise */
    public boolean isSetCaller() {
      return this.caller != null;
    }

    public void setCallerIsSet(boolean value) {
      if (!value) {
        this.caller = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CALLER:
        if (value == null) {
          unsetCaller();
        } else {
          setCaller((com.lesports.api.common.CallerParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CALLER:
        return getCaller();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CALLER:
        return isSetCaller();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchReviewById_args)
        return this.equals((getTMatchReviewById_args)that);
      return false;
    }

    public boolean equals(getTMatchReviewById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_caller = true && this.isSetCaller();
      boolean that_present_caller = true && that.isSetCaller();
      if (this_present_caller || that_present_caller) {
        if (!(this_present_caller && that_present_caller))
          return false;
        if (!this.caller.equals(that.caller))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_caller = true && (isSetCaller());
      list.add(present_caller);
      if (present_caller)
        list.add(caller);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchReviewById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCaller()).compareTo(other.isSetCaller());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaller()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchReviewById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("caller:");
      if (this.caller == null) {
        sb.append("null");
      } else {
        sb.append(this.caller);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caller != null) {
        caller.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchReviewById_argsStandardSchemeFactory implements SchemeFactory {
      public getTMatchReviewById_argsStandardScheme getScheme() {
        return new getTMatchReviewById_argsStandardScheme();
      }
    }

    private static class getTMatchReviewById_argsStandardScheme extends StandardScheme<getTMatchReviewById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchReviewById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CALLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caller = new com.lesports.api.common.CallerParam();
                struct.caller.read(iprot);
                struct.setCallerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchReviewById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.caller != null) {
          oprot.writeFieldBegin(CALLER_FIELD_DESC);
          struct.caller.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchReviewById_argsTupleSchemeFactory implements SchemeFactory {
      public getTMatchReviewById_argsTupleScheme getScheme() {
        return new getTMatchReviewById_argsTupleScheme();
      }
    }

    private static class getTMatchReviewById_argsTupleScheme extends TupleScheme<getTMatchReviewById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchReviewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetCaller()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetCaller()) {
          struct.caller.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchReviewById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.caller = new com.lesports.api.common.CallerParam();
          struct.caller.read(iprot);
          struct.setCallerIsSet(true);
        }
      }
    }

  }

  public static class getTMatchReviewById_result implements org.apache.thrift.TBase<getTMatchReviewById_result, getTMatchReviewById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTMatchReviewById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTMatchReviewById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTMatchReviewById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTMatchReviewById_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.sbd.api.dto.TMatchReview success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.sbd.api.dto.TMatchReview.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTMatchReviewById_result.class, metaDataMap);
    }

    public getTMatchReviewById_result() {
    }

    public getTMatchReviewById_result(
      com.lesports.qmt.sbd.api.dto.TMatchReview success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTMatchReviewById_result(getTMatchReviewById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.sbd.api.dto.TMatchReview(other.success);
      }
    }

    public getTMatchReviewById_result deepCopy() {
      return new getTMatchReviewById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.sbd.api.dto.TMatchReview getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.sbd.api.dto.TMatchReview success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.sbd.api.dto.TMatchReview)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTMatchReviewById_result)
        return this.equals((getTMatchReviewById_result)that);
      return false;
    }

    public boolean equals(getTMatchReviewById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTMatchReviewById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTMatchReviewById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTMatchReviewById_resultStandardSchemeFactory implements SchemeFactory {
      public getTMatchReviewById_resultStandardScheme getScheme() {
        return new getTMatchReviewById_resultStandardScheme();
      }
    }

    private static class getTMatchReviewById_resultStandardScheme extends StandardScheme<getTMatchReviewById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTMatchReviewById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.sbd.api.dto.TMatchReview();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTMatchReviewById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTMatchReviewById_resultTupleSchemeFactory implements SchemeFactory {
      public getTMatchReviewById_resultTupleScheme getScheme() {
        return new getTMatchReviewById_resultTupleScheme();
      }
    }

    private static class getTMatchReviewById_resultTupleScheme extends TupleScheme<getTMatchReviewById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTMatchReviewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTMatchReviewById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.sbd.api.dto.TMatchReview();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
