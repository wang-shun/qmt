/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.tlive.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-20")
public class TTextLive implements org.apache.thrift.TBase<TTextLive, TTextLive._Fields>, java.io.Serializable, Cloneable, Comparable<TTextLive> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTextLive");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ONLINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ANCHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("anchor", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTextLiveStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTextLiveTupleSchemeFactory());
  }

  private long id; // required
  private com.lesports.api.common.LiveStatus status; // optional
  private long eid; // optional
  private long mid; // optional
  private int onlineCount; // optional
  private TAnchor anchor; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see com.lesports.api.common.LiveStatus
     */
    STATUS((short)2, "status"),
    EID((short)3, "eid"),
    MID((short)4, "mid"),
    ONLINE_COUNT((short)5, "onlineCount"),
    ANCHOR((short)6, "anchor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // STATUS
          return STATUS;
        case 3: // EID
          return EID;
        case 4: // MID
          return MID;
        case 5: // ONLINE_COUNT
          return ONLINE_COUNT;
        case 6: // ANCHOR
          return ANCHOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __EID_ISSET_ID = 1;
  private static final int __MID_ISSET_ID = 2;
  private static final int __ONLINECOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.EID,_Fields.MID,_Fields.ONLINE_COUNT,_Fields.ANCHOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.api.common.LiveStatus.class)));
    tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ONLINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("onlineCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANCHOR, new org.apache.thrift.meta_data.FieldMetaData("anchor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TAnchor")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTextLive.class, metaDataMap);
  }

  public TTextLive() {
  }

  public TTextLive(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTextLive(TTextLive other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.eid = other.eid;
    this.mid = other.mid;
    this.onlineCount = other.onlineCount;
    if (other.isSetAnchor()) {
      this.anchor = other.anchor;
    }
  }

  public TTextLive deepCopy() {
    return new TTextLive(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.status = null;
    setEidIsSet(false);
    this.eid = 0;
    setMidIsSet(false);
    this.mid = 0;
    setOnlineCountIsSet(false);
    this.onlineCount = 0;
    this.anchor = null;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  /**
   * 
   * @see com.lesports.api.common.LiveStatus
   */
  public com.lesports.api.common.LiveStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see com.lesports.api.common.LiveStatus
   */
  public void setStatus(com.lesports.api.common.LiveStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getEid() {
    return this.eid;
  }

  public void setEid(long eid) {
    this.eid = eid;
    setEidIsSet(true);
  }

  public void unsetEid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
  }

  /** Returns true if field eid is set (has been assigned a value) and false otherwise */
  public boolean isSetEid() {
    return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
  }

  public void setEidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
  }

  public long getMid() {
    return this.mid;
  }

  public void setMid(long mid) {
    this.mid = mid;
    setMidIsSet(true);
  }

  public void unsetMid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public int getOnlineCount() {
    return this.onlineCount;
  }

  public void setOnlineCount(int onlineCount) {
    this.onlineCount = onlineCount;
    setOnlineCountIsSet(true);
  }

  public void unsetOnlineCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID);
  }

  /** Returns true if field onlineCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID);
  }

  public void setOnlineCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID, value);
  }

  public TAnchor getAnchor() {
    return this.anchor;
  }

  public void setAnchor(TAnchor anchor) {
    this.anchor = anchor;
  }

  public void unsetAnchor() {
    this.anchor = null;
  }

  /** Returns true if field anchor is set (has been assigned a value) and false otherwise */
  public boolean isSetAnchor() {
    return this.anchor != null;
  }

  public void setAnchorIsSet(boolean value) {
    if (!value) {
      this.anchor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((com.lesports.api.common.LiveStatus)value);
      }
      break;

    case EID:
      if (value == null) {
        unsetEid();
      } else {
        setEid((Long)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((Long)value);
      }
      break;

    case ONLINE_COUNT:
      if (value == null) {
        unsetOnlineCount();
      } else {
        setOnlineCount((Integer)value);
      }
      break;

    case ANCHOR:
      if (value == null) {
        unsetAnchor();
      } else {
        setAnchor((TAnchor)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case STATUS:
      return getStatus();

    case EID:
      return Long.valueOf(getEid());

    case MID:
      return Long.valueOf(getMid());

    case ONLINE_COUNT:
      return Integer.valueOf(getOnlineCount());

    case ANCHOR:
      return getAnchor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case STATUS:
      return isSetStatus();
    case EID:
      return isSetEid();
    case MID:
      return isSetMid();
    case ONLINE_COUNT:
      return isSetOnlineCount();
    case ANCHOR:
      return isSetAnchor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTextLive)
      return this.equals((TTextLive)that);
    return false;
  }

  public boolean equals(TTextLive that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_eid = true && this.isSetEid();
    boolean that_present_eid = true && that.isSetEid();
    if (this_present_eid || that_present_eid) {
      if (!(this_present_eid && that_present_eid))
        return false;
      if (this.eid != that.eid)
        return false;
    }

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_onlineCount = true && this.isSetOnlineCount();
    boolean that_present_onlineCount = true && that.isSetOnlineCount();
    if (this_present_onlineCount || that_present_onlineCount) {
      if (!(this_present_onlineCount && that_present_onlineCount))
        return false;
      if (this.onlineCount != that.onlineCount)
        return false;
    }

    boolean this_present_anchor = true && this.isSetAnchor();
    boolean that_present_anchor = true && that.isSetAnchor();
    if (this_present_anchor || that_present_anchor) {
      if (!(this_present_anchor && that_present_anchor))
        return false;
      if (!this.anchor.equals(that.anchor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_eid = true && (isSetEid());
    list.add(present_eid);
    if (present_eid)
      list.add(eid);

    boolean present_mid = true && (isSetMid());
    list.add(present_mid);
    if (present_mid)
      list.add(mid);

    boolean present_onlineCount = true && (isSetOnlineCount());
    list.add(present_onlineCount);
    if (present_onlineCount)
      list.add(onlineCount);

    boolean present_anchor = true && (isSetAnchor());
    list.add(present_anchor);
    if (present_anchor)
      list.add(anchor);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTextLive other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineCount()).compareTo(other.isSetOnlineCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineCount, other.onlineCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnchor()).compareTo(other.isSetAnchor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnchor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchor, other.anchor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTextLive(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetEid()) {
      if (!first) sb.append(", ");
      sb.append("eid:");
      sb.append(this.eid);
      first = false;
    }
    if (isSetMid()) {
      if (!first) sb.append(", ");
      sb.append("mid:");
      sb.append(this.mid);
      first = false;
    }
    if (isSetOnlineCount()) {
      if (!first) sb.append(", ");
      sb.append("onlineCount:");
      sb.append(this.onlineCount);
      first = false;
    }
    if (isSetAnchor()) {
      if (!first) sb.append(", ");
      sb.append("anchor:");
      if (this.anchor == null) {
        sb.append("null");
      } else {
        sb.append(this.anchor);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTextLiveStandardSchemeFactory implements SchemeFactory {
    public TTextLiveStandardScheme getScheme() {
      return new TTextLiveStandardScheme();
    }
  }

  private static class TTextLiveStandardScheme extends StandardScheme<TTextLive> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTextLive struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com.lesports.api.common.LiveStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eid = iprot.readI64();
              struct.setEidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mid = iprot.readI64();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ONLINE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onlineCount = iprot.readI32();
              struct.setOnlineCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ANCHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.anchor = new TAnchor();
              struct.anchor.read(iprot);
              struct.setAnchorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTextLive struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEid()) {
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMid()) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeI64(struct.mid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOnlineCount()) {
        oprot.writeFieldBegin(ONLINE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.onlineCount);
        oprot.writeFieldEnd();
      }
      if (struct.anchor != null) {
        if (struct.isSetAnchor()) {
          oprot.writeFieldBegin(ANCHOR_FIELD_DESC);
          struct.anchor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTextLiveTupleSchemeFactory implements SchemeFactory {
    public TTextLiveTupleScheme getScheme() {
      return new TTextLiveTupleScheme();
    }
  }

  private static class TTextLiveTupleScheme extends TupleScheme<TTextLive> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTextLive struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      if (struct.isSetEid()) {
        optionals.set(2);
      }
      if (struct.isSetMid()) {
        optionals.set(3);
      }
      if (struct.isSetOnlineCount()) {
        optionals.set(4);
      }
      if (struct.isSetAnchor()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetEid()) {
        oprot.writeI64(struct.eid);
      }
      if (struct.isSetMid()) {
        oprot.writeI64(struct.mid);
      }
      if (struct.isSetOnlineCount()) {
        oprot.writeI32(struct.onlineCount);
      }
      if (struct.isSetAnchor()) {
        struct.anchor.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTextLive struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = com.lesports.api.common.LiveStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eid = iprot.readI64();
        struct.setEidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mid = iprot.readI64();
        struct.setMidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.onlineCount = iprot.readI32();
        struct.setOnlineCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.anchor = new TAnchor();
        struct.anchor.read(iprot);
        struct.setAnchorIsSet(true);
      }
    }
  }

}

