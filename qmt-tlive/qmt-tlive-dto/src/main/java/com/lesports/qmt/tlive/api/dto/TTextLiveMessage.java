/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.tlive.api.dto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-20")
public class TTextLiveMessage implements org.apache.thrift.TBase<TTextLiveMessage, TTextLiveMessage._Fields>, java.io.Serializable, Cloneable, Comparable<TTextLiveMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTextLiveMessage");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MATCH_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("matchResult", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ANCHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("anchor", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sendTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TEXT_LIVE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("deleted", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTextLiveMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTextLiveMessageTupleSchemeFactory());
  }

  private long id; // required
  private long textLiveId; // optional
  private String section; // optional
  private String time; // optional
  private String matchResult; // optional
  private com.lesports.qmt.tlive.api.common.TextLiveMessageType type; // optional
  private String content; // optional
  private TSimpleAnchor anchor; // optional
  private String sendTime; // optional
  private com.lesports.qmt.tlive.api.common.TextLiveType textLiveType; // optional
  private long sectionId; // optional
  private boolean deleted; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TEXT_LIVE_ID((short)2, "textLiveId"),
    SECTION((short)3, "section"),
    TIME((short)4, "time"),
    MATCH_RESULT((short)5, "matchResult"),
    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.TextLiveMessageType
     */
    TYPE((short)6, "type"),
    CONTENT((short)7, "content"),
    ANCHOR((short)8, "anchor"),
    SEND_TIME((short)9, "sendTime"),
    /**
     * 
     * @see com.lesports.qmt.tlive.api.common.TextLiveType
     */
    TEXT_LIVE_TYPE((short)10, "textLiveType"),
    SECTION_ID((short)11, "sectionId"),
    DELETED((short)12, "deleted");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TEXT_LIVE_ID
          return TEXT_LIVE_ID;
        case 3: // SECTION
          return SECTION;
        case 4: // TIME
          return TIME;
        case 5: // MATCH_RESULT
          return MATCH_RESULT;
        case 6: // TYPE
          return TYPE;
        case 7: // CONTENT
          return CONTENT;
        case 8: // ANCHOR
          return ANCHOR;
        case 9: // SEND_TIME
          return SEND_TIME;
        case 10: // TEXT_LIVE_TYPE
          return TEXT_LIVE_TYPE;
        case 11: // SECTION_ID
          return SECTION_ID;
        case 12: // DELETED
          return DELETED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TEXTLIVEID_ISSET_ID = 1;
  private static final int __SECTIONID_ISSET_ID = 2;
  private static final int __DELETED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEXT_LIVE_ID,_Fields.SECTION,_Fields.TIME,_Fields.MATCH_RESULT,_Fields.TYPE,_Fields.CONTENT,_Fields.ANCHOR,_Fields.SEND_TIME,_Fields.TEXT_LIVE_TYPE,_Fields.SECTION_ID,_Fields.DELETED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MATCH_RESULT, new org.apache.thrift.meta_data.FieldMetaData("matchResult", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.tlive.api.common.TextLiveMessageType.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANCHOR, new org.apache.thrift.meta_data.FieldMetaData("anchor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TSimpleAnchor")));
    tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT_LIVE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("textLiveType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.tlive.api.common.TextLiveType.class)));
    tmpMap.put(_Fields.SECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("sectionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETED, new org.apache.thrift.meta_data.FieldMetaData("deleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTextLiveMessage.class, metaDataMap);
  }

  public TTextLiveMessage() {
  }

  public TTextLiveMessage(
    long id)
  {
    this();
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTextLiveMessage(TTextLiveMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.textLiveId = other.textLiveId;
    if (other.isSetSection()) {
      this.section = other.section;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetMatchResult()) {
      this.matchResult = other.matchResult;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetAnchor()) {
      this.anchor = other.anchor;
    }
    if (other.isSetSendTime()) {
      this.sendTime = other.sendTime;
    }
    if (other.isSetTextLiveType()) {
      this.textLiveType = other.textLiveType;
    }
    this.sectionId = other.sectionId;
    this.deleted = other.deleted;
  }

  public TTextLiveMessage deepCopy() {
    return new TTextLiveMessage(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setTextLiveIdIsSet(false);
    this.textLiveId = 0;
    this.section = null;
    this.time = null;
    this.matchResult = null;
    this.type = null;
    this.content = null;
    this.anchor = null;
    this.sendTime = null;
    this.textLiveType = null;
    setSectionIdIsSet(false);
    this.sectionId = 0;
    setDeletedIsSet(false);
    this.deleted = false;
  }

  public long getId() {
    return this.id;
  }

  public void setId(long id) {
    this.id = id;
    setIdIsSet(true);
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getTextLiveId() {
    return this.textLiveId;
  }

  public void setTextLiveId(long textLiveId) {
    this.textLiveId = textLiveId;
    setTextLiveIdIsSet(true);
  }

  public void unsetTextLiveId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
  }

  /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetTextLiveId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
  }

  public void setTextLiveIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
  }

  public String getSection() {
    return this.section;
  }

  public void setSection(String section) {
    this.section = section;
  }

  public void unsetSection() {
    this.section = null;
  }

  /** Returns true if field section is set (has been assigned a value) and false otherwise */
  public boolean isSetSection() {
    return this.section != null;
  }

  public void setSectionIsSet(boolean value) {
    if (!value) {
      this.section = null;
    }
  }

  public String getTime() {
    return this.time;
  }

  public void setTime(String time) {
    this.time = time;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public String getMatchResult() {
    return this.matchResult;
  }

  public void setMatchResult(String matchResult) {
    this.matchResult = matchResult;
  }

  public void unsetMatchResult() {
    this.matchResult = null;
  }

  /** Returns true if field matchResult is set (has been assigned a value) and false otherwise */
  public boolean isSetMatchResult() {
    return this.matchResult != null;
  }

  public void setMatchResultIsSet(boolean value) {
    if (!value) {
      this.matchResult = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.tlive.api.common.TextLiveMessageType
   */
  public com.lesports.qmt.tlive.api.common.TextLiveMessageType getType() {
    return this.type;
  }

  /**
   * 
   * @see com.lesports.qmt.tlive.api.common.TextLiveMessageType
   */
  public void setType(com.lesports.qmt.tlive.api.common.TextLiveMessageType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public TSimpleAnchor getAnchor() {
    return this.anchor;
  }

  public void setAnchor(TSimpleAnchor anchor) {
    this.anchor = anchor;
  }

  public void unsetAnchor() {
    this.anchor = null;
  }

  /** Returns true if field anchor is set (has been assigned a value) and false otherwise */
  public boolean isSetAnchor() {
    return this.anchor != null;
  }

  public void setAnchorIsSet(boolean value) {
    if (!value) {
      this.anchor = null;
    }
  }

  public String getSendTime() {
    return this.sendTime;
  }

  public void setSendTime(String sendTime) {
    this.sendTime = sendTime;
  }

  public void unsetSendTime() {
    this.sendTime = null;
  }

  /** Returns true if field sendTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSendTime() {
    return this.sendTime != null;
  }

  public void setSendTimeIsSet(boolean value) {
    if (!value) {
      this.sendTime = null;
    }
  }

  /**
   * 
   * @see com.lesports.qmt.tlive.api.common.TextLiveType
   */
  public com.lesports.qmt.tlive.api.common.TextLiveType getTextLiveType() {
    return this.textLiveType;
  }

  /**
   * 
   * @see com.lesports.qmt.tlive.api.common.TextLiveType
   */
  public void setTextLiveType(com.lesports.qmt.tlive.api.common.TextLiveType textLiveType) {
    this.textLiveType = textLiveType;
  }

  public void unsetTextLiveType() {
    this.textLiveType = null;
  }

  /** Returns true if field textLiveType is set (has been assigned a value) and false otherwise */
  public boolean isSetTextLiveType() {
    return this.textLiveType != null;
  }

  public void setTextLiveTypeIsSet(boolean value) {
    if (!value) {
      this.textLiveType = null;
    }
  }

  public long getSectionId() {
    return this.sectionId;
  }

  public void setSectionId(long sectionId) {
    this.sectionId = sectionId;
    setSectionIdIsSet(true);
  }

  public void unsetSectionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECTIONID_ISSET_ID);
  }

  /** Returns true if field sectionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionId() {
    return EncodingUtils.testBit(__isset_bitfield, __SECTIONID_ISSET_ID);
  }

  public void setSectionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECTIONID_ISSET_ID, value);
  }

  public boolean isDeleted() {
    return this.deleted;
  }

  public void setDeleted(boolean deleted) {
    this.deleted = deleted;
    setDeletedIsSet(true);
  }

  public void unsetDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  /** Returns true if field deleted is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __DELETED_ISSET_ID);
  }

  public void setDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELETED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TEXT_LIVE_ID:
      if (value == null) {
        unsetTextLiveId();
      } else {
        setTextLiveId((Long)value);
      }
      break;

    case SECTION:
      if (value == null) {
        unsetSection();
      } else {
        setSection((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case MATCH_RESULT:
      if (value == null) {
        unsetMatchResult();
      } else {
        setMatchResult((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.lesports.qmt.tlive.api.common.TextLiveMessageType)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case ANCHOR:
      if (value == null) {
        unsetAnchor();
      } else {
        setAnchor((TSimpleAnchor)value);
      }
      break;

    case SEND_TIME:
      if (value == null) {
        unsetSendTime();
      } else {
        setSendTime((String)value);
      }
      break;

    case TEXT_LIVE_TYPE:
      if (value == null) {
        unsetTextLiveType();
      } else {
        setTextLiveType((com.lesports.qmt.tlive.api.common.TextLiveType)value);
      }
      break;

    case SECTION_ID:
      if (value == null) {
        unsetSectionId();
      } else {
        setSectionId((Long)value);
      }
      break;

    case DELETED:
      if (value == null) {
        unsetDeleted();
      } else {
        setDeleted((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TEXT_LIVE_ID:
      return Long.valueOf(getTextLiveId());

    case SECTION:
      return getSection();

    case TIME:
      return getTime();

    case MATCH_RESULT:
      return getMatchResult();

    case TYPE:
      return getType();

    case CONTENT:
      return getContent();

    case ANCHOR:
      return getAnchor();

    case SEND_TIME:
      return getSendTime();

    case TEXT_LIVE_TYPE:
      return getTextLiveType();

    case SECTION_ID:
      return Long.valueOf(getSectionId());

    case DELETED:
      return Boolean.valueOf(isDeleted());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEXT_LIVE_ID:
      return isSetTextLiveId();
    case SECTION:
      return isSetSection();
    case TIME:
      return isSetTime();
    case MATCH_RESULT:
      return isSetMatchResult();
    case TYPE:
      return isSetType();
    case CONTENT:
      return isSetContent();
    case ANCHOR:
      return isSetAnchor();
    case SEND_TIME:
      return isSetSendTime();
    case TEXT_LIVE_TYPE:
      return isSetTextLiveType();
    case SECTION_ID:
      return isSetSectionId();
    case DELETED:
      return isSetDeleted();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTextLiveMessage)
      return this.equals((TTextLiveMessage)that);
    return false;
  }

  public boolean equals(TTextLiveMessage that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_textLiveId = true && this.isSetTextLiveId();
    boolean that_present_textLiveId = true && that.isSetTextLiveId();
    if (this_present_textLiveId || that_present_textLiveId) {
      if (!(this_present_textLiveId && that_present_textLiveId))
        return false;
      if (this.textLiveId != that.textLiveId)
        return false;
    }

    boolean this_present_section = true && this.isSetSection();
    boolean that_present_section = true && that.isSetSection();
    if (this_present_section || that_present_section) {
      if (!(this_present_section && that_present_section))
        return false;
      if (!this.section.equals(that.section))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_matchResult = true && this.isSetMatchResult();
    boolean that_present_matchResult = true && that.isSetMatchResult();
    if (this_present_matchResult || that_present_matchResult) {
      if (!(this_present_matchResult && that_present_matchResult))
        return false;
      if (!this.matchResult.equals(that.matchResult))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_anchor = true && this.isSetAnchor();
    boolean that_present_anchor = true && that.isSetAnchor();
    if (this_present_anchor || that_present_anchor) {
      if (!(this_present_anchor && that_present_anchor))
        return false;
      if (!this.anchor.equals(that.anchor))
        return false;
    }

    boolean this_present_sendTime = true && this.isSetSendTime();
    boolean that_present_sendTime = true && that.isSetSendTime();
    if (this_present_sendTime || that_present_sendTime) {
      if (!(this_present_sendTime && that_present_sendTime))
        return false;
      if (!this.sendTime.equals(that.sendTime))
        return false;
    }

    boolean this_present_textLiveType = true && this.isSetTextLiveType();
    boolean that_present_textLiveType = true && that.isSetTextLiveType();
    if (this_present_textLiveType || that_present_textLiveType) {
      if (!(this_present_textLiveType && that_present_textLiveType))
        return false;
      if (!this.textLiveType.equals(that.textLiveType))
        return false;
    }

    boolean this_present_sectionId = true && this.isSetSectionId();
    boolean that_present_sectionId = true && that.isSetSectionId();
    if (this_present_sectionId || that_present_sectionId) {
      if (!(this_present_sectionId && that_present_sectionId))
        return false;
      if (this.sectionId != that.sectionId)
        return false;
    }

    boolean this_present_deleted = true && this.isSetDeleted();
    boolean that_present_deleted = true && that.isSetDeleted();
    if (this_present_deleted || that_present_deleted) {
      if (!(this_present_deleted && that_present_deleted))
        return false;
      if (this.deleted != that.deleted)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_textLiveId = true && (isSetTextLiveId());
    list.add(present_textLiveId);
    if (present_textLiveId)
      list.add(textLiveId);

    boolean present_section = true && (isSetSection());
    list.add(present_section);
    if (present_section)
      list.add(section);

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_matchResult = true && (isSetMatchResult());
    list.add(present_matchResult);
    if (present_matchResult)
      list.add(matchResult);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_anchor = true && (isSetAnchor());
    list.add(present_anchor);
    if (present_anchor)
      list.add(anchor);

    boolean present_sendTime = true && (isSetSendTime());
    list.add(present_sendTime);
    if (present_sendTime)
      list.add(sendTime);

    boolean present_textLiveType = true && (isSetTextLiveType());
    list.add(present_textLiveType);
    if (present_textLiveType)
      list.add(textLiveType.getValue());

    boolean present_sectionId = true && (isSetSectionId());
    list.add(present_sectionId);
    if (present_sectionId)
      list.add(sectionId);

    boolean present_deleted = true && (isSetDeleted());
    list.add(present_deleted);
    if (present_deleted)
      list.add(deleted);

    return list.hashCode();
  }

  @Override
  public int compareTo(TTextLiveMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextLiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMatchResult()).compareTo(other.isSetMatchResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatchResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchResult, other.matchResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnchor()).compareTo(other.isSetAnchor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnchor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchor, other.anchor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextLiveType()).compareTo(other.isSetTextLiveType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextLiveType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveType, other.textLiveType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSectionId()).compareTo(other.isSetSectionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionId, other.sectionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeleted()).compareTo(other.isSetDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deleted, other.deleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTextLiveMessage(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetTextLiveId()) {
      if (!first) sb.append(", ");
      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
    }
    if (isSetSection()) {
      if (!first) sb.append(", ");
      sb.append("section:");
      if (this.section == null) {
        sb.append("null");
      } else {
        sb.append(this.section);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
    }
    if (isSetMatchResult()) {
      if (!first) sb.append(", ");
      sb.append("matchResult:");
      if (this.matchResult == null) {
        sb.append("null");
      } else {
        sb.append(this.matchResult);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    if (isSetAnchor()) {
      if (!first) sb.append(", ");
      sb.append("anchor:");
      if (this.anchor == null) {
        sb.append("null");
      } else {
        sb.append(this.anchor);
      }
      first = false;
    }
    if (isSetSendTime()) {
      if (!first) sb.append(", ");
      sb.append("sendTime:");
      if (this.sendTime == null) {
        sb.append("null");
      } else {
        sb.append(this.sendTime);
      }
      first = false;
    }
    if (isSetTextLiveType()) {
      if (!first) sb.append(", ");
      sb.append("textLiveType:");
      if (this.textLiveType == null) {
        sb.append("null");
      } else {
        sb.append(this.textLiveType);
      }
      first = false;
    }
    if (isSetSectionId()) {
      if (!first) sb.append(", ");
      sb.append("sectionId:");
      sb.append(this.sectionId);
      first = false;
    }
    if (isSetDeleted()) {
      if (!first) sb.append(", ");
      sb.append("deleted:");
      sb.append(this.deleted);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTextLiveMessageStandardSchemeFactory implements SchemeFactory {
    public TTextLiveMessageStandardScheme getScheme() {
      return new TTextLiveMessageStandardScheme();
    }
  }

  private static class TTextLiveMessageStandardScheme extends StandardScheme<TTextLiveMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTextLiveMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEXT_LIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.textLiveId = iprot.readI64();
              struct.setTextLiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.section = iprot.readString();
              struct.setSectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MATCH_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.matchResult = iprot.readString();
              struct.setMatchResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.lesports.qmt.tlive.api.common.TextLiveMessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ANCHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.anchor = new TSimpleAnchor();
              struct.anchor.read(iprot);
              struct.setAnchorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SEND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendTime = iprot.readString();
              struct.setSendTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TEXT_LIVE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.textLiveType = com.lesports.qmt.tlive.api.common.TextLiveType.findByValue(iprot.readI32());
              struct.setTextLiveTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sectionId = iprot.readI64();
              struct.setSectionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.deleted = iprot.readBool();
              struct.setDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTextLiveMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.isSetTextLiveId()) {
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
      }
      if (struct.section != null) {
        if (struct.isSetSection()) {
          oprot.writeFieldBegin(SECTION_FIELD_DESC);
          oprot.writeString(struct.section);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time != null) {
        if (struct.isSetTime()) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.matchResult != null) {
        if (struct.isSetMatchResult()) {
          oprot.writeFieldBegin(MATCH_RESULT_FIELD_DESC);
          oprot.writeString(struct.matchResult);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.anchor != null) {
        if (struct.isSetAnchor()) {
          oprot.writeFieldBegin(ANCHOR_FIELD_DESC);
          struct.anchor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sendTime != null) {
        if (struct.isSetSendTime()) {
          oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
          oprot.writeString(struct.sendTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.textLiveType != null) {
        if (struct.isSetTextLiveType()) {
          oprot.writeFieldBegin(TEXT_LIVE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.textLiveType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSectionId()) {
        oprot.writeFieldBegin(SECTION_ID_FIELD_DESC);
        oprot.writeI64(struct.sectionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeleted()) {
        oprot.writeFieldBegin(DELETED_FIELD_DESC);
        oprot.writeBool(struct.deleted);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTextLiveMessageTupleSchemeFactory implements SchemeFactory {
    public TTextLiveMessageTupleScheme getScheme() {
      return new TTextLiveMessageTupleScheme();
    }
  }

  private static class TTextLiveMessageTupleScheme extends TupleScheme<TTextLiveMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTextLiveMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTextLiveId()) {
        optionals.set(1);
      }
      if (struct.isSetSection()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetMatchResult()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetAnchor()) {
        optionals.set(7);
      }
      if (struct.isSetSendTime()) {
        optionals.set(8);
      }
      if (struct.isSetTextLiveType()) {
        optionals.set(9);
      }
      if (struct.isSetSectionId()) {
        optionals.set(10);
      }
      if (struct.isSetDeleted()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetTextLiveId()) {
        oprot.writeI64(struct.textLiveId);
      }
      if (struct.isSetSection()) {
        oprot.writeString(struct.section);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetMatchResult()) {
        oprot.writeString(struct.matchResult);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetAnchor()) {
        struct.anchor.write(oprot);
      }
      if (struct.isSetSendTime()) {
        oprot.writeString(struct.sendTime);
      }
      if (struct.isSetTextLiveType()) {
        oprot.writeI32(struct.textLiveType.getValue());
      }
      if (struct.isSetSectionId()) {
        oprot.writeI64(struct.sectionId);
      }
      if (struct.isSetDeleted()) {
        oprot.writeBool(struct.deleted);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTextLiveMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.textLiveId = iprot.readI64();
        struct.setTextLiveIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.section = iprot.readString();
        struct.setSectionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.matchResult = iprot.readString();
        struct.setMatchResultIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = com.lesports.qmt.tlive.api.common.TextLiveMessageType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.anchor = new TSimpleAnchor();
        struct.anchor.read(iprot);
        struct.setAnchorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sendTime = iprot.readString();
        struct.setSendTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.textLiveType = com.lesports.qmt.tlive.api.common.TextLiveType.findByValue(iprot.readI32());
        struct.setTextLiveTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sectionId = iprot.readI64();
        struct.setSectionIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.deleted = iprot.readBool();
        struct.setDeletedIsSet(true);
      }
    }
  }

}

