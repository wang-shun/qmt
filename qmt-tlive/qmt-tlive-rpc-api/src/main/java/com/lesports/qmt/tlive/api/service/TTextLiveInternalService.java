/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lesports.qmt.tlive.api.service;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.nio.ByteBuffer;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-22")
public class TTextLiveInternalService {

  /**
   * Lesports Text Live Internal Service Definition.
   * @author lufei
   */
  public interface Iface {

    public long saveEntity(ByteBuffer bf, ByteBuffer classType) throws org.apache.thrift.TException;

    public boolean deleteEntity(long id, ByteBuffer classType) throws org.apache.thrift.TException;

    public ByteBuffer getEntityBytesById(long id, ByteBuffer classType) throws org.apache.thrift.TException;

    public ByteBuffer getEntityBytesByIds(List<Long> ids, ByteBuffer classType) throws org.apache.thrift.TException;

    public ByteBuffer getEntitiesBytesByQuery(ByteBuffer query, ByteBuffer classType) throws org.apache.thrift.TException;

    public long countByQuery(ByteBuffer query, ByteBuffer classType) throws org.apache.thrift.TException;

    /**
     * 人工干预在线人数
     * 
     * 
     * @param eid
     * @param onlineCount
     */
    public boolean setOnlineCount(long eid, int onlineCount) throws org.apache.thrift.TException;

    /**
     * 人工干预直播员顶踩
     * 
     * 
     * @param textLiveId
     * @param anchorId
     * @param upDownActMap
     */
    public boolean setUpDownAnchor(long textLiveId, long anchorId, Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap) throws org.apache.thrift.TException;

    /**
     * 发送图片或投票消息
     * true: image, false: vote
     * 
     * 
     * @param imageOrVote
     * @param id
     * @param message
     */
    public boolean sendImageOrVoteMessage(boolean imageOrVote, long id, ByteBuffer message) throws org.apache.thrift.TException;

    /**
     * 在线人数查询接口
     * 
     * 
     * @param eid
     */
    public long getOnlineCount(long eid) throws org.apache.thrift.TException;

    /**
     * 获取直播员顶踩结果
     * 
     * 
     * @param textLiveId
     * @param anchorId
     */
    public com.lesports.qmt.tlive.api.dto.TAnchor getAnchorUpDown(long textLiveId, long anchorId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void saveEntity(ByteBuffer bf, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEntity(long id, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityBytesById(long id, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntityBytesByIds(List<Long> ids, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntitiesBytesByQuery(ByteBuffer query, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countByQuery(ByteBuffer query, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOnlineCount(long eid, int onlineCount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setUpDownAnchor(long textLiveId, long anchorId, Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendImageOrVoteMessage(boolean imageOrVote, long id, ByteBuffer message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOnlineCount(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAnchorUpDown(long textLiveId, long anchorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long saveEntity(ByteBuffer bf, ByteBuffer classType) throws org.apache.thrift.TException
    {
      send_saveEntity(bf, classType);
      return recv_saveEntity();
    }

    public void send_saveEntity(ByteBuffer bf, ByteBuffer classType) throws org.apache.thrift.TException
    {
      saveEntity_args args = new saveEntity_args();
      args.setBf(bf);
      args.setClassType(classType);
      sendBase("saveEntity", args);
    }

    public long recv_saveEntity() throws org.apache.thrift.TException
    {
      saveEntity_result result = new saveEntity_result();
      receiveBase(result, "saveEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveEntity failed: unknown result");
    }

    public boolean deleteEntity(long id, ByteBuffer classType) throws org.apache.thrift.TException
    {
      send_deleteEntity(id, classType);
      return recv_deleteEntity();
    }

    public void send_deleteEntity(long id, ByteBuffer classType) throws org.apache.thrift.TException
    {
      deleteEntity_args args = new deleteEntity_args();
      args.setId(id);
      args.setClassType(classType);
      sendBase("deleteEntity", args);
    }

    public boolean recv_deleteEntity() throws org.apache.thrift.TException
    {
      deleteEntity_result result = new deleteEntity_result();
      receiveBase(result, "deleteEntity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteEntity failed: unknown result");
    }

    public ByteBuffer getEntityBytesById(long id, ByteBuffer classType) throws org.apache.thrift.TException
    {
      send_getEntityBytesById(id, classType);
      return recv_getEntityBytesById();
    }

    public void send_getEntityBytesById(long id, ByteBuffer classType) throws org.apache.thrift.TException
    {
      getEntityBytesById_args args = new getEntityBytesById_args();
      args.setId(id);
      args.setClassType(classType);
      sendBase("getEntityBytesById", args);
    }

    public ByteBuffer recv_getEntityBytesById() throws org.apache.thrift.TException
    {
      getEntityBytesById_result result = new getEntityBytesById_result();
      receiveBase(result, "getEntityBytesById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityBytesById failed: unknown result");
    }

    public ByteBuffer getEntityBytesByIds(List<Long> ids, ByteBuffer classType) throws org.apache.thrift.TException
    {
      send_getEntityBytesByIds(ids, classType);
      return recv_getEntityBytesByIds();
    }

    public void send_getEntityBytesByIds(List<Long> ids, ByteBuffer classType) throws org.apache.thrift.TException
    {
      getEntityBytesByIds_args args = new getEntityBytesByIds_args();
      args.setIds(ids);
      args.setClassType(classType);
      sendBase("getEntityBytesByIds", args);
    }

    public ByteBuffer recv_getEntityBytesByIds() throws org.apache.thrift.TException
    {
      getEntityBytesByIds_result result = new getEntityBytesByIds_result();
      receiveBase(result, "getEntityBytesByIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntityBytesByIds failed: unknown result");
    }

    public ByteBuffer getEntitiesBytesByQuery(ByteBuffer query, ByteBuffer classType) throws org.apache.thrift.TException
    {
      send_getEntitiesBytesByQuery(query, classType);
      return recv_getEntitiesBytesByQuery();
    }

    public void send_getEntitiesBytesByQuery(ByteBuffer query, ByteBuffer classType) throws org.apache.thrift.TException
    {
      getEntitiesBytesByQuery_args args = new getEntitiesBytesByQuery_args();
      args.setQuery(query);
      args.setClassType(classType);
      sendBase("getEntitiesBytesByQuery", args);
    }

    public ByteBuffer recv_getEntitiesBytesByQuery() throws org.apache.thrift.TException
    {
      getEntitiesBytesByQuery_result result = new getEntitiesBytesByQuery_result();
      receiveBase(result, "getEntitiesBytesByQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntitiesBytesByQuery failed: unknown result");
    }

    public long countByQuery(ByteBuffer query, ByteBuffer classType) throws org.apache.thrift.TException
    {
      send_countByQuery(query, classType);
      return recv_countByQuery();
    }

    public void send_countByQuery(ByteBuffer query, ByteBuffer classType) throws org.apache.thrift.TException
    {
      countByQuery_args args = new countByQuery_args();
      args.setQuery(query);
      args.setClassType(classType);
      sendBase("countByQuery", args);
    }

    public long recv_countByQuery() throws org.apache.thrift.TException
    {
      countByQuery_result result = new countByQuery_result();
      receiveBase(result, "countByQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countByQuery failed: unknown result");
    }

    public boolean setOnlineCount(long eid, int onlineCount) throws org.apache.thrift.TException
    {
      send_setOnlineCount(eid, onlineCount);
      return recv_setOnlineCount();
    }

    public void send_setOnlineCount(long eid, int onlineCount) throws org.apache.thrift.TException
    {
      setOnlineCount_args args = new setOnlineCount_args();
      args.setEid(eid);
      args.setOnlineCount(onlineCount);
      sendBase("setOnlineCount", args);
    }

    public boolean recv_setOnlineCount() throws org.apache.thrift.TException
    {
      setOnlineCount_result result = new setOnlineCount_result();
      receiveBase(result, "setOnlineCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setOnlineCount failed: unknown result");
    }

    public boolean setUpDownAnchor(long textLiveId, long anchorId, Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap) throws org.apache.thrift.TException
    {
      send_setUpDownAnchor(textLiveId, anchorId, upDownActMap);
      return recv_setUpDownAnchor();
    }

    public void send_setUpDownAnchor(long textLiveId, long anchorId, Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap) throws org.apache.thrift.TException
    {
      setUpDownAnchor_args args = new setUpDownAnchor_args();
      args.setTextLiveId(textLiveId);
      args.setAnchorId(anchorId);
      args.setUpDownActMap(upDownActMap);
      sendBase("setUpDownAnchor", args);
    }

    public boolean recv_setUpDownAnchor() throws org.apache.thrift.TException
    {
      setUpDownAnchor_result result = new setUpDownAnchor_result();
      receiveBase(result, "setUpDownAnchor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUpDownAnchor failed: unknown result");
    }

    public boolean sendImageOrVoteMessage(boolean imageOrVote, long id, ByteBuffer message) throws org.apache.thrift.TException
    {
      send_sendImageOrVoteMessage(imageOrVote, id, message);
      return recv_sendImageOrVoteMessage();
    }

    public void send_sendImageOrVoteMessage(boolean imageOrVote, long id, ByteBuffer message) throws org.apache.thrift.TException
    {
      sendImageOrVoteMessage_args args = new sendImageOrVoteMessage_args();
      args.setImageOrVote(imageOrVote);
      args.setId(id);
      args.setMessage(message);
      sendBase("sendImageOrVoteMessage", args);
    }

    public boolean recv_sendImageOrVoteMessage() throws org.apache.thrift.TException
    {
      sendImageOrVoteMessage_result result = new sendImageOrVoteMessage_result();
      receiveBase(result, "sendImageOrVoteMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendImageOrVoteMessage failed: unknown result");
    }

    public long getOnlineCount(long eid) throws org.apache.thrift.TException
    {
      send_getOnlineCount(eid);
      return recv_getOnlineCount();
    }

    public void send_getOnlineCount(long eid) throws org.apache.thrift.TException
    {
      getOnlineCount_args args = new getOnlineCount_args();
      args.setEid(eid);
      sendBase("getOnlineCount", args);
    }

    public long recv_getOnlineCount() throws org.apache.thrift.TException
    {
      getOnlineCount_result result = new getOnlineCount_result();
      receiveBase(result, "getOnlineCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOnlineCount failed: unknown result");
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor getAnchorUpDown(long textLiveId, long anchorId) throws org.apache.thrift.TException
    {
      send_getAnchorUpDown(textLiveId, anchorId);
      return recv_getAnchorUpDown();
    }

    public void send_getAnchorUpDown(long textLiveId, long anchorId) throws org.apache.thrift.TException
    {
      getAnchorUpDown_args args = new getAnchorUpDown_args();
      args.setTextLiveId(textLiveId);
      args.setAnchorId(anchorId);
      sendBase("getAnchorUpDown", args);
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor recv_getAnchorUpDown() throws org.apache.thrift.TException
    {
      getAnchorUpDown_result result = new getAnchorUpDown_result();
      receiveBase(result, "getAnchorUpDown");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAnchorUpDown failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveEntity(ByteBuffer bf, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveEntity_call method_call = new saveEntity_call(bf, classType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer bf;
      private ByteBuffer classType;
      public saveEntity_call(ByteBuffer bf, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bf = bf;
        this.classType = classType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveEntity_args args = new saveEntity_args();
        args.setBf(bf);
        args.setClassType(classType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveEntity();
      }
    }

    public void deleteEntity(long id, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEntity_call method_call = new deleteEntity_call(id, classType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEntity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private ByteBuffer classType;
      public deleteEntity_call(long id, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.classType = classType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEntity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEntity_args args = new deleteEntity_args();
        args.setId(id);
        args.setClassType(classType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteEntity();
      }
    }

    public void getEntityBytesById(long id, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityBytesById_call method_call = new getEntityBytesById_call(id, classType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityBytesById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long id;
      private ByteBuffer classType;
      public getEntityBytesById_call(long id, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.classType = classType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityBytesById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityBytesById_args args = new getEntityBytesById_args();
        args.setId(id);
        args.setClassType(classType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityBytesById();
      }
    }

    public void getEntityBytesByIds(List<Long> ids, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntityBytesByIds_call method_call = new getEntityBytesByIds_call(ids, classType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntityBytesByIds_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> ids;
      private ByteBuffer classType;
      public getEntityBytesByIds_call(List<Long> ids, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
        this.classType = classType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntityBytesByIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntityBytesByIds_args args = new getEntityBytesByIds_args();
        args.setIds(ids);
        args.setClassType(classType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntityBytesByIds();
      }
    }

    public void getEntitiesBytesByQuery(ByteBuffer query, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntitiesBytesByQuery_call method_call = new getEntitiesBytesByQuery_call(query, classType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntitiesBytesByQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer query;
      private ByteBuffer classType;
      public getEntitiesBytesByQuery_call(ByteBuffer query, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.classType = classType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntitiesBytesByQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntitiesBytesByQuery_args args = new getEntitiesBytesByQuery_args();
        args.setQuery(query);
        args.setClassType(classType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntitiesBytesByQuery();
      }
    }

    public void countByQuery(ByteBuffer query, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countByQuery_call method_call = new countByQuery_call(query, classType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countByQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer query;
      private ByteBuffer classType;
      public countByQuery_call(ByteBuffer query, ByteBuffer classType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.classType = classType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countByQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countByQuery_args args = new countByQuery_args();
        args.setQuery(query);
        args.setClassType(classType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countByQuery();
      }
    }

    public void setOnlineCount(long eid, int onlineCount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOnlineCount_call method_call = new setOnlineCount_call(eid, onlineCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOnlineCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eid;
      private int onlineCount;
      public setOnlineCount_call(long eid, int onlineCount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eid = eid;
        this.onlineCount = onlineCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOnlineCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOnlineCount_args args = new setOnlineCount_args();
        args.setEid(eid);
        args.setOnlineCount(onlineCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setOnlineCount();
      }
    }

    public void setUpDownAnchor(long textLiveId, long anchorId, Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUpDownAnchor_call method_call = new setUpDownAnchor_call(textLiveId, anchorId, upDownActMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUpDownAnchor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long anchorId;
      private Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap;
      public setUpDownAnchor_call(long textLiveId, long anchorId, Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.anchorId = anchorId;
        this.upDownActMap = upDownActMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUpDownAnchor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUpDownAnchor_args args = new setUpDownAnchor_args();
        args.setTextLiveId(textLiveId);
        args.setAnchorId(anchorId);
        args.setUpDownActMap(upDownActMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUpDownAnchor();
      }
    }

    public void sendImageOrVoteMessage(boolean imageOrVote, long id, ByteBuffer message, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendImageOrVoteMessage_call method_call = new sendImageOrVoteMessage_call(imageOrVote, id, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendImageOrVoteMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean imageOrVote;
      private long id;
      private ByteBuffer message;
      public sendImageOrVoteMessage_call(boolean imageOrVote, long id, ByteBuffer message, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imageOrVote = imageOrVote;
        this.id = id;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendImageOrVoteMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendImageOrVoteMessage_args args = new sendImageOrVoteMessage_args();
        args.setImageOrVote(imageOrVote);
        args.setId(id);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendImageOrVoteMessage();
      }
    }

    public void getOnlineCount(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOnlineCount_call method_call = new getOnlineCount_call(eid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOnlineCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long eid;
      public getOnlineCount_call(long eid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eid = eid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOnlineCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOnlineCount_args args = new getOnlineCount_args();
        args.setEid(eid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOnlineCount();
      }
    }

    public void getAnchorUpDown(long textLiveId, long anchorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAnchorUpDown_call method_call = new getAnchorUpDown_call(textLiveId, anchorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAnchorUpDown_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long textLiveId;
      private long anchorId;
      public getAnchorUpDown_call(long textLiveId, long anchorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.textLiveId = textLiveId;
        this.anchorId = anchorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAnchorUpDown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAnchorUpDown_args args = new getAnchorUpDown_args();
        args.setTextLiveId(textLiveId);
        args.setAnchorId(anchorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.lesports.qmt.tlive.api.dto.TAnchor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAnchorUpDown();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("saveEntity", new saveEntity());
      processMap.put("deleteEntity", new deleteEntity());
      processMap.put("getEntityBytesById", new getEntityBytesById());
      processMap.put("getEntityBytesByIds", new getEntityBytesByIds());
      processMap.put("getEntitiesBytesByQuery", new getEntitiesBytesByQuery());
      processMap.put("countByQuery", new countByQuery());
      processMap.put("setOnlineCount", new setOnlineCount());
      processMap.put("setUpDownAnchor", new setUpDownAnchor());
      processMap.put("sendImageOrVoteMessage", new sendImageOrVoteMessage());
      processMap.put("getOnlineCount", new getOnlineCount());
      processMap.put("getAnchorUpDown", new getAnchorUpDown());
      return processMap;
    }

    public static class saveEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveEntity_args> {
      public saveEntity() {
        super("saveEntity");
      }

      public saveEntity_args getEmptyArgsInstance() {
        return new saveEntity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveEntity_result getResult(I iface, saveEntity_args args) throws org.apache.thrift.TException {
        saveEntity_result result = new saveEntity_result();
        result.success = iface.saveEntity(args.bf, args.classType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteEntity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEntity_args> {
      public deleteEntity() {
        super("deleteEntity");
      }

      public deleteEntity_args getEmptyArgsInstance() {
        return new deleteEntity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEntity_result getResult(I iface, deleteEntity_args args) throws org.apache.thrift.TException {
        deleteEntity_result result = new deleteEntity_result();
        result.success = iface.deleteEntity(args.id, args.classType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getEntityBytesById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityBytesById_args> {
      public getEntityBytesById() {
        super("getEntityBytesById");
      }

      public getEntityBytesById_args getEmptyArgsInstance() {
        return new getEntityBytesById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityBytesById_result getResult(I iface, getEntityBytesById_args args) throws org.apache.thrift.TException {
        getEntityBytesById_result result = new getEntityBytesById_result();
        result.success = iface.getEntityBytesById(args.id, args.classType);
        return result;
      }
    }

    public static class getEntityBytesByIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntityBytesByIds_args> {
      public getEntityBytesByIds() {
        super("getEntityBytesByIds");
      }

      public getEntityBytesByIds_args getEmptyArgsInstance() {
        return new getEntityBytesByIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntityBytesByIds_result getResult(I iface, getEntityBytesByIds_args args) throws org.apache.thrift.TException {
        getEntityBytesByIds_result result = new getEntityBytesByIds_result();
        result.success = iface.getEntityBytesByIds(args.ids, args.classType);
        return result;
      }
    }

    public static class getEntitiesBytesByQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntitiesBytesByQuery_args> {
      public getEntitiesBytesByQuery() {
        super("getEntitiesBytesByQuery");
      }

      public getEntitiesBytesByQuery_args getEmptyArgsInstance() {
        return new getEntitiesBytesByQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntitiesBytesByQuery_result getResult(I iface, getEntitiesBytesByQuery_args args) throws org.apache.thrift.TException {
        getEntitiesBytesByQuery_result result = new getEntitiesBytesByQuery_result();
        result.success = iface.getEntitiesBytesByQuery(args.query, args.classType);
        return result;
      }
    }

    public static class countByQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countByQuery_args> {
      public countByQuery() {
        super("countByQuery");
      }

      public countByQuery_args getEmptyArgsInstance() {
        return new countByQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countByQuery_result getResult(I iface, countByQuery_args args) throws org.apache.thrift.TException {
        countByQuery_result result = new countByQuery_result();
        result.success = iface.countByQuery(args.query, args.classType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setOnlineCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOnlineCount_args> {
      public setOnlineCount() {
        super("setOnlineCount");
      }

      public setOnlineCount_args getEmptyArgsInstance() {
        return new setOnlineCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOnlineCount_result getResult(I iface, setOnlineCount_args args) throws org.apache.thrift.TException {
        setOnlineCount_result result = new setOnlineCount_result();
        result.success = iface.setOnlineCount(args.eid, args.onlineCount);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setUpDownAnchor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUpDownAnchor_args> {
      public setUpDownAnchor() {
        super("setUpDownAnchor");
      }

      public setUpDownAnchor_args getEmptyArgsInstance() {
        return new setUpDownAnchor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUpDownAnchor_result getResult(I iface, setUpDownAnchor_args args) throws org.apache.thrift.TException {
        setUpDownAnchor_result result = new setUpDownAnchor_result();
        result.success = iface.setUpDownAnchor(args.textLiveId, args.anchorId, args.upDownActMap);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendImageOrVoteMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendImageOrVoteMessage_args> {
      public sendImageOrVoteMessage() {
        super("sendImageOrVoteMessage");
      }

      public sendImageOrVoteMessage_args getEmptyArgsInstance() {
        return new sendImageOrVoteMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendImageOrVoteMessage_result getResult(I iface, sendImageOrVoteMessage_args args) throws org.apache.thrift.TException {
        sendImageOrVoteMessage_result result = new sendImageOrVoteMessage_result();
        result.success = iface.sendImageOrVoteMessage(args.imageOrVote, args.id, args.message);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getOnlineCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOnlineCount_args> {
      public getOnlineCount() {
        super("getOnlineCount");
      }

      public getOnlineCount_args getEmptyArgsInstance() {
        return new getOnlineCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOnlineCount_result getResult(I iface, getOnlineCount_args args) throws org.apache.thrift.TException {
        getOnlineCount_result result = new getOnlineCount_result();
        result.success = iface.getOnlineCount(args.eid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAnchorUpDown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAnchorUpDown_args> {
      public getAnchorUpDown() {
        super("getAnchorUpDown");
      }

      public getAnchorUpDown_args getEmptyArgsInstance() {
        return new getAnchorUpDown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAnchorUpDown_result getResult(I iface, getAnchorUpDown_args args) throws org.apache.thrift.TException {
        getAnchorUpDown_result result = new getAnchorUpDown_result();
        result.success = iface.getAnchorUpDown(args.textLiveId, args.anchorId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("saveEntity", new saveEntity());
      processMap.put("deleteEntity", new deleteEntity());
      processMap.put("getEntityBytesById", new getEntityBytesById());
      processMap.put("getEntityBytesByIds", new getEntityBytesByIds());
      processMap.put("getEntitiesBytesByQuery", new getEntitiesBytesByQuery());
      processMap.put("countByQuery", new countByQuery());
      processMap.put("setOnlineCount", new setOnlineCount());
      processMap.put("setUpDownAnchor", new setUpDownAnchor());
      processMap.put("sendImageOrVoteMessage", new sendImageOrVoteMessage());
      processMap.put("getOnlineCount", new getOnlineCount());
      processMap.put("getAnchorUpDown", new getAnchorUpDown());
      return processMap;
    }

    public static class saveEntity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveEntity_args, Long> {
      public saveEntity() {
        super("saveEntity");
      }

      public saveEntity_args getEmptyArgsInstance() {
        return new saveEntity_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            saveEntity_result result = new saveEntity_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveEntity_result result = new saveEntity_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveEntity_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.saveEntity(args.bf, args.classType,resultHandler);
      }
    }

    public static class deleteEntity<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEntity_args, Boolean> {
      public deleteEntity() {
        super("deleteEntity");
      }

      public deleteEntity_args getEmptyArgsInstance() {
        return new deleteEntity_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteEntity_result result = new deleteEntity_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEntity_result result = new deleteEntity_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEntity_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteEntity(args.id, args.classType,resultHandler);
      }
    }

    public static class getEntityBytesById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityBytesById_args, ByteBuffer> {
      public getEntityBytesById() {
        super("getEntityBytesById");
      }

      public getEntityBytesById_args getEmptyArgsInstance() {
        return new getEntityBytesById_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            getEntityBytesById_result result = new getEntityBytesById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityBytesById_result result = new getEntityBytesById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityBytesById_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.getEntityBytesById(args.id, args.classType,resultHandler);
      }
    }

    public static class getEntityBytesByIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntityBytesByIds_args, ByteBuffer> {
      public getEntityBytesByIds() {
        super("getEntityBytesByIds");
      }

      public getEntityBytesByIds_args getEmptyArgsInstance() {
        return new getEntityBytesByIds_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            getEntityBytesByIds_result result = new getEntityBytesByIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntityBytesByIds_result result = new getEntityBytesByIds_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntityBytesByIds_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.getEntityBytesByIds(args.ids, args.classType,resultHandler);
      }
    }

    public static class getEntitiesBytesByQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntitiesBytesByQuery_args, ByteBuffer> {
      public getEntitiesBytesByQuery() {
        super("getEntitiesBytesByQuery");
      }

      public getEntitiesBytesByQuery_args getEmptyArgsInstance() {
        return new getEntitiesBytesByQuery_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            getEntitiesBytesByQuery_result result = new getEntitiesBytesByQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntitiesBytesByQuery_result result = new getEntitiesBytesByQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntitiesBytesByQuery_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.getEntitiesBytesByQuery(args.query, args.classType,resultHandler);
      }
    }

    public static class countByQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countByQuery_args, Long> {
      public countByQuery() {
        super("countByQuery");
      }

      public countByQuery_args getEmptyArgsInstance() {
        return new countByQuery_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            countByQuery_result result = new countByQuery_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countByQuery_result result = new countByQuery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countByQuery_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.countByQuery(args.query, args.classType,resultHandler);
      }
    }

    public static class setOnlineCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOnlineCount_args, Boolean> {
      public setOnlineCount() {
        super("setOnlineCount");
      }

      public setOnlineCount_args getEmptyArgsInstance() {
        return new setOnlineCount_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setOnlineCount_result result = new setOnlineCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOnlineCount_result result = new setOnlineCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOnlineCount_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setOnlineCount(args.eid, args.onlineCount,resultHandler);
      }
    }

    public static class setUpDownAnchor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUpDownAnchor_args, Boolean> {
      public setUpDownAnchor() {
        super("setUpDownAnchor");
      }

      public setUpDownAnchor_args getEmptyArgsInstance() {
        return new setUpDownAnchor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setUpDownAnchor_result result = new setUpDownAnchor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setUpDownAnchor_result result = new setUpDownAnchor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setUpDownAnchor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setUpDownAnchor(args.textLiveId, args.anchorId, args.upDownActMap,resultHandler);
      }
    }

    public static class sendImageOrVoteMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendImageOrVoteMessage_args, Boolean> {
      public sendImageOrVoteMessage() {
        super("sendImageOrVoteMessage");
      }

      public sendImageOrVoteMessage_args getEmptyArgsInstance() {
        return new sendImageOrVoteMessage_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            sendImageOrVoteMessage_result result = new sendImageOrVoteMessage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendImageOrVoteMessage_result result = new sendImageOrVoteMessage_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendImageOrVoteMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.sendImageOrVoteMessage(args.imageOrVote, args.id, args.message,resultHandler);
      }
    }

    public static class getOnlineCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOnlineCount_args, Long> {
      public getOnlineCount() {
        super("getOnlineCount");
      }

      public getOnlineCount_args getEmptyArgsInstance() {
        return new getOnlineCount_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getOnlineCount_result result = new getOnlineCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOnlineCount_result result = new getOnlineCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOnlineCount_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getOnlineCount(args.eid,resultHandler);
      }
    }

    public static class getAnchorUpDown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAnchorUpDown_args, com.lesports.qmt.tlive.api.dto.TAnchor> {
      public getAnchorUpDown() {
        super("getAnchorUpDown");
      }

      public getAnchorUpDown_args getEmptyArgsInstance() {
        return new getAnchorUpDown_args();
      }

      public AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor>() { 
          public void onComplete(com.lesports.qmt.tlive.api.dto.TAnchor o) {
            getAnchorUpDown_result result = new getAnchorUpDown_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAnchorUpDown_result result = new getAnchorUpDown_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAnchorUpDown_args args, org.apache.thrift.async.AsyncMethodCallback<com.lesports.qmt.tlive.api.dto.TAnchor> resultHandler) throws TException {
        iface.getAnchorUpDown(args.textLiveId, args.anchorId,resultHandler);
      }
    }

  }

  public static class saveEntity_args implements org.apache.thrift.TBase<saveEntity_args, saveEntity_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveEntity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveEntity_args");

    private static final org.apache.thrift.protocol.TField BF_FIELD_DESC = new org.apache.thrift.protocol.TField("bf", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveEntity_argsTupleSchemeFactory());
    }

    private ByteBuffer bf; // required
    private ByteBuffer classType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BF((short)1, "bf"),
      CLASS_TYPE((short)2, "classType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BF
            return BF;
          case 2: // CLASS_TYPE
            return CLASS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BF, new org.apache.thrift.meta_data.FieldMetaData("bf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveEntity_args.class, metaDataMap);
    }

    public saveEntity_args() {
    }

    public saveEntity_args(
      ByteBuffer bf,
      ByteBuffer classType)
    {
      this();
      this.bf = org.apache.thrift.TBaseHelper.copyBinary(bf);
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveEntity_args(saveEntity_args other) {
      if (other.isSetBf()) {
        this.bf = org.apache.thrift.TBaseHelper.copyBinary(other.bf);
      }
      if (other.isSetClassType()) {
        this.classType = org.apache.thrift.TBaseHelper.copyBinary(other.classType);
      }
    }

    public saveEntity_args deepCopy() {
      return new saveEntity_args(this);
    }

    @Override
    public void clear() {
      this.bf = null;
      this.classType = null;
    }

    public byte[] getBf() {
      setBf(org.apache.thrift.TBaseHelper.rightSize(bf));
      return bf == null ? null : bf.array();
    }

    public ByteBuffer bufferForBf() {
      return org.apache.thrift.TBaseHelper.copyBinary(bf);
    }

    public void setBf(byte[] bf) {
      this.bf = bf == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bf, bf.length));
    }

    public void setBf(ByteBuffer bf) {
      this.bf = org.apache.thrift.TBaseHelper.copyBinary(bf);
    }

    public void unsetBf() {
      this.bf = null;
    }

    /** Returns true if field bf is set (has been assigned a value) and false otherwise */
    public boolean isSetBf() {
      return this.bf != null;
    }

    public void setBfIsSet(boolean value) {
      if (!value) {
        this.bf = null;
      }
    }

    public byte[] getClassType() {
      setClassType(org.apache.thrift.TBaseHelper.rightSize(classType));
      return classType == null ? null : classType.array();
    }

    public ByteBuffer bufferForClassType() {
      return org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void setClassType(byte[] classType) {
      this.classType = classType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(classType, classType.length));
    }

    public void setClassType(ByteBuffer classType) {
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void unsetClassType() {
      this.classType = null;
    }

    /** Returns true if field classType is set (has been assigned a value) and false otherwise */
    public boolean isSetClassType() {
      return this.classType != null;
    }

    public void setClassTypeIsSet(boolean value) {
      if (!value) {
        this.classType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BF:
        if (value == null) {
          unsetBf();
        } else {
          setBf((ByteBuffer)value);
        }
        break;

      case CLASS_TYPE:
        if (value == null) {
          unsetClassType();
        } else {
          setClassType((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BF:
        return getBf();

      case CLASS_TYPE:
        return getClassType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BF:
        return isSetBf();
      case CLASS_TYPE:
        return isSetClassType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveEntity_args)
        return this.equals((saveEntity_args)that);
      return false;
    }

    public boolean equals(saveEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_bf = true && this.isSetBf();
      boolean that_present_bf = true && that.isSetBf();
      if (this_present_bf || that_present_bf) {
        if (!(this_present_bf && that_present_bf))
          return false;
        if (!this.bf.equals(that.bf))
          return false;
      }

      boolean this_present_classType = true && this.isSetClassType();
      boolean that_present_classType = true && that.isSetClassType();
      if (this_present_classType || that_present_classType) {
        if (!(this_present_classType && that_present_classType))
          return false;
        if (!this.classType.equals(that.classType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bf = true && (isSetBf());
      list.add(present_bf);
      if (present_bf)
        list.add(bf);

      boolean present_classType = true && (isSetClassType());
      list.add(present_classType);
      if (present_classType)
        list.add(classType);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBf()).compareTo(other.isSetBf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bf, other.bf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveEntity_args(");
      boolean first = true;

      sb.append("bf:");
      if (this.bf == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bf, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classType:");
      if (this.classType == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.classType, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveEntity_argsStandardSchemeFactory implements SchemeFactory {
      public saveEntity_argsStandardScheme getScheme() {
        return new saveEntity_argsStandardScheme();
      }
    }

    private static class saveEntity_argsStandardScheme extends StandardScheme<saveEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bf = iprot.readBinary();
                struct.setBfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classType = iprot.readBinary();
                struct.setClassTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bf != null) {
          oprot.writeFieldBegin(BF_FIELD_DESC);
          oprot.writeBinary(struct.bf);
          oprot.writeFieldEnd();
        }
        if (struct.classType != null) {
          oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
          oprot.writeBinary(struct.classType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveEntity_argsTupleSchemeFactory implements SchemeFactory {
      public saveEntity_argsTupleScheme getScheme() {
        return new saveEntity_argsTupleScheme();
      }
    }

    private static class saveEntity_argsTupleScheme extends TupleScheme<saveEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBf()) {
          optionals.set(0);
        }
        if (struct.isSetClassType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBf()) {
          oprot.writeBinary(struct.bf);
        }
        if (struct.isSetClassType()) {
          oprot.writeBinary(struct.classType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bf = iprot.readBinary();
          struct.setBfIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classType = iprot.readBinary();
          struct.setClassTypeIsSet(true);
        }
      }
    }

  }

  public static class saveEntity_result implements org.apache.thrift.TBase<saveEntity_result, saveEntity_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveEntity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveEntity_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveEntity_result.class, metaDataMap);
    }

    public saveEntity_result() {
    }

    public saveEntity_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveEntity_result(saveEntity_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveEntity_result deepCopy() {
      return new saveEntity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveEntity_result)
        return this.equals((saveEntity_result)that);
      return false;
    }

    public boolean equals(saveEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveEntity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveEntity_resultStandardSchemeFactory implements SchemeFactory {
      public saveEntity_resultStandardScheme getScheme() {
        return new saveEntity_resultStandardScheme();
      }
    }

    private static class saveEntity_resultStandardScheme extends StandardScheme<saveEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveEntity_resultTupleSchemeFactory implements SchemeFactory {
      public saveEntity_resultTupleScheme getScheme() {
        return new saveEntity_resultTupleScheme();
      }
    }

    private static class saveEntity_resultTupleScheme extends TupleScheme<saveEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteEntity_args implements org.apache.thrift.TBase<deleteEntity_args, deleteEntity_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEntity_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEntity_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEntity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEntity_argsTupleSchemeFactory());
    }

    private long id; // required
    private ByteBuffer classType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CLASS_TYPE((short)2, "classType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CLASS_TYPE
            return CLASS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEntity_args.class, metaDataMap);
    }

    public deleteEntity_args() {
    }

    public deleteEntity_args(
      long id,
      ByteBuffer classType)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEntity_args(deleteEntity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetClassType()) {
        this.classType = org.apache.thrift.TBaseHelper.copyBinary(other.classType);
      }
    }

    public deleteEntity_args deepCopy() {
      return new deleteEntity_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.classType = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public byte[] getClassType() {
      setClassType(org.apache.thrift.TBaseHelper.rightSize(classType));
      return classType == null ? null : classType.array();
    }

    public ByteBuffer bufferForClassType() {
      return org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void setClassType(byte[] classType) {
      this.classType = classType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(classType, classType.length));
    }

    public void setClassType(ByteBuffer classType) {
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void unsetClassType() {
      this.classType = null;
    }

    /** Returns true if field classType is set (has been assigned a value) and false otherwise */
    public boolean isSetClassType() {
      return this.classType != null;
    }

    public void setClassTypeIsSet(boolean value) {
      if (!value) {
        this.classType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CLASS_TYPE:
        if (value == null) {
          unsetClassType();
        } else {
          setClassType((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CLASS_TYPE:
        return getClassType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CLASS_TYPE:
        return isSetClassType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEntity_args)
        return this.equals((deleteEntity_args)that);
      return false;
    }

    public boolean equals(deleteEntity_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_classType = true && this.isSetClassType();
      boolean that_present_classType = true && that.isSetClassType();
      if (this_present_classType || that_present_classType) {
        if (!(this_present_classType && that_present_classType))
          return false;
        if (!this.classType.equals(that.classType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_classType = true && (isSetClassType());
      list.add(present_classType);
      if (present_classType)
        list.add(classType);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteEntity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEntity_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("classType:");
      if (this.classType == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.classType, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEntity_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEntity_argsStandardScheme getScheme() {
        return new deleteEntity_argsStandardScheme();
      }
    }

    private static class deleteEntity_argsStandardScheme extends StandardScheme<deleteEntity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEntity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classType = iprot.readBinary();
                struct.setClassTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEntity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.classType != null) {
          oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
          oprot.writeBinary(struct.classType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEntity_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEntity_argsTupleScheme getScheme() {
        return new deleteEntity_argsTupleScheme();
      }
    }

    private static class deleteEntity_argsTupleScheme extends TupleScheme<deleteEntity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetClassType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetClassType()) {
          oprot.writeBinary(struct.classType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEntity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classType = iprot.readBinary();
          struct.setClassTypeIsSet(true);
        }
      }
    }

  }

  public static class deleteEntity_result implements org.apache.thrift.TBase<deleteEntity_result, deleteEntity_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEntity_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEntity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEntity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEntity_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEntity_result.class, metaDataMap);
    }

    public deleteEntity_result() {
    }

    public deleteEntity_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEntity_result(deleteEntity_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteEntity_result deepCopy() {
      return new deleteEntity_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEntity_result)
        return this.equals((deleteEntity_result)that);
      return false;
    }

    public boolean equals(deleteEntity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteEntity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEntity_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEntity_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEntity_resultStandardScheme getScheme() {
        return new deleteEntity_resultStandardScheme();
      }
    }

    private static class deleteEntity_resultStandardScheme extends StandardScheme<deleteEntity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEntity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEntity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEntity_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEntity_resultTupleScheme getScheme() {
        return new deleteEntity_resultTupleScheme();
      }
    }

    private static class deleteEntity_resultTupleScheme extends TupleScheme<deleteEntity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntityBytesById_args implements org.apache.thrift.TBase<getEntityBytesById_args, getEntityBytesById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityBytesById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityBytesById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityBytesById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityBytesById_argsTupleSchemeFactory());
    }

    private long id; // required
    private ByteBuffer classType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      CLASS_TYPE((short)2, "classType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // CLASS_TYPE
            return CLASS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityBytesById_args.class, metaDataMap);
    }

    public getEntityBytesById_args() {
    }

    public getEntityBytesById_args(
      long id,
      ByteBuffer classType)
    {
      this();
      this.id = id;
      setIdIsSet(true);
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityBytesById_args(getEntityBytesById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
      if (other.isSetClassType()) {
        this.classType = org.apache.thrift.TBaseHelper.copyBinary(other.classType);
      }
    }

    public getEntityBytesById_args deepCopy() {
      return new getEntityBytesById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
      this.classType = null;
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public byte[] getClassType() {
      setClassType(org.apache.thrift.TBaseHelper.rightSize(classType));
      return classType == null ? null : classType.array();
    }

    public ByteBuffer bufferForClassType() {
      return org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void setClassType(byte[] classType) {
      this.classType = classType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(classType, classType.length));
    }

    public void setClassType(ByteBuffer classType) {
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void unsetClassType() {
      this.classType = null;
    }

    /** Returns true if field classType is set (has been assigned a value) and false otherwise */
    public boolean isSetClassType() {
      return this.classType != null;
    }

    public void setClassTypeIsSet(boolean value) {
      if (!value) {
        this.classType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case CLASS_TYPE:
        if (value == null) {
          unsetClassType();
        } else {
          setClassType((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return Long.valueOf(getId());

      case CLASS_TYPE:
        return getClassType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case CLASS_TYPE:
        return isSetClassType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityBytesById_args)
        return this.equals((getEntityBytesById_args)that);
      return false;
    }

    public boolean equals(getEntityBytesById_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_classType = true && this.isSetClassType();
      boolean that_present_classType = true && that.isSetClassType();
      if (this_present_classType || that_present_classType) {
        if (!(this_present_classType && that_present_classType))
          return false;
        if (!this.classType.equals(that.classType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_classType = true && (isSetClassType());
      list.add(present_classType);
      if (present_classType)
        list.add(classType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityBytesById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityBytesById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("classType:");
      if (this.classType == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.classType, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityBytesById_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityBytesById_argsStandardScheme getScheme() {
        return new getEntityBytesById_argsStandardScheme();
      }
    }

    private static class getEntityBytesById_argsStandardScheme extends StandardScheme<getEntityBytesById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityBytesById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classType = iprot.readBinary();
                struct.setClassTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityBytesById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.classType != null) {
          oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
          oprot.writeBinary(struct.classType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityBytesById_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityBytesById_argsTupleScheme getScheme() {
        return new getEntityBytesById_argsTupleScheme();
      }
    }

    private static class getEntityBytesById_argsTupleScheme extends TupleScheme<getEntityBytesById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityBytesById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetClassType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetClassType()) {
          oprot.writeBinary(struct.classType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityBytesById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classType = iprot.readBinary();
          struct.setClassTypeIsSet(true);
        }
      }
    }

  }

  public static class getEntityBytesById_result implements org.apache.thrift.TBase<getEntityBytesById_result, getEntityBytesById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityBytesById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityBytesById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityBytesById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityBytesById_resultTupleSchemeFactory());
    }

    private ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityBytesById_result.class, metaDataMap);
    }

    public getEntityBytesById_result() {
    }

    public getEntityBytesById_result(
      ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityBytesById_result(getEntityBytesById_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public getEntityBytesById_result deepCopy() {
      return new getEntityBytesById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public void setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
    }

    public void setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityBytesById_result)
        return this.equals((getEntityBytesById_result)that);
      return false;
    }

    public boolean equals(getEntityBytesById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityBytesById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityBytesById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityBytesById_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityBytesById_resultStandardScheme getScheme() {
        return new getEntityBytesById_resultStandardScheme();
      }
    }

    private static class getEntityBytesById_resultStandardScheme extends StandardScheme<getEntityBytesById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityBytesById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityBytesById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityBytesById_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityBytesById_resultTupleScheme getScheme() {
        return new getEntityBytesById_resultTupleScheme();
      }
    }

    private static class getEntityBytesById_resultTupleScheme extends TupleScheme<getEntityBytesById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityBytesById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityBytesById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntityBytesByIds_args implements org.apache.thrift.TBase<getEntityBytesByIds_args, getEntityBytesByIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityBytesByIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityBytesByIds_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityBytesByIds_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityBytesByIds_argsTupleSchemeFactory());
    }

    private List<Long> ids; // required
    private ByteBuffer classType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids"),
      CLASS_TYPE((short)2, "classType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          case 2: // CLASS_TYPE
            return CLASS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityBytesByIds_args.class, metaDataMap);
    }

    public getEntityBytesByIds_args() {
    }

    public getEntityBytesByIds_args(
      List<Long> ids,
      ByteBuffer classType)
    {
      this();
      this.ids = ids;
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityBytesByIds_args(getEntityBytesByIds_args other) {
      if (other.isSetIds()) {
        List<Long> __this__ids = new ArrayList<Long>(other.ids);
        this.ids = __this__ids;
      }
      if (other.isSetClassType()) {
        this.classType = org.apache.thrift.TBaseHelper.copyBinary(other.classType);
      }
    }

    public getEntityBytesByIds_args deepCopy() {
      return new getEntityBytesByIds_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
      this.classType = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public java.util.Iterator<Long> getIdsIterator() {
      return (this.ids == null) ? null : this.ids.iterator();
    }

    public void addToIds(long elem) {
      if (this.ids == null) {
        this.ids = new ArrayList<Long>();
      }
      this.ids.add(elem);
    }

    public List<Long> getIds() {
      return this.ids;
    }

    public void setIds(List<Long> ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public byte[] getClassType() {
      setClassType(org.apache.thrift.TBaseHelper.rightSize(classType));
      return classType == null ? null : classType.array();
    }

    public ByteBuffer bufferForClassType() {
      return org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void setClassType(byte[] classType) {
      this.classType = classType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(classType, classType.length));
    }

    public void setClassType(ByteBuffer classType) {
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void unsetClassType() {
      this.classType = null;
    }

    /** Returns true if field classType is set (has been assigned a value) and false otherwise */
    public boolean isSetClassType() {
      return this.classType != null;
    }

    public void setClassTypeIsSet(boolean value) {
      if (!value) {
        this.classType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((List<Long>)value);
        }
        break;

      case CLASS_TYPE:
        if (value == null) {
          unsetClassType();
        } else {
          setClassType((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      case CLASS_TYPE:
        return getClassType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      case CLASS_TYPE:
        return isSetClassType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityBytesByIds_args)
        return this.equals((getEntityBytesByIds_args)that);
      return false;
    }

    public boolean equals(getEntityBytesByIds_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_classType = true && this.isSetClassType();
      boolean that_present_classType = true && that.isSetClassType();
      if (this_present_classType || that_present_classType) {
        if (!(this_present_classType && that_present_classType))
          return false;
        if (!this.classType.equals(that.classType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      boolean present_classType = true && (isSetClassType());
      list.add(present_classType);
      if (present_classType)
        list.add(classType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityBytesByIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityBytesByIds_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classType:");
      if (this.classType == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.classType, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityBytesByIds_argsStandardSchemeFactory implements SchemeFactory {
      public getEntityBytesByIds_argsStandardScheme getScheme() {
        return new getEntityBytesByIds_argsStandardScheme();
      }
    }

    private static class getEntityBytesByIds_argsStandardScheme extends StandardScheme<getEntityBytesByIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityBytesByIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.ids = new ArrayList<Long>(_list0.size);
                  long _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readI64();
                    struct.ids.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classType = iprot.readBinary();
                struct.setClassTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityBytesByIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ids.size()));
            for (long _iter3 : struct.ids)
            {
              oprot.writeI64(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.classType != null) {
          oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
          oprot.writeBinary(struct.classType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityBytesByIds_argsTupleSchemeFactory implements SchemeFactory {
      public getEntityBytesByIds_argsTupleScheme getScheme() {
        return new getEntityBytesByIds_argsTupleScheme();
      }
    }

    private static class getEntityBytesByIds_argsTupleScheme extends TupleScheme<getEntityBytesByIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityBytesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        if (struct.isSetClassType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIds()) {
          {
            oprot.writeI32(struct.ids.size());
            for (long _iter4 : struct.ids)
            {
              oprot.writeI64(_iter4);
            }
          }
        }
        if (struct.isSetClassType()) {
          oprot.writeBinary(struct.classType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityBytesByIds_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ids = new ArrayList<Long>(_list5.size);
            long _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readI64();
              struct.ids.add(_elem6);
            }
          }
          struct.setIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classType = iprot.readBinary();
          struct.setClassTypeIsSet(true);
        }
      }
    }

  }

  public static class getEntityBytesByIds_result implements org.apache.thrift.TBase<getEntityBytesByIds_result, getEntityBytesByIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntityBytesByIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntityBytesByIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntityBytesByIds_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntityBytesByIds_resultTupleSchemeFactory());
    }

    private ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntityBytesByIds_result.class, metaDataMap);
    }

    public getEntityBytesByIds_result() {
    }

    public getEntityBytesByIds_result(
      ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntityBytesByIds_result(getEntityBytesByIds_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public getEntityBytesByIds_result deepCopy() {
      return new getEntityBytesByIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public void setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
    }

    public void setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntityBytesByIds_result)
        return this.equals((getEntityBytesByIds_result)that);
      return false;
    }

    public boolean equals(getEntityBytesByIds_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntityBytesByIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntityBytesByIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntityBytesByIds_resultStandardSchemeFactory implements SchemeFactory {
      public getEntityBytesByIds_resultStandardScheme getScheme() {
        return new getEntityBytesByIds_resultStandardScheme();
      }
    }

    private static class getEntityBytesByIds_resultStandardScheme extends StandardScheme<getEntityBytesByIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntityBytesByIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntityBytesByIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntityBytesByIds_resultTupleSchemeFactory implements SchemeFactory {
      public getEntityBytesByIds_resultTupleScheme getScheme() {
        return new getEntityBytesByIds_resultTupleScheme();
      }
    }

    private static class getEntityBytesByIds_resultTupleScheme extends TupleScheme<getEntityBytesByIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntityBytesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntityBytesByIds_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntitiesBytesByQuery_args implements org.apache.thrift.TBase<getEntitiesBytesByQuery_args, getEntitiesBytesByQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntitiesBytesByQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntitiesBytesByQuery_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntitiesBytesByQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntitiesBytesByQuery_argsTupleSchemeFactory());
    }

    private ByteBuffer query; // required
    private ByteBuffer classType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      CLASS_TYPE((short)2, "classType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // CLASS_TYPE
            return CLASS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntitiesBytesByQuery_args.class, metaDataMap);
    }

    public getEntitiesBytesByQuery_args() {
    }

    public getEntitiesBytesByQuery_args(
      ByteBuffer query,
      ByteBuffer classType)
    {
      this();
      this.query = org.apache.thrift.TBaseHelper.copyBinary(query);
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntitiesBytesByQuery_args(getEntitiesBytesByQuery_args other) {
      if (other.isSetQuery()) {
        this.query = org.apache.thrift.TBaseHelper.copyBinary(other.query);
      }
      if (other.isSetClassType()) {
        this.classType = org.apache.thrift.TBaseHelper.copyBinary(other.classType);
      }
    }

    public getEntitiesBytesByQuery_args deepCopy() {
      return new getEntitiesBytesByQuery_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.classType = null;
    }

    public byte[] getQuery() {
      setQuery(org.apache.thrift.TBaseHelper.rightSize(query));
      return query == null ? null : query.array();
    }

    public ByteBuffer bufferForQuery() {
      return org.apache.thrift.TBaseHelper.copyBinary(query);
    }

    public void setQuery(byte[] query) {
      this.query = query == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(query, query.length));
    }

    public void setQuery(ByteBuffer query) {
      this.query = org.apache.thrift.TBaseHelper.copyBinary(query);
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public byte[] getClassType() {
      setClassType(org.apache.thrift.TBaseHelper.rightSize(classType));
      return classType == null ? null : classType.array();
    }

    public ByteBuffer bufferForClassType() {
      return org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void setClassType(byte[] classType) {
      this.classType = classType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(classType, classType.length));
    }

    public void setClassType(ByteBuffer classType) {
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void unsetClassType() {
      this.classType = null;
    }

    /** Returns true if field classType is set (has been assigned a value) and false otherwise */
    public boolean isSetClassType() {
      return this.classType != null;
    }

    public void setClassTypeIsSet(boolean value) {
      if (!value) {
        this.classType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ByteBuffer)value);
        }
        break;

      case CLASS_TYPE:
        if (value == null) {
          unsetClassType();
        } else {
          setClassType((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case CLASS_TYPE:
        return getClassType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case CLASS_TYPE:
        return isSetClassType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntitiesBytesByQuery_args)
        return this.equals((getEntitiesBytesByQuery_args)that);
      return false;
    }

    public boolean equals(getEntitiesBytesByQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_classType = true && this.isSetClassType();
      boolean that_present_classType = true && that.isSetClassType();
      if (this_present_classType || that_present_classType) {
        if (!(this_present_classType && that_present_classType))
          return false;
        if (!this.classType.equals(that.classType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_classType = true && (isSetClassType());
      list.add(present_classType);
      if (present_classType)
        list.add(classType);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntitiesBytesByQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntitiesBytesByQuery_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.query, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classType:");
      if (this.classType == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.classType, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntitiesBytesByQuery_argsStandardSchemeFactory implements SchemeFactory {
      public getEntitiesBytesByQuery_argsStandardScheme getScheme() {
        return new getEntitiesBytesByQuery_argsStandardScheme();
      }
    }

    private static class getEntitiesBytesByQuery_argsStandardScheme extends StandardScheme<getEntitiesBytesByQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntitiesBytesByQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readBinary();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classType = iprot.readBinary();
                struct.setClassTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntitiesBytesByQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeBinary(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.classType != null) {
          oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
          oprot.writeBinary(struct.classType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntitiesBytesByQuery_argsTupleSchemeFactory implements SchemeFactory {
      public getEntitiesBytesByQuery_argsTupleScheme getScheme() {
        return new getEntitiesBytesByQuery_argsTupleScheme();
      }
    }

    private static class getEntitiesBytesByQuery_argsTupleScheme extends TupleScheme<getEntitiesBytesByQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntitiesBytesByQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetClassType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          oprot.writeBinary(struct.query);
        }
        if (struct.isSetClassType()) {
          oprot.writeBinary(struct.classType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntitiesBytesByQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = iprot.readBinary();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classType = iprot.readBinary();
          struct.setClassTypeIsSet(true);
        }
      }
    }

  }

  public static class getEntitiesBytesByQuery_result implements org.apache.thrift.TBase<getEntitiesBytesByQuery_result, getEntitiesBytesByQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntitiesBytesByQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntitiesBytesByQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntitiesBytesByQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntitiesBytesByQuery_resultTupleSchemeFactory());
    }

    private ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntitiesBytesByQuery_result.class, metaDataMap);
    }

    public getEntitiesBytesByQuery_result() {
    }

    public getEntitiesBytesByQuery_result(
      ByteBuffer success)
    {
      this();
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntitiesBytesByQuery_result(getEntitiesBytesByQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public getEntitiesBytesByQuery_result deepCopy() {
      return new getEntitiesBytesByQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public void setSuccess(byte[] success) {
      this.success = success == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(success, success.length));
    }

    public void setSuccess(ByteBuffer success) {
      this.success = org.apache.thrift.TBaseHelper.copyBinary(success);
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntitiesBytesByQuery_result)
        return this.equals((getEntitiesBytesByQuery_result)that);
      return false;
    }

    public boolean equals(getEntitiesBytesByQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getEntitiesBytesByQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntitiesBytesByQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntitiesBytesByQuery_resultStandardSchemeFactory implements SchemeFactory {
      public getEntitiesBytesByQuery_resultStandardScheme getScheme() {
        return new getEntitiesBytesByQuery_resultStandardScheme();
      }
    }

    private static class getEntitiesBytesByQuery_resultStandardScheme extends StandardScheme<getEntitiesBytesByQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntitiesBytesByQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntitiesBytesByQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntitiesBytesByQuery_resultTupleSchemeFactory implements SchemeFactory {
      public getEntitiesBytesByQuery_resultTupleScheme getScheme() {
        return new getEntitiesBytesByQuery_resultTupleScheme();
      }
    }

    private static class getEntitiesBytesByQuery_resultTupleScheme extends TupleScheme<getEntitiesBytesByQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntitiesBytesByQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntitiesBytesByQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countByQuery_args implements org.apache.thrift.TBase<countByQuery_args, countByQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<countByQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countByQuery_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("classType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countByQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countByQuery_argsTupleSchemeFactory());
    }

    private ByteBuffer query; // required
    private ByteBuffer classType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      CLASS_TYPE((short)2, "classType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // CLASS_TYPE
            return CLASS_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("classType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countByQuery_args.class, metaDataMap);
    }

    public countByQuery_args() {
    }

    public countByQuery_args(
      ByteBuffer query,
      ByteBuffer classType)
    {
      this();
      this.query = org.apache.thrift.TBaseHelper.copyBinary(query);
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countByQuery_args(countByQuery_args other) {
      if (other.isSetQuery()) {
        this.query = org.apache.thrift.TBaseHelper.copyBinary(other.query);
      }
      if (other.isSetClassType()) {
        this.classType = org.apache.thrift.TBaseHelper.copyBinary(other.classType);
      }
    }

    public countByQuery_args deepCopy() {
      return new countByQuery_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.classType = null;
    }

    public byte[] getQuery() {
      setQuery(org.apache.thrift.TBaseHelper.rightSize(query));
      return query == null ? null : query.array();
    }

    public ByteBuffer bufferForQuery() {
      return org.apache.thrift.TBaseHelper.copyBinary(query);
    }

    public void setQuery(byte[] query) {
      this.query = query == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(query, query.length));
    }

    public void setQuery(ByteBuffer query) {
      this.query = org.apache.thrift.TBaseHelper.copyBinary(query);
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public byte[] getClassType() {
      setClassType(org.apache.thrift.TBaseHelper.rightSize(classType));
      return classType == null ? null : classType.array();
    }

    public ByteBuffer bufferForClassType() {
      return org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void setClassType(byte[] classType) {
      this.classType = classType == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(classType, classType.length));
    }

    public void setClassType(ByteBuffer classType) {
      this.classType = org.apache.thrift.TBaseHelper.copyBinary(classType);
    }

    public void unsetClassType() {
      this.classType = null;
    }

    /** Returns true if field classType is set (has been assigned a value) and false otherwise */
    public boolean isSetClassType() {
      return this.classType != null;
    }

    public void setClassTypeIsSet(boolean value) {
      if (!value) {
        this.classType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ByteBuffer)value);
        }
        break;

      case CLASS_TYPE:
        if (value == null) {
          unsetClassType();
        } else {
          setClassType((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case CLASS_TYPE:
        return getClassType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case CLASS_TYPE:
        return isSetClassType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countByQuery_args)
        return this.equals((countByQuery_args)that);
      return false;
    }

    public boolean equals(countByQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_classType = true && this.isSetClassType();
      boolean that_present_classType = true && that.isSetClassType();
      if (this_present_classType || that_present_classType) {
        if (!(this_present_classType && that_present_classType))
          return false;
        if (!this.classType.equals(that.classType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      boolean present_classType = true && (isSetClassType());
      list.add(present_classType);
      if (present_classType)
        list.add(classType);

      return list.hashCode();
    }

    @Override
    public int compareTo(countByQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassType()).compareTo(other.isSetClassType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classType, other.classType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countByQuery_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.query, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("classType:");
      if (this.classType == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.classType, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countByQuery_argsStandardSchemeFactory implements SchemeFactory {
      public countByQuery_argsStandardScheme getScheme() {
        return new countByQuery_argsStandardScheme();
      }
    }

    private static class countByQuery_argsStandardScheme extends StandardScheme<countByQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countByQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readBinary();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLASS_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.classType = iprot.readBinary();
                struct.setClassTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countByQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeBinary(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.classType != null) {
          oprot.writeFieldBegin(CLASS_TYPE_FIELD_DESC);
          oprot.writeBinary(struct.classType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countByQuery_argsTupleSchemeFactory implements SchemeFactory {
      public countByQuery_argsTupleScheme getScheme() {
        return new countByQuery_argsTupleScheme();
      }
    }

    private static class countByQuery_argsTupleScheme extends TupleScheme<countByQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countByQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetClassType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          oprot.writeBinary(struct.query);
        }
        if (struct.isSetClassType()) {
          oprot.writeBinary(struct.classType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countByQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = iprot.readBinary();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.classType = iprot.readBinary();
          struct.setClassTypeIsSet(true);
        }
      }
    }

  }

  public static class countByQuery_result implements org.apache.thrift.TBase<countByQuery_result, countByQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<countByQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countByQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countByQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countByQuery_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countByQuery_result.class, metaDataMap);
    }

    public countByQuery_result() {
    }

    public countByQuery_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countByQuery_result(countByQuery_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countByQuery_result deepCopy() {
      return new countByQuery_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countByQuery_result)
        return this.equals((countByQuery_result)that);
      return false;
    }

    public boolean equals(countByQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countByQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countByQuery_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countByQuery_resultStandardSchemeFactory implements SchemeFactory {
      public countByQuery_resultStandardScheme getScheme() {
        return new countByQuery_resultStandardScheme();
      }
    }

    private static class countByQuery_resultStandardScheme extends StandardScheme<countByQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countByQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countByQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countByQuery_resultTupleSchemeFactory implements SchemeFactory {
      public countByQuery_resultTupleScheme getScheme() {
        return new countByQuery_resultTupleScheme();
      }
    }

    private static class countByQuery_resultTupleScheme extends TupleScheme<countByQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countByQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countByQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setOnlineCount_args implements org.apache.thrift.TBase<setOnlineCount_args, setOnlineCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOnlineCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOnlineCount_args");

    private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ONLINE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineCount", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOnlineCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOnlineCount_argsTupleSchemeFactory());
    }

    private long eid; // required
    private int onlineCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EID((short)1, "eid"),
      ONLINE_COUNT((short)2, "onlineCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EID
            return EID;
          case 2: // ONLINE_COUNT
            return ONLINE_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EID_ISSET_ID = 0;
    private static final int __ONLINECOUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ONLINE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("onlineCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOnlineCount_args.class, metaDataMap);
    }

    public setOnlineCount_args() {
    }

    public setOnlineCount_args(
      long eid,
      int onlineCount)
    {
      this();
      this.eid = eid;
      setEidIsSet(true);
      this.onlineCount = onlineCount;
      setOnlineCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOnlineCount_args(setOnlineCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eid = other.eid;
      this.onlineCount = other.onlineCount;
    }

    public setOnlineCount_args deepCopy() {
      return new setOnlineCount_args(this);
    }

    @Override
    public void clear() {
      setEidIsSet(false);
      this.eid = 0;
      setOnlineCountIsSet(false);
      this.onlineCount = 0;
    }

    public long getEid() {
      return this.eid;
    }

    public void setEid(long eid) {
      this.eid = eid;
      setEidIsSet(true);
    }

    public void unsetEid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
    }

    /** Returns true if field eid is set (has been assigned a value) and false otherwise */
    public boolean isSetEid() {
      return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
    }

    public void setEidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
    }

    public int getOnlineCount() {
      return this.onlineCount;
    }

    public void setOnlineCount(int onlineCount) {
      this.onlineCount = onlineCount;
      setOnlineCountIsSet(true);
    }

    public void unsetOnlineCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID);
    }

    /** Returns true if field onlineCount is set (has been assigned a value) and false otherwise */
    public boolean isSetOnlineCount() {
      return EncodingUtils.testBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID);
    }

    public void setOnlineCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINECOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EID:
        if (value == null) {
          unsetEid();
        } else {
          setEid((Long)value);
        }
        break;

      case ONLINE_COUNT:
        if (value == null) {
          unsetOnlineCount();
        } else {
          setOnlineCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EID:
        return Long.valueOf(getEid());

      case ONLINE_COUNT:
        return Integer.valueOf(getOnlineCount());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EID:
        return isSetEid();
      case ONLINE_COUNT:
        return isSetOnlineCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOnlineCount_args)
        return this.equals((setOnlineCount_args)that);
      return false;
    }

    public boolean equals(setOnlineCount_args that) {
      if (that == null)
        return false;

      boolean this_present_eid = true;
      boolean that_present_eid = true;
      if (this_present_eid || that_present_eid) {
        if (!(this_present_eid && that_present_eid))
          return false;
        if (this.eid != that.eid)
          return false;
      }

      boolean this_present_onlineCount = true;
      boolean that_present_onlineCount = true;
      if (this_present_onlineCount || that_present_onlineCount) {
        if (!(this_present_onlineCount && that_present_onlineCount))
          return false;
        if (this.onlineCount != that.onlineCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eid = true;
      list.add(present_eid);
      if (present_eid)
        list.add(eid);

      boolean present_onlineCount = true;
      list.add(present_onlineCount);
      if (present_onlineCount)
        list.add(onlineCount);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOnlineCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOnlineCount()).compareTo(other.isSetOnlineCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOnlineCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineCount, other.onlineCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOnlineCount_args(");
      boolean first = true;

      sb.append("eid:");
      sb.append(this.eid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("onlineCount:");
      sb.append(this.onlineCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOnlineCount_argsStandardSchemeFactory implements SchemeFactory {
      public setOnlineCount_argsStandardScheme getScheme() {
        return new setOnlineCount_argsStandardScheme();
      }
    }

    private static class setOnlineCount_argsStandardScheme extends StandardScheme<setOnlineCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOnlineCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eid = iprot.readI64();
                struct.setEidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ONLINE_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.onlineCount = iprot.readI32();
                struct.setOnlineCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOnlineCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ONLINE_COUNT_FIELD_DESC);
        oprot.writeI32(struct.onlineCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOnlineCount_argsTupleSchemeFactory implements SchemeFactory {
      public setOnlineCount_argsTupleScheme getScheme() {
        return new setOnlineCount_argsTupleScheme();
      }
    }

    private static class setOnlineCount_argsTupleScheme extends TupleScheme<setOnlineCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEid()) {
          optionals.set(0);
        }
        if (struct.isSetOnlineCount()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEid()) {
          oprot.writeI64(struct.eid);
        }
        if (struct.isSetOnlineCount()) {
          oprot.writeI32(struct.onlineCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.eid = iprot.readI64();
          struct.setEidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.onlineCount = iprot.readI32();
          struct.setOnlineCountIsSet(true);
        }
      }
    }

  }

  public static class setOnlineCount_result implements org.apache.thrift.TBase<setOnlineCount_result, setOnlineCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOnlineCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOnlineCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOnlineCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOnlineCount_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOnlineCount_result.class, metaDataMap);
    }

    public setOnlineCount_result() {
    }

    public setOnlineCount_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOnlineCount_result(setOnlineCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setOnlineCount_result deepCopy() {
      return new setOnlineCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOnlineCount_result)
        return this.equals((setOnlineCount_result)that);
      return false;
    }

    public boolean equals(setOnlineCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setOnlineCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOnlineCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOnlineCount_resultStandardSchemeFactory implements SchemeFactory {
      public setOnlineCount_resultStandardScheme getScheme() {
        return new setOnlineCount_resultStandardScheme();
      }
    }

    private static class setOnlineCount_resultStandardScheme extends StandardScheme<setOnlineCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOnlineCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOnlineCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOnlineCount_resultTupleSchemeFactory implements SchemeFactory {
      public setOnlineCount_resultTupleScheme getScheme() {
        return new setOnlineCount_resultTupleScheme();
      }
    }

    private static class setOnlineCount_resultTupleScheme extends TupleScheme<setOnlineCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setUpDownAnchor_args implements org.apache.thrift.TBase<setUpDownAnchor_args, setUpDownAnchor_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUpDownAnchor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUpDownAnchor_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ANCHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("anchorId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField UP_DOWN_ACT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("upDownActMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUpDownAnchor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUpDownAnchor_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long anchorId; // required
    private Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      ANCHOR_ID((short)2, "anchorId"),
      UP_DOWN_ACT_MAP((short)3, "upDownActMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // ANCHOR_ID
            return ANCHOR_ID;
          case 3: // UP_DOWN_ACT_MAP
            return UP_DOWN_ACT_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __ANCHORID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ANCHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("anchorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.UP_DOWN_ACT_MAP, new org.apache.thrift.meta_data.FieldMetaData("upDownActMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.lesports.qmt.tlive.api.common.UpDownAct.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUpDownAnchor_args.class, metaDataMap);
    }

    public setUpDownAnchor_args() {
    }

    public setUpDownAnchor_args(
      long textLiveId,
      long anchorId,
      Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
      this.upDownActMap = upDownActMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUpDownAnchor_args(setUpDownAnchor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.anchorId = other.anchorId;
      if (other.isSetUpDownActMap()) {
        Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> __this__upDownActMap = new HashMap<com.lesports.qmt.tlive.api.common.UpDownAct,Integer>(other.upDownActMap.size());
        for (Map.Entry<com.lesports.qmt.tlive.api.common.UpDownAct, Integer> other_element : other.upDownActMap.entrySet()) {

          com.lesports.qmt.tlive.api.common.UpDownAct other_element_key = other_element.getKey();
          Integer other_element_value = other_element.getValue();

          com.lesports.qmt.tlive.api.common.UpDownAct __this__upDownActMap_copy_key = other_element_key;

          Integer __this__upDownActMap_copy_value = other_element_value;

          __this__upDownActMap.put(__this__upDownActMap_copy_key, __this__upDownActMap_copy_value);
        }
        this.upDownActMap = __this__upDownActMap;
      }
    }

    public setUpDownAnchor_args deepCopy() {
      return new setUpDownAnchor_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setAnchorIdIsSet(false);
      this.anchorId = 0;
      this.upDownActMap = null;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getAnchorId() {
      return this.anchorId;
    }

    public void setAnchorId(long anchorId) {
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
    }

    public void unsetAnchorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    /** Returns true if field anchorId is set (has been assigned a value) and false otherwise */
    public boolean isSetAnchorId() {
      return EncodingUtils.testBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    public void setAnchorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANCHORID_ISSET_ID, value);
    }

    public int getUpDownActMapSize() {
      return (this.upDownActMap == null) ? 0 : this.upDownActMap.size();
    }

    public void putToUpDownActMap(com.lesports.qmt.tlive.api.common.UpDownAct key, int val) {
      if (this.upDownActMap == null) {
        this.upDownActMap = new HashMap<com.lesports.qmt.tlive.api.common.UpDownAct,Integer>();
      }
      this.upDownActMap.put(key, val);
    }

    public Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> getUpDownActMap() {
      return this.upDownActMap;
    }

    public void setUpDownActMap(Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer> upDownActMap) {
      this.upDownActMap = upDownActMap;
    }

    public void unsetUpDownActMap() {
      this.upDownActMap = null;
    }

    /** Returns true if field upDownActMap is set (has been assigned a value) and false otherwise */
    public boolean isSetUpDownActMap() {
      return this.upDownActMap != null;
    }

    public void setUpDownActMapIsSet(boolean value) {
      if (!value) {
        this.upDownActMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case ANCHOR_ID:
        if (value == null) {
          unsetAnchorId();
        } else {
          setAnchorId((Long)value);
        }
        break;

      case UP_DOWN_ACT_MAP:
        if (value == null) {
          unsetUpDownActMap();
        } else {
          setUpDownActMap((Map<com.lesports.qmt.tlive.api.common.UpDownAct,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case ANCHOR_ID:
        return Long.valueOf(getAnchorId());

      case UP_DOWN_ACT_MAP:
        return getUpDownActMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case ANCHOR_ID:
        return isSetAnchorId();
      case UP_DOWN_ACT_MAP:
        return isSetUpDownActMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUpDownAnchor_args)
        return this.equals((setUpDownAnchor_args)that);
      return false;
    }

    public boolean equals(setUpDownAnchor_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_anchorId = true;
      boolean that_present_anchorId = true;
      if (this_present_anchorId || that_present_anchorId) {
        if (!(this_present_anchorId && that_present_anchorId))
          return false;
        if (this.anchorId != that.anchorId)
          return false;
      }

      boolean this_present_upDownActMap = true && this.isSetUpDownActMap();
      boolean that_present_upDownActMap = true && that.isSetUpDownActMap();
      if (this_present_upDownActMap || that_present_upDownActMap) {
        if (!(this_present_upDownActMap && that_present_upDownActMap))
          return false;
        if (!this.upDownActMap.equals(that.upDownActMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_anchorId = true;
      list.add(present_anchorId);
      if (present_anchorId)
        list.add(anchorId);

      boolean present_upDownActMap = true && (isSetUpDownActMap());
      list.add(present_upDownActMap);
      if (present_upDownActMap)
        list.add(upDownActMap);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUpDownAnchor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnchorId()).compareTo(other.isSetAnchorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnchorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchorId, other.anchorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUpDownActMap()).compareTo(other.isSetUpDownActMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpDownActMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upDownActMap, other.upDownActMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUpDownAnchor_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("anchorId:");
      sb.append(this.anchorId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("upDownActMap:");
      if (this.upDownActMap == null) {
        sb.append("null");
      } else {
        sb.append(this.upDownActMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUpDownAnchor_argsStandardSchemeFactory implements SchemeFactory {
      public setUpDownAnchor_argsStandardScheme getScheme() {
        return new setUpDownAnchor_argsStandardScheme();
      }
    }

    private static class setUpDownAnchor_argsStandardScheme extends StandardScheme<setUpDownAnchor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUpDownAnchor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ANCHOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.anchorId = iprot.readI64();
                struct.setAnchorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UP_DOWN_ACT_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.upDownActMap = new HashMap<com.lesports.qmt.tlive.api.common.UpDownAct,Integer>(2*_map8.size);
                  com.lesports.qmt.tlive.api.common.UpDownAct _key9;
                  int _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = com.lesports.qmt.tlive.api.common.UpDownAct.findByValue(iprot.readI32());
                    _val10 = iprot.readI32();
                    struct.upDownActMap.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setUpDownActMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUpDownAnchor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ANCHOR_ID_FIELD_DESC);
        oprot.writeI64(struct.anchorId);
        oprot.writeFieldEnd();
        if (struct.upDownActMap != null) {
          oprot.writeFieldBegin(UP_DOWN_ACT_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.upDownActMap.size()));
            for (Map.Entry<com.lesports.qmt.tlive.api.common.UpDownAct, Integer> _iter12 : struct.upDownActMap.entrySet())
            {
              oprot.writeI32(_iter12.getKey().getValue());
              oprot.writeI32(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUpDownAnchor_argsTupleSchemeFactory implements SchemeFactory {
      public setUpDownAnchor_argsTupleScheme getScheme() {
        return new setUpDownAnchor_argsTupleScheme();
      }
    }

    private static class setUpDownAnchor_argsTupleScheme extends TupleScheme<setUpDownAnchor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUpDownAnchor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetAnchorId()) {
          optionals.set(1);
        }
        if (struct.isSetUpDownActMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetAnchorId()) {
          oprot.writeI64(struct.anchorId);
        }
        if (struct.isSetUpDownActMap()) {
          {
            oprot.writeI32(struct.upDownActMap.size());
            for (Map.Entry<com.lesports.qmt.tlive.api.common.UpDownAct, Integer> _iter13 : struct.upDownActMap.entrySet())
            {
              oprot.writeI32(_iter13.getKey().getValue());
              oprot.writeI32(_iter13.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUpDownAnchor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.anchorId = iprot.readI64();
          struct.setAnchorIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.upDownActMap = new HashMap<com.lesports.qmt.tlive.api.common.UpDownAct,Integer>(2*_map14.size);
            com.lesports.qmt.tlive.api.common.UpDownAct _key15;
            int _val16;
            for (int _i17 = 0; _i17 < _map14.size; ++_i17)
            {
              _key15 = com.lesports.qmt.tlive.api.common.UpDownAct.findByValue(iprot.readI32());
              _val16 = iprot.readI32();
              struct.upDownActMap.put(_key15, _val16);
            }
          }
          struct.setUpDownActMapIsSet(true);
        }
      }
    }

  }

  public static class setUpDownAnchor_result implements org.apache.thrift.TBase<setUpDownAnchor_result, setUpDownAnchor_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUpDownAnchor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUpDownAnchor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUpDownAnchor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUpDownAnchor_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUpDownAnchor_result.class, metaDataMap);
    }

    public setUpDownAnchor_result() {
    }

    public setUpDownAnchor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUpDownAnchor_result(setUpDownAnchor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setUpDownAnchor_result deepCopy() {
      return new setUpDownAnchor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUpDownAnchor_result)
        return this.equals((setUpDownAnchor_result)that);
      return false;
    }

    public boolean equals(setUpDownAnchor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setUpDownAnchor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUpDownAnchor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUpDownAnchor_resultStandardSchemeFactory implements SchemeFactory {
      public setUpDownAnchor_resultStandardScheme getScheme() {
        return new setUpDownAnchor_resultStandardScheme();
      }
    }

    private static class setUpDownAnchor_resultStandardScheme extends StandardScheme<setUpDownAnchor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUpDownAnchor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUpDownAnchor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUpDownAnchor_resultTupleSchemeFactory implements SchemeFactory {
      public setUpDownAnchor_resultTupleScheme getScheme() {
        return new setUpDownAnchor_resultTupleScheme();
      }
    }

    private static class setUpDownAnchor_resultTupleScheme extends TupleScheme<setUpDownAnchor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUpDownAnchor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUpDownAnchor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendImageOrVoteMessage_args implements org.apache.thrift.TBase<sendImageOrVoteMessage_args, sendImageOrVoteMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendImageOrVoteMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendImageOrVoteMessage_args");

    private static final org.apache.thrift.protocol.TField IMAGE_OR_VOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("imageOrVote", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendImageOrVoteMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendImageOrVoteMessage_argsTupleSchemeFactory());
    }

    private boolean imageOrVote; // required
    private long id; // required
    private ByteBuffer message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_OR_VOTE((short)1, "imageOrVote"),
      ID((short)2, "id"),
      MESSAGE((short)3, "message");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_OR_VOTE
            return IMAGE_OR_VOTE;
          case 2: // ID
            return ID;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IMAGEORVOTE_ISSET_ID = 0;
    private static final int __ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_OR_VOTE, new org.apache.thrift.meta_data.FieldMetaData("imageOrVote", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendImageOrVoteMessage_args.class, metaDataMap);
    }

    public sendImageOrVoteMessage_args() {
    }

    public sendImageOrVoteMessage_args(
      boolean imageOrVote,
      long id,
      ByteBuffer message)
    {
      this();
      this.imageOrVote = imageOrVote;
      setImageOrVoteIsSet(true);
      this.id = id;
      setIdIsSet(true);
      this.message = org.apache.thrift.TBaseHelper.copyBinary(message);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendImageOrVoteMessage_args(sendImageOrVoteMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.imageOrVote = other.imageOrVote;
      this.id = other.id;
      if (other.isSetMessage()) {
        this.message = org.apache.thrift.TBaseHelper.copyBinary(other.message);
      }
    }

    public sendImageOrVoteMessage_args deepCopy() {
      return new sendImageOrVoteMessage_args(this);
    }

    @Override
    public void clear() {
      setImageOrVoteIsSet(false);
      this.imageOrVote = false;
      setIdIsSet(false);
      this.id = 0;
      this.message = null;
    }

    public boolean isImageOrVote() {
      return this.imageOrVote;
    }

    public void setImageOrVote(boolean imageOrVote) {
      this.imageOrVote = imageOrVote;
      setImageOrVoteIsSet(true);
    }

    public void unsetImageOrVote() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMAGEORVOTE_ISSET_ID);
    }

    /** Returns true if field imageOrVote is set (has been assigned a value) and false otherwise */
    public boolean isSetImageOrVote() {
      return EncodingUtils.testBit(__isset_bitfield, __IMAGEORVOTE_ISSET_ID);
    }

    public void setImageOrVoteIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMAGEORVOTE_ISSET_ID, value);
    }

    public long getId() {
      return this.id;
    }

    public void setId(long id) {
      this.id = id;
      setIdIsSet(true);
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public byte[] getMessage() {
      setMessage(org.apache.thrift.TBaseHelper.rightSize(message));
      return message == null ? null : message.array();
    }

    public ByteBuffer bufferForMessage() {
      return org.apache.thrift.TBaseHelper.copyBinary(message);
    }

    public void setMessage(byte[] message) {
      this.message = message == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(message, message.length));
    }

    public void setMessage(ByteBuffer message) {
      this.message = org.apache.thrift.TBaseHelper.copyBinary(message);
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_OR_VOTE:
        if (value == null) {
          unsetImageOrVote();
        } else {
          setImageOrVote((Boolean)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_OR_VOTE:
        return Boolean.valueOf(isImageOrVote());

      case ID:
        return Long.valueOf(getId());

      case MESSAGE:
        return getMessage();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_OR_VOTE:
        return isSetImageOrVote();
      case ID:
        return isSetId();
      case MESSAGE:
        return isSetMessage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendImageOrVoteMessage_args)
        return this.equals((sendImageOrVoteMessage_args)that);
      return false;
    }

    public boolean equals(sendImageOrVoteMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_imageOrVote = true;
      boolean that_present_imageOrVote = true;
      if (this_present_imageOrVote || that_present_imageOrVote) {
        if (!(this_present_imageOrVote && that_present_imageOrVote))
          return false;
        if (this.imageOrVote != that.imageOrVote)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_imageOrVote = true;
      list.add(present_imageOrVote);
      if (present_imageOrVote)
        list.add(imageOrVote);

      boolean present_id = true;
      list.add(present_id);
      if (present_id)
        list.add(id);

      boolean present_message = true && (isSetMessage());
      list.add(present_message);
      if (present_message)
        list.add(message);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendImageOrVoteMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImageOrVote()).compareTo(other.isSetImageOrVote());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageOrVote()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageOrVote, other.imageOrVote);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendImageOrVoteMessage_args(");
      boolean first = true;

      sb.append("imageOrVote:");
      sb.append(this.imageOrVote);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.message, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendImageOrVoteMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendImageOrVoteMessage_argsStandardScheme getScheme() {
        return new sendImageOrVoteMessage_argsStandardScheme();
      }
    }

    private static class sendImageOrVoteMessage_argsStandardScheme extends StandardScheme<sendImageOrVoteMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendImageOrVoteMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_OR_VOTE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.imageOrVote = iprot.readBool();
                struct.setImageOrVoteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readBinary();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendImageOrVoteMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IMAGE_OR_VOTE_FIELD_DESC);
        oprot.writeBool(struct.imageOrVote);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeBinary(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendImageOrVoteMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendImageOrVoteMessage_argsTupleScheme getScheme() {
        return new sendImageOrVoteMessage_argsTupleScheme();
      }
    }

    private static class sendImageOrVoteMessage_argsTupleScheme extends TupleScheme<sendImageOrVoteMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendImageOrVoteMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImageOrVote()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetMessage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetImageOrVote()) {
          oprot.writeBool(struct.imageOrVote);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
        if (struct.isSetMessage()) {
          oprot.writeBinary(struct.message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendImageOrVoteMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.imageOrVote = iprot.readBool();
          struct.setImageOrVoteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.message = iprot.readBinary();
          struct.setMessageIsSet(true);
        }
      }
    }

  }

  public static class sendImageOrVoteMessage_result implements org.apache.thrift.TBase<sendImageOrVoteMessage_result, sendImageOrVoteMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendImageOrVoteMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendImageOrVoteMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendImageOrVoteMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendImageOrVoteMessage_resultTupleSchemeFactory());
    }

    private boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendImageOrVoteMessage_result.class, metaDataMap);
    }

    public sendImageOrVoteMessage_result() {
    }

    public sendImageOrVoteMessage_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendImageOrVoteMessage_result(sendImageOrVoteMessage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendImageOrVoteMessage_result deepCopy() {
      return new sendImageOrVoteMessage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendImageOrVoteMessage_result)
        return this.equals((sendImageOrVoteMessage_result)that);
      return false;
    }

    public boolean equals(sendImageOrVoteMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendImageOrVoteMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendImageOrVoteMessage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendImageOrVoteMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendImageOrVoteMessage_resultStandardScheme getScheme() {
        return new sendImageOrVoteMessage_resultStandardScheme();
      }
    }

    private static class sendImageOrVoteMessage_resultStandardScheme extends StandardScheme<sendImageOrVoteMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendImageOrVoteMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendImageOrVoteMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendImageOrVoteMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendImageOrVoteMessage_resultTupleScheme getScheme() {
        return new sendImageOrVoteMessage_resultTupleScheme();
      }
    }

    private static class sendImageOrVoteMessage_resultTupleScheme extends TupleScheme<sendImageOrVoteMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendImageOrVoteMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendImageOrVoteMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOnlineCount_args implements org.apache.thrift.TBase<getOnlineCount_args, getOnlineCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineCount_args");

    private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineCount_argsTupleSchemeFactory());
    }

    private long eid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EID((short)1, "eid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EID
            return EID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineCount_args.class, metaDataMap);
    }

    public getOnlineCount_args() {
    }

    public getOnlineCount_args(
      long eid)
    {
      this();
      this.eid = eid;
      setEidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineCount_args(getOnlineCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eid = other.eid;
    }

    public getOnlineCount_args deepCopy() {
      return new getOnlineCount_args(this);
    }

    @Override
    public void clear() {
      setEidIsSet(false);
      this.eid = 0;
    }

    public long getEid() {
      return this.eid;
    }

    public void setEid(long eid) {
      this.eid = eid;
      setEidIsSet(true);
    }

    public void unsetEid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EID_ISSET_ID);
    }

    /** Returns true if field eid is set (has been assigned a value) and false otherwise */
    public boolean isSetEid() {
      return EncodingUtils.testBit(__isset_bitfield, __EID_ISSET_ID);
    }

    public void setEidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EID:
        if (value == null) {
          unsetEid();
        } else {
          setEid((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EID:
        return Long.valueOf(getEid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EID:
        return isSetEid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineCount_args)
        return this.equals((getOnlineCount_args)that);
      return false;
    }

    public boolean equals(getOnlineCount_args that) {
      if (that == null)
        return false;

      boolean this_present_eid = true;
      boolean that_present_eid = true;
      if (this_present_eid || that_present_eid) {
        if (!(this_present_eid && that_present_eid))
          return false;
        if (this.eid != that.eid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_eid = true;
      list.add(present_eid);
      if (present_eid)
        list.add(eid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEid()).compareTo(other.isSetEid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, other.eid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineCount_args(");
      boolean first = true;

      sb.append("eid:");
      sb.append(this.eid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineCount_argsStandardSchemeFactory implements SchemeFactory {
      public getOnlineCount_argsStandardScheme getScheme() {
        return new getOnlineCount_argsStandardScheme();
      }
    }

    private static class getOnlineCount_argsStandardScheme extends StandardScheme<getOnlineCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eid = iprot.readI64();
                struct.setEidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeI64(struct.eid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineCount_argsTupleSchemeFactory implements SchemeFactory {
      public getOnlineCount_argsTupleScheme getScheme() {
        return new getOnlineCount_argsTupleScheme();
      }
    }

    private static class getOnlineCount_argsTupleScheme extends TupleScheme<getOnlineCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEid()) {
          oprot.writeI64(struct.eid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eid = iprot.readI64();
          struct.setEidIsSet(true);
        }
      }
    }

  }

  public static class getOnlineCount_result implements org.apache.thrift.TBase<getOnlineCount_result, getOnlineCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOnlineCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOnlineCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOnlineCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOnlineCount_resultTupleSchemeFactory());
    }

    private long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOnlineCount_result.class, metaDataMap);
    }

    public getOnlineCount_result() {
    }

    public getOnlineCount_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOnlineCount_result(getOnlineCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getOnlineCount_result deepCopy() {
      return new getOnlineCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOnlineCount_result)
        return this.equals((getOnlineCount_result)that);
      return false;
    }

    public boolean equals(getOnlineCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOnlineCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOnlineCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOnlineCount_resultStandardSchemeFactory implements SchemeFactory {
      public getOnlineCount_resultStandardScheme getScheme() {
        return new getOnlineCount_resultStandardScheme();
      }
    }

    private static class getOnlineCount_resultStandardScheme extends StandardScheme<getOnlineCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOnlineCount_resultTupleSchemeFactory implements SchemeFactory {
      public getOnlineCount_resultTupleScheme getScheme() {
        return new getOnlineCount_resultTupleScheme();
      }
    }

    private static class getOnlineCount_resultTupleScheme extends TupleScheme<getOnlineCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOnlineCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAnchorUpDown_args implements org.apache.thrift.TBase<getAnchorUpDown_args, getAnchorUpDown_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAnchorUpDown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAnchorUpDown_args");

    private static final org.apache.thrift.protocol.TField TEXT_LIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("textLiveId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ANCHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("anchorId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAnchorUpDown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAnchorUpDown_argsTupleSchemeFactory());
    }

    private long textLiveId; // required
    private long anchorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TEXT_LIVE_ID((short)1, "textLiveId"),
      ANCHOR_ID((short)2, "anchorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TEXT_LIVE_ID
            return TEXT_LIVE_ID;
          case 2: // ANCHOR_ID
            return ANCHOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TEXTLIVEID_ISSET_ID = 0;
    private static final int __ANCHORID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TEXT_LIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("textLiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ANCHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("anchorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAnchorUpDown_args.class, metaDataMap);
    }

    public getAnchorUpDown_args() {
    }

    public getAnchorUpDown_args(
      long textLiveId,
      long anchorId)
    {
      this();
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnchorUpDown_args(getAnchorUpDown_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.textLiveId = other.textLiveId;
      this.anchorId = other.anchorId;
    }

    public getAnchorUpDown_args deepCopy() {
      return new getAnchorUpDown_args(this);
    }

    @Override
    public void clear() {
      setTextLiveIdIsSet(false);
      this.textLiveId = 0;
      setAnchorIdIsSet(false);
      this.anchorId = 0;
    }

    public long getTextLiveId() {
      return this.textLiveId;
    }

    public void setTextLiveId(long textLiveId) {
      this.textLiveId = textLiveId;
      setTextLiveIdIsSet(true);
    }

    public void unsetTextLiveId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    /** Returns true if field textLiveId is set (has been assigned a value) and false otherwise */
    public boolean isSetTextLiveId() {
      return EncodingUtils.testBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID);
    }

    public void setTextLiveIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEXTLIVEID_ISSET_ID, value);
    }

    public long getAnchorId() {
      return this.anchorId;
    }

    public void setAnchorId(long anchorId) {
      this.anchorId = anchorId;
      setAnchorIdIsSet(true);
    }

    public void unsetAnchorId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    /** Returns true if field anchorId is set (has been assigned a value) and false otherwise */
    public boolean isSetAnchorId() {
      return EncodingUtils.testBit(__isset_bitfield, __ANCHORID_ISSET_ID);
    }

    public void setAnchorIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ANCHORID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TEXT_LIVE_ID:
        if (value == null) {
          unsetTextLiveId();
        } else {
          setTextLiveId((Long)value);
        }
        break;

      case ANCHOR_ID:
        if (value == null) {
          unsetAnchorId();
        } else {
          setAnchorId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TEXT_LIVE_ID:
        return Long.valueOf(getTextLiveId());

      case ANCHOR_ID:
        return Long.valueOf(getAnchorId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TEXT_LIVE_ID:
        return isSetTextLiveId();
      case ANCHOR_ID:
        return isSetAnchorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnchorUpDown_args)
        return this.equals((getAnchorUpDown_args)that);
      return false;
    }

    public boolean equals(getAnchorUpDown_args that) {
      if (that == null)
        return false;

      boolean this_present_textLiveId = true;
      boolean that_present_textLiveId = true;
      if (this_present_textLiveId || that_present_textLiveId) {
        if (!(this_present_textLiveId && that_present_textLiveId))
          return false;
        if (this.textLiveId != that.textLiveId)
          return false;
      }

      boolean this_present_anchorId = true;
      boolean that_present_anchorId = true;
      if (this_present_anchorId || that_present_anchorId) {
        if (!(this_present_anchorId && that_present_anchorId))
          return false;
        if (this.anchorId != that.anchorId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_textLiveId = true;
      list.add(present_textLiveId);
      if (present_textLiveId)
        list.add(textLiveId);

      boolean present_anchorId = true;
      list.add(present_anchorId);
      if (present_anchorId)
        list.add(anchorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAnchorUpDown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTextLiveId()).compareTo(other.isSetTextLiveId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTextLiveId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textLiveId, other.textLiveId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnchorId()).compareTo(other.isSetAnchorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnchorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.anchorId, other.anchorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAnchorUpDown_args(");
      boolean first = true;

      sb.append("textLiveId:");
      sb.append(this.textLiveId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("anchorId:");
      sb.append(this.anchorId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAnchorUpDown_argsStandardSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_argsStandardScheme getScheme() {
        return new getAnchorUpDown_argsStandardScheme();
      }
    }

    private static class getAnchorUpDown_argsStandardScheme extends StandardScheme<getAnchorUpDown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TEXT_LIVE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.textLiveId = iprot.readI64();
                struct.setTextLiveIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ANCHOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.anchorId = iprot.readI64();
                struct.setAnchorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TEXT_LIVE_ID_FIELD_DESC);
        oprot.writeI64(struct.textLiveId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ANCHOR_ID_FIELD_DESC);
        oprot.writeI64(struct.anchorId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAnchorUpDown_argsTupleSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_argsTupleScheme getScheme() {
        return new getAnchorUpDown_argsTupleScheme();
      }
    }

    private static class getAnchorUpDown_argsTupleScheme extends TupleScheme<getAnchorUpDown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTextLiveId()) {
          optionals.set(0);
        }
        if (struct.isSetAnchorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTextLiveId()) {
          oprot.writeI64(struct.textLiveId);
        }
        if (struct.isSetAnchorId()) {
          oprot.writeI64(struct.anchorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.textLiveId = iprot.readI64();
          struct.setTextLiveIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.anchorId = iprot.readI64();
          struct.setAnchorIdIsSet(true);
        }
      }
    }

  }

  public static class getAnchorUpDown_result implements org.apache.thrift.TBase<getAnchorUpDown_result, getAnchorUpDown_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAnchorUpDown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAnchorUpDown_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAnchorUpDown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAnchorUpDown_resultTupleSchemeFactory());
    }

    private com.lesports.qmt.tlive.api.dto.TAnchor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.lesports.qmt.tlive.api.dto.TAnchor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAnchorUpDown_result.class, metaDataMap);
    }

    public getAnchorUpDown_result() {
    }

    public getAnchorUpDown_result(
      com.lesports.qmt.tlive.api.dto.TAnchor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnchorUpDown_result(getAnchorUpDown_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.lesports.qmt.tlive.api.dto.TAnchor(other.success);
      }
    }

    public getAnchorUpDown_result deepCopy() {
      return new getAnchorUpDown_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.lesports.qmt.tlive.api.dto.TAnchor getSuccess() {
      return this.success;
    }

    public void setSuccess(com.lesports.qmt.tlive.api.dto.TAnchor success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.lesports.qmt.tlive.api.dto.TAnchor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnchorUpDown_result)
        return this.equals((getAnchorUpDown_result)that);
      return false;
    }

    public boolean equals(getAnchorUpDown_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAnchorUpDown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAnchorUpDown_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAnchorUpDown_resultStandardSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_resultStandardScheme getScheme() {
        return new getAnchorUpDown_resultStandardScheme();
      }
    }

    private static class getAnchorUpDown_resultStandardScheme extends StandardScheme<getAnchorUpDown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.lesports.qmt.tlive.api.dto.TAnchor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAnchorUpDown_resultTupleSchemeFactory implements SchemeFactory {
      public getAnchorUpDown_resultTupleScheme getScheme() {
        return new getAnchorUpDown_resultTupleScheme();
      }
    }

    private static class getAnchorUpDown_resultTupleScheme extends TupleScheme<getAnchorUpDown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAnchorUpDown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.lesports.qmt.tlive.api.dto.TAnchor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
